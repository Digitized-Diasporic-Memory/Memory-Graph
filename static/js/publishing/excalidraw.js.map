{"version":3,"file":"excalidraw.js","sections":[{"offset":{"line":1,"column":0},"map":{"version":3,"file":"module$node_modules$$excalidraw$excalidraw$dist$excalidraw_production_min.js","lineCount":854,"mappings":"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\/V,CAA\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\/C,CAAA+C,CAAAA,UAAA,EAAA,CAAA,CAAA\/C,EAAAgD,CAAAA,YAAA,CAAA,CAAA,CAAA,QAAA,EAAAhD,EAAA,GAAAA,CAAAiD,CAAAA,QAAA,CAAA,CAAA,CAAA,CAAA7C,OAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAa,CAAA0B,CAAAA,GAAA,CAAA1B,CAAA,CAAA,CAAA,CAAAwD,QAAAA,EAAA,CAAArE,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,MAAAT,EAAA,EAAAkE,CAAA,CAAAnE,EAAAmB,CAAAA,SAAA,CAAAlB,CAAA,CAAA,CAAAS,CAAA,EAAAyD,CAAA,CAAAnE,EAAA,CAAAU,CAAA,CAAA,CAAAV,EAAA,CAAA2E,QAAAA,EAAA,CAAA3E,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAA,CAAA0E,CAAA,CAAA1D,MAAAyG,CAAAA,cAAA,EAAA,QAAA,CAAA1H,CAAA,CAAAC,CAAA,CAAA,CAAA,MAAAD,EAAA2H,CAAAA,SAAA,CAAA1H,CAAA,CAAAD,CAAA,CAAA,EAAAA,EAAA,CAAAC,CAAA,CAAA,CAAA+D,QAAAA,EAAA,CAAAhE,EAAA,CAAAC,CAAA,CAAA,CAAA,GAAA,UAAA,EAAA,MAAAA,EAAA,EAAA,IAAA,GAAAA,CAAA,CAAA,KAAA,KAAA8B,SAAA,CAAA,oDAAA,CAAA;AAAA\/B,EAAAmB,CAAAA,SAAA,CAAAF,MAAA8C,CAAAA,MAAA,CAAA9D,CAAA,EAAAA,CAAAkB,CAAAA,SAAA,CAAA,CAAAgG,YAAA,CAAAxD,MAAA3D,EAAA,CAAA8D,SAAA,CAAA,CAAA,CAAAD,aAAA,CAAA,CAAA,CAAA,CAAA,CAAA5D,EAAA,EAAA0E,CAAA,CAAA3E,EAAA,CAAAC,CAAA,CAAA,CAAAiF,QAAAA,EAAA,CAAAlF,EAAA,CAAA,CAAA,MAAA,CAAAkF,CAAA,CAAA,UAAA,EAAA,MAAAlC,OAAA,EAAA,QAAA,EAAA,MAAAA,OAAA0C,CAAAA,QAAA,CAAA,QAAA,CAAA1F,CAAA,CAAA,CAAA,MAAA,OAAAA,EAAA,CAAA,CAAA,QAAA,CAAAA,CAAA,CAAA,CAAA,MAAAA,EAAA,EAAA,UAAA,EAAA,MAAAgD,OAAA,EAAAhD,CAAAmH,CAAAA,WAAA,GAAAnE,MAAA,EAAAhD,CAAA,GAAAgD,MAAA7B,CAAAA,SAAA,CAAA,QAAA,CAAA,MAAAnB,EAAA,CAAA,EAAAA,EAAA,CAAA,CAAAmF,QAAAA,EAAA,CAAAnF,EAAA,CAAA,CAAA,GAAA,IAAA,EAAA,GAAAA,EAAA,CAAA,KAAA,KAAAmY,cAAA,CAAA,2DAAA,CAAA,CAAA,MAAAnY,GAAA,CAAA8G,QAAAA,EAAA,CAAA9G,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAA,CAAAA,CAAA,EAAA,QAAA;AAAAiF,CAAA,CAAAjF,CAAA,CAAA,EAAA,UAAA,EAAA,MAAAA,EAAA,CAAAkF,CAAA,CAAAnF,EAAA,CAAA,CAAAC,CAAA,CAAA8G,QAAAA,EAAA,CAAA\/G,EAAA,CAAA,CAAA,MAAA,CAAA+G,CAAA,CAAA9F,MAAAyG,CAAAA,cAAA,CAAAzG,MAAA+F,CAAAA,cAAA,CAAA,QAAA,CAAAhH,CAAA,CAAA,CAAA,MAAAA,EAAA2H,CAAAA,SAAA,EAAA1G,MAAA+F,CAAAA,cAAA,CAAAhH,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAAuT,QAAAA,EAAA,CAAAvT,EAAA,CAAA,CAAA,IAAAC,EAAA,QAAA,EAAA,CAAA,GAAA,WAAA,EAAA,MAAAmY,QAAA,EAAA,CAAAA,OAAAC,CAAAA,SAAA,EAAAD,OAAAC,CAAAA,SAAAC,CAAAA,IAAA,CAAA,MAAA,CAAA,CAAA,IAAA,UAAA,EAAA,MAAAC,MAAA,CAAA,MAAA,CAAA,CAAA,IAAA,CAAA,MAAA3K,QAAAzM,CAAAA,SAAAqX,CAAAA,OAAApW,CAAAA,IAAA,CAAAgW,OAAAC,CAAAA,SAAA,CAAAzK,OAAA,CAAA,EAAA,CAAA,QAAA,EAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA5N,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,EAAA,OAAA,SAAA,EAAA,CAAAa,IAAAA,EAAAkG,CAAA,CAAA\/G,EAAA,CAAA,IAAAC,CAAA,CAAA,CAAA,IAAAa,EAAAiG,CAAA,CAAA,IAAA,CAAAI,CAAAA,WAAAzG,EAAA,CAAA0X,OAAAC,CAAAA,SAAA,CAAAxX,CAAA;AAAAoB,SAAA,CAAAnB,CAAA,CAAA,CAAA,IAAAJ,EAAA,CAAAG,CAAA4X,CAAAA,KAAA,CAAA,IAAA,CAAAxW,SAAA,CAAA,OAAA6E,EAAA,CAAA,IAAA,CAAApG,CAAA,CAAA,CAAA,CAAAiT,QAAAA,GAAA,CAAA3T,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,IAAA,EAAAA,CAAA,EAAAA,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,IAAAjC,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,CAAA,KAAA,IAAAxB,EAAA,CAAA,CAAAG,EAAA6X,KAAA,CAAAzY,CAAA,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAAS,CAAA,EAAA,CAAAG,CAAA,CAAAH,CAAA,CAAA,CAAAV,EAAA,CAAAU,CAAA,CAAA,OAAAG,EAAA,CAAAgT,QAAAA,EAAA,CAAA7T,EAAA,CAAAC,CAAA,CAAA,CAAA,GAAAD,EAAA,CAAA,CAAA,GAAA,QAAA,EAAA,MAAAA,GAAA,CAAA,MAAA2T,GAAA,CAAA3T,EAAA,CAAAC,CAAA,CAAA,KAAAS,EAAAO,MAAAE,CAAAA,SAAA+G,CAAAA,QAAA9F,CAAAA,IAAA,CAAApC,EAAA,CAAA0I,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA,QAAA,GAAAhI,CAAA,EAAAV,EAAAmH,CAAAA,WAAA,GAAAzG,CAAA,CAAAV,EAAAmH,CAAAA,WAAAI,CAAAA,IAAA,EAAA,KAAA,GAAA7G,CAAA,EAAA,KAAA,GAAAA,CAAA,CAAAgY,KAAAC,CAAAA,IAAA,CAAA3Y,EAAA,CAAA,CAAA,WAAA,GAAAU,CAAA,EAAA,0CAAAmQ,CAAAA,IAAA,CAAAnQ,CAAA,CAAA,CAAAiT,EAAA,CAAA3T,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAA,EAAA,CAAA,CAAA8T,QAAAA,GAAA,CAAA\/T,EAAA,CAAAC,CAAA,CAAA,CAAA,GAAA,EAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,GAAA,KAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,MAAA,EAAA,CAAA,CAAA,EAAA,CAAA;AAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,WAAA,EAAA,MAAA,OAAA,EAAA,MAAA,CAAA,QAAA,GAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,EAAA,EAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,IAAA,EAAA,IAAA,CAAA,IAAA,IAAA,EAAA,CAAA,GAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,MAAA,GAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,MAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,OAAA,CAAA,GAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,CAAA,MAAA,EAAA,EAAA,CAAA,MAAA,EAAA,CAAA,OAAA,CAAA,GAAA,EAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,KAAA,SAAA,CAAA,2IAAA,CAAA,CAAA,MAAA,GAAA;AAAAgU,QAAAA,EAAA,CAAAjU,EAAA,CAAA,CAAA,IAAA,EAAA,KAAA,CAAA,OAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,IAAA,EAAA,EAAA,GAAA,CAAA,CAAA,WAAA,EAAA,MAAAgD,OAAA,EAAAA,MAAA0C,CAAAA,QAAA,GAAAzE,OAAA,CAAAjB,EAAA,CAAA,CAAA0Y,KAAAC,CAAAA,IAAA,CAAA3Y,EAAA,CAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,KAAA,KAAA,SAAA,CAAA,sIAAA,CAAA,CAAA,MAAA,GAAA,CAAAmU,QAAAA,EAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,MAAAT,EAAA,GAAAD,GAAA,CAAAiB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAA,CAAA0D,MAAAjD,CAAA,CAAAkD,WAAA,CAAA,CAAA,CAAAC,aAAA,CAAA,CAAA,CAAAC,SAAA,CAAA,CAAA,CAAA,CAAA,CAAA9D,EAAA,CAAAC,CAAA,CAAA,CAAAS,CAAA,CAAAV,EAAA,CAAA4Y,QAAAA,EAAA,CAAA5Y,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,GAAAV,EAAA,EAAAA,EAAAkC,CAAAA,MAAA,CAAA,CAAA,MAAA,CAAArB,CAAA,CAAAC,CAAA,CAAA,CAAAb,CAAA6B,EAAAA;AAAAsS,IAAAC,CAAAA,EAAAvS,CAAA,GAAAA,CAAApB,CAAA,OAAAE,GAAAwT,IAAAyE,CAAAA,GAAA,CAAA\/W,CAAA,CAAA,CAAArB,GAAA2T,IAAA0E,CAAAA,GAAA,CAAAhX,CAAA,CAAA9B,GAAA4B,CAAAA,OAAA,CAAA5B,EAAA,EAAA,CAAA,MAAA,CAAAC,EAAA,CAAAS,EAAA,CAAA,CAAAV,EAAAA,GAAA,CAAA,CAAA,CAAA,EAAAC,EAAA,CAAAY,CAAA,EAAAD,EAAA,EAAAF,EAAA,CAAAI,CAAA,EAAAL,EAAA,CAAAI,CAAAb,GAAA,CAAA,CAAA,CAAA,EAAAC,EAAA,CAAAY,CAAA,EAAAJ,EAAA,EAAAC,EAAA,CAAAI,CAAA,EAAAF,EAAA,CAAAE,CAAA,CAAA,CAAA,CAAA,CAAAiY,QAAAA,EAAA,CAAA\/Y,EAAA,CAAA,CAAA,MAAAC,EAAAD,EAAA,CAAA,CAAA,CAAAU,GAAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,OAAAoU,KAAA4E,CAAAA,IAAA,CAAA5E,IAAA6E,CAAAA,GAAA,CAAAhZ,CAAA,CAAA,CAAA,CAAA,CAAAS,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA0T,IAAA6E,CAAAA,GAAA,CAAAhZ,CAAA,CAAA,CAAA,CAAA,CAAAS,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAwY,QAAAA,EAAA,CAAAlZ,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAC,EAAAb,CAAA,CAAA,CAAA,CAAAa,CAAAd,EAAA,CAAA,CAAA,CAAA8B,EAAAA,CAAA9B,EAAA,CAAA,CAAA,CAAA8B,CAAA7B,CAAA,CAAA,CAAA,CAAAW,GAAAA,CAAAE,CAAAF,CAAAZ,EAAA,CAAA,CAAA,CAAAY,CAAAkB,CAAAlB,CAAAZ,EAAA,CAAA,CAAA,CAAA,OAAAS,GAAAI,CAAA,CAAA,CAAA,CAAAJ,CAAAC,CAAA,CAAA,CAAA,CAAAF,EAAAA,CAAAE,CAAA,CAAA,CAAA,CAAAF,CAAAK,CAAA,CAAA,CAAA,CAAAmB,EAAAA,CAAAvB,EAAAuB,CAAAtB,CAAA,CAAA,CAAA,CAAAsB,CAAAxB,CAAAwB,CAAAtB,CAAA,CAAA,CAAA,CAAA,OAAAyB,GAAArB,CAAAqB,CAAA3B,CAAA2B,CAAA1B,EAAA0B,CAAAL,CAAA,OAAAK,GAAA,CAAA,EAAA3B,CAAA,CAAAI,EAAA,CAAAkB,CAAA,CAAAE,CAAA,EAAAG,EAAA,EAAArB,CAAA,CAAAkB,CAAA,CAAAvB,EAAA,CAAAG,EAAA,EAAAuB,EAAA,CAAA,CAAA,IAAA,CAAAgX,QAAAA,EAAA,CAAAnZ,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,MAAAG,EAAAb,EAAAkC,CAAAA,MAAA,IAAA,CAAA,CAAArB,CAAA,CAAA,MAAA,CAAA,CAAA,OAAAC,EAAA,CAAAsY,MAAAC,CAAAA,gBAAA;AAAA3Y,CAAA,CAAAoB,EAAAA,CAAA,CAAA7B,CAAA,CAAAS,CAAA,CAAAE,EAAAA,CAAA,CAAA,KAAA,IAAAX,GAAA,CAAA,CAAAA,EAAA,CAAAY,CAAA,CAAAZ,EAAA,EAAA,CAAA,CAAA,MAAAS,GAAAV,EAAA,CAAAC,EAAA,CAAA,CAAAQ,GAAAT,EAAA,EAAAC,EAAA,CAAA,CAAA,EAAAY,CAAA,CAAA,IAAAyY,CAAA,CAAA5Y,EAAA,CAAAD,EAAA,CAAAqB,CAAA,CAAAhB,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAAyY,CAAA,CAAA7Y,EAAA,CAAAoB,CAAA,CAAArB,EAAA,CAAA,CAAA,MAAAgO,EAAA,CAAA\/N,EAAA,CAAAoB,CAAA,CAAArB,EAAA,CAAAG,EAAA,EAAA,CAAA,CAAA,MAAA,EAAA,EAAAA,CAAA,CAAA,CAAA,CAAA6N,QAAAA,EAAA,CAAAzO,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,MAAAT,EAAA,CAAA,CAAA,CAAA,EAAAmU,IAAAoF,CAAAA,GAAA,CAAAxZ,EAAA,CAAA,CAAA,CAAA,CAAAU,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAT,CAAA,CAAA,CAAA,CAAA,EAAAmU,IAAAqF,CAAAA,GAAA,CAAAzZ,EAAA,CAAA,CAAA,CAAA,CAAAU,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAT,CAAA,CAAA,CAAA,CAAA,EAAAmU,IAAAoF,CAAAA,GAAA,CAAAxZ,EAAA,CAAA,CAAA,CAAA,CAAAU,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAT,CAAA,CAAA,CAAA,CAAA,EAAAmU,IAAAqF,CAAAA,GAAA,CAAAzZ,EAAA,CAAA,CAAA,CAAA,CAAAU,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA6Y,QAAAA,EAAA,CAAAvZ,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAAG,EAAAA,EAAAZ,CAAA,CAAA,CAAA,CAAAY,CAAAb,EAAA,CAAA,CAAA,CAAAa,GAAAH,CAAA,CAAA,CAAA,CAAAG,CAAAZ,CAAA,CAAA,CAAA,CAAAY,GAAAZ,CAAA,CAAA,CAAA,CAAAY,CAAAb,EAAA,CAAA,CAAA,CAAAa,GAAAH,CAAA,CAAA,CAAA,CAAAG,CAAAZ,CAAA,CAAA,CAAA,CAAAY,CAAA,OAAA,EAAA,GAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAyY,QAAAA,EAAA,CAAAtZ,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAC,EAAAyY,CAAA,CAAAvZ,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAAoB,GAAAyX,CAAA,CAAAvZ,EAAA,CAAAC,CAAA,CAAAY,CAAA,CAAA,CAAAD,GAAA2Y,CAAA,CAAA7Y,CAAA,CAAAG,CAAA,CAAAb,EAAA,CAAA,CAAAS,GAAA8Y,CAAA,CAAA7Y,CAAA,CAAAG,CAAA,CAAAZ,CAAA,CAAA,OAAAa,EAAA,GAAAgB,EAAA,EAAAlB,EAAA,GAAAH,EAAA,EAAA,EAAA,CAAA,GAAAK,CAAA,EAAA,CAAA2N,CAAA,CAAAzO,EAAA,CAAAU,CAAA,CAAAT,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AAAA6B,EAAA,EAAA,CAAA2M,CAAA,CAAAzO,EAAA,CAAAa,CAAA,CAAAZ,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,GAAAW,EAAA,EAAA,CAAA6N,CAAA,CAAA\/N,CAAA,CAAAV,EAAA,CAAAa,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,GAAAJ,EAAA,EAAA,CAAAgO,CAAA,CAAA\/N,CAAA,CAAAT,CAAA,CAAAY,CAAA,CAAA,CAAA,CAAA6Y,QAAAA,GAAA,CAAA1Z,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAAS,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAG,EAAAuT,IAAAuF,CAAAA,KAAA,CAAA1Z,CAAA2Z,CAAAA,YAAA,CAAA,EAAA,CAAA\/Y,EAAA,EAAA+X,CAAA,CAAA5Y,EAAA,CAAAU,CAAA,CAAAG,CAAA,CAAAC,EAAAA,CAAA,QAAA,CAAAd,CAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAA,CAAA,GAAAV,CAAA,CAAAU,GAAA,CAAA,CAAA,CAAAiB,CAAAA,IAAA,CAAA,GAAA,CAAA,GAAAjB,EAAA,CAAAA,EAAAwB,CAAAA,MAAA,CAAA,CAAA,CAAAP,CAAAA,IAAA,CAAA,GAAA,CAAA,EAAAjB,EAAA2F,CAAAA,IAAA,CAAA,CAAA3F,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAG,EAAAA,CAAA,EAAA,IAAAH,EAAA,EAAA,CAAA,CAAAA,EAAAwB,CAAAA,MAAA,CAAA,CAAA,IAAAlC,GAAAC,EAAA4Z,CAAAA,UAAA,EAAA,CAAA7Z,EAAA,GAAAA,EAAA,CAAA,CAAA,CAAAC,EAAA6Z,CAAAA,WAAA,CAAA9Z,GAAA,CAAAoU,IAAAoF,CAAAA,GAAA,CAAAxZ,EAAA,CAAA,EAAA,CAAAc,GAAAA,CAAA,EAAA,KAAA,IAAAd,GAAA,CAAA,CAAAA,EAAA,CAAAU,EAAAwB,CAAAA,MAAA,CAAA,CAAA,CAAAlC,EAAA,EAAA,CAAA,CAAA,MAAAC,GAAAS,EAAA,CAAAV,EAAA,CAAA,CAAAa,GAAAH,EAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,IAAAC,EAAA,CAAA,CAAA,CAAA,GAAAY,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAb,GAAAoU,IAAAqF,CAAAA,GAAA,CAAAxZ,EAAA,CAAA,CAAA,CAAA,CAAAY,EAAA,CAAA,CAAA,CAAA,CAAAC,GAAAuF,CAAAA,IAAA,CAAA,CAAA0T,KAAA\/Z,EAAA,CAAAga,KAAA5F,IAAAoF,CAAAA,GAAA,CAAAvZ,EAAA,CAAA,CAAA,CAAA,CAAAY,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAkG,EAAA\/G,EAAA;AAAAC,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAY,EAAA,CAAA,CAAA,CAAA,CAAAoZ,QAAApZ,EAAA,CAAA,CAAA,CAAAoZ,CAAAha,EAAA,CAAA,CAAA,CAAAga,GAAApZ,EAAA,CAAA,CAAA,CAAAoZ,CAAAha,EAAA,CAAA,CAAA,CAAAga,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAnZ,EAAAoZ,CAAAA,IAAA,CAAA,CAAAla,EAAA,CAAAC,EAAA,CAAA,EAAAD,EAAA+Z,CAAAA,IAAA,CAAA9Z,EAAA8Z,CAAAA,IAAA,CAAA,CAAA,CAAA,CAAA\/Z,EAAA+Z,CAAAA,IAAA,CAAA9Z,EAAA8Z,CAAAA,IAAA,CAAA,CAAA,CAAA\/Z,EAAA+G,CAAAA,CAAA,CAAA9G,EAAA8G,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA\/G,EAAA+G,CAAAA,CAAA,CAAA9G,EAAA8G,CAAAA,CAAA,CAAA,CAAA,CAAA\/G,EAAAga,CAAAA,IAAA,GAAA\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\/B,EAAA,CAAAga,EAAA,CAAA\/Z,CAAA,CAAA,EAAAC,CAAA,EAAA,CAAAF,EAAA,CAAAga,EAAA,CAAA9Y,EAAAyY,CAAAA,IAAA,CAAA,CAAA1Z,CAAA,CAAAiB,EAAAyY,CAAAA,IAAA,CAAA,IAAA,EAAAzZ,CAAA,CAAAF,EAAA,CAAAF,CAAAwB,CAAAA,MAAA,CAAA,CAAA,KAAAkC,MAAA,CAAA,uBAAA,CAAA;AAAA,IAAApE,EAAA,CAAAc,CAAA,CAAAd,EAAA,CAAAc,CAAA,CAAAF,EAAA,CAAAZ,EAAA,EAAA,CAAA,CAAA,MAAAC,GAAAS,CAAA,CAAAV,EAAA,CAAA,IAAAC,CAAA,GAAAA,EAAA0C,CAAAA,IAAA,CAAA,KAAAyB,MAAA,CAAA,sBAAA,CAAAvD,CAAA,CAAA,GAAA,CAAAZ,EAAAsa,CAAAA,IAAA,CAAA,CAAA9Z,EAAA,CAAAA,EAAAyB,CAAAA,MAAA,CAAA,CAAA,CAAAjC,EAAAsa,CAAAA,IAAA,CAAA,GAAA,QAAA,EAAA,MAAAK,GAAA,CAAA\/Z,CAAA,CAAA,CAAA,KAAAuD,MAAA,CAAA,eAAA,CAAAvD,CAAA,CAAA,CAAAZ,CAAAoG,CAAAA,IAAA,CAAArG,CAAAuC,IAAA1B,CAAAb,CAAA6a,KAAApa,EAAAT,CAAA,CAAAc,EAAA,EAAAF,EAAAkB,GAAA,CAAApB,CAAA,CAAAI,CAAA,CAAA,IAAA,GAAAD,CAAA,GAAAA,CAAA,CAAA,GAAA,CAAA,IAAA,GAAAA,CAAA,GAAAA,CAAA,CAAA,GAAA,CAAA,CAAA,MAAAZ,EAAA,CAAA6a,QAAAA,GAAA,CAAA9a,EAAA,CAAA,CAAA,IAAAC,EAAA,CAAA,CAAAS,EAAA,CAAA,CAAAG,EAAA,CAAA,CAAAC,EAAA,CAAA,OAAAgB,GAAA,EAAA,KAAA,MAAA,CAAA,IAAAlB,EAAA,CAAA,KAAAH,EAAA,CAAA,EAAAT,GAAA,CAAA,OAAAY,EAAA,EAAA,KAAA,GAAA,CAAAkB,EAAAuE,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAA,GAAApa,EAAA,CAAA,CAAA,CAAA,EAAAR,CAAA,CAAAS,CAAA,CAAA,CAAAD,EAAA,EAAAI,CAAA,CAAAC,CAAA,CAAA,CAAAL,EAAA,MAAA,MAAA,GAAA,CAAAR,CAAA,EAAAQ,EAAA,CAAA,CAAA,CAAAC,EAAA,EAAAD,EAAA,CAAA,CAAA,CAAAqB,GAAAuE,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAA5a,CAAA,CAAAS,CAAA,CAAA,CAAA,CAAAG,EAAA,CAAAZ,CAAAa,EAAA,CAAAJ,CAAA,MAAA,MAAA,GAAA,CAAAoB,EAAAuE,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA;AAAAsY,KAAA,CAAA,GAAApa,EAAA,CAAA,CAAA,CAAA,EAAAR,CAAA,CAAAS,CAAA,CAAA,CAAAD,EAAA,MAAA,MAAA,GAAA,CAAAR,CAAA,EAAAQ,EAAA,CAAA,CAAA,CAAAC,EAAA,EAAAD,EAAA,CAAA,CAAA,CAAAqB,GAAAuE,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAA5a,CAAA,CAAAS,CAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAAoB,EAAAuE,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAA,GAAApa,EAAA,CAAA,CAAA,CAAAR,EAAA,CAAAQ,EAAA,CAAA,CAAA,CAAAC,EAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAAT,EAAAA,CAAAS,EAAAiB,CAAAA,GAAA,CAAA,CAAA1B,EAAA,CAAAa,EAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAb,EAAA,CAAAU,CAAA,CAAAV,EAAA,CAAAC,CAAA,CAAA6B,GAAAuE,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA7a,EAAA,CAAA,CAAAC,EAAA,CAAAD,EAAA,CAAA,CAAA,CAAAU,EAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAA8B,EAAAuE,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAA,GAAApa,EAAA,CAAA,CAAA,CAAAR,EAAA,CAAAQ,EAAA,CAAA,CAAA,CAAAC,EAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAAT,EAAAA,CAAAS,EAAAiB,CAAAA,GAAA,CAAA,CAAA1B,EAAA,CAAAa,EAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAb,EAAA,CAAAU,CAAA,CAAAV,EAAA,CAAAC,CAAA,CAAA6B,GAAAuE,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA7a,EAAA,CAAA,CAAAC,EAAA,CAAAD,EAAA,CAAA,CAAA,CAAAU,EAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAA8B,EAAAuE,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAA,GAAApa,EAAA,CAAA,CAAA,CAAAR,EAAA,CAAAQ,EAAA,CAAA,CAAA,CAAAC,EAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAAR,CAAA,EAAAQ,EAAA,CAAA,CAAA,CAAAC,EAAA,EAAAD,EAAA,CAAA,CAAA,CAAAqB,GAAAuE,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA;AAAAsY,KAAA,CAAApa,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAR,CAAA,CAAAS,CAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAAoB,EAAAuE,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAA,GAAApa,EAAA,CAAA,CAAA,CAAAR,EAAA,CAAAQ,EAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAAR,CAAA,EAAAQ,EAAA,CAAA,CAAA,CAAAqB,GAAAuE,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAA5a,CAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAA6B,EAAAuE,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAA,GAAApa,EAAA,CAAA,CAAA,CAAAC,EAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAAC,CAAA,EAAAD,EAAA,CAAA,CAAA,CAAAqB,GAAAuE,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAAna,CAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAAoB,EAAAuE,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAA,GAAApa,EAAA,CAAA,CAAA,CAAAR,EAAA,CAAAQ,EAAA,CAAA,CAAA,CAAAC,EAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAAT,EAAAA,CAAAS,EAAAiB,CAAAA,GAAA,CAAA,CAAA1B,EAAA,CAAAa,EAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAb,EAAA,CAAAU,CAAA,CAAAV,EAAA,CAAAC,CAAA,CAAA6B,GAAAuE,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA7a,EAAA,CAAA,CAAAC,EAAA,CAAAD,EAAA,CAAA,CAAA,CAAAU,EAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAA8B,EAAAuE,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAA,GAAApa,EAAA,CAAA,CAAA,CAAAR,EAAA,CAAAQ,EAAA,CAAA,CAAA,CAAAC,EAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAAR,CAAA,EAAAQ,EAAA,CAAA,CAAA,CAAAC,EAAA;AAAAD,EAAA,CAAA,CAAA,CAAAqB,GAAAuE,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAA5a,CAAA,CAAAS,CAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAA,KAAA,GAAA,CAAAoB,EAAAuE,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,EAAA,CAAA,CAAA,CAAA5a,CAAA,CAAAY,CAAA,CAAAH,CAAA,CAAAI,CAAA,CAAA,MAAAgB,GAAA,CAAAiZ,QAAAA,GAAA,CAAA\/a,EAAA,CAAA,CAAA,MAAAC,EAAA,EAAA,KAAAS,EAAA,EAAA,KAAAG,EAAA,CAAA,CAAAC,EAAA,CAAA,CAAAgB,GAAA,CAAA,CAAAlB,GAAA,CAAA,CAAAH,GAAA,CAAA,CAAAD,GAAA,CAAA,KAAA,MAAA,CAAA,IAAAwB,EAAA,CAAA,KAAAG,EAAA,CAAA,EAAAnC,GAAA,CAAA,CAAA,OAAAgC,EAAA,EAAA,KAAA,GAAA,CAAA\/B,CAAAoG,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAA,GAAA1Y,EAAA,CAAA,CAAA,CAAA,EAAAtB,CAAA,CAAAC,CAAA,CAAA,CAAAqB,EAAA,EAAAL,EAAA,CAAAlB,EAAA,CAAA,CAAAuB,EAAA,MAAA,MAAA,GAAA,CAAAlC,CAAAoG,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAA,GAAA1Y,EAAA,CAAA,CAAA,CAAAtB,EAAA,CAAAsB,EAAA,CAAA,CAAA,CAAArB,EAAA,CAAAqB,EAAA,CAAA,CAAA,CAAA1B,GAAA,CAAA0B,EAAA,CAAA,CAAA,CAAA3B,GAAA,CAAA2B,EAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAAlC,CAAAoG,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAA,GAAA1Y,EAAA,CAAA,CAAA,CAAA,EAAAtB,CAAA,CAAAC,CAAA,CAAA,CAAAqB,EAAA,MAAA,MAAA,GAAA,CAAAtB,CAAA,CAAAsB,EAAA,CAAA,CAAA,CAAAlC,EAAAoG,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAAha,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAAA,CAAA,CAAAqB,EAAA,CAAA,CAAA,CAAAlC,EAAAoG,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA;AAAAsY,KAAA,CAAAha,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAA,IAAAgB,GAAA9B,EAAA8B,CAAA,CAAA,IAAA,GAAApB,CAAA,EAAA,GAAA,GAAAA,CAAA,EAAAV,EAAA,CAAAa,CAAA,EAAAA,CAAA,CAAAJ,EAAA,EAAAqB,EAAA,CAAAhB,CAAA,EAAAA,CAAA,CAAAN,EAAA,CAAA,GAAAR,EAAA,CAAAa,CAAA,CAAAiB,EAAA,CAAAhB,CAAA,CAAAb,EAAAoG,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAA7a,EAAA,CAAA8B,EAAA,CAAA,GAAAK,EAAA,CAAA,CAAA,CAAA1B,GAAA,CAAA0B,EAAA,CAAA,CAAA,CAAA3B,GAAA,CAAA2B,EAAA,CAAA,CAAA,CAAAtB,EAAA,CAAAsB,EAAA,CAAA,CAAA,CAAArB,EAAA,CAAAqB,EAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAA,MAAA,CAAAnC,EAAA,CAAA8B,EAAA,CAAA,CAAAK,EAAAH,GAAAA,CAAApB,EAAAoB,CAAA,CAAA,IAAA,GAAAtB,CAAA,EAAA,GAAA,GAAAA,CAAA,EAAAE,EAAA,CAAAC,CAAA,EAAAA,CAAA,CAAAJ,EAAA,EAAAuB,EAAA,CAAAlB,CAAA,EAAAA,CAAA,CAAAN,EAAA,CAAA,GAAAI,EAAA,CAAAC,CAAA,CAAAmB,EAAA,CAAAlB,CAAA,CAAAb,EAAAoG,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAAha,CAAA,CAAA,CAAA,EAAAD,EAAA,CAAAC,CAAA,EAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,EAAAkB,EAAA,CAAAlB,CAAA,EAAA,CAAA,CAAAd,EAAA,CAAA,CAAA,EAAAY,EAAA,CAAAZ,EAAA,EAAA,CAAA,CAAA8B,EAAA,CAAA,CAAA,EAAAE,EAAA,CAAAF,EAAA,EAAA,CAAA,CAAA9B,EAAA,CAAA8B,EAAA,CAAA,CAAA,CAAArB,GAAA,CAAAG,EAAAJ,GAAA,CAAAwB,EAAAnB,EAAA,CAAAb,EAAAc,EAAA,CAAAgB,EAAA,MAAA,MAAA,GAAA,CAAA,MAAA,CAAA9B,EAAA,CAAAU,EAAA,CAAAoB,EAAA,CAAAlB,EAAA,CAAA,CAAAuB,EAAAlC,EAAAoG,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAAha,CAAA,CAAA,CAAA,EAAAb,EAAA,CAAAa,CAAA,EAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,EAAAJ,EAAA,CAAAI,CAAA,EAAA,CAAA,CAAAgB,EAAA,CAAA,CAAA,EAAA9B,EAAA,CAAA8B,EAAA,EAAA,CAAA,CAAAlB,EAAA,CAAA,CAAA,EAAAF,EAAA,CAAAE,EAAA,EAAA,CAAA,CAAAkB,EAAA,CAAAlB,EAAA,CAAA,CAAA,CAAAH,GAAA,CAAAT,EAAAQ;EAAA,CAAAE,EAAAG,EAAA,CAAAiB,EAAAhB,EAAA,CAAAF,EAAA,MAAA,MAAA,GAAA,CAAAZ,CAAAA,CAAAoU,IAAA+F,CAAAA,GAAA,CAAAhY,EAAA,CAAA,CAAA,CAAA,CAAAzB,GAAAA,CAAA0T,IAAA+F,CAAAA,GAAA,CAAAhY,EAAA,CAAA,CAAA,CAAA,CAAAL,GAAAA,CAAAK,EAAA,CAAA,CAAA,CAAA,OAAAvB,GAAAuB,EAAA,CAAA,CAAA,CAAA,CAAA1B,GAAA0B,EAAA,CAAA,CAAA,CAAA,CAAA3B,GAAA2B,EAAA,CAAA,CAAA,CAAA,CAAAH,GAAAG,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,GAAAnC,CAAA,EAAA,CAAA,GAAAU,EAAA,CAAAT,CAAAoG,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,CAAAha,CAAA,CAAAC,CAAA,CAAAN,EAAA,CAAAwB,EAAA,CAAAxB,EAAA,CAAAwB,EAAA,CAAA,CAAA,CAAA,CAAAnB,CAAA,CAAAL,EAAA,CAAAM,CAAA,CAAAkB,EAAA,KAAA,IAAAnB,CAAA,GAAAL,EAAA,EAAAM,CAAA,GAAAkB,EAAA,CAAAgZ,EAAA,CAAAna,CAAA,CAAAC,CAAA,CAAAN,EAAA,CAAAwB,EAAA,CAAAhC,CAAA,CAAAU,EAAA,CAAAoB,EAAA,CAAAlB,EAAA,CAAAH,EAAA,CAAAmB,CAAAA,OAAA,CAAA,QAAA,CAAA5B,EAAA,CAAA,CAAAC,CAAAoG,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA7a,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAa,CAAA,CAAAL,EAAA,CAAAM,CAAA,CAAAkB,EAAA,MAAA,MAAA,GAAA,CAAA\/B,CAAAoG,CAAAA,IAAA,CAAA,CAAA9D,IAAA,GAAA,CAAAsY,KAAA,EAAA,CAAA,CAAA,CAAAha,CAAA,CAAAiB,EAAA,CAAAhB,CAAA,CAAAF,EAAA,CAAAF,CAAA,CAAAsB,EAAA,CAAA,MAAA\/B,EAAA,CAAAgb,QAAAA,GAAA,CAAAjb,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,MAAA,CAAAV,EAAA,CAAAoU,IAAAyE,CAAAA,GAAA,CAAAnY,CAAA,CAAA,CAAAT,CAAA,CAAAmU,IAAA0E,CAAAA,GAAA,CAAApY,CAAA,CAAA,CAAAV,EAAA,CAAAoU,IAAA0E,CAAAA,GAAA,CAAApY,CAAA,CAAA,CAAAT,CAAA,CAAAmU,IAAAyE,CAAAA,GAAA,CAAAnY,CAAA,CAAA,CAAA,CAAAsa,QAAAA,GAAA,CAAAhb,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAAgB,EAAA,CAAAlB,EAAA,CAAAH,EAAA,CAAAD,EAAA,CAAAwB,EAAA,CAAA,CAAA,MAAAG,IAAAE,EAAA,CAAAzB,EAAA;AAAAwT,IAAAC,CAAAA,EAAA,CAAAhS,EAAA,CAAA,GAAAF,CAAA,KAAAE,EAAA4C,GAAAA,CAAA,EAAA,IAAAjD,EAAA,CAAA,CAAAmC,EAAA,CAAAE,EAAA,CAAAM,EAAA,CAAAX,EAAA,CAAA,CAAAhC,EAAA,KAAA,CAAA,CAAAhC,EAAA,CAAAC,CAAA,CAAA,CAAAgb,EAAA,CAAAjb,EAAA,CAAAC,CAAA,CAAA,CAAAkC,EAAA,CAAA,EAAAzB,CAAA,CAAAG,CAAA,CAAA,CAAAoa,EAAA,CAAAva,CAAA,CAAAG,CAAA,CAAA,CAAAsB,EAAA,CAAAvB,KAAAA,IAAAZ,EAAAY,CAAAF,CAAAE,EAAA,CAAAoB,KAAAA,IAAA\/B,CAAA+B,CAAAnB,CAAAmB,EAAA,CAAAK,KAAAA,GAAAzB,EAAAyB,CAAAzB,EAAAyB,EAAAvB,CAAAuB,CAAAvB,CAAAuB,EAAAL,EAAAK,CAAAL,EAAAK,EAAAP,EAAAO,CAAAP,EAAAO,CAAA,EAAA,CAAAA,EAAA,GAAAA,EAAA,CAAA+R,IAAA4E,CAAAA,IAAA,CAAA3W,EAAA,CAAA,CAAAvB,CAAA,EAAAuB,EAAA,CAAAP,EAAA,EAAAO,EAAA,CAAA4C,GAAAA,CAAAnE,CAAAmE,CAAAnE,CAAA,KAAAoE,GAAApD,EAAAoD,CAAApD,EAAAiF,GAAAA,EAAAtG,EAAA,GAAAD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAuG,EAAAqN,IAAA4E,CAAAA,IAAA,CAAA5E,IAAA+F,CAAAA,GAAA,EAAAlV,EAAA,CAAAC,EAAA,CAAAD,EAAA,CAAAjD,EAAA,CAAAA,EAAA,CAAAkD,EAAA,CAAAtE,EAAA,CAAAA,EAAA,GAAAqE,EAAA,CAAAjD,EAAA,CAAAA,EAAA,CAAAkD,EAAA,CAAAtE,EAAA,CAAAA,EAAA,EAAA,CAAA+D,GAAA,CAAAoC,EAAA,CAAAjG,CAAA,CAAAkB,EAAA,CAAAF,EAAA,EAAA9B,EAAA,CAAAU,CAAA,EAAA,CAAAsD,GAAA,CAAA+C,EAAA,CAAA,CAAAjF,EAAA,CAAAlB,EAAA,CAAAE,CAAA,EAAAb,CAAA,CAAAY,CAAA,EAAA,CAAAsD,GAAA,CAAAiQ,IAAA8G,CAAAA,IAAA,CAAAR,UAAA,CAAAS,EAAAlb,CAAAkb,CAAAnX,EAAAmX,EAAArZ,EAAAqZ,EAAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA9W,GAAA,CAAA+P,IAAA8G,CAAAA,IAAA,CAAAR,UAAA,CAAAS,EAAAta,CAAAsa,CAAAnX,EAAAmX,EAAArZ,EAAAqZ,EAAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAAnb,GAAA,CAAA2E,EAAA,GAAAR,EAAA,CAAAiQ,IAAAC,CAAAA,EAAA,CAAAlQ,EAAA,CAAAzD,EAAA,CAAAiE,EAAA,GAAAN,EAAA,CAAA+P,IAAAC,CAAAA,EAAA,CAAAhQ,EAAA,CAAA,EAAA,CAAAF,EAAA,GAAAA,EAAA;AAAA,CAAA,CAAAiQ,IAAAC,CAAAA,EAAA,CAAAlQ,EAAA,CAAA,EAAA,CAAAE,EAAA,GAAAA,EAAA,CAAA,CAAA,CAAA+P,IAAAC,CAAAA,EAAA,CAAAhQ,EAAA,CAAA7D,GAAA,EAAA2D,EAAA,CAAAE,EAAA,GAAAF,EAAA,EAAA,CAAA,CAAAiQ,IAAAC,CAAAA,EAAA,CAAA,EAAA7T,EAAA,EAAA6D,EAAA,CAAAF,EAAA,GAAAE,EAAA,EAAA,CAAA,CAAA+P,IAAAC,CAAAA,EAAA,CAAA,CAAA,GAAAD,IAAA+F,CAAAA,GAAA,CAAA9V,EAAA,CAAAF,EAAA,CAAA,CAAA,GAAA,CAAAiQ,IAAAC,CAAAA,EAAA,CAAA,GAAA,CAAA,CAAArU,EAAAA,CAAAqE,EAAA,OAAApE,GAAAS,CAAA,CAAAD,GAAAI,CAAAwD,GAAA,CAAA7D,EAAA,EAAA6D,EAAA,CAAAF,EAAA,CAAAA,EAAA,CAAA,GAAA,CAAAiQ,IAAAC,CAAAA,EAAA,CAAA,GAAA,CAAAlQ,EAAA,CAAA,GAAA,CAAAiQ,IAAAC,CAAAA,EAAA,CAAA,GAAA,CAAA,CAAA,CAAApP,GAAA,CAAA+V,EAAA,CAAAta,CAAA,CAAAiE,EAAA,CAAA7D,CAAA,CAAAsT,IAAAyE,CAAAA,GAAA,CAAAxU,EAAA,CAAA,CAAAxD,CAAA,CAAAmD,EAAA,CAAAlC,EAAA,CAAAsS,IAAA0E,CAAAA,GAAA,CAAAzU,EAAA,CAAA,CAAApE,EAAA,CAAAQ,EAAA,CAAAK,CAAA,CAAAgB,EAAA,CAAAlB,EAAA,CAAA,CAAA,CAAAJ,EAAA,CAAA,CAAA6D,EAAA,CAAArE,EAAA,CAAA2E,EAAA,CAAAX,EAAA,CAAA,CAAA,CAAAkD,EAAAA,CAAAkN,IAAAgH,CAAAA,GAAA,EAAA\/W,EAAA,CAAAF,EAAA,EAAA,CAAA,CAAAiB,EAAAA,CAAA,CAAAA,CAAA,CAAAA,CAAAtE,CAAAsE,CAAA8B,EAAA7B,GAAAA,EAAA,CAAAA,CAAA,CAAAA,CAAAvD,EAAA4C,GAAAA,CAAA,CAAA1E,EAAA,CAAAC,CAAA,CAAA8F,GAAAA,CAAA,CAAA\/F,EAAA,CAAAoF,CAAA,CAAAgP,IAAA0E,CAAAA,GAAAhS,CAAA3C,EAAA2C,CAAA,CAAA7G,CAAA,CAAAoF,EAAA,CAAA+O,IAAAyE,CAAAA,GAAA1T,CAAAhB,EAAAgB,CAAA,CAAAmB,EAAAA,CAAA,CAAA5F,CAAA,CAAA0E,CAAA,CAAAgP,IAAA0E,CAAAA,GAAA7R,CAAA5C,EAAA4C,CAAA,CAAApG,CAAA,CAAAwE,EAAA,CAAA+O,IAAAyE,CAAAA,GAAA9R,CAAA1C,EAAA0C,CAAA,CAAA9C,EAAAA,CAAA,CAAAvD,CAAA,CAAAG,CAAA,CAAA,IAAAkF,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAArB,EAAA,CAAA,CAAA,CAAA,CAAAqB,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAArB,EAAA,CAAA,CAAA,CAAA,CAAAqB,EAAA,CAAA,CAAA,CAAA,CAAA\/D,EAAA,CAAA,MAAA,CAAA+D,EAAA,CAAAO,CAAA,CAAArC,CAAA,CAAAyH,CAAAA,MAAA,CAAAzG,EAAA,CAAAA;EAAA,CAAA,CAAAc,EAAA,CAAAO,CAAA,CAAArC,CAAA,CAAAyH,CAAAA,MAAA,CAAAzG,EAAA,CAAAjF,GAAAA,CAAA,EAAA,KAAAC,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAAgF,EAAA\/C,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAAS,CAAA,CAAAua,EAAA,CAAAhW,EAAA,CAAAhF,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgF,EAAA,CAAAhF,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkC,EAAA,CAAA,CAAAtB,EAAA,CAAAoa,EAAA,CAAAhW,EAAA,CAAAhF,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgF,EAAA,CAAAhF,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkC,EAAA,CAAA,CAAArB,CAAA,CAAAma,EAAA,CAAAhW,EAAA,CAAAhF,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgF,EAAA,CAAAhF,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkC,EAAA,CAAA,CAAAnC,EAAAqG,CAAAA,IAAA,CAAA,CAAA3F,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAAG,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAAAd,GAAA,CAAAqb,QAAAA,GAAA,CAAArb,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,MAAAG,EAAAqB,CAAAlC,EAAAkC,EAAA,EAAAA,EAAAA,MAAA,IAAA,CAAA,CAAArB,CAAA,CAAA,CAAA,MAAAC,EAAA,EAAA,KAAA,IAAAb,GAAA,CAAA,CAAAA,EAAA,CAAAY,CAAA,CAAA,CAAA,CAAAZ,EAAA,EAAA,CAAAa,CAAAuF,CAAAA,IAAA,CAAA,GAAAiV,EAAA,CAAAtb,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAS,CAAA,CAAA,CAAA,OAAAT,EAAA,EAAAa,CAAAuF,CAAAA,IAAA,CAAA,GAAAiV,EAAA,CAAAtb,EAAA,CAAAa,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAb,EAAA,CAAAa,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAb,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAU,CAAA,CAAA,CAAA,CAAA,CAAAiC,KAAA,MAAA,CAAA4Y,IAAAza,CAAA,CAAA,CAAA,MAAA,EAAA,GAAAD,CAAA,CAAA,CAAA8B,KAAA,MAAA,CAAA4Y,IAAAD,EAAA,CAAAtb,EAAA,CAAA,CAAA,CAAAA,CAAA,CAAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAAC,CAAA,CAAAA,CAAA,CAAAD,EAAA,CAAA,CAAA,CAAAU,CAAA,CAAAA,CAAA,CAAAV,EAAA,CAAA,CAAA,CAAAa,CAAA,CAAAA,CAAA;AAAAH,CAAA,CAAA,CAAA,CAAA,CAAAiC,KAAA,MAAA,CAAA4Y,IAAA,EAAA,CAAA,CAAAC,QAAAA,GAAA,CAAAxb,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAA+a,EAAA,CAAAzb,EAAA,CAAA,CAAA,CAAA,EAAA,CAAAC,CAAAyb,CAAAA,SAAA,CAAAzb,CAAA,CAAA,IAAA,CAAAA,CAAA0b,CAAAA,kBAAA,CAAA,CAAA,IAAA,EAAA,GAAA,EAAA,CAAA,CAAA,GAAA,CAAA1b,CAAAyb,CAAAA,SAAA,CAAA,OAAAzb,EAAAgB,MAAAK,CAAAA,MAAA,CAAA,EAAA,CAAArB,CAAA,CAAAA,EAAA2b,CAAAA,UAAA,CAAA,IAAA,EAAA3b,EAAA4b,CAAAA,IAAA,GAAA5b,CAAA4b,CAAAA,IAAA,CAAA5b,CAAA4b,CAAAA,IAAA,CAAA,CAAA,CAAAhb,GAAAA,CAAA4a,EAAA,CAAAzb,EAAA,CAAA,CAAA,CAAAC,CAAA,CAAAS,EAAA,CAAAA,CAAAgL,CAAAA,MAAA,CAAA7K,EAAA,CAAA,CAAA,MAAA,CAAA8B,KAAA,MAAA,CAAA4Y,IAAA7a,CAAA,CAAA,CAAAob,QAAAA,GAAA,CAAA9b,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,MAAAoB,EAAA,CAAAA,CAAAsS,IAAAC,CAAAA,EAAAvS,CAAAsS,IAAAoF,CAAAA,GAAA1Y,CAAAJ,CAAAqb,CAAAA,cAAAjb,CAAAJ,CAAAqb,CAAAA,cAAAjb,CAAAsT,IAAA4E,CAAAA,IAAA,CAAA,GAAA,CAAAlY,CAAAsT,IAAA4E,CAAAA,IAAAnY,CAAA,CAAAA,CAAAuT,IAAAC,CAAAA,EAAAxT,CAAAuT,IAAA4E,CAAAA,IAAA,EAAA5E,IAAA6E,CAAAA,GAAA,CAAAjZ,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAoU,IAAA6E,CAAAA,GAAA,CAAAhZ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAY,CAAAC,CAAAF,GAAAA,CAAAwT,IAAA+F,CAAAA,GAAA,CAAAna,EAAA,CAAA,CAAA,CAAAS,EAAAA,CAAA2T,IAAA+F,CAAAA,GAAA,CAAAla,CAAA,CAAA,CAAA,CAAA,OAAAO,EAAA,CAAAA,CAAAE,CAAAsb,CAAAA,YAAA,OAAApb,GAAA,EAAAqb,EAAA,CAAArb,EAAA;AAAAJ,CAAA,CAAAE,CAAA,CAAA,CAAAD,CAAA,EAAAwb,EAAA,CAAAxb,CAAA,CAAAD,CAAA,CAAAE,CAAA,CAAA,CAAA,CAAAwb,UAAApa,CAAA,CAAAqa,GAAAvb,EAAA,CAAAwb,GAAA3b,CAAA,CAAA,CAAA4b,QAAAA,GAAA,CAAArc,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAA,CAAAC,CAAA,CAAAgB,EAAA,CAAA,CAAAwa,EAAA,CAAAzb,CAAAqb,CAAAA,SAAA,CAAAlc,EAAA,CAAAC,CAAA,CAAAY,CAAAsb,CAAAA,EAAA,CAAAtb,CAAAub,CAAAA,EAAA,CAAA,CAAA,CAAAvb,CAAAqb,CAAAA,SAAA,CAAAK,EAAA,CAAA,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA7b,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,KAAAE,GAAA4b,EAAA,CAAA1b,CAAA,CAAA,IAAA,CAAAJ,CAAA,CAAAA,EAAAib,CAAAA,kBAAA,GAAA,CAAA7a,EAAA,CAAA,CAAAwb,EAAA,CAAAzb,CAAAqb,CAAAA,SAAA,CAAAlc,EAAA,CAAAC,CAAA,CAAAY,CAAAsb,CAAAA,EAAA,CAAAtb,CAAAub,CAAAA,EAAA,CAAA,GAAA,CAAA,CAAA,CAAA1b,CAAA,CAAA,CAAAoB,CAAA,CAAA0a,EAAA,CAAA1b,EAAA,CAAA,IAAA,CAAAJ,CAAA,CAAA,CAAAE,EAAA,CAAAA,EAAA8K,CAAAA,MAAA,CAAA5J,CAAA,CAAA,CAAA,OAAA,CAAA2a,gBAAA3a,EAAA,CAAA4a,MAAA,CAAA\/Z,KAAA,MAAA,CAAA4Y,IAAA3a,EAAA,CAAA,CAAA,CAAA+b,QAAAA,GAAA,CAAA3c,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAAgB,EAAA,CAAAlB,EAAA,CAAAH,EAAA,CAAAD,EAAA,CAAA,CAAA6B,CAAAA,CAAA+R,IAAA+F,CAAAA,GAAA,CAAAzZ,CAAA,CAAA,CAAA,CAAAuE,EAAAA,CAAAmP,IAAA+F,CAAAA,GAAA,CAAAtZ,CAAA,CAAA,CAAA,CAAAwB,EAAA,EAAA4Z,EAAA,CAAA,GAAA,CAAA5Z,CAAA,CAAA7B,EAAA,CAAA,KAAAyE,CAAA,EAAAgX,EAAA,CAAA,GAAA,CAAAhX,CAAA,CAAAzE,EAAA,CAAA,CAAA,CAAA,CAAA2D,CAAA,CAAA,CAAAA,CAAA,EAAA,CAAA,CAAAiQ,IAAAC,CAAAA,EAAA,CAAAhQ,EAAA,EAAA,CAAA,CAAA+P,IAAAC,CAAAA,EAAAhQ,GAAA,CAAAF,CAAA,CAAA,CAAA,CAAAiQ,IAAAC,CAAAA,EAAA,GAAAlQ,CAAA,CAAA,CAAA,CAAAE,EAAA,CAAA,CAAA,CAAA+P,IAAAC,CAAAA,EAAA,CAAA,KAAArQ,GAAAoQ,IAAAqF,CAAAA,GAAA,CAAA,CAAA;AAAArF,IAAAC,CAAAA,EAAA,CAAA7T,EAAAub,CAAAA,cAAA,CAAA,CAAA,EAAA1X,EAAA,CAAAF,CAAA,EAAA,CAAA,CAAA,OAAAe,GAAA0X,EAAA,CAAA5Y,EAAA,CAAAhE,EAAA,CAAAC,CAAA,CAAAoC,CAAA,CAAA4C,CAAA,CAAAd,CAAA,CAAAE,EAAA,CAAA,CAAA,CAAA7D,EAAA,CAAAA,GAAAmb,CAAAA,kBAAA,GAAA3b,EAAA,CAAA4c,EAAA,CAAA5Y,EAAA,CAAAhE,EAAA,CAAAC,CAAA,CAAAoC,CAAA,CAAA4C,CAAA,CAAAd,CAAA,CAAAE,EAAA,CAAA,GAAA,CAAA7D,EAAA,CAAA,CAAA0E,EAAAmB,CAAAA,IAAA,CAAA,GAAArG,EAAA,CAAA,CAAA,OAAAY,GAAA,GAAAH,EAAA,CAAAyE,EAAAmB,CAAAA,IAAA,CAAA,GAAAiV,EAAA,CAAAtb,EAAA,CAAAC,CAAA,CAAAD,EAAA,CAAAqC,CAAA,CAAA+R,IAAAyE,CAAAA,GAAA,CAAA1U,CAAA,CAAA,CAAAlE,CAAA,CAAAgF,CAAA,CAAAmP,IAAA0E,CAAAA,GAAA,CAAA3U,CAAA,CAAA,CAAA3D,EAAA,CAAA,CAAA,GAAA8a,EAAA,CAAAtb,EAAA,CAAAC,CAAA,CAAAD,EAAA,CAAAqC,CAAA,CAAA+R,IAAAyE,CAAAA,GAAA,CAAAxU,EAAA,CAAA,CAAApE,CAAA,CAAAgF,CAAA,CAAAmP,IAAA0E,CAAAA,GAAA,CAAAzU,EAAA,CAAA,CAAA7D,EAAA,CAAA,CAAA,CAAA0E,EAAAmB,CAAAA,IAAA,CAAA,CAAAwW,GAAA,QAAA,CAAAhC,KAAA,CAAA7a,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAA4c,GAAA,QAAA,CAAAhC,KAAA,CAAA7a,EAAA,CAAAqC,CAAA,CAAA+R,IAAAyE,CAAAA,GAAA,CAAA1U,CAAA,CAAA,CAAAlE,CAAA,CAAAgF,CAAA,CAAAmP,IAAA0E,CAAAA,GAAA,CAAA3U,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAAxB,KAAA,MAAA,CAAA4Y,IAAArW,EAAA,CAAA,CAAA4X,QAAAA,GAAA,CAAA9c,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAAS,EAAA,EAAA,IAAAV,EAAAkC,CAAAA,MAAA,CAAA,CAAA,MAAArB,EAAAZ,CAAA8c,CAAAA,mBAAAlc,EAAA,CAAA,CAAAC,EAAAd,EAAAkC,CAAAA,MAAA,IAAA,CAAA,CAAApB,CAAA,CAAA,CAAAJ,CAAA2F,CAAAA,IAAA,CAAA,CAAAwW,GAAA,MAAA,CAAAhC,KAAA,CAAA7a,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAAic,EAAA,CAAApb,CAAA,CAAAZ,CAAA,CAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAic,EAAA,CAAApb,CAAA,CAAAZ,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,IAAA6B,GAAA,CAAA,CAAAA,EAAA,CAAAhB,CAAA,CAAAgB,EAAA,EAAA,CAAApB,CAAA2F,CAAAA,IAAA,CAAA,CAAAwW,GAAA,QAAA,CAAAhC,KAAA,CAAA7a,EAAA,CAAA8B,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAma,EAAA,CAAApb,CAAA,CAAAZ,CAAA,CAAA,CAAAD,EAAA,CAAA8B,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAma,EAAA,CAAApb,CAAA,CAAAZ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA0C,KAAA,UAAA,CAAA4Y,IAAA7a,CAAA,CAAA,CAAAsc,QAAAA,GAAA,CAAAhd,EAAA,CAAAC,CAAA,CAAA,CAAAgd,IAAAA,EAAAA,EAAA,KAAAvc,EAAAT,CAAAid,CAAAA,SAAAxc,EAAA,SAAA,IAAA,CAAAyc,EAAA,CAAAzc,CAAA,CAAA,CAAA,OAAAA,CAAA,EAAA,KAAA,QAAA,CAAAyc,EAAA,CAAAzc,CAAA,CAAA,GAAAyc,EAAA,CAAAzc,CAAA,CAAA,CAAA,IAAA0c,EAAA,CAAAnd,CAAA,CAAA,CAAA,MAAA,MAAA,aAAA,CAAAkd,EAAA,CAAAzc,CAAA,CAAA,GAAAyc,EAAA,CAAAzc,CAAA,CAAA,CAAA,IAAA2c,EAAA,CAAApd,CAAA,CAAA,CAAA,MAAA,MAAA,MAAA,CAAAkd,EAAA,CAAAzc,CAAA,CAAA,GAAAyc,EAAA,CAAAzc,CAAA,CAAA,CAAA,IAAA4c,EAAA,CAAArd,CAAA,CAAA,CAAA,MAAA,MAAA,QAAA,CAAAkd,EAAA,CAAAzc,CAAA,CAAA,GAAAyc,EAAA,CAAAzc,CAAA,CAAA,CAAA,IAAA6c,EAAA,CAAAtd,CAAA,CAAA,CAAA,MAAA,MAAA,aAAA,CAAAkd,EAAA,CAAAzc,CAAA,CAAA,GAAAyc,EAAA,CAAAzc,CAAA,CAAA,CAAA,IAAA8c,EAAA,CAAAvd,CAAA,CAAA,CAAA,MAAA,SAAAS,CAAA,CAAA,SAAA,CAAAyc,EAAA,CAAAzc,CAAA,CAAA,GAAAyc,EAAA,CAAAzc,CAAA,CAAA,CAAA,IAAA+c,EAAA,CAAAxd,CAAA,CAAA,CAAA,CAAA,MAAAkd,GAAA,CAAAzc,CAAA,CAAAgd,CAAAA,WAAA,CAAA1d,EAAA;AAAAC,CAAA,CAAA,CAAA0d,QAAAA,GAAA,CAAA3d,EAAA,CAAA,CAAA,MAAAA,GAAA4b,CAAAA,UAAA,GAAA5b,EAAA4b,CAAAA,UAAA,CAAA,IAAAgC,EAAA,CAAA5d,EAAA6b,CAAAA,IAAA,EAAA,CAAA,CAAA,EAAA7b,EAAA4b,CAAAA,UAAA\/V,CAAAA,IAAA,EAAA,CAAA0W,QAAAA,GAAA,CAAAvc,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAH,EAAAgb,CAAAA,SAAA,CAAA7a,CAAA,EAAA8c,EAAA,CAAAjd,CAAA,CAAA,EAAAT,CAAA,CAAAD,EAAA,EAAAA,EAAA,CAAA,CAAAic,QAAAA,GAAA,CAAAjc,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA6b,GAAA,CAAA,CAAAvc,EAAA,CAAAA,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA4a,QAAAA,GAAA,CAAAtb,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAAgB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAlB,GAAAkB,EAAA,CAAAhB,CAAA+c,CAAAA,sBAAA,CAAA\/c,CAAA6a,CAAAA,kBAAAlb,GAAAA,CAAAqd,EAAA,CAAA9d,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAAF,EAAA,CAAA,MAAAH,GAAAD,GAAAA,CAAAsd,EAAA,CAAA9d,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAAAL,GAAAiL,CAAAA,MAAA,CAAAlL,EAAA,CAAA,CAAAsd,QAAAA,GAAA,CAAA9d,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAAgB,EAAA,CAAAlB,EAAA,CAAA,CAAA,IAAAH,GAAA2T,IAAA6E,CAAAA,GAAA,CAAAjZ,EAAA,CAAAU,CAAA,CAAA,CAAA,CAAAD,CAAA2T,IAAA6E,CAAAA,GAAA,CAAAhZ,CAAA,CAAAY,CAAA,CAAA,CAAA,CAAA,CAAAL,GAAA4T,IAAA4E,CAAAA,IAAA,CAAAvY,EAAA,CAAA,KAAAuB,EAAAA,GAAA,CAAA,GAAA,CAAAxB,EAAA,CAAA,CAAA,CAAA,GAAA,CAAAA,EAAA,CAAA,EAAA,CAAA,CAAA,QAAA;AAAAA,EAAA,CAAA,QAAA,KAAA2B,GAAArB,CAAAic,CAAAA,mBAAA5a,EAAA,CAAAA,GAAA,CAAAA,EAAA,CAAA,GAAA,CAAA1B,EAAA,GAAA0B,EAAA,CAAA3B,EAAA,CAAA,EAAA,CAAA6B,GAAAA,CAAAF,EAAAE,CAAA,CAAA4C,GAAAA,CAAA,EAAAA,CAAA,EAAAA,CAAA0Y,EAAA,CAAA7c,CAAA,CAAA,KAAAqD,GAAArD,CAAAid,CAAAA,MAAA5Z,CAAArD,CAAAic,CAAAA,mBAAA5Y,EAAAtD,CAAAsD,CAAAlE,CAAAkE,EAAA,GAAA,CAAAE,GAAAvD,CAAAid,CAAAA,MAAA1Z,CAAAvD,CAAAic,CAAAA,mBAAA1Y,EAAArE,EAAAqE,CAAA3D,CAAA2D,EAAA,GAAAF,GAAA,CAAA8X,EAAA,CAAA9X,EAAA,CAAArD,CAAA,CAAAkB,EAAA,CAAAqC,GAAA,CAAA4X,EAAA,CAAA5X,EAAA,CAAAvD,CAAA,CAAAkB,EAAA,CAAA,OAAA2C,GAAA,EAAA,CAAAQ,GAAArE,CAAAkd,CAAAA,gBAAA,OAAAlc,GAAA,GAAAlB,EAAA,CAAA+D,EAAA0B,CAAAA,IAAA,CAAA,CAAAwW,GAAA,MAAA,CAAAhC,KAAA,CAAA7a,EAAA,EAAAmF,EAAA,CAAA,CAAA,CAAA8W,EAAA,CAAA5Z,EAAA,CAAAvB,CAAA,CAAAkB,EAAA,CAAA,EAAA\/B,CAAA,EAAAkF,EAAA,CAAA,CAAA,CAAA8W,EAAA,CAAA5Z,EAAA,CAAAvB,CAAA,CAAAkB,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA2C,EAAA0B,CAAAA,IAAA,CAAA,CAAAwW,GAAA,MAAA,CAAAhC,KAAA,CAAA7a,EAAA,EAAAmF,EAAA,CAAA,CAAA,CAAA8W,EAAA,CAAA9Z,EAAA,CAAArB,CAAA,CAAAkB,EAAA,CAAA,EAAA\/B,CAAA,EAAAkF,EAAA,CAAA,CAAA,CAAA8W,EAAA,CAAA9Z,EAAA,CAAArB,CAAA,CAAAkB,EAAA,CAAA,EAAA,CAAA,CAAA,EAAApB,EAAA,CAAA+D,EAAA0B,CAAAA,IAAA,CAAA,CAAAwW,GAAA,UAAA,CAAAhC,KAAA,CAAA1W,EAAA,CAAAnE,EAAA,EAAAU,CAAA,CAAAV,EAAA,EAAAiF,EAAA,CAAAgX,EAAA,CAAA5Z,EAAA,CAAAvB,CAAA,CAAAkB,EAAA,CAAA,CAAAqC,EAAA,CAAApE,CAAA,EAAAY,CAAA,CAAAZ,CAAA,EAAAgF,EAAA,CAAAgX,EAAA,CAAA5Z,EAAA,CAAAvB,CAAA,CAAAkB,EAAA,CAAA,CAAAmC,EAAA,CAAAnE,EAAA,CAAA,CAAA;CAAAU,CAAA,CAAAV,EAAA,EAAAiF,EAAA,CAAAgX,EAAA,CAAA5Z,EAAA,CAAAvB,CAAA,CAAAkB,EAAA,CAAA,CAAAqC,EAAA,CAAApE,CAAA,CAAA,CAAA,EAAAY,CAAA,CAAAZ,CAAA,EAAAgF,EAAA,CAAAgX,EAAA,CAAA5Z,EAAA,CAAAvB,CAAA,CAAAkB,EAAA,CAAA,CAAAtB,CAAA,EAAAyE,EAAA,CAAA,CAAA,CAAA8W,EAAA,CAAA5Z,EAAA,CAAAvB,CAAA,CAAAkB,EAAA,CAAA,EAAAnB,CAAA,EAAAsE,EAAA,CAAA,CAAA,CAAA8W,EAAA,CAAA5Z,EAAA,CAAAvB,CAAA,CAAAkB,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA2C,EAAA0B,CAAAA,IAAA,CAAA,CAAAwW,GAAA,UAAA,CAAAhC,KAAA,CAAA1W,EAAA,CAAAnE,EAAA,EAAAU,CAAA,CAAAV,EAAA,EAAAiF,EAAA,CAAAgX,EAAA,CAAA9Z,EAAA,CAAArB,CAAA,CAAAkB,EAAA,CAAA,CAAAqC,EAAA,CAAApE,CAAA,EAAAY,CAAA,CAAAZ,CAAA,EAAAgF,EAAA,CAAAgX,EAAA,CAAA9Z,EAAA,CAAArB,CAAA,CAAAkB,EAAA,CAAA,CAAAmC,EAAA,CAAAnE,EAAA,CAAA,CAAA,EAAAU,CAAA,CAAAV,EAAA,EAAAiF,EAAA,CAAAgX,EAAA,CAAA9Z,EAAA,CAAArB,CAAA,CAAAkB,EAAA,CAAA,CAAAqC,EAAA,CAAApE,CAAA,CAAA,CAAA,EAAAY,CAAA,CAAAZ,CAAA,EAAAgF,EAAA,CAAAgX,EAAA,CAAA9Z,EAAA,CAAArB,CAAA,CAAAkB,EAAA,CAAA,CAAAtB,CAAA,EAAAyE,EAAA,CAAA,CAAA,CAAA8W,EAAA,CAAA9Z,EAAA,CAAArB,CAAA,CAAAkB,EAAA,CAAA,EAAAnB,CAAA,EAAAsE,EAAA,CAAA,CAAA,CAAA8W,EAAA,CAAA9Z,EAAA,CAAArB,CAAA,CAAAkB,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA2C,EAAA,CAAA8W,QAAAA,GAAA,CAAAzb,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,MAAAG,EAAA,EAAAA,EAAAwF,CAAAA,IAAA,CAAA,CAAArG,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAic,EAAA,CAAAhc,CAAA,CAAAS,CAAA,CAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAic,EAAA,CAAAhc,CAAA,CAAAS,CAAA,CAAA,CAAA,CAAAG,EAAAwF,CAAAA,IAAA,CAAA,CAAArG,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAic,EAAA,CAAAhc,CAAA,CAAAS,CAAA,CAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAic,EAAA,CAAAhc,CAAA,CAAAS,CAAA,CAAA,CAAA,CAAA,KAAA,IAAAI,EAAA,CAAA,CAAAA,CAAA,CAAAd,EAAAkC,CAAAA,MAAA,CAAApB,CAAA,EAAA,CAAAD,CAAAwF,CAAAA,IAAA,CAAA,CAAArG,EAAA,CAAAc,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAmb,EAAA,CAAAhc,CAAA,CAAAS,CAAA,CAAA,CAAAV,EAAA,CAAAc,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAmb,EAAA,CAAAhc,CAAA,CAAAS,CAAA,CAAA,CAAA,CAAA,CAAAI,CAAA,GAAAd,EAAAkC,CAAAA,MAAA,CAAA,CAAA,EAAArB,CAAAwF,CAAAA,IAAA,CAAA,CAAArG,EAAA,CAAAc,CAAA,CAAA,CAAA,CAAA,CAAA;AAAAmb,EAAA,CAAAhc,CAAA,CAAAS,CAAA,CAAA,CAAAV,EAAA,CAAAc,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAmb,EAAA,CAAAhc,CAAA,CAAAS,CAAA,CAAA,CAAA,CAAA,OAAA8b,GAAA,CAAA3b,CAAA,CAAA,IAAA,CAAAH,CAAA,CAAA,CAAA8b,QAAAA,GAAA,CAAAxc,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,MAAAG,EAAAb,EAAAkC,CAAAA,MAAA,CAAApB,EAAA,EAAA,IAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,MAAAiB,GAAA,EAAA,CAAAlB,GAAA,CAAAA,CAAAF,CAAAud,CAAAA,cAAAnd,EAAAuF,CAAAA,IAAA,CAAA,CAAAwW,GAAA,MAAA,CAAAhC,KAAA,CAAA7a,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAAY,CAAA,CAAAZ,EAAA,EAAA,CAAA,CAAA,MAAAS,GAAAV,EAAA,CAAAC,EAAA,CAAA6B,GAAA,CAAA,CAAA,CAAA,CAAA,CAAApB,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAoB,GAAA,CAAA,CAAA,CAAA,CAAA,CAAApB,EAAA,CAAA,CAAA,CAAA,EAAAE,EAAA,CAAAZ,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAW,EAAA,CAAAZ,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAS,EAAA,CAAA,CAAA,CAAA,EAAAE,EAAA,CAAAZ,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAW,EAAA,CAAAZ,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA6B,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA9B,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAW,EAAA,CAAAZ,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAW,EAAA,CAAAZ,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAD,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAW,EAAA,CAAAZ,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAW,EAAA,CAAAZ,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA6B,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA9B,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAa,EAAAuF,CAAAA,IAAA,CAAA,CAAAwW,GAAA,UAAA,CAAAhC,KAAA,CAAA\/Y,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA7B,CAAA,EAAA,CAAA,GAAAA,CAAAiC,CAAAA,MAAA,GAAAlC,EAAA,CAAAU,CAAAqc,CAAAA,mBAAA,CAAAjc,CAAAuF,CAAAA,IAAA,CAAA,CAAAwW,GAAA,QAAA,CAAAhC,KAAA,CAAA5a,CAAA,CAAA,CAAA,CAAA,CAAAgc,EAAA,CAAAjc,EAAA,CAAAU,CAAA,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAAgc,EAAA,CAAAjc,EAAA,CAAAU,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,EAAA,GAAAG,CAAA,EAAAC,CAAAuF,CAAAA,IAAA,CAAA,CAAAwW,GAAA,MAAA,CAAAhC,KAAA,CAAA7a,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAc,CAAAuF,CAAAA,IAAA,CAAA,CAAAwW,GAAA,UAAA,CAAAhC,KAAA,CAAA7a,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,GAAAa,CAAA,EAAAC,CAAAuF,CAAAA,IAAA,CAAA,GAAAiV,EAAA,CAAAtb,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAU,CAAA,CAAA,CAAA,OAAAI,EAAA,CAAAwb,QAAAA,GAAA,CAAAtc,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAAgB,EAAA,CAAAlB,EAAA,CAAAH,EAAA,CAAA,CAAA,MAAAD,GAAA,EAAA,CAAAwB,GAAA,EAAA,CAAAG,GAAA8Z,EAAA,CAAA,EAAA,CAAAxb,EAAA,CAAA0B,CAAAiS,IAAAC,CAAAA,EAAAlS,CAAA,CAAAH,GAAAqE,CAAAA,IAAA,CAAA,CAAA4V,EAAA,CAAAna,EAAA,CAAArB,EAAA,CAAA,CAAAR,CAAA,CAAA,EAAA,CAAAY,CAAA,CAAAuT,IAAAyE,CAAAA,GAAA,CAAA1W,EAAA,CAAAnC,EAAA,CAAA,CAAAic,EAAA,CAAAna,EAAA,CAAArB,EAAA,CAAA,CAAAC,CAAA,CAAA,EAAA,CAAAI,CAAA,CAAAsT,IAAA0E,CAAAA,GAAA,CAAA3W,EAAA,CAAAnC,EAAA,CAAA,CAAA,CAAA;IAAA,IAAAY,GAAAuB,EAAA,CAAAvB,EAAA,CAAA,CAAA,CAAAwT,IAAAC,CAAAA,EAAA,CAAAlS,EAAA,CAAA,GAAA,CAAAvB,EAAA,EAAAZ,EAAA,CAAA,CAAA,MAAAA,GAAA,CAAAic,EAAA,CAAAna,EAAA,CAAArB,EAAA,CAAA,CAAAR,CAAA,CAAAY,CAAA,CAAAuT,IAAAyE,CAAAA,GAAA,CAAAjY,EAAA,CAAA,CAAAqb,EAAA,CAAAna,EAAA,CAAArB,EAAA,CAAA,CAAAC,CAAA,CAAAI,CAAA,CAAAsT,IAAA0E,CAAAA,GAAA,CAAAlY,EAAA,CAAA,CAAAJ,GAAA6F,CAAAA,IAAA,CAAArG,EAAA,CAAAgC,GAAAqE,CAAAA,IAAA,CAAArG,EAAA,CAAA,CAAA,MAAAgC,GAAAqE,CAAAA,IAAA,CAAA,CAAA4V,EAAA,CAAAna,EAAA,CAAArB,EAAA,CAAA,CAAAR,CAAA,CAAAY,CAAA,CAAAuT,IAAAyE,CAAAA,GAAA,CAAA1W,EAAA,CAAA,CAAA,CAAAiS,IAAAC,CAAAA,EAAA,CAAA,EAAA,CAAAzT,EAAA,CAAA,CAAAqb,EAAA,CAAAna,EAAA,CAAArB,EAAA,CAAA,CAAAC,CAAA,CAAAI,CAAA,CAAAsT,IAAA0E,CAAAA,GAAA,CAAA3W,EAAA,CAAA,CAAA,CAAAiS,IAAAC,CAAAA,EAAA,CAAA,EAAA,CAAAzT,EAAA,CAAA,CAAA,CAAA,CAAAoB,EAAAqE,CAAAA,IAAA,CAAA,CAAA4V,EAAA,CAAAna,EAAA,CAAArB,EAAA,CAAA,CAAAR,CAAA,CAAA,GAAA,CAAAY,CAAA,CAAAuT,IAAAyE,CAAAA,GAAA,CAAA1W,EAAA,CAAAvB,EAAA,CAAA,CAAAqb,EAAA,CAAAna,EAAA,CAAArB,EAAA,CAAA,CAAAC,CAAA,CAAA,GAAA,CAAAI,CAAA,CAAAsT,IAAA0E,CAAAA,GAAA,CAAA3W,EAAA,CAAAvB,EAAA,CAAA,CAAA,CAAA,CAAAoB,EAAAqE,CAAAA,IAAA,CAAA,CAAA4V,EAAA,CAAAna,EAAA,CAAArB,EAAA,CAAA,CAAAR,CAAA,CAAA,EAAA,CAAAY,CAAA,CAAAuT,IAAAyE,CAAAA,GAAA,CAAA1W,EAAA,CAAA,EAAA,CAAAvB,EAAA,CAAA,CAAAqb,EAAA,CAAAna,EAAA,CAAArB,EAAA,CAAA,CAAAC,CAAA,CAAA,EAAA,CAAAI,CAAA,CAAAsT,IAAA0E,CAAAA,GAAA,CAAA3W,EAAA,CAAA,EAAA,CAAAvB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAoB,EAAA,CAAAxB,EAAA,CAAA,CAAAoc,QAAAA,GAAA,CAAA5c,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAAgB,EAAA,CAAAlB,EAAA,CAAAH,EAAA,CAAAD,EAAA,CAAA,CAAA,IAAAwB,GAAAF,EAAAE,CAAAia,EAAA,CAAA,EAAA,CAAAzb,EAAA,CAAA2B,GAAAA,CAAA,EAAA,KAAAA,EAAAkE,CAAAA,IAAA,CAAA,CAAA4V,EAAA,CAAAxb,EAAA,CAAAD,EAAA,CAAA,CAAAP,CAAA,CAAA,EAAA,CAAAY,CAAA,CAAAuT,IAAAyE,CAAAA,GAAA,CAAA7W,EAAA;AAAAhC,EAAA,CAAA,CAAAic,EAAA,CAAAxb,EAAA,CAAAD,EAAA,CAAA,CAAAE,CAAA,CAAA,EAAA,CAAAI,CAAA,CAAAsT,IAAA0E,CAAAA,GAAA,CAAA9W,EAAA,CAAAhC,EAAA,CAAA,CAAA,CAAA,CAAA8B,EAAA,EAAAlB,EAAA,CAAAkB,EAAA,EAAA9B,EAAA,CAAAmC,EAAAkE,CAAAA,IAAA,CAAA,CAAA4V,EAAA,CAAAxb,EAAA,CAAAD,EAAA,CAAA,CAAAP,CAAA,CAAAY,CAAA,CAAAuT,IAAAyE,CAAAA,GAAA,CAAA\/W,EAAA,CAAA,CAAAma,EAAA,CAAAxb,EAAA,CAAAD,EAAA,CAAA,CAAAE,CAAA,CAAAI,CAAA,CAAAsT,IAAA0E,CAAAA,GAAA,CAAAhX,EAAA,CAAA,CAAA,CAAA,OAAAK,GAAAkE,CAAAA,IAAA,CAAA,CAAApG,CAAA,CAAAY,CAAA,CAAAuT,IAAAyE,CAAAA,GAAA,CAAAjY,EAAA,CAAA,CAAAF,CAAA,CAAAI,CAAA,CAAAsT,IAAA0E,CAAAA,GAAA,CAAAlY,EAAA,CAAA,CAAA,CAAA,CAAAuB,EAAAkE,CAAAA,IAAA,CAAA,CAAApG,CAAA,CAAAY,CAAA,CAAAuT,IAAAyE,CAAAA,GAAA,CAAAjY,EAAA,CAAA,CAAAF,CAAA,CAAAI,CAAA,CAAAsT,IAAA0E,CAAAA,GAAA,CAAAlY,EAAA,CAAA,CAAA,CAAA,CAAA4b,EAAA,CAAAra,EAAA,CAAA,IAAA,CAAA3B,EAAA,CAAA,CAAA0d,QAAAA,GAAA,CAAAle,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAAgB,EAAA,CAAAlB,EAAA,CAAAH,EAAA,CAAA,CAAA,MAAAD,GAAA,EAAA,CAAAwB,GAAA,CAAAvB,EAAAsc,CAAAA,mBAAA,EAAA,CAAA,EAAAtc,EAAAsc,CAAAA,mBAAA,EAAA,CAAA,EAAA,EAAA,CAAA,KAAA5a,EAAA,OAAAE,GAAA5B,EAAAkb,CAAAA,kBAAA,CAAA,CAAA,CAAA,CAAA,CAAA1W,GAAAxE,EAAAud,CAAAA,gBAAA,KAAA,IAAA7Z,GAAA,CAAA,CAAAA,EAAA,CAAA9B,EAAA,CAAA8B,EAAA,EAAA,CAAA,CAAA,GAAAA,EAAA,CAAA3D,EAAA6F,CAAAA,IAAA,CAAA,CAAAwW,GAAA,MAAA,CAAAhC,KAAA,CAAAja,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAJ,EAAA6F,CAAAA,IAAA,CAAA,CAAAwW,GAAA,MAAA,CAAAhC,KAAA,CAAAja,EAAA,CAAA,CAAA,CAAA;CAAAqE,EAAA,CAAA,CAAA,CAAAgX,EAAA,CAAAja,EAAA,CAAA,CAAA,CAAA,CAAAvB,EAAA,CAAA,EAAAG,EAAA,CAAA,CAAA,CAAA,EAAAqE,EAAA,CAAA,CAAA,CAAAgX,EAAA,CAAAja,EAAA,CAAA,CAAA,CAAA,CAAAvB,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA0B,EAAA,CAAA8C,EAAA,CAAA,CAAAnE,CAAA,CAAAgB,EAAA,CAAA,CAAA,CAAAhB,CAAA,CAAAmb,EAAA,CAAAja,EAAA,CAAAmC,EAAA,CAAA,CAAA1D,EAAA,CAAA,CAAAqB,EAAA,CAAAma,EAAA,CAAAja,EAAA,CAAAmC,EAAA,CAAA,CAAA1D,EAAA,CAAA,CAAA,CAAAD,EAAA6F,CAAAA,IAAA,CAAA,CAAAwW,GAAA,UAAA,CAAAhC,KAAA,CAAA7a,EAAA,CAAAic,EAAA,CAAAja,EAAA,CAAAmC,EAAA,CAAA,CAAA1D,EAAA,CAAA,CAAAR,CAAA,CAAAgc,EAAA,CAAAja,EAAA,CAAAmC,EAAA,CAAA,CAAA1D,EAAA,CAAA,CAAAC,CAAA,CAAAub,EAAA,CAAAja,EAAA,CAAAmC,EAAA,CAAA,CAAA1D,EAAA,CAAA,CAAAI,CAAA,CAAAob,EAAA,CAAAja,EAAA,CAAAmC,EAAA,CAAA,CAAA1D,EAAA,CAAA,CAAA0B,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA3B,GAAA,CAAA2d,QAAAA,GAAA,CAAAne,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAAmU,KAAA6E,CAAAA,GAAA,CAAAjZ,EAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAmU,IAAA6E,CAAAA,GAAA,CAAAjZ,EAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAme,QAAAA,GAAA,CAAApe,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,MAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,EAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,EAAAU,CAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,EAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,EAAAU,CAAA,CAAA,CAAA2d,QAAAA,GAAA,CAAAre,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAA,CAAAC,CAAAA,CAAAD,CAAAC,EAAA,EAAA,KAAAJ,EAAAV,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAY,GAAAb,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAa,GAAAd,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,OAAA6B,GAAA9B,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,KAAAW,GAAA,CAAAA,CAAAC,EAAA,CAAA,CAAA,CAAAD,CAAA,CAAAA,CAAAF,CAAA,CAAA,CAAA,CAAAE,CAAAkB,EAAA,CAAA,CAAA,CAAAlB,GAAA,EAAAA,EAAAH,GAAAA,CAAA,CAAAA,CAAAI,EAAA,CAAA,CAAA,CAAAJ,CAAA,CAAAA,CAAAC,CAAA,CAAA,CAAA,CAAAD,CAAAqB,EAAA,CAAA,CAAA,CAAArB,GAAA;AAAAA,EAAA,KAAAD,GAAA,CAAAA,CAAAM,EAAA,CAAA,CAAA,CAAAN,CAAA,CAAAA,CAAAsB,EAAA,CAAA,CAAA,CAAAtB,CAAAE,CAAA,CAAA,CAAA,CAAAF,GAAA,EAAAA,EAAAwB,EAAAA,CAAA,CAAAA,CAAAlB,EAAA,CAAA,CAAA,CAAAkB,CAAA,CAAAA,CAAAF,EAAA,CAAA,CAAA,CAAAE,CAAAtB,CAAA,CAAA,CAAA,CAAA,EAAAsB,CAAA,EAAAA,CAAA,CAAApB,EAAA,CAAAJ,EAAA,GAAAI,EAAA,CAAAJ,EAAA,EAAAC,EAAA,CAAAuB,CAAA,GAAAvB,EAAA,CAAAuB,CAAA,EAAApB,EAAA,CAAAH,EAAA,EAAAC,CAAA,EAAAA,CAAA,CAAAV,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAa,CAAAoB,CAAAA,MAAA,CAAA,CAAA,EAAAJ,EAAA,CAAAhB,CAAA,CAAAA,CAAAoB,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAAtB,EAAA,CAAAF,CAAA,CAAA0T,IAAA4E,CAAAA,IAAA,CAAAmF,EAAA,CAAArc,EAAA,CAAAlB,EAAA,CAAA,CAAA,GAAAE,CAAAuF,CAAAA,IAAA,CAAA3F,CAAA,CAAA,CAAAI,CAAAuF,CAAAA,IAAA,CAAA3F,CAAA,CAAA,CAAAI,CAAAuF,CAAAA,IAAA,CAAArG,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA6B,EAAA,CAAA9B,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAW,EAAA,CAAAZ,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAQ,EAAA,CAAAT,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAO,EAAA,CAAAR,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAA+B,CAAA,CAAAoc,EAAA,CAAAtc,EAAA,CAAAlB,EAAA,CAAAC,EAAA,CAAA,CAAAsB,CAAA,CAAAic,EAAA,CAAAxd,EAAA,CAAAH,EAAA,CAAAI,EAAA,CAAA,CAAAwB,EAAA,CAAA+b,EAAA,CAAA3d,EAAA,CAAAD,EAAA,CAAAK,EAAA,CAAA,CAAAoE,EAAA,CAAAmZ,EAAA,CAAApc,CAAA,CAAAG,CAAA,CAAAtB,EAAA,CAAA,CAAAsD,CAAA,CAAAia,EAAA,CAAAjc,CAAA,CAAAE,EAAA,CAAAxB,EAAA,CAAA,CAAAwD,EAAA,CAAA+Z,EAAA,CAAAnZ,EAAA,CAAAd,CAAA,CAAAtD,EAAA,CAAA,CAAAwd,EAAA,CAAA,CAAAvc,EAAA,CAAAE,CAAA,CAAAiD,EAAA,CAAAZ,EAAA,CAAA,CAAA,CAAA,CAAA3D,CAAA,CAAAI,CAAA,CAAA,CAAAud,EAAA,CAAA,CAAAha,EAAA,CAAAF,CAAA,CAAA9B,EAAA,CAAA7B,EAAA,CAAA,CAAA,CAAA,CAAAE,CAAA,CAAAI,CAAA,CAAA,CAAA,KAAAgB,EAAA,CAAAlB,EAAA,OAAAE,EAAA,CAAAwd,QAAAA,GAAA,CAAAte,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,CAAAgB,CAAAA,CAAAhB,CAAAgB,EAAA,EAAA,OAAAlB,GAAAZ,EAAA,CAAAC,CAAA,CAAA,CAAAQ,GAAAT,EAAA,CAAAU,CAAA,CAAA,CAAA,CAAA,KAAAF,GAAA,CAAA,CAAAwB,GAAA,CAAA,KAAA,IAAAnB,GAAAZ,CAAAY,CAAA,CAAA,CAAAA,EAAA,CAAAH,CAAA;AAAA,CAAA,CAAA,EAAAG,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,GAAAb,EAAA,CAAAa,EAAA,CAAA,CAAAD,GAAAA,EAAA,CAAAH,GAAAA,EAAAI,KAAAA,GAAAsd,EAAA,CAAAle,EAAA,CAAAS,EAAA,CAAA,IAAA,CAAA,GAAAG,EAAA,CAAA,CAAA,EAAA,CAAAsd,EAAA,CAAAne,EAAA,CAAAC,EAAA,CAAA,OAAA,CAAA,CAAA,IAAAa,KAAAd,EAAA,CAAA,CAAA,CAAAc,CAAAb,EAAA,CAAA,CAAA,CAAAa,GAAAJ,EAAA,CAAA,CAAA,CAAAI,CAAAb,EAAA,CAAA,CAAA,CAAAa,GAAAd,EAAA,CAAA,CAAA,CAAAc,CAAAb,EAAA,CAAA,CAAA,CAAAa,GAAAJ,EAAA,CAAA,CAAA,CAAAI,CAAAb,EAAA,CAAA,CAAA,CAAAa,GAAAD,EAAA,GAAA,EAAAC,EAAA,CAAAsT,IAAAoF,CAAAA,GAAA,CAAA,CAAA,CAAApF,IAAAqF,CAAAA,GAAA,CAAA,CAAA,CAAA3Y,EAAA,CAAA,CAAA,CAAAqd,EAAA,CAAAne,EAAA,CAAAoe,EAAA,CAAAne,EAAA,CAAAS,EAAA,CAAAI,EAAA,CAAA,CAAA,CAAA,CAAAb,EAAAA,CAAA,EAAAA,GAAA,CAAAO,EAAA,GAAAA,EAAA,CAAAP,EAAA,CAAA+B,EAAA,CAAAnB,EAAA,CAAA,CAAA,MAAAuT,KAAA4E,CAAAA,IAAA,CAAAxY,EAAA,CAAA,CAAAK,CAAA,EAAAyd,EAAA,CAAAte,EAAA,CAAAC,CAAA,CAAA+B,EAAA,CAAA,CAAA,CAAAnB,CAAA,CAAAiB,CAAA,CAAA,CAAAwc,EAAA,CAAAte,EAAA,CAAAgC,EAAA,CAAAtB,CAAA,CAAAG,CAAA,CAAAiB,CAAA,CAAA,GAAAA,CAAAI,CAAAA,MAAA,EAAAJ,CAAAuE,CAAAA,IAAA,CAAAzF,EAAA,CAAA,CAAAkB,CAAAuE,CAAAA,IAAA,CAAA5F,EAAA,CAAA,CAAA,CAAAqB,CAAA,CAAAyc,QAAAA,GAAA,CAAAve,EAAA,CAAAC,CAAA,CAAA,GAAA,CAAAS,CAAA,CAAA,CAAA,MAAAG,EAAA,EAAA,CAAAC,GAAAd,EAAAkC,CAAAA,MAAApB,CAAA,CAAAA,EAAA,CAAA,KAAA,IAAAJ,GAAA,CAAA,CAAAA,EAAA,CAAAI,CAAA,CAAAJ,EAAA,EAAA,CAAA2d,EAAA,CAAAre,EAAA,CAAA,CAAA,CAAAU,EAAA,CAAAT,CAAA,CAAAY,CAAA,CAAA,OAAAH,EAAA,EAAA,CAAA,CAAAA,CAAA,CAAA4d,EAAA,CAAAzd,CAAA,CAAA,CAAA,CAAAA,CAAAqB,CAAAA,MAAA,CAAAxB,CAAA,CAAA,CAAAG,CAAA,CAAA2d,QAAAA,GAAA,CAAAxe,EAAA,CAAA,CAAA,IAAAC,CAAA,CAAAS,CAAA,CAAAG,EAAA,EAAA,IAAA,QAAA,EAAA,MAAAb,GAAA;AAAA,QAAA,EAAA,MAAAA,GAAA,CAAAa,CAAA,EAAAb,EAAA,KAAA,IAAA,QAAA,EAAA,MAAAA,GAAA,CAAA,GAAA0Y,KAAA+F,CAAAA,OAAA,CAAAze,EAAA,CAAA,CAAA,IAAAC,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAAD,EAAA,CAAAC,CAAA,CAAA,GAAAS,CAAA,CAAA8d,EAAA,CAAAxe,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAY,CAAA,GAAAA,CAAA,EAAA,GAAA,EAAAA,CAAA,EAAAH,CAAA,CAAA,KAAA,KAAAT,CAAA,GAAAD,GAAA,CAAAA,EAAA,CAAAC,CAAA,CAAA,GAAAY,CAAA,GAAAA,CAAA,EAAA,GAAA,EAAAA,CAAA,EAAAZ,CAAA,CAAA,OAAAY,EAAA,CAAA6d,QAAAA,GAAA,EAAA,CAAA,IAAA,IAAA1e,EAAA,CAAAC,CAAA,CAAAS,EAAA,CAAA,CAAAG,EAAA,EAAA,CAAAH,CAAA,CAAAuB,SAAAC,CAAAA,MAAA,CAAA,CAAA,CAAAlC,EAAA,CAAAiC,SAAA,CAAAvB,CAAA,EAAA,CAAA,IAAAT,CAAA,CAAAue,EAAA,CAAAxe,EAAA,CAAA,IAAAa,CAAA,GAAAA,CAAA,EAAA,GAAA,EAAAA,CAAA,EAAAZ,CAAA,CAAA,OAAAY,EAAA,CAAA8d,QAAAA,GAAA,CAAA3e,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAA,WAAAA,EAAA,MAAAsC,OAAAtC,EAAAV,EAAA,CAAAgD,MAAA0C,CAAAA,QAAA,CAAAhF,EAAAV,EAAA,CAAA,YAAA,CAAA,IAAA,CAAAU,CAAA,CAAA,CAAA,GAAAgY,KAAA+F,CAAAA,OAAA,CAAAze,EAAA,CAAA,GAAAU,CAAA,CAAA,QAAA,CAAAV,EAAA,CAAAC,EAAA,CAAA,CAAA,GAAAD,EAAA,CAAA,CAAA,GAAA,QAAA,EAAA,MAAAA,GAAA,CAAA,MAAA4e,GAAA,CAAA5e,EAAA,CAAAC,EAAA,CAAA,KAAAS;AAAAO,MAAAE,CAAAA,SAAA+G,CAAAA,QAAA9F,CAAAA,IAAA,CAAApC,EAAA,CAAA0I,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,GAAAhI,EAAA,EAAAV,EAAAmH,CAAAA,WAAA,GAAAzG,EAAA,CAAAV,EAAAmH,CAAAA,WAAAI,CAAAA,IAAA,CAAA,IAAA,KAAA,GAAA7G,EAAA,EAAA,KAAA,GAAAA,EAAA,CAAA,MAAAgY,MAAAC,CAAAA,IAAA,CAAA3Y,EAAA,CAAA,IAAA,WAAA,GAAAU,EAAA,EAAA,0CAAAmQ,CAAAA,IAAA,CAAAnQ,EAAA,CAAA,CAAA,MAAAke,GAAA,CAAA5e,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAA,GAAAC,CAAA,EAAAD,EAAA,EAAA,QAAA,EAAA,MAAAA,GAAAkC,CAAAA,MAAA,CAAA,CAAAxB,CAAA,GAAAV,EAAA,CAAAU,CAAA,CAAA,KAAAG,EAAA,CAAAC,EAAAA,CAAAA,QAAA,EAAA,EAAA,OAAA,CAAAN,EAAAM,CAAA,CAAAJ,EAAAA,QAAA,EAAA,CAAA,MAAAG,EAAA,EAAAb,EAAAkC,CAAAA,MAAA,CAAA,CAAA8C,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,KAAA,CAAA,CAAA,CAAArB,MAAA3D,EAAA,CAAAa,CAAA,EAAA,CAAA,CAAA,CAAA,CAAAb,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAA,KAAAA,GAAA,CAAA,CAAA,CAAAmE,EAAArD,CAAA,CAAA,CAAA,KAAA,KAAAiB,SAAA,CAAA,uIAAA,CAAA;AAAA,CAAA,IAAAD,CAAA,CAAAlB,GAAA,CAAA,CAAA,CAAAH,GAAA,CAAA,CAAA,OAAA,CAAAD,EAAAA,QAAA,EAAA,CAAAE,CAAA,CAAAA,CAAA0B,CAAAA,IAAA,CAAApC,EAAA,CAAA,CAAA,CAAAU,EAAAA,QAAA,EAAA,CAAA,IAAAV,GAAAU,CAAAmF,CAAAA,IAAA,EAAA,OAAAjF,GAAA,CAAAZ,EAAAgF,CAAAA,IAAA,CAAAhF,EAAA,CAAA,CAAAA,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAAS,EAAA,CAAA,CAAA,CAAAqB,EAAA,CAAA9B,EAAA,CAAA,CAAAmE,EAAAA,QAAA,EAAA,CAAA,GAAA,CAAAvD,EAAA,EAAA,IAAA,EAAAF,CAAAiF,CAAAA,MAAA,EAAAjF,CAAAiF,CAAAA,MAAA,EAAA,CAAA,OAAA,CAAA,GAAAlF,EAAA,CAAA,KAAAqB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8c,QAAAA,GAAA,CAAA5e,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,IAAA,EAAAA,CAAA,EAAAA,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,IAAAjC,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,CAAA,KAAA,IAAAxB,EAAA,CAAA,CAAAG,EAAA6X,KAAA,CAAAzY,CAAA,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAAS,CAAA,EAAA,CAAAG,CAAA,CAAAH,CAAA,CAAA,CAAAV,EAAA,CAAAU,CAAA,CAAA,OAAAG,EAAA,CAAAge,QAAAA,GAAA,CAAA7e,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAA,WAAAA,EAAA,MAAAsC,OAAAtC,EAAAV,EAAA,CAAAgD,MAAA0C,CAAAA,QAAA,CAAAhF,EAAAV,EAAA,CAAA,YAAA,CAAA,IAAA,CAAAU,CAAA,CAAA,CAAA,GAAAgY,KAAA+F,CAAAA,OAAA,CAAAze,EAAA,CAAA,GAAAU,CAAA,CAAA,QAAA,CAAAV,EAAA,CAAAC,EAAA,CAAA,CAAA,GAAAD,EAAA,CAAA,CAAA,GAAA,QAAA,EAAA,MAAAA,GAAA,CAAA,MAAA8e,GAAA,CAAA9e,EAAA,CAAAC,EAAA,CAAA,KAAAS;AAAAO,MAAAE,CAAAA,SAAA+G,CAAAA,QAAA9F,CAAAA,IAAA,CAAApC,EAAA,CAAA0I,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,GAAAhI,EAAA,EAAAV,EAAAmH,CAAAA,WAAA,GAAAzG,EAAA,CAAAV,EAAAmH,CAAAA,WAAAI,CAAAA,IAAA,CAAA,IAAA,KAAA,GAAA7G,EAAA,EAAA,KAAA,GAAAA,EAAA,CAAA,MAAAgY,MAAAC,CAAAA,IAAA,CAAA3Y,EAAA,CAAA,IAAA,WAAA,GAAAU,EAAA,EAAA,0CAAAmQ,CAAAA,IAAA,CAAAnQ,EAAA,CAAA,CAAA,MAAAoe,GAAA,CAAA9e,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAA,GAAAC,CAAA,EAAAD,EAAA,EAAA,QAAA,EAAA,MAAAA,GAAAkC,CAAAA,MAAA,CAAA,CAAAxB,CAAA,GAAAV,EAAA,CAAAU,CAAA,CAAA,KAAAG,EAAA,CAAAC,EAAAA,CAAAA,QAAA,EAAA,EAAA,OAAA,CAAAN,EAAAM,CAAA,CAAAJ,EAAAA,QAAA,EAAA,CAAA,MAAAG,EAAA,EAAAb,EAAAkC,CAAAA,MAAA,CAAA,CAAA8C,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,KAAA,CAAA,CAAA,CAAArB,MAAA3D,EAAA,CAAAa,CAAA,EAAA,CAAA,CAAA,CAAA,CAAAb,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAA,KAAAA,GAAA,CAAA,CAAA,CAAAmE,EAAArD,CAAA,CAAA,CAAA,KAAA,KAAAiB,SAAA,CAAA,uIAAA,CAAA;AAAA,CAAA,IAAAD,CAAA,CAAAlB,GAAA,CAAA,CAAA,CAAAH,GAAA,CAAA,CAAA,OAAA,CAAAD,EAAAA,QAAA,EAAA,CAAAE,CAAA,CAAAA,CAAA0B,CAAAA,IAAA,CAAApC,EAAA,CAAA,CAAA,CAAAU,EAAAA,QAAA,EAAA,CAAA,IAAAV,GAAAU,CAAAmF,CAAAA,IAAA,EAAA,OAAAjF,GAAA,CAAAZ,EAAAgF,CAAAA,IAAA,CAAAhF,EAAA,CAAA,CAAAA,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAAS,EAAA,CAAA,CAAA,CAAAqB,EAAA,CAAA9B,EAAA,CAAA,CAAAmE,EAAAA,QAAA,EAAA,CAAA,GAAA,CAAAvD,EAAA,EAAA,IAAA,EAAAF,CAAAiF,CAAAA,MAAA,EAAAjF,CAAAiF,CAAAA,MAAA,EAAA,CAAA,OAAA,CAAA,GAAAlF,EAAA,CAAA,KAAAqB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAgd,QAAAA,GAAA,CAAA9e,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,IAAA,EAAAA,CAAA,EAAAA,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,IAAAjC,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,CAAA,KAAA,IAAAxB,EAAA,CAAA,CAAAG,EAAA6X,KAAA,CAAAzY,CAAA,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAAS,CAAA,EAAA,CAAAG,CAAA,CAAAH,CAAA,CAAA,CAAAV,EAAA,CAAAU,CAAA,CAAA,OAAAG,EAAA,CAAAke,QAAAA,GAAA,CAAA\/e,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAb,CAAA,EAAAA,CAAA,CAAA,CAAA,MAAAA,GAAA,CAAAa,CAAA,CAAA,EAAA,CAAAZ,CAAA,EAAA,EAAA,CAAAS,CAAA,EAAA,CAAAse,QAAAA,GAAA,CAAAhf,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgf,QAAAA,GAAA,CAAAjf,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAif,QAAAA,GAAA,CAAAlf,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA;AAAAkf,QAAAA,GAAA,CAAAnf,EAAA,CAAA,CAAA,MAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAof,QAAAA,GAAA,CAAApf,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA,CAAA,CAAA,GAAAC,CAAA,CAAA,CAAA,CAAA,EAAAD,EAAA,CAAA,CAAA,CAAA,GAAAC,CAAA,CAAA,CAAA,CAAA,CAAAof,QAAAA,GAAA,CAAArf,EAAA,CAAAC,CAAA,CAAA,CAAA,EAAA,CAAAgf,EAAA,CAAAjf,EAAA,CAAAC,CAAA,CAAA,OAAAD,GAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAsf,QAAAA,GAAA,CAAAtf,EAAA,CAAA,CAAA,IAAA,EAAAoU,IAAAmL,CAAAA,KAAA,CAAAvf,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAAuf,QAAAA,GAAA,CAAAxf,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAAmU,KAAAmL,CAAAA,KAAA,CAAAvf,EAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAwf,QAAAA,GAAA,CAAAzf,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,IAAAG,EAAAuT,IAAA0E,CAAAA,GAAA,CAAApY,CAAA,CAAAI,EAAAA,CAAAsT,IAAAyE,CAAAA,GAAA,CAAAnY,CAAA,CAAA,KAAAoB,EAAA9B,EAAA,CAAA,CAAA,CAAA8B,CAAA7B,CAAA,CAAA,CAAA,CAAAW,GAAAA,CAAAZ,EAAA,CAAA,CAAA,CAAAY,CAAAX,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA6B,CAAA,CAAAhB,CAAA,CAAAF,EAAA,CAAAC,CAAA,CAAAZ,CAAA,CAAA,CAAA,CAAA,CAAA6B,CAAA,CAAAjB,CAAA,CAAAD,EAAA,CAAAE,CAAA,CAAAb,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAyf,QAAAA,GAAA,CAAA1f,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,MAAAse,GAAA,CAAAhf,EAAA,CAAAkf,EAAA,CAAAD,EAAA,CAAAhf,CAAA,CAAAD,EAAA,CAAA,CAAAU,CAAA,CAAA,CAAA,CAAAif,QAAAA,GAAA,CAAA3f,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,MAAAse,GAAA,CAAAhf,EAAA,CAAAkf,EAAA,CAAAjf,CAAA,CAAAS,CAAA,CAAA,CAAA,CAAAkf,QAAAA,GAAA,CAAA5f,EAAA;AAAAC,CAAA,CAAA,EAAA,CAAA,CAAA,IAAAS,CAAA,KAAA,CAAA,KAAAG,CAAA,CAAA,EAAA,CAAA,UAAAC,CAAA,CAAA,EAAA,CAAA,SAAAgB,EAAA,CAAA,EAAA,CAAA,iBAAAlB,EAAA,CAAA,CAAA,CAAA,CAAA,OAAAH,EAAA,CAAAT,EAAA,EAAAA,EAAA,CAAA,MAAAQ,EAAA,CAAA,EAAA,CAAA,IAAAwB,EAAA,CAAA,EAAA,CAAA,KAAAG,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAlC,CAAA,CAAA,CAAA,IAAAoC,EAAA,CAAA,CAAA,CAAA,CAAA,MAAA4C,EAAA,CAAA,CAAA,CAAA,OAAAd,EAAA,CAAAnE,EAAA,EAAAA,EAAA,EAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAAQ,EAAA,CAAA,CAAA,IAAA6D,EAAA,CAAA,CAAA,CAAA,CAAA,MAAAM,EAAA,CAAA,CAAA,CAAA,OAAAX,EAAA,CAAAhE,EAAA,EAAA,EAAAA,EAAA,CAAAA,EAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAgC,EAAA,IAAA,CAAA,GAAAhC,EAAAkC,CAAAA,MAAA,CAAA,MAAA,EAAA,KAAAgD,EAAA,CAAAC,GAAAnF,EAAA,CAAAA,EAAAkC,CAAAA,MAAA,CAAA,CAAA,CAAA2d,CAAAA,aAAA,CAAA\/Y,GAAAsN,IAAA6E,CAAAA,GAAA,CAAApY,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAAiG,EAAAA,CAAA,EAAA,KAAAE,GAAA,EAAA,CAAAC,GAAAlH,EAAA0I,CAAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAAoX,CAAAA,MAAA,CAAA,CAAA9f,EAAA,CAAAC,EAAA,CAAA,EAAA,CAAA,IAAAS,GAAAT,EAAA8f,CAAAA,QAAAnf,GAAA,GAAAE,EAAA,CAAAkf,EAAA,CAAA,CAAA,CAAA\/f,EAAAggB,CAAAA,QAAA,CAAApf,CAAA,CAAA,CAAAiB,EAAA,CAAAke,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAlf,EAAA,CAAA,CAAAJ,EAAA,CAAAsf,EAAA,CAAA,CAAA,CAAAhgB,EAAA,CAAA,IAAA,CAAAc,EAAA,EAAAgB,EAAA,CAAA9B,EAAA,EAAA,CAAA,QAAAA,EAAA,CAAAU,EAAA,EAAA,CAAA,CAAA,CAAAV,EAAA,CAAA,CAAA,CAAA+f,CAAAA,QAAA,CAAA,CAAA3a,GAAA2Z,EAAA,CAAAle,CAAA;AAAAiB,EAAA,CAAA9B,EAAA,CAAAA,EAAAkC,CAAAA,MAAA,CAAA,CAAA,CAAA6d,CAAAA,QAAA,CAAAtf,EAAA,CAAA,KAAA4E,GAAArF,EAAA,CAAA,CAAA,CAAAkgB,CAAAA,MAAA,KAAAxb,GAAA1E,EAAA,CAAA,CAAA,CAAAmgB,CAAAA,KAAA,KAAApa,GAAArB,EAAA,KAAA4B,GAAA5B,EAAA,CAAAT,GAAA8B,EAAA,CAAAU,GAAA,CAAA,CAAA,KAAA,IAAAxG,GAAA,CAAA,CAAAA,EAAA,CAAAD,EAAAkC,CAAAA,MAAA,CAAA,CAAA,CAAAjC,EAAA,EAAA,CAAA,CAAA,IAAA,CAAA,SAAAa,EAAA,CAAA,CAAAd,EAAA,CAAAC,EAAA,CAAA,KAAA,CAAA,MAAAO,EAAA,CAAA,OAAAwB,EAAA,CAAA,SAAAG,EAAA,CAAA,cAAAE,EAAA,CAAA,CAAArC,EAAA,CAAAC,EAAA,CAAA,IAAA,EAAA,CAAA,CAAAA,EAAA,EAAAwG,EAAA,EAAApE,EAAA,CAAAxB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA4F,EAAA,GAAA,CAAA,CAAA,CAAA3E,EAAA,GAAAlB,EAAA,GAAAZ,EAAA,CAAAggB,EAAA,CAAA,CAAA,CAAA7d,EAAA,CAAAtB,CAAA,CAAA,CAAAZ,EAAA,CAAA+f,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAhgB,EAAA,CAAA,CAAAc,EAAA,CAAAkf,EAAA,CAAA,CAAA,CAAA9Y,EAAA,CAAA,IAAA,CAAAlH,EAAA,EAAAC,EAAA,CAAAiH,EAAA,EAAA,EAAA9B,EAAA,CAAA2Z,EAAA,CAAAle,CAAA,CAAAiB,EAAA,CAAAhB,EAAA,CAAAL,EAAA,CAAA,EAAA2E,EAAA,CAAAvE,CAAA,CAAA,CAAA,KAAA,EAAA,GAAAqE,EAAA,GAAAA,EAAA,CAAAE,EAAA,CAAA,KAAAf,GAAAhC,EAAA,CAAA4C,EAAA,CAAAd,EAAA,CAAA9B,EAAA,CAAA4C,EAAA,CAAA,CAAA,CAAA,CAAAX,GAAAa,EAAA,CAAA9C,EAAA,CAAAsC,EAAA,CAAAX,EAAA,EAAAmB,EAAA,CAAA9C,EAAA,EAAAsC,EAAA,CAAA,CAAA,CAAAS,GAAA,CAAAgP,IAAAoF,CAAAA,GAAA,CAAA,GAAA,CAAApU,EAAA,CAAAgP,IAAAqF,CAAAA,GAAA,CAAApV,EAAA,CAAAC,EAAA,CAAA,CAAAuO,GAAAA,EAAA,IAAA,GAAAnS,CAAA,CAAAV,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,EAAA,IAAA,EAAA,CAAAS,CAAAwf,CAAAA,MAAArN;AAAA7Q,EAAA+Q,GAAAA,CAAA\/Q,EAAA,CAAA,CAAA,CAAA+Q,CAAAF,EAAA,CAAA,CAAA,CAAAE,CAAA\/Q,EAAA,CAAA,CAAA,CAAA+Q,CAAAF,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAAE,EAAA,CAAA,CAAA\/S,EAAAA,CAAAkf,EAAA,CAAAC,EAAA,CAAA9Z,EAAA,CAAA,CAAAD,EAAA,CAAA,KAAA,IAAAnF,GAAA,CAAAA,CAAA,EAAA,CAAAS,GAAA,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAAA,EAAA,EAAAT,EAAA,CAAAgE,EAAA,CAAAwb,EAAA,CAAAT,EAAA,CAAAxe,EAAA,CAAAR,EAAA,CAAA,CAAAQ,EAAA,CAAA4f,EAAA,CAAA,CAAA1f,EAAA,CAAA,CAAA4F,EAAA,CAAAmZ,EAAA,CAAAR,EAAA,CAAAze,EAAA,CAAAR,EAAA,CAAA,CAAAQ,EAAA,CAAA4f,EAAA,CAAA1f,EAAA,CAAA,CAAAuG,EAAAZ,CAAAA,IAAA,CAAApC,EAAA,CAAA,CAAA8C,CAAAV,CAAAA,IAAA,CAAAC,EAAA,CAAA5B,GAAA,CAAA4B,EAAAP,GAAA,CAAA9B,EAAA,CAAA,IAAAgP,GAAA,CAAAiM,EAAA,CAAAC,EAAA,CAAAO,EAAA,CAAA7M,EAAA,CAAA7Q,EAAA,CAAA+Q,EAAA,CAAA,CAAA,CAAA3N,EAAA,CAAA,CAAAkB,EAAA,CAAA2Y,EAAA,CAAAze,EAAA,CAAAyS,EAAA,CAAA,CAAAhP,EAAA,CAAA+a,EAAA,CAAAxe,EAAA,CAAAyS,EAAA,CAAA,GAAAE,EAAA,CAAA,CAAA,CAAAlT,EAAA,EAAA,GAAA,CAAA8S,EAAA,GAAAsM,EAAA,CAAA3a,EAAA,CAAA4B,EAAA,CAAA,CAAAQ,EAAA,IAAAC,CAAAV,CAAAA,IAAA,CAAAC,EAAA,CAAA,CAAA5B,EAAA,CAAA4B,EAAA,GAAA6M,EAAA,EAAAkM,EAAA,CAAAtZ,EAAA,CAAA9B,EAAA,CAAA,CAAA6C,EAAA,IAAAG,EAAAZ,CAAAA,IAAA,CAAApC,EAAA,CAAA,CAAA8B,EAAA,CAAA9B,EAAA,EAAAiD,EAAA,CAAApG,EAAA,CAAAuE,EAAA,CAAArD,EAAA,CAAA,CAAAsC,CAAAA,CAAAtE,EAAA,CAAA,CAAA,CAAA6S,GAAAA,CAAA7S,EAAA,CAAAA,EAAAkC,CAAAA,MAAA,CAAA,CAAA,CAAA,KAAA6Q,EAAA,CAAAtM,EAAA,EAAA,CAAA,CAAAQ,EAAA\/E,CAAAA,MAAA,EAAA,CAAA,CAAA6E,CAAA7E,CAAAA,MAAA,IAAA,CAAA+C,EAAA,EAAA,CAAAN,EAAA,EAAAxC,EAAA,EAAA,CAAAlC,CAAAA,CAAA,CAAAS,GAAAA,CAAA0e,EAAA,CAAA9a,CAAA6b,CAAAA,KAAA,CAAAtN,EAAAsN,CAAAA,KAAA,CAAA,CAAAnB,EAAA,CAAA1a,CAAA6b,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAtN,EAAAsN,CAAAA,KAAA,KAAAzf,EAAA,CAAA,CAAA,CAAAA,EAAA,CAAAV,EAAAkC,CAAAA,MAAA,CAAAxB,EAAA,EAAA,CAAA,CAAA,IAAA,CAAA,SAAAI,EAAA;AAAA,cAAAF,EAAA,CAAA,CAAAZ,EAAA,CAAAU,EAAA,CAAA,IAAAE,EAAA,CAAAC,CAAA,CAAA,CAAAZ,CAAA,CAAA8e,EAAA,CAAAle,CAAA,CAAAiB,EAAA,CAAAhB,EAAA,CAAAL,EAAA,CAAA,MAAA,CAAA,CAAAK,CAAAA,CAAA6e,EAAA,CAAArb,CAAA6b,CAAAA,KAAA,CAAAhB,EAAA,CAAAG,EAAA,CAAAL,EAAA,CAAA3a,CAAA6b,CAAAA,KAAA,CAAAzf,EAAA,CAAA,CAAA,CAAA,CAAA,EAAAT,CAAA,EAAAmF,EAAA,CAAA,CAAAxE,GAAAA,CAAA,EAAA,KAAA,IAAAZ,GAAA,CAAAA,CAAA,EAAA,CAAAC,GAAAD,EAAA,CAAA,CAAA,EAAAC,EAAA,CAAAA,EAAA,EAAAD,EAAA,CAAAY,EAAAyF,CAAAA,IAAA,CAAAoZ,EAAA,CAAA3e,CAAA,CAAAwD,CAAA6b,CAAAA,KAAA,CAAA,CAAA,CAAAC,EAAA,CAAAngB,EAAA,CAAA,CAAA,OAAAW,GAAA,CAAAqS,EAAAA,CAAA,EAAAE,GAAAA,CAAA,EAAA,IAAA,CAAA,CAAApM,CAAA7E,CAAAA,MAAA,EAAA,CAAA,CAAA+E,EAAA\/E,CAAAA,MAAA,CAAA,CAAA+B,EAAA,CAAAgD,EAAA,CAAA,CAAA,CAAA,KAAAjH,EAAA,CAAA,CAAA,CAAAA,EAAA,CAAA+G,CAAA7E,CAAAA,MAAA,CAAAlC,EAAA,EAAA,CAAA,GAAA,CAAAof,EAAA,CAAAnb,EAAA,CAAA8C,CAAA,CAAA\/G,EAAA,CAAA,CAAA,CAAA,CAAAsG,EAAA,CAAAS,CAAA,CAAA\/G,EAAA,CAAA,MAAA,CAAA,GAAAqC,EAAA,EAAA4C,EAAA,CAAA,GAAAA,EAAA,EAAAN,EAAA,EAAAoO,EAAA,CAAAE,EAAA5M,CAAAA,IAAA,CAAA\/B,CAAA6b,CAAAA,KAAAzX,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,IAAA,CAAA0W,EAAA,CAAAnb,EAAA,CAAAqC,EAAA,CAAA,CAAA,CAAAtG,EAAAA,CAAA2f,EAAA,CAAArb,CAAA6b,CAAAA,KAAA,CAAAb,EAAA,CAAAL,EAAA,CAAA3Y,EAAA,CAAArC,EAAA,CAAA,CAAA,CAAA,CAAAub,EAAA,CAAAvb,EAAA,CAAAqC,EAAA,CAAA,CAAA,CAAA,CAAA,KAAA,IAAArG,GAAA,CAAAA,CAAA,EAAA,CAAAS,GAAAT,EAAA,CAAA,CAAA,EAAAS,EAAA,CAAAA,EAAA,EAAAT,EAAA,CAAA,CAAAA,EAAAA,CAAAwf,EAAA,CAAAzf,EAAA,CAAAsE,CAAA6b,CAAAA,KAAA,CAAAC,EAAA,CAAA1f,EAAA,CAAA,IAAA,CAAA,CAAA8e,EAAA,CAAAvf,EAAA,CAAAqG,EAAA,CAAA,CAAA,KAAA2M,GAAA5M,CAAAA,IAAA,CAAApG,EAAA,CAAA,CAAA8G,CAAAsZ,CAAAA,KAAA,EAAApZ;EAAAoZ,CAAAA,KAAA,EAAA,CAAA,CAAA,IAAAjB,GAAA,CAAAnb,EAAA,CAAAqC,EAAA,CAAA,GAAAtG,EAAA,CAAAsf,EAAA,CAAAL,EAAA,CAAA3Y,EAAA,CAAArC,EAAA,CAAA,CAAA,CAAAhE,EAAA,CAAAuf,EAAA,CAAAvb,EAAA,CAAAqC,EAAA,CAAA,CAAA,CAAA,CAAA2M,EAAA5M,CAAAA,IAAA,CAAAsZ,EAAA,CAAArb,CAAA6b,CAAAA,KAAA,CAAAngB,EAAA,CAAA,CAAAC,EAAA,CAAA,CAAA0f,EAAA,CAAArb,CAAA6b,CAAAA,KAAA,CAAAngB,EAAA,CAAA,GAAA,CAAA,CAAAC,EAAA,CAAA,CAAA0f,EAAA,CAAArb,CAAA6b,CAAAA,KAAA,CAAAngB,EAAA,CAAA,GAAA,CAAAC,EAAA,CAAA,CAAA0f,EAAA,CAAArb,CAAA6b,CAAAA,KAAA,CAAAngB,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA8G,CAAAsZ,CAAAA,KAAA,EAAA,CAAApZ,EAAAoZ,CAAAA,KAAA,EAAA,CAAArgB,EAAAA,CAAAkf,EAAA,CAAAF,EAAA,CAAAjY,CAAA\/G,CAAA+G,CAAA7E,CAAAA,MAAAlC,CAAA,CAAAA,CAAA,CAAAiH,EAAAhH,CAAAgH,EAAA\/E,CAAAA,MAAAjC,CAAA,CAAAA,CAAA,CAAA,CAAA,EAAA,CAAAA,GAAAA,CAAA4S,EAAAsN,CAAAA,KAAAzf,GAAAA,CAAAye,EAAA,CAAAG,EAAA,CAAAL,EAAA,CAAAhf,EAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,IAAAqE,EAAA,EAAAM,EAAA,CAAA,GAAAA,EAAA,EAAAM,EAAA,EAAA8N,EAAA,CAAAI,EAAA9M,CAAAA,IAAA,CAAApG,EAAAyI,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA1I,EAAAA,CAAA2f,EAAA,CAAA1f,EAAA,CAAAS,EAAA,CAAA0E,EAAA,CAAA,KAAA,IAAA1E,GAAA,CAAAA,CAAA,EAAA,CAAAG,GAAA,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAAA,EAAA,EAAAH,EAAA,CAAAA,EAAA,CAAA+e,EAAA,CAAAzf,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAAmgB,EAAA,CAAAvf,EAAA,CAAA,CAAAsS,EAAA9M,CAAAA,IAAA,CAAA3F,EAAA,CAAA,CAAA,IAAAG,EAAA,CAAA6e,EAAA,CAAA1f,CAAA,CAAAC,EAAA,CAAA,GAAA,CAAA,CAAAa,EAAA,EAAA,GAAA,CAAAqS,EAAA9M,CAAAA,IAAA,CAAAsZ,EAAA,CAAA9e,CAAA,CAAAH,EAAA,CAAAI,EAAA,CAAA,CAAA6e,EAAA,CAAA1f,EAAA,CAAAS,EAAA,CAAAI,EAAA,CAAA,CAAA6e,EAAA,CAAA1f,EAAA,CAAAS,EAAA,CAAA,CAAAI,EAAA,CAAA,CAAA6e,EAAA,CAAA9e,CAAA,CAAAH,EAAA,CAAA,CAAAI,EAAA,CAAA,CAAA,CAAA,MAAAiG,EAAA2E,CAAAA,MAAA,CAAAyH,EAAA,CAAAlM,EAAAoB,CAAAA,OAAA,EAAA;AAAA4K,EAAA,CAAA,CAAAqN,QAAAA,GAAA,CAAAtgB,EAAA,CAAAC,CAAA,CAAA,EAAA,CAAA,CAAA,MAAA2f,GAAA,CAAA,QAAA,CAAA5f,CAAA,CAAAC,CAAA,CAAA,EAAA,CAAA,CAAA,IAAAS,CAAA,KAAA,CAAA,WAAAG,EAAA,CAAA,EAAA,CAAA,KAAAC,EAAA,CAAA,EAAA,CAAA,KAAAgB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA7B,CAAA,IAAA,CAAA,GAAAD,CAAAkC,CAAAA,MAAA,CAAA,MAAA,EAAAtB,EAAAA,CAAA,GAAAA,CAAA,GAAAA,EAAA,CAAAA,CAAAC,EAAAD,CAAAH,EAAAA,CAAAiY,KAAA+F,CAAAA,OAAA,CAAAze,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAAA,CAAA0B,CAAAA,GAAA,CAAA,CAAA,CAAA,EAAA1B,EAAA,CAAA,EAAAC,EAAA,CAAA,SAAAS,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAAV,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAA,CAAA,EAAA,GAAAD,CAAAyB,CAAAA,MAAA,EAAAzB,CAAA4F,CAAAA,IAAA,CAAA,CAAA,GAAA2Y,EAAA,CAAAve,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAAD,GAAA,CAAA,CAAA2f,MAAA,CAAA1f,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAsf,SAAAtf,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAsf,EAAA,GAAA,CAAAG,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAD,SAAA,CAAA,CAAAJ,cAAA,CAAA,CAAA,CAAA,CAAA7d,GAAA,CAAA,CAAA,CAAAG,GAAA,CAAA,CAAAE,GAAA7B,EAAA,CAAA,CAAA,CAAA,CAAAyE,GAAAxE,CAAAyB,CAAAA,MAAA+C,CAAA,CAAA,KAAA,IAAAjF,GAAA,CAAA,CAAAA,EAAA,CAAAS,CAAAyB,CAAAA,MAAA,CAAAlC,EAAA,EAAA,CAAA,CAAA,IAAAC,GAAA6B,EAAA,EAAA9B,EAAA,GAAAiF,EAAA,CAAAxE,CAAA,CAAAT,EAAA,CAAA,CAAA0f,EAAA,CAAArd,EAAA8d,CAAAA,KAAA,CAAA1f,CAAA,CAAAT,EAAA,CAAA,CAAAY,CAAA,CAAA,IAAAwe,EAAA,CAAA\/c,EAAA8d,CAAAA,KAAA,CAAAlgB,EAAA,CAAA,CAAA,QAAA;IAAAS,GAAA8e,EAAA,CAAAvf,EAAA,CAAAoC,EAAA8d,CAAAA,KAAA,CAAA,IAAAhe,EAAA,EAAAzB,EAAA,CAAAV,EAAA,CAAAiF,EAAA,EAAA,CAAAjD,EAAA,CAAA,CAAA,GAAAG,EAAA,CAAArB,EAAA,CAAA,QAAAkB,GAAA,CAAA,CAAA,CAAA,CAAAK,EAAA,CAAA,CAAA8d,MAAAlgB,EAAA,CAAA8f,SAAAtf,CAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA+f,EAAA,EAAA,CAAAG,OAAAZ,EAAA,CAAAL,EAAA,CAAA5c,EAAA8d,CAAAA,KAAA,CAAAlgB,EAAA,CAAA,CAAA,CAAAggB,SAAAvf,EAAA,CAAAmf,cAAA1d,EAAA,CAAA3B,GAAA6F,CAAAA,IAAA,CAAAhE,EAAA,CAAA,CAAA,MAAA7B,GAAA,CAAA,CAAA,CAAA0f,CAAAA,MAAA,EAAA,IAAA,GAAAxf,CAAA,CAAAF,EAAA,CAAA,CAAA,CAAA,EAAA,IAAA,EAAA,CAAAE,CAAAwf,CAAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA1f,EAAA,CAAA,CAAAR,EAAA,CAAAC,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAAsgB,QAAAA,GAAA,CAAAvgB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAA+f,QAAAA,GAAA,CAAAzgB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA;AAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAsgB,EAAA,CAAAtf,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAA6f,EAAA,CAAAtf,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA4gB,QAAAA,GAAA,CAAA5gB,EAAA,CAAA,CAAA,IAAAC,EAAA4gB,EAAA,CAAA7gB,EAAA,CAAAU,EAAAA,CAAA,IAAAogB,MAAA,CAAA7gB,CAAA,CAAA,OAAA8gB,GAAAC,CAAAA,GAAA,CAAAhhB,EAAA,CAAAU,CAAA,CAAA,CAAAA,CAAA,CAAAmgB,QAAAA,GAAA,CAAA7gB,EAAA,CAAA,CAAA,MAAA,SAAA,CAAAA,CAAA,CAAA,CAAA,GAAA,CAAAA,CAAAkC,CAAAA,MAAA,CAAA,MAAA,EAAA,KAAAjC,EAAAD,CAAAkC,CAAAA,MAAAjC,CAAA,CAAA,OAAAD,EAAA8f,CAAAA,MAAA,CAAA,QAAA,CAAA9f,CAAA,CAAAU,CAAA,CAAAG,EAAA,CAAAC,EAAA,CAAA,CAAA,MAAAD,GAAA;AAAAZ,CAAA,CAAAD,CAAAqG,CAAAA,IAAA,CAAA3F,CAAA,CAAAugB,EAAA,CAAAvgB,CAAA,CAAAI,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAAd,CAAAqG,CAAAA,IAAA,CAAA3F,CAAA,CAAAugB,EAAA,CAAAvgB,CAAA,CAAAI,EAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAb,CAAA,CAAA,CAAA,CAAA,GAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA2B,CAAAA,IAAA,CAAA,GAAA,CAAAuf,CAAAA,UAAA,CAAAC,EAAA,CAAA,IAAA,CAAA,CAAA,CAAAb,EAAA,CAAAtgB,EAAAohB,CAAAA,gBAAA,CAAAphB,EAAAqhB,CAAAA,MAAA,CAAArhB,EAAAqhB,CAAAA,MAAAnf,CAAAA,MAAA,CAAAlC,EAAAqhB,CAAAA,MAAA3f,CAAAA,GAAA,CAAA,QAAA,CAAAzB,CAAA,CAAAS,CAAA,CAAA,CAAAG,CAAAA,CAAAkT,EAAA,CAAA9T,CAAA,CAAA,CAAA,CAAA,OAAA,CAAAY,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAAb,EAAAshB,CAAAA,SAAA,CAAA5gB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA0gB,iBAAAphB,EAAAohB,CAAAA,gBAAA,CAAAG,KAAA,IAAAA,CAAAvhB,EAAA8Z,CAAAA,WAAA,CAAA0H,SAAA,EAAA,CAAAC,UAAA,EAAA,CAAAC,WAAA,EAAA,CAAAC,OAAAA,QAAA,CAAA3hB,CAAA,CAAA,CAAA,MAAAoU,KAAA0E,CAAAA,GAAA,CAAA9Y,CAAA,CAAAoU,IAAAC,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAuN,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAX,QAAAA,GAAA,CAAAjhB,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAA,EAAAD,EAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAAD,EAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA4hB,QAAAA,GAAA,CAAA7hB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA;GAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAohB,QAAAA,GAAA,CAAA9hB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAA4hB,EAAA,CAAA5gB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAmhB,EAAA,CAAA5gB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA;AAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA+hB,QAAAA,GAAA,CAAA\/hB,EAAA,CAAAC,CAAA,CAAA,CAAA,GAAA,IAAA,EAAAD,EAAA,CAAA,MAAA,EAAA,KAAAa,CAAA,IAAA,IAAA,EAAAb,EAAA,CAAA,IAAA,EAAA,EAAA,KAAA,CAAAc,CAAAA,CAAA,EAAA,KAAAgB,EAAAb,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,KAAAa,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAAiB,CAAAI,CAAAA,MAAA,CAAArB,CAAA,EAAA,CAAA,CAAA,IAAAH,GAAAoB,CAAA,CAAAjB,CAAA,CAAA,EAAA,EAAAZ,CAAAqO,CAAAA,OAAA,CAAA5N,EAAA,CAAA,GAAAI,CAAA,CAAAJ,EAAA,CAAA,CAAAV,EAAA,CAAAU,EAAA,CAAA,CAAA,CAAA,CAAA,GAAAO,MAAAC,CAAAA,qBAAA,CAAA,IAAAY,CAAA,CAAAb,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAA,CAAAa,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAAiB,CAAAI,CAAAA,MAAA,CAAArB,CAAA,EAAA,CAAAH,EAAA,CAAAoB,CAAA,CAAAjB,CAAA,CAAA,CAAA,CAAA,EAAAZ,CAAAqO,CAAAA,OAAA,CAAA5N,EAAA,CAAA,EAAAO,MAAAE,CAAAA,SAAAE,CAAAA,oBAAAe,CAAAA,IAAA,CAAApC,EAAA,CAAAU,EAAA,CAAA,GAAAI,CAAA,CAAAJ,EAAA,CAAA,CAAAV,EAAA,CAAAU,EAAA,CAAA,CAAA,OAAAI,EAAA,CAAAkhB,QAAAA,GAAA,CAAAhiB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAA,WAAAA,EAAA,MAAAsC,OAAAtC,EAAAV,EAAA,CAAAgD,MAAA0C,CAAAA,QAAA,CAAAhF,EAAAV,EAAA,CAAA,YAAA,CAAA,IAAA,CAAAU,CAAA,CAAA,CAAA,GAAAgY,KAAA+F,CAAAA,OAAA,CAAAze,EAAA,CAAA,GAAAU,CAAA,CAAA,QAAA,CAAAV,EAAA;AAAAC,EAAA,CAAA,CAAA,GAAAD,EAAA,CAAA,CAAA,GAAA,QAAA,EAAA,MAAAA,GAAA,CAAA,MAAAiiB,GAAA,CAAAjiB,EAAA,CAAAC,EAAA,CAAA,KAAAS,GAAAO,MAAAE,CAAAA,SAAA+G,CAAAA,QAAA9F,CAAAA,IAAA,CAAApC,EAAA,CAAA0I,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,GAAAhI,EAAA,EAAAV,EAAAmH,CAAAA,WAAA,GAAAzG,EAAA,CAAAV,EAAAmH,CAAAA,WAAAI,CAAAA,IAAA,CAAA,IAAA,KAAA,GAAA7G,EAAA,EAAA,KAAA,GAAAA,EAAA,CAAA,MAAAgY,MAAAC,CAAAA,IAAA,CAAA3Y,EAAA,CAAA,IAAA,WAAA,GAAAU,EAAA,EAAA,0CAAAmQ,CAAAA,IAAA,CAAAnQ,EAAA,CAAA,CAAA,MAAAuhB,GAAA,CAAAjiB,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAA,GAAAC,CAAA,EAAAD,EAAA,EAAA,QAAA,EAAA,MAAAA,GAAAkC,CAAAA,MAAA,CAAA,CAAAxB,CAAA,GAAAV,EAAA,CAAAU,CAAA,CAAA,KAAAG,EAAA,CAAAC,EAAAA,CAAAA,QAAA,EAAA,EAAA,OAAA,CAAAN,EAAAM,CAAA,CAAAJ,EAAAA,QAAA,EAAA,CAAA,MAAAG,EAAA,EAAAb,EAAAkC,CAAAA,MAAA,CAAA,CAAA8C,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,KAAA,CAAA,CAAA,CAAArB,MAAA3D,EAAA,CAAAa,CAAA,EAAA,CAAA,CAAA,CAAA,CAAAb,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAA,KAAAA,GAAA,CAAA,CAAA,CAAAmE,EAAArD,CAAA,CAAA,CAAA,KAAA,KAAAiB,SAAA,CAAA,uIAAA,CAAA;AAAA,CAAA,IAAAD,CAAA,CAAAlB,GAAA,CAAA,CAAA,CAAAH,GAAA,CAAA,CAAA,OAAA,CAAAD,EAAAA,QAAA,EAAA,CAAAE,CAAA,CAAAA,CAAA0B,CAAAA,IAAA,CAAApC,EAAA,CAAA,CAAA,CAAAU,EAAAA,QAAA,EAAA,CAAA,IAAAV,GAAAU,CAAAmF,CAAAA,IAAA,EAAA,OAAAjF,GAAA,CAAAZ,EAAAgF,CAAAA,IAAA,CAAAhF,EAAA,CAAA,CAAAA,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAAS,EAAA,CAAA,CAAA,CAAAqB,EAAA,CAAA9B,EAAA,CAAA,CAAAmE,EAAAA,QAAA,EAAA,CAAA,GAAA,CAAAvD,EAAA,EAAA,IAAA,EAAAF,CAAAiF,CAAAA,MAAA,EAAAjF,CAAAiF,CAAAA,MAAA,EAAA,CAAA,OAAA,CAAA,GAAAlF,EAAA,CAAA,KAAAqB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAmgB,QAAAA,GAAA,CAAAjiB,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,IAAA,EAAAA,CAAA,EAAAA,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,IAAAjC,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,CAAA,KAAA,IAAAxB,EAAA,CAAA,CAAAG,EAAA6X,KAAA,CAAAzY,CAAA,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAAS,CAAA,EAAA,CAAAG,CAAA,CAAAH,CAAA,CAAA,CAAAV,EAAA,CAAAU,CAAA,CAAA,OAAAG,EAAA,CAAAqhB,QAAAA,GAAA,CAAAliB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD;CAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAyhB,QAAAA,GAAA,CAAAniB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAiiB,EAAA,CAAAjhB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAwhB,EAAA,CAAAjhB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAoiB,QAAAA,GAAA,CAAApiB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA;AAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAA2hB,QAAAA,GAAA,CAAAriB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAmiB,EAAA,CAAAnhB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAA0hB,EAAA,CAAAnhB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAsiB,QAAAA,GAAA,CAAAtiB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAA,WAAAA;AAAA,MAAAsC,OAAAtC,EAAAV,EAAA,CAAAgD,MAAA0C,CAAAA,QAAA,CAAAhF,EAAAV,EAAA,CAAA,YAAA,CAAA,IAAA,CAAAU,CAAA,CAAA,CAAA,GAAAgY,KAAA+F,CAAAA,OAAA,CAAAze,EAAA,CAAA,GAAAU,CAAA,CAAA,QAAA,CAAAV,EAAA,CAAAC,EAAA,CAAA,CAAA,GAAAD,EAAA,CAAA,CAAA,GAAA,QAAA,EAAA,MAAAA,GAAA,CAAA,MAAAuiB,GAAA,CAAAviB,EAAA,CAAAC,EAAA,CAAA,KAAAS,GAAAO,MAAAE,CAAAA,SAAA+G,CAAAA,QAAA9F,CAAAA,IAAA,CAAApC,EAAA,CAAA0I,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,GAAAhI,EAAA,EAAAV,EAAAmH,CAAAA,WAAA,GAAAzG,EAAA,CAAAV,EAAAmH,CAAAA,WAAAI,CAAAA,IAAA,CAAA,IAAA,KAAA,GAAA7G,EAAA,EAAA,KAAA,GAAAA,EAAA,CAAA,MAAAgY,MAAAC,CAAAA,IAAA,CAAA3Y,EAAA,CAAA,IAAA,WAAA,GAAAU,EAAA,EAAA,0CAAAmQ,CAAAA,IAAA,CAAAnQ,EAAA,CAAA,CAAA,MAAA6hB,GAAA,CAAAviB,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAA,GAAAC,CAAA,EAAAD,EAAA,EAAA,QAAA,EAAA,MAAAA,GAAAkC,CAAAA,MAAA,CAAA,CAAAxB,CAAA,GAAAV,EAAA,CAAAU,CAAA,CAAA,KAAAG,EAAA,CAAAC,EAAAA,CAAAA,QAAA,EAAA,EAAA,OAAA,CAAAN,EAAAM,CAAA,CAAAJ,EAAAA,QAAA,EAAA,CAAA,MAAAG,EAAA;AAAAb,EAAAkC,CAAAA,MAAA,CAAA,CAAA8C,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,KAAA,CAAA,CAAA,CAAArB,MAAA3D,EAAA,CAAAa,CAAA,EAAA,CAAA,CAAA,CAAA,CAAAb,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAA,KAAAA,GAAA,CAAA,CAAA,CAAAmE,EAAArD,CAAA,CAAA,CAAA,KAAA,KAAAiB,SAAA,CAAA,uIAAA,CAAA,CAAA,CAAA,IAAAD,CAAA,CAAAlB,GAAA,CAAA,CAAA,CAAAH,GAAA,CAAA,CAAA,OAAA,CAAAD,EAAAA,QAAA,EAAA,CAAAE,CAAA,CAAAA,CAAA0B,CAAAA,IAAA,CAAApC,EAAA,CAAA,CAAA,CAAAU,EAAAA,QAAA,EAAA,CAAA,IAAAV,GAAAU,CAAAmF,CAAAA,IAAA,EAAA,OAAAjF,GAAA,CAAAZ,EAAAgF,CAAAA,IAAA,CAAAhF,EAAA,CAAA,CAAAA,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAAS,EAAA,CAAA,CAAA,CAAAqB,EAAA,CAAA9B,EAAA,CAAA,CAAAmE,EAAAA,QAAA,EAAA,CAAA,GAAA,CAAAvD,EAAA,EAAA,IAAA,EAAAF,CAAAiF,CAAAA,MAAA,EAAAjF,CAAAiF,CAAAA,MAAA,EAAA,CAAA,OAAA,CAAA,GAAAlF,EAAA,CAAA,KAAAqB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAygB,QAAAA,GAAA,CAAAviB,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,IAAA,EAAAA,CAAA,EAAAA,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,IAAAjC,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,CAAA,KAAA,IAAAxB;AAAA,CAAA,CAAAG,EAAA6X,KAAA,CAAAzY,CAAA,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAAS,CAAA,EAAA,CAAAG,CAAA,CAAAH,CAAA,CAAA,CAAAV,EAAA,CAAAU,CAAA,CAAA,OAAAG,EAAA,CAAA2hB,QAAAA,GAAA,CAAAxiB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAA+hB,QAAAA,GAAA,CAAAziB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAuiB,EAAA,CAAAvhB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA;AAAA8hB,EAAA,CAAAvhB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA0iB,QAAAA,GAAA,CAAA1iB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAiiB,QAAAA,GAAA,CAAA3iB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA;AAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAkiB,QAAAA,GAAA,CAAA5iB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAA0iB,EAAA,CAAA1hB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAiiB,EAAA,CAAA1hB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA6iB,QAAAA,GAAA,CAAA7iB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC;CAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAoiB,QAAAA,GAAA,CAAA9iB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAA4iB,EAAA,CAAA5hB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAmiB,EAAA,CAAA5hB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA+iB,QAAAA,GAAA,CAAA\/iB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA;GAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAsiB,QAAAA,GAAA,CAAAhjB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAA8iB,EAAA,CAAA9hB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAqiB,EAAA,CAAA9hB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA;AAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAijB,QAAAA,GAAA,CAAAjjB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAwiB,QAAAA,GAAA,CAAAljB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAgjB,EAAA,CAAAhiB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAuiB,EAAA,CAAAhiB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA;AAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAmjB,QAAAA,GAAA,CAAAnjB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAA0iB,QAAAA,GAAA,CAAApjB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAkjB,EAAA,CAAAliB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA;AAAAyiB,EAAA,CAAAliB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAqjB,QAAAA,GAAA,CAAArjB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAA4iB,QAAAA,GAAA,CAAAtjB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAojB,EAAA,CAAApiB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA;AAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAA2iB,EAAA,CAAApiB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAujB,QAAAA,GAAA,CAAAvjB,EAAA,CAAA,CAAA,IAAAC,EAAAD,EAAAwjB,CAAAA,OAAA,CAAA9iB,EAAAV,EAAA2D,CAAAA,KAAA,CAAA9C,EAAAb,EAAAyjB,CAAAA,KAAA,CAAA3iB,EAAAd,EAAA0jB,CAAAA,QAAA,CAAA5hB,GAAA9B,EAAA2jB,CAAAA,OAAA,CAAA\/iB,GAAAJ,EAAA,EAAAojB,CAAAA,MAAA,EAAA,CAAAnjB,GAAAD,EAAA,EAAAojB,CAAAA,MAAA,EAAA,CAAA5hB,GAAAxB,EAAA,EAAAojB,CAAAA,MAAA,CAAA,IAAA,CAAApjB,GAAA,EAAAqjB,CAAAA,SAAA,CAAA,QAAA,EAAA,CAAApjB,EAAAqC,CAAAA,OAAA,CAAArC,EAAAqC,CAAAA,OAAAghB,CAAAA,KAAA,EAAA,CAAA9hB,EAAAc,CAAAA,OAAA,EAAAd,EAAAc,CAAAA,OAAAghB,CAAAA,KAAA,EAAA,CAAA,CAAA,EAAA,CAAA,OAAA,GAAA3Q,EAAA7P,CAAAA,GAAA,EAAA,KAAA,CAAA,CAAAygB,UAAA,QAAA,CAAAC,KAAA,QAAA,CAAA,aAAA,MAAA,CAAA,aAAAnjB,CAAA,CAAAojB,UAAAA,QAAA,CAAAjkB,EAAA,CAAA,CAAA,IAAAU;AAAAT,CAAAikB,CAAAA,IAAA,CAAA,QAAA,CAAAjkB,EAAA,CAAA,CAAA,MAAAA,GAAAkkB,CAAAA,UAAA,GAAAnkB,EAAAuC,CAAAA,GAAA6hB,CAAAA,WAAA,EAAA,CAAA,CAAA,IAAApkB,EAAAqkB,CAAAA,OAAA,EAAArkB,EAAAskB,CAAAA,MAAA,EAAAtkB,EAAAukB,CAAAA,OAAA,EAAA,CAAA7jB,EAAA,CAAA,GAAA8jB,KAAA,GAAAxkB,EAAAuC,CAAAA,GAAA,CAAAkiB,UAAA,CAAA,QAAA,EAAA,CAAAhkB,EAAAqC,CAAAA,OAAA,GAAAkJ,QAAA0Y,CAAAA,aAAA,EAAA5iB,EAAA,EAAA,CAAA,CAAA,CAAA,CAAA,KAAA,IAAA6iB,EAAA,CAAA3kB,EAAAuC,CAAAA,GAAA,CAAA,CAAA,CAAAzB,EAAAA,CAAAmD,EAAA2gB,CAAAA,GAAA,KAAAhkB,GAAA8X,KAAAvX,CAAAA,SAAAmN,CAAAA,OAAAlM,CAAAA,IAAA,CAAAJ,EAAAc,CAAAA,OAAA+hB,CAAAA,QAAA,CAAA7Y,QAAA0Y,CAAAA,aAAA,CAAA,IAAA,CAAA,CAAA,GAAA9jB,EAAA,CAAA,CAAA,IAAAJ,GAAAP,CAAAiC,CAAAA,MAAA,CAAAC,GAAAvB,EAAA,QAAAZ,EAAAuC,CAAAA,GAAA,EAAA,KAAAzB,EAAA,CAAAgkB,WAAA,CAAAC,YAAA,CAAA,KAAAC,WAAA,CAAA7iB,EAAA,EAAAvB,EAAA,CAAA,CAAA,EAAAJ,EAAA,MAAA,MAAAM,EAAA,CAAAikB,YAAA,CAAAD,WAAA,CAAA,KAAAG,SAAA,CAAA9iB,EAAA,EAAA3B,EAAA,CAAAI,EAAA,CAAA,CAAA,EAAAJ,EAAA,CAAAwB,EAAAc,CAAAA,OAAA+hB,CAAAA,QAAA,CAAA1iB,EAAA,CAAA2hB,CAAAA,KAAA,EAAA,CAAA9jB,EAAAklB,CAAAA,cAAA,EAAA,CAAA,IAAAC,QAAA;AAAAnlB,EAAAuC,CAAAA,GAAA,EAAA6iB,OAAA,GAAAplB,EAAAuC,CAAAA,GAAA,GAAAvC,EAAAklB,CAAAA,cAAA,EAAA,CAAApjB,EAAA,EAAA,CAAA,KAAAO,GAAA,CAAApC,CAAAqO,CAAAA,OAAA,CAAA5N,EAAA,CAAA,CAAAsB,EAAAc,CAAAA,OAAA+hB,CAAAA,QAAA,CAAAxiB,EAAA,CAAAyhB,CAAAA,KAAA,EAAA,CAAA9jB,EAAAklB,CAAAA,cAAA,EAAAllB,GAAAqlB,CAAAA,WAAAC,CAAAA,wBAAA,EAAAtlB,GAAAulB,CAAAA,eAAA,EAAA,CAAA,CAAAV,SAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAA,KAAA,CAAA,CAAAygB,UAAA,gBAAA,CAAAvhB,IAAAR,EAAA,CAAA6iB,SAAA5kB,CAAAyB,CAAAA,GAAA,CAAA,QAAA,CAAA1B,EAAA,CAAAC,EAAA,CAAA,CAAA,MAAA,GAAAkT,EAAA5P,CAAAA,IAAA,EAAA,QAAA,CAAA,CAAAwgB,UAAA,eAAA,CAAAyB,QAAAA,QAAA,CAAAvlB,EAAA,CAAA,CAAAA,EAAAwlB,CAAAA,aAAA3B,CAAAA,KAAA,EAAAhjB,EAAA,CAAAd,EAAA2D,CAAAA,KAAA,CAAA,CAAA,CAAA+hB,MAAA,EAAAha,CAAAA,MAAA,CAAA1L,EAAAua,CAAAA,IAAA,CAAA,KAAA,CAAA7O,CAAAA,MAAA,CAAA1L,EAAAmkB,CAAAA,UAAAwB,CAAAA,WAAA,EAAA,CAAA,CAAA,aAAA3lB,EAAAua,CAAAA,IAAA,EAAA,MAAA,CAAA,oBAAAva,EAAAmkB,CAAAA,UAAA;AAAA3hB,IAAAA,QAAA,CAAA3B,EAAA,CAAA,CAAAA,EAAA,EAAA,CAAA,GAAAZ,EAAA,GAAAW,EAAAkC,CAAAA,OAAA,CAAAjC,EAAA,CAAAA,GAAA,EAAAb,EAAA2D,CAAAA,KAAA,GAAAjD,CAAA,GAAAD,EAAAqC,CAAAA,OAAA,CAAAjC,EAAA,CAAA,CAAA,CAAA+kB,QAAAA,QAAA,EAAA,CAAA9kB,CAAA,CAAAd,EAAA2D,CAAAA,KAAA,CAAA,CAAA,CAAAkhB,SAAA,CAAA7kB,EAAA6lB,CAAAA,IAAA,CAAA,GAAA1S,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAygB,UAAA,mBAAA,CAAAc,SAAA7kB,EAAAmkB,CAAAA,UAAA,CAAA,CAAA,CAAA,CAAA,CAAAnkB,EAAAua,CAAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAuL,QAAAA,GAAA,CAAA9lB,EAAA,CAAA,CAAA,IAAAC,CAAA,CAAAS,EAAAV,EAAA2D,CAAAA,KAAA,CAAA9C,EAAAb,EAAAyjB,CAAAA,KAAA,CAAA3iB,EAAAd,EAAAwjB,CAAAA,OAAA,CAAA1hB,GAAA9B,EAAA0jB,CAAAA,QAAA9iB,GAAAA,CAAAZ,EAAA+lB,CAAAA,KAAAtlB,GAAAA,CAAA,IAAA,EAAA,GAAAG,EAAA,CAAA,EAAA,CAAAA,EAAA,KAAAoB,GAAA+R,EAAA,CAAAvT,EAAA,EAAAwlB,CAAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA7jB,GAAAH,EAAA,CAAA,CAAA,CAAA,CAAAK,GAAAL,EAAA,CAAA,CAAA,CAAA,CAAAiD,GAAAzE,EAAA,EAAAojB,CAAAA,MAAA,CAAA,IAAA,CAAAzf,GAAAA,CAAAF,EAAA2gB,CAAAA,GAAA,OAAA,GAAAzR,EAAA5P,CAAAA,IAAA,EAAA,OAAA,CAAA,CAAAwgB,UAAA,kBAAA,CAAAc,SAAA,CAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAA,QAAA,CAAA,CAAAiE,KAAA9G,EAAA;AAAAsjB,UAAA5hB,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,aAAAtB,CAAA,CAAA2kB,QAAAA,QAAA,EAAA,CAAA,MAAAnjB,GAAA,CAAA,CAAAF,EAAA,CAAA,CAAA,CAAAK,IAAAyC,EAAA,CAAA4f,SAAA,IAAA,IAAA5kB,CAAA,CAAAa,CAAAojB,CAAAA,IAAA,CAAA,QAAA,CAAAlkB,EAAA,CAAA,CAAA,MAAAA,GAAA2D,CAAAA,KAAA,GAAAjD,CAAA,CAAA,CAAA,GAAA,IAAA,EAAA,GAAAT,CAAA,CAAA,IAAA,EAAA,CAAAA,CAAA4lB,CAAAA,IAAA,CAAA,CAAA,CAAA,GAAA1S,EAAA7P,CAAAA,GAAA,EAAA9C,EAAA,EAAAylB,CAAAA,QAAA,CAAA,CAAAC,SAAA,EAAA,CAAArB,SAAA1iB,EAAA,CAAA,GAAAgR,EAAA5P,CAAAA,IAAA,EAAA4P,EAAApQ,CAAAA,QAAA,CAAA,CAAA8hB,SAAA,CAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAAoO,EAAA,CAAA4R,EAAA,CAAAA,EAAA,CAAA,CAAA6C,eAAAA,QAAA,CAAAnmB,EAAA,CAAA,CAAA,MAAAA,GAAAomB,CAAAA,MAAA,GAAAnhB,EAAAnC,CAAAA,OAAA,EAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA8B,EAAA,CAAA,CAAAkiB,MAAA,GAAA,CAAA,CAAA,CAAAC,KAAA,CAAA,GAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAzB,SAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAAigB,EAAA,CAAA,CAAAC,QAAA1iB,CAAA,CAAA6C,MAAAjD,CAAA,CAAA+iB,MAAA5iB,CAAA,CAAA6iB,SAAA5hB,EAAA,CAAA6hB,QAAAA,QAAA,EAAA,CAAA,IAAA3jB,EAAAqC,GAAA,CAAA,CAAA,CAAA,CAAA,KAAA,IAAArC,EAAA,CAAAiF,EAAAnC,CAAAA,OAAA,GAAA,IAAA,EAAA;AAAA9C,EAAA,EAAAA,EAAA8jB,CAAAA,KAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA3Q,EAAA7P,CAAAA,GAAA,EAAA,KAAA,CAAA,CAAAygB,UAAA,iBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAwC,QAAAA,GAAA,CAAAvmB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAA8lB,QAAAA,GAAA,CAAAxmB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAsmB,EAAA,CAAAtlB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA;AAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAA6lB,EAAA,CAAAtlB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAymB,QAAAA,GAAA,CAAAzmB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAgmB,QAAAA,GAAA,CAAA1mB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAwmB,EAAA,CAAAxlB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA;AAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAA+lB,EAAA,CAAAxlB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA2mB,QAAAA,GAAA,CAAA3mB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAkmB,QAAAA,GAAA,CAAA5mB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS;AAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAA0mB,EAAA,CAAA1lB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAimB,EAAA,CAAA1lB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA6mB,QAAAA,GAAA,CAAA7mB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAA,WAAAA,EAAA,MAAAsC,OAAAtC,EAAAV,EAAA,CAAAgD,MAAA0C,CAAAA,QAAA,CAAAhF,EAAAV,EAAA,CAAA,YAAA,CAAA,IAAA,CAAAU,CAAA,CAAA,CAAA,GAAAgY,KAAA+F,CAAAA,OAAA,CAAAze,EAAA,CAAA,GAAAU,CAAA,CAAA,QAAA,CAAAV,EAAA,CAAAC,EAAA,CAAA,CAAA,GAAAD,EAAA,CAAA,CAAA,GAAA,QAAA,EAAA,MAAAA,GAAA,CAAA,MAAA8mB,GAAA,CAAA9mB,EAAA,CAAAC,EAAA,CAAA,KAAAS,GAAAO,MAAAE,CAAAA,SAAA+G,CAAAA,QAAA9F,CAAAA,IAAA,CAAApC,EAAA,CAAA0I,CAAAA,KAAA,CAAA,CAAA;AAAA,CAAA,CAAA,CAAA,SAAA,GAAAhI,EAAA,EAAAV,EAAAmH,CAAAA,WAAA,GAAAzG,EAAA,CAAAV,EAAAmH,CAAAA,WAAAI,CAAAA,IAAA,CAAA,IAAA,KAAA,GAAA7G,EAAA,EAAA,KAAA,GAAAA,EAAA,CAAA,MAAAgY,MAAAC,CAAAA,IAAA,CAAA3Y,EAAA,CAAA,IAAA,WAAA,GAAAU,EAAA,EAAA,0CAAAmQ,CAAAA,IAAA,CAAAnQ,EAAA,CAAA,CAAA,MAAAomB,GAAA,CAAA9mB,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAA,GAAAC,CAAA,EAAAD,EAAA,EAAA,QAAA,EAAA,MAAAA,GAAAkC,CAAAA,MAAA,CAAA,CAAAxB,CAAA,GAAAV,EAAA,CAAAU,CAAA,CAAA,KAAAG,EAAA,CAAAC,EAAAA,CAAAA,QAAA,EAAA,EAAA,OAAA,CAAAN,EAAAM,CAAA,CAAAJ,EAAAA,QAAA,EAAA,CAAA,MAAAG,EAAA,EAAAb,EAAAkC,CAAAA,MAAA,CAAA,CAAA8C,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,KAAA,CAAA,CAAA,CAAArB,MAAA3D,EAAA,CAAAa,CAAA,EAAA,CAAA,CAAA,CAAA,CAAAb,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAA,KAAAA,GAAA,CAAA,CAAA,CAAAmE,EAAArD,CAAA,CAAA,CAAA,KAAA,KAAAiB,SAAA,CAAA,uIAAA,CAAA;AAAA,CAAA,IAAAD,CAAA,CAAAlB,GAAA,CAAA,CAAA,CAAAH,GAAA,CAAA,CAAA,OAAA,CAAAD,EAAAA,QAAA,EAAA,CAAAE,CAAA,CAAAA,CAAA0B,CAAAA,IAAA,CAAApC,EAAA,CAAA,CAAA,CAAAU,EAAAA,QAAA,EAAA,CAAA,IAAAV,GAAAU,CAAAmF,CAAAA,IAAA,EAAA,OAAAjF,GAAA,CAAAZ,EAAAgF,CAAAA,IAAA,CAAAhF,EAAA,CAAA,CAAAA,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAAS,EAAA,CAAA,CAAA,CAAAqB,EAAA,CAAA9B,EAAA,CAAA,CAAAmE,EAAAA,QAAA,EAAA,CAAA,GAAA,CAAAvD,EAAA,EAAA,IAAA,EAAAF,CAAAiF,CAAAA,MAAA,EAAAjF,CAAAiF,CAAAA,MAAA,EAAA,CAAA,OAAA,CAAA,GAAAlF,EAAA,CAAA,KAAAqB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAglB,QAAAA,GAAA,CAAA9mB,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,IAAA,EAAAA,CAAA,EAAAA,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,IAAAjC,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,CAAA,KAAA,IAAAxB,EAAA,CAAA,CAAAG,EAAA6X,KAAA,CAAAzY,CAAA,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAAS,CAAA,EAAA,CAAAG,CAAA,CAAAH,CAAA,CAAA,CAAAV,EAAA,CAAAU,CAAA,CAAA,OAAAG,EAAA,CAAAkmB,QAAAA,GAAA,EAAA,CAAA,GAAA,WAAA,EAAA,MAAA3O,QAAA,EAAA,CAAAA,OAAAC,CAAAA,SAAA,EAAAD,OAAAC,CAAAA,SAAAC,CAAAA,IAAA,CAAA,MAAA,CAAA,CAAA,IAAA,UAAA,EAAA,MAAAC,MAAA,CAAA,MAAA,CAAA,CAAA,IAAA,CAAA,MAAA3K,QAAAzM,CAAAA,SAAAqX,CAAAA,OAAApW,CAAAA,IAAA,CAAAgW,OAAAC,CAAAA,SAAA,CAAAzK,OAAA;AAAA,EAAA,CAAA,QAAA,EAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA5N,EAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAAgnB,QAAAA,GAAA,CAAAhnB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,MAAA+X,CAAAuO,EAAAvO,CAAAsO,EAAA,EAAA,CAAA3O,OAAAC,CAAAA,SAAA,CAAA,QAAA,CAAArY,CAAA,CAAAC,CAAA,CAAAS,EAAA,CAAA,CAAA,IAAAG,GAAA,CAAA,IAAA,CAAAA,GAAAwF,CAAAA,IAAAoS,CAAAA,KAAA,CAAA5X,EAAA,CAAAZ,CAAA,CAAAa,EAAAA,CAAA,KAAAoI,QAAAkE,CAAAA,IAAAqL,CAAAA,KAAA,CAAAzY,CAAA,CAAAa,EAAA,CAAA,CAAA,OAAAH,GAAA,EAAAiE,CAAA,CAAA7D,CAAA,CAAAJ,EAAAS,CAAAA,SAAA,CAAA,CAAAL,CAAA,CAAA2X,EAAAA,KAAA,CAAA,IAAA,CAAAxW,SAAA,CAAA,CAAAglB,QAAAA,GAAA,CAAAjnB,EAAA,CAAA,CAAA,IAAAC,EAAA,UAAA,EAAA,MAAAinB,IAAA,CAAA,IAAAA,GAAA,CAAA,IAAA,EAAA,OAAA,CAAAD,EAAA,CAAAA,QAAA,CAAAjnB,CAAA,CAAA,CAAAa,QAAAA,EAAA,EAAA,CAAA,MAAAmmB,GAAA,CAAAhnB,CAAA,CAAAiC,SAAA,CAAA8E,CAAA,CAAA,IAAA,CAAAI,CAAAA,WAAA,CAAA,CAAA,GAAA,IAAA,GAAAnH,CAAA,GAAAU,CAAA,CAAAV,CAAA,CAAA,CAAA,CAAA,GAAAkJ,QAAAhB,CAAAA,QAAA9F,CAAAA,IAAA,CAAA1B,CAAA,CAAA4N,CAAAA,OAAA,CAAA,eAAA,CAAA,EAAA,MAAAtO,EAAA,KAAAU,CAAA,IAAA,UAAA,EAAA,MAAAV,EAAA,CAAA,KAAA,KAAA+B,SAAA,CAAA,oDAAA,CAAA;AAAA,GAAA,IAAA,EAAA,GAAA9B,CAAA,CAAA,CAAA,GAAAA,CAAAknB,CAAAA,GAAA,CAAAnnB,CAAA,CAAA,CAAA,MAAAC,EAAAmnB,CAAAA,GAAA,CAAApnB,CAAA,CAAAC,EAAA+gB,CAAAA,GAAA,CAAAhhB,CAAA,CAAAa,CAAA,CAAA,CAAA,MAAAA,EAAAM,CAAAA,SAAA,CAAAF,MAAA8C,CAAAA,MAAA,CAAA\/D,CAAAmB,CAAAA,SAAA,CAAA,CAAAgG,YAAA,CAAAxD,MAAA9C,CAAA,CAAA+C,WAAA,CAAA,CAAA,CAAAE,SAAA,CAAA,CAAA,CAAAD,aAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAc,CAAA,CAAA9D,CAAA,CAAAb,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAAqnB,QAAAA,GAAA,CAAArnB,EAAA,CAAA,CAAA,IAAAC,EAAA,QAAA,EAAA,CAAA,GAAA,WAAA,EAAA,MAAAmY,QAAA,EAAA,CAAAA,OAAAC,CAAAA,SAAA,EAAAD,OAAAC,CAAAA,SAAAC,CAAAA,IAAA,CAAA,MAAA,CAAA,CAAA,IAAA,UAAA,EAAA,MAAAC,MAAA,CAAA,MAAA,CAAA,CAAA,IAAA,CAAA,MAAA3K,QAAAzM,CAAAA,SAAAqX,CAAAA,OAAApW,CAAAA,IAAA,CAAAgW,OAAAC,CAAAA,SAAA,CAAAzK,OAAA,CAAA,EAAA,CAAA,QAAA,EAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA5N,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,EAAA,OAAA,SAAA,EAAA,CAAAa,IAAAA,EAAAkG,CAAA,CAAA\/G,EAAA,CAAA,IAAAC,CAAA,CAAA,CAAA,IAAAa,EAAAiG,CAAA,CAAA,IAAA,CAAAI,CAAAA,WAAAzG;CAAA,CAAA0X,OAAAC,CAAAA,SAAA,CAAAxX,CAAA,CAAAoB,SAAA,CAAAnB,CAAA,CAAA,CAAA,IAAAJ,EAAA,CAAAG,CAAA4X,CAAAA,KAAA,CAAA,IAAA,CAAAxW,SAAA,CAAA,OAAA6E,EAAA,CAAA,IAAA,CAAApG,CAAA,CAAA,CAAA,CAAA4mB,QAAAA,GAAA,CAAAtnB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAA,WAAAA,EAAA,MAAAsC,OAAAtC,EAAAV,EAAA,CAAAgD,MAAA0C,CAAAA,QAAA,CAAAhF,EAAAV,EAAA,CAAA,YAAA,CAAA,IAAA,CAAAU,CAAA,CAAA,CAAA,GAAAgY,KAAA+F,CAAAA,OAAA,CAAAze,EAAA,CAAA,GAAAU,CAAA,CAAA,QAAA,CAAAV,EAAA,CAAAC,EAAA,CAAA,CAAA,GAAAD,EAAA,CAAA,CAAA,GAAA,QAAA,EAAA,MAAAA,GAAA,CAAA,MAAAunB,GAAA,CAAAvnB,EAAA,CAAAC,EAAA,CAAA,KAAAS,GAAAO,MAAAE,CAAAA,SAAA+G,CAAAA,QAAA9F,CAAAA,IAAA,CAAApC,EAAA,CAAA0I,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,GAAAhI,EAAA,EAAAV,EAAAmH,CAAAA,WAAA,GAAAzG,EAAA,CAAAV,EAAAmH,CAAAA,WAAAI,CAAAA,IAAA,CAAA,IAAA,KAAA,GAAA7G,EAAA,EAAA,KAAA,GAAAA,EAAA,CAAA,MAAAgY,MAAAC,CAAAA,IAAA,CAAA3Y,EAAA,CAAA,IAAA,WAAA,GAAAU,EAAA,EAAA,0CAAAmQ,CAAAA,IAAA,CAAAnQ,EAAA,CAAA,CAAA,MAAA6mB,GAAA,CAAAvnB,EAAA;AAAAC,EAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAA,GAAAC,CAAA,EAAAD,EAAA,EAAA,QAAA,EAAA,MAAAA,GAAAkC,CAAAA,MAAA,CAAA,CAAAxB,CAAA,GAAAV,EAAA,CAAAU,CAAA,CAAA,KAAAG,EAAA,CAAAC,EAAAA,CAAAA,QAAA,EAAA,EAAA,OAAA,CAAAN,EAAAM,CAAA,CAAAJ,EAAAA,QAAA,EAAA,CAAA,MAAAG,EAAA,EAAAb,EAAAkC,CAAAA,MAAA,CAAA,CAAA8C,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,KAAA,CAAA,CAAA,CAAArB,MAAA3D,EAAA,CAAAa,CAAA,EAAA,CAAA,CAAA,CAAA,CAAAb,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAA,KAAAA,GAAA,CAAA,CAAA,CAAAmE,EAAArD,CAAA,CAAA,CAAA,KAAA,KAAAiB,SAAA,CAAA,uIAAA,CAAA,CAAA,CAAA,IAAAD,CAAA,CAAAlB,GAAA,CAAA,CAAA,CAAAH,GAAA,CAAA,CAAA,OAAA,CAAAD,EAAAA,QAAA,EAAA,CAAAE,CAAA,CAAAA,CAAA0B,CAAAA,IAAA,CAAApC,EAAA,CAAA,CAAA,CAAAU,EAAAA,QAAA,EAAA,CAAA,IAAAV,GAAAU,CAAAmF,CAAAA,IAAA,EAAA,OAAAjF,GAAA,CAAAZ,EAAAgF,CAAAA,IAAA,CAAAhF,EAAA,CAAA,CAAAA,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAAS,EAAA,CAAA,CAAA,CAAAqB,EAAA,CAAA9B,EAAA,CAAA,CAAAmE,EAAAA,QAAA,EAAA,CAAA,GAAA,CAAAvD,EAAA,EAAA,IAAA;AAAAF,CAAAiF,CAAAA,MAAA,EAAAjF,CAAAiF,CAAAA,MAAA,EAAA,CAAA,OAAA,CAAA,GAAAlF,EAAA,CAAA,KAAAqB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAylB,QAAAA,GAAA,CAAAvnB,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,IAAA,EAAAA,CAAA,EAAAA,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,IAAAjC,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,CAAA,KAAA,IAAAxB,EAAA,CAAA,CAAAG,EAAA6X,KAAA,CAAAzY,CAAA,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAAS,CAAA,EAAA,CAAAG,CAAA,CAAAH,CAAA,CAAA,CAAAV,EAAA,CAAAU,CAAA,CAAA,OAAAG,EAAA,CAAA2mB,QAAAA,GAAA,CAAAxnB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAA+mB,QAAAA,GAAA,CAAAznB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAunB,EAAA,CAAAvmB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA;AAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAA8mB,EAAA,CAAAvmB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA0nB,QAAAA,GAAA,CAAA1nB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAinB,QAAAA,GAAA,CAAA3nB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS;AAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAynB,EAAA,CAAAzmB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAgnB,EAAA,CAAAzmB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA4nB,QAAAA,GAAA,CAAA5nB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAA,WAAAA,EAAA,MAAAsC,OAAAtC,EAAAV,EAAA,CAAAgD,MAAA0C,CAAAA,QAAA,CAAAhF,EAAAV,EAAA,CAAA,YAAA,CAAA,IAAA,CAAAU,CAAA,CAAA,CAAA,GAAAgY,KAAA+F,CAAAA,OAAA,CAAAze,EAAA,CAAA,GAAAU,CAAA,CAAA,QAAA,CAAAV,EAAA,CAAAC,EAAA,CAAA,CAAA,GAAAD,EAAA,CAAA,CAAA,GAAA,QAAA,EAAA,MAAAA,GAAA,CAAA,MAAA6nB,GAAA,CAAA7nB,EAAA,CAAAC,EAAA,CAAA,KAAAS,GAAAO,MAAAE,CAAAA,SAAA+G,CAAAA,QAAA9F,CAAAA,IAAA,CAAApC,EAAA,CAAA0I,CAAAA,KAAA,CAAA,CAAA;AAAA,CAAA,CAAA,CAAA,SAAA,GAAAhI,EAAA,EAAAV,EAAAmH,CAAAA,WAAA,GAAAzG,EAAA,CAAAV,EAAAmH,CAAAA,WAAAI,CAAAA,IAAA,CAAA,IAAA,KAAA,GAAA7G,EAAA,EAAA,KAAA,GAAAA,EAAA,CAAA,MAAAgY,MAAAC,CAAAA,IAAA,CAAA3Y,EAAA,CAAA,IAAA,WAAA,GAAAU,EAAA,EAAA,0CAAAmQ,CAAAA,IAAA,CAAAnQ,EAAA,CAAA,CAAA,MAAAmnB,GAAA,CAAA7nB,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAA,GAAAC,CAAA,EAAAD,EAAA,EAAA,QAAA,EAAA,MAAAA,GAAAkC,CAAAA,MAAA,CAAA,CAAAxB,CAAA,GAAAV,EAAA,CAAAU,CAAA,CAAA,KAAAG,EAAA,CAAAC,EAAAA,CAAAA,QAAA,EAAA,EAAA,OAAA,CAAAN,EAAAM,CAAA,CAAAJ,EAAAA,QAAA,EAAA,CAAA,MAAAG,EAAA,EAAAb,EAAAkC,CAAAA,MAAA,CAAA,CAAA8C,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,KAAA,CAAA,CAAA,CAAArB,MAAA3D,EAAA,CAAAa,CAAA,EAAA,CAAA,CAAA,CAAA,CAAAb,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAA,KAAAA,GAAA,CAAA,CAAA,CAAAmE,EAAArD,CAAA,CAAA,CAAA,KAAA,KAAAiB,SAAA,CAAA,uIAAA,CAAA;AAAA,CAAA,IAAAD,CAAA,CAAAlB,GAAA,CAAA,CAAA,CAAAH,GAAA,CAAA,CAAA,OAAA,CAAAD,EAAAA,QAAA,EAAA,CAAAE,CAAA,CAAAA,CAAA0B,CAAAA,IAAA,CAAApC,EAAA,CAAA,CAAA,CAAAU,EAAAA,QAAA,EAAA,CAAA,IAAAV,GAAAU,CAAAmF,CAAAA,IAAA,EAAA,OAAAjF,GAAA,CAAAZ,EAAAgF,CAAAA,IAAA,CAAAhF,EAAA,CAAA,CAAAA,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAAS,EAAA,CAAA,CAAA,CAAAqB,EAAA,CAAA9B,EAAA,CAAA,CAAAmE,EAAAA,QAAA,EAAA,CAAA,GAAA,CAAAvD,EAAA,EAAA,IAAA,EAAAF,CAAAiF,CAAAA,MAAA,EAAAjF,CAAAiF,CAAAA,MAAA,EAAA,CAAA,OAAA,CAAA,GAAAlF,EAAA,CAAA,KAAAqB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA+lB,QAAAA,GAAA,CAAA7nB,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,IAAA,EAAAA,CAAA,EAAAA,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,IAAAjC,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,CAAA,KAAA,IAAAxB,EAAA,CAAA,CAAAG,EAAA6X,KAAA,CAAAzY,CAAA,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAAS,CAAA,EAAA,CAAAG,CAAA,CAAAH,CAAA,CAAA,CAAAV,EAAA,CAAAU,CAAA,CAAA,OAAAG,EAAA,CAAAinB,QAAAA,GAAA,CAAA9nB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD;CAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAqnB,QAAAA,GAAA,CAAA\/nB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAA6nB,EAAA,CAAA7mB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAonB,EAAA,CAAA7mB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAgoB,QAAAA,GAAA,CAAAhoB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA;AAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAunB,QAAAA,GAAA,CAAAjoB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAA+nB,EAAA,CAAA\/mB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAsnB,EAAA,CAAA\/mB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAkoB,QAAAA,GAAA,CAAAloB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA;GAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAynB,QAAAA,GAAA,CAAAnoB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAioB,EAAA,CAAAjnB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAwnB,EAAA,CAAAjnB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA;AAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAooB,QAAAA,GAAA,CAAApoB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAA2nB,QAAAA,GAAA,CAAAroB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAmoB,EAAA,CAAAnnB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAA0nB,EAAA,CAAAnnB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA;AAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAsoB,QAAAA,GAAA,CAAAtoB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAA6nB,QAAAA,GAAA,CAAAvoB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAqoB,EAAA,CAAArnB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA;AAAA4nB,EAAA,CAAArnB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAwoB,QAAAA,GAAA,CAAAxoB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAA+nB,QAAAA,GAAA,CAAAzoB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAuoB,EAAA,CAAAvnB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA;AAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAA8nB,EAAA,CAAAvnB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA0oB,QAAAA,GAAA,CAAA1oB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAioB,QAAAA,GAAA,CAAA3oB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAyoB,EAAA,CAAAznB,MAAA,CAAAP,CAAA,CAAA;AAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAgoB,EAAA,CAAAznB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA4oB,QAAAA,GAAA,CAAA5oB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAA,WAAAA,EAAA,MAAAsC,OAAAtC,EAAAV,EAAA,CAAAgD,MAAA0C,CAAAA,QAAA,CAAAhF,EAAAV,EAAA,CAAA,YAAA,CAAA,IAAA,CAAAU,CAAA,CAAA,CAAA,GAAAgY,KAAA+F,CAAAA,OAAA,CAAAze,EAAA,CAAA,GAAAU,CAAA,CAAA,QAAA,CAAAV,EAAA,CAAAC,EAAA,CAAA,CAAA,GAAAD,EAAA,CAAA,CAAA,GAAA,QAAA,EAAA,MAAAA,GAAA,CAAA,MAAA6oB,GAAA,CAAA7oB,EAAA,CAAAC,EAAA,CAAA,KAAAS,GAAAO,MAAAE,CAAAA,SAAA+G,CAAAA,QAAA9F,CAAAA,IAAA,CAAApC,EAAA,CAAA0I,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,GAAAhI,EAAA;AAAAV,EAAAmH,CAAAA,WAAA,GAAAzG,EAAA,CAAAV,EAAAmH,CAAAA,WAAAI,CAAAA,IAAA,CAAA,IAAA,KAAA,GAAA7G,EAAA,EAAA,KAAA,GAAAA,EAAA,CAAA,MAAAgY,MAAAC,CAAAA,IAAA,CAAA3Y,EAAA,CAAA,IAAA,WAAA,GAAAU,EAAA,EAAA,0CAAAmQ,CAAAA,IAAA,CAAAnQ,EAAA,CAAA,CAAA,MAAAmoB,GAAA,CAAA7oB,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAA,GAAAC,CAAA,EAAAD,EAAA,EAAA,QAAA,EAAA,MAAAA,GAAAkC,CAAAA,MAAA,CAAA,CAAAxB,CAAA,GAAAV,EAAA,CAAAU,CAAA,CAAA,KAAAG,EAAA,CAAAC,EAAAA,CAAAA,QAAA,EAAA,EAAA,OAAA,CAAAN,EAAAM,CAAA,CAAAJ,EAAAA,QAAA,EAAA,CAAA,MAAAG,EAAA,EAAAb,EAAAkC,CAAAA,MAAA,CAAA,CAAA8C,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,KAAA,CAAA,CAAA,CAAArB,MAAA3D,EAAA,CAAAa,CAAA,EAAA,CAAA,CAAA,CAAA,CAAAb,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAA,KAAAA,GAAA,CAAA,CAAA,CAAAmE,EAAArD,CAAA,CAAA,CAAA,KAAA,KAAAiB,SAAA,CAAA,uIAAA,CAAA;AAAA,CAAA,IAAAD,CAAA,CAAAlB,GAAA,CAAA,CAAA,CAAAH,GAAA,CAAA,CAAA,OAAA,CAAAD,EAAAA,QAAA,EAAA,CAAAE,CAAA,CAAAA,CAAA0B,CAAAA,IAAA,CAAApC,EAAA,CAAA,CAAA,CAAAU,EAAAA,QAAA,EAAA,CAAA,IAAAV,GAAAU,CAAAmF,CAAAA,IAAA,EAAA,OAAAjF,GAAA,CAAAZ,EAAAgF,CAAAA,IAAA,CAAAhF,EAAA,CAAA,CAAAA,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAAS,EAAA,CAAA,CAAA,CAAAqB,EAAA,CAAA9B,EAAA,CAAA,CAAAmE,EAAAA,QAAA,EAAA,CAAA,GAAA,CAAAvD,EAAA,EAAA,IAAA,EAAAF,CAAAiF,CAAAA,MAAA,EAAAjF,CAAAiF,CAAAA,MAAA,EAAA,CAAA,OAAA,CAAA,GAAAlF,EAAA,CAAA,KAAAqB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA+mB,QAAAA,GAAA,CAAA7oB,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,IAAA,EAAAA,CAAA,EAAAA,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,IAAAjC,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,CAAA,KAAA,IAAAxB,EAAA,CAAA,CAAAG,EAAA6X,KAAA,CAAAzY,CAAA,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAAS,CAAA,EAAA,CAAAG,CAAA,CAAAH,CAAA,CAAA,CAAAV,EAAA,CAAAU,CAAA,CAAA,OAAAG,EAAA,CAAAioB,QAAAA,GAAA,CAAA9oB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD;CAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAqoB,QAAAA,GAAA,CAAA\/oB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAA6oB,EAAA,CAAA7nB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAooB,EAAA,CAAA7nB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAgpB,QAAAA,GAAA,CAAAhpB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA;AAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAuoB,QAAAA,GAAA,CAAAjpB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAA+oB,EAAA,CAAA\/nB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAsoB,EAAA,CAAA\/nB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAkpB,QAAAA,GAAA,CAAAlpB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAA,WAAAA;AAAA,MAAAsC,OAAAtC,EAAAV,EAAA,CAAAgD,MAAA0C,CAAAA,QAAA,CAAAhF,EAAAV,EAAA,CAAA,YAAA,CAAA,IAAA,CAAAU,CAAA,CAAA,CAAA,GAAAgY,KAAA+F,CAAAA,OAAA,CAAAze,EAAA,CAAA,GAAAU,CAAA,CAAA,QAAA,CAAAV,EAAA,CAAAC,EAAA,CAAA,CAAA,GAAAD,EAAA,CAAA,CAAA,GAAA,QAAA,EAAA,MAAAA,GAAA,CAAA,MAAAmpB,GAAA,CAAAnpB,EAAA,CAAAC,EAAA,CAAA,KAAAS,GAAAO,MAAAE,CAAAA,SAAA+G,CAAAA,QAAA9F,CAAAA,IAAA,CAAApC,EAAA,CAAA0I,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,GAAAhI,EAAA,EAAAV,EAAAmH,CAAAA,WAAA,GAAAzG,EAAA,CAAAV,EAAAmH,CAAAA,WAAAI,CAAAA,IAAA,CAAA,IAAA,KAAA,GAAA7G,EAAA,EAAA,KAAA,GAAAA,EAAA,CAAA,MAAAgY,MAAAC,CAAAA,IAAA,CAAA3Y,EAAA,CAAA,IAAA,WAAA,GAAAU,EAAA,EAAA,0CAAAmQ,CAAAA,IAAA,CAAAnQ,EAAA,CAAA,CAAA,MAAAyoB,GAAA,CAAAnpB,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAA,GAAAC,CAAA,EAAAD,EAAA,EAAA,QAAA,EAAA,MAAAA,GAAAkC,CAAAA,MAAA,CAAA,CAAAxB,CAAA,GAAAV,EAAA,CAAAU,CAAA,CAAA,KAAAG,EAAA,CAAAC,EAAAA,CAAAA,QAAA,EAAA,EAAA,OAAA,CAAAN,EAAAM,CAAA,CAAAJ,EAAAA,QAAA,EAAA,CAAA,MAAAG,EAAA;AAAAb,EAAAkC,CAAAA,MAAA,CAAA,CAAA8C,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,KAAA,CAAA,CAAA,CAAArB,MAAA3D,EAAA,CAAAa,CAAA,EAAA,CAAA,CAAA,CAAA,CAAAb,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAA,KAAAA,GAAA,CAAA,CAAA,CAAAmE,EAAArD,CAAA,CAAA,CAAA,KAAA,KAAAiB,SAAA,CAAA,uIAAA,CAAA,CAAA,CAAA,IAAAD,CAAA,CAAAlB,GAAA,CAAA,CAAA,CAAAH,GAAA,CAAA,CAAA,OAAA,CAAAD,EAAAA,QAAA,EAAA,CAAAE,CAAA,CAAAA,CAAA0B,CAAAA,IAAA,CAAApC,EAAA,CAAA,CAAA,CAAAU,EAAAA,QAAA,EAAA,CAAA,IAAAV,GAAAU,CAAAmF,CAAAA,IAAA,EAAA,OAAAjF,GAAA,CAAAZ,EAAAgF,CAAAA,IAAA,CAAAhF,EAAA,CAAA,CAAAA,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAAS,EAAA,CAAA,CAAA,CAAAqB,EAAA,CAAA9B,EAAA,CAAA,CAAAmE,EAAAA,QAAA,EAAA,CAAA,GAAA,CAAAvD,EAAA,EAAA,IAAA,EAAAF,CAAAiF,CAAAA,MAAA,EAAAjF,CAAAiF,CAAAA,MAAA,EAAA,CAAA,OAAA,CAAA,GAAAlF,EAAA,CAAA,KAAAqB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqnB,QAAAA,GAAA,CAAAnpB,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,IAAA,EAAAA,CAAA,EAAAA,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,IAAAjC,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,CAAA,KAAA,IAAAxB;AAAA,CAAA,CAAAG,EAAA6X,KAAA,CAAAzY,CAAA,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAAS,CAAA,EAAA,CAAAG,CAAA,CAAAH,CAAA,CAAA,CAAAV,EAAA,CAAAU,CAAA,CAAA,OAAAG,EAAA,CAAAuoB,QAAAA,GAAA,CAAAppB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAA2oB,QAAAA,GAAA,CAAArpB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAmpB,EAAA,CAAAnoB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA;AAAA0oB,EAAA,CAAAnoB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAspB,QAAAA,GAAA,CAAAtpB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAA6oB,QAAAA,GAAA,CAAAvpB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAqpB,EAAA,CAAAroB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA;AAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAA4oB,EAAA,CAAAroB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAwpB,QAAAA,GAAA,CAAAxpB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAA+oB,QAAAA,GAAA,CAAAzpB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAupB,EAAA,CAAAvoB,MAAA,CAAAP,CAAA,CAAA;AAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAA8oB,EAAA,CAAAvoB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA0pB,QAAAA,GAAA,CAAA1pB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAipB,QAAAA,GAAA,CAAA3pB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA;AAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAypB,EAAA,CAAAzoB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAgpB,EAAA,CAAAzoB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA4pB,QAAAA,GAAA,CAAA5pB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA;AAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAmpB,QAAAA,GAAA,CAAA7pB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAA2pB,EAAA,CAAA3oB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAkpB,EAAA,CAAA3oB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA8pB,QAAAA,GAAA,CAAA9pB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC;CAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAqpB,QAAAA,GAAA,CAAA\/pB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAA6pB,EAAA,CAAA7oB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAopB,EAAA,CAAA7oB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAgqB,QAAAA,GAAA,CAAAhqB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA;GAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAupB,QAAAA,GAAA,CAAAjqB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAA+pB,EAAA,CAAA\/oB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAspB,EAAA,CAAA\/oB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA;AAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAkqB,QAAAA,GAAA,CAAAlqB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAA,WAAAA,EAAA,MAAAsC,OAAAtC,EAAAV,EAAA,CAAAgD,MAAA0C,CAAAA,QAAA,CAAAhF,EAAAV,EAAA,CAAA,YAAA,CAAA,IAAA,CAAAU,CAAA,CAAA,CAAA,GAAAgY,KAAA+F,CAAAA,OAAA,CAAAze,EAAA,CAAA,GAAAU,CAAA,CAAA,QAAA,CAAAV,EAAA,CAAAC,EAAA,CAAA,CAAA,GAAAD,EAAA,CAAA,CAAA,GAAA,QAAA,EAAA,MAAAA,GAAA,CAAA,MAAAmqB,GAAA,CAAAnqB,EAAA,CAAAC,EAAA,CAAA,KAAAS,GAAAO,MAAAE,CAAAA,SAAA+G,CAAAA,QAAA9F,CAAAA,IAAA,CAAApC,EAAA,CAAA0I,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,GAAAhI,EAAA,EAAAV,EAAAmH,CAAAA,WAAA,GAAAzG,EAAA,CAAAV,EAAAmH,CAAAA,WAAAI,CAAAA,IAAA,CAAA,IAAA,KAAA,GAAA7G,EAAA,EAAA,KAAA,GAAAA,EAAA,CAAA,MAAAgY,MAAAC,CAAAA,IAAA,CAAA3Y,EAAA,CAAA,IAAA,WAAA,GAAAU,EAAA,EAAA,0CAAAmQ,CAAAA,IAAA,CAAAnQ,EAAA,CAAA,CAAA,MAAAypB,GAAA,CAAAnqB,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAA,GAAAC,CAAA,EAAAD,EAAA,EAAA,QAAA,EAAA,MAAAA,GAAAkC,CAAAA,MAAA,CAAA,CAAAxB,CAAA,GAAAV,EAAA,CAAAU,CAAA,CAAA;IAAAG,EAAA,CAAAC,EAAAA,CAAAA,QAAA,EAAA,EAAA,OAAA,CAAAN,EAAAM,CAAA,CAAAJ,EAAAA,QAAA,EAAA,CAAA,MAAAG,EAAA,EAAAb,EAAAkC,CAAAA,MAAA,CAAA,CAAA8C,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,KAAA,CAAA,CAAA,CAAArB,MAAA3D,EAAA,CAAAa,CAAA,EAAA,CAAA,CAAA,CAAA,CAAAb,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAA,KAAAA,GAAA,CAAA,CAAA,CAAAmE,EAAArD,CAAA,CAAA,CAAA,KAAA,KAAAiB,SAAA,CAAA,uIAAA,CAAA,CAAA,CAAA,IAAAD,CAAA,CAAAlB,GAAA,CAAA,CAAA,CAAAH,GAAA,CAAA,CAAA,OAAA,CAAAD,EAAAA,QAAA,EAAA,CAAAE,CAAA,CAAAA,CAAA0B,CAAAA,IAAA,CAAApC,EAAA,CAAA,CAAA,CAAAU,EAAAA,QAAA,EAAA,CAAA,IAAAV,GAAAU,CAAAmF,CAAAA,IAAA,EAAA,OAAAjF,GAAA,CAAAZ,EAAAgF,CAAAA,IAAA,CAAAhF,EAAA,CAAA,CAAAA,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAAS,EAAA,CAAA,CAAA,CAAAqB,EAAA,CAAA9B,EAAA,CAAA,CAAAmE,EAAAA,QAAA,EAAA,CAAA,GAAA,CAAAvD,EAAA,EAAA,IAAA,EAAAF,CAAAiF,CAAAA,MAAA,EAAAjF,CAAAiF,CAAAA,MAAA,EAAA,CAAA,OAAA,CAAA,GAAAlF,EAAA,CAAA,KAAAqB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqoB,QAAAA,GAAA,CAAAnqB,EAAA;AAAAC,CAAA,CAAA,CAAA,CAAA,IAAA,EAAAA,CAAA,EAAAA,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,IAAAjC,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,CAAA,KAAA,IAAAxB,EAAA,CAAA,CAAAG,EAAA6X,KAAA,CAAAzY,CAAA,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAAS,CAAA,EAAA,CAAAG,CAAA,CAAAH,CAAA,CAAA,CAAAV,EAAA,CAAAU,CAAA,CAAA,OAAAG,EAAA,CAAAupB,QAAAA,GAAA,CAAApqB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAA2pB,QAAAA,GAAA,CAAArqB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAmqB,EAAA,CAAAnpB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA;AAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAA0pB,EAAA,CAAAnpB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAsqB,QAAAA,GAAA,CAAAtqB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAA6pB,QAAAA,GAAA,CAAAvqB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA;AAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAA8pB,QAAAA,GAAA,CAAAxqB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAA+pB,QAAAA,GAAA,CAAAzqB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAgqB,QAAAA,GAAA,CAAA1qB,EAAA,CAAA,CAAA,IAAA,IAAAC;AAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAwqB,EAAA,CAAAxpB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAA+pB,EAAA,CAAAxpB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA2qB,QAAAA,GAAA,CAAA3qB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAA,WAAAA,EAAA,MAAAsC,OAAAtC,EAAAV,EAAA,CAAAgD,MAAA0C,CAAAA,QAAA,CAAAhF,EAAAV,EAAA,CAAA,YAAA,CAAA,IAAA,CAAAU,CAAA,CAAA,CAAA,GAAAgY,KAAA+F,CAAAA,OAAA,CAAAze,EAAA,CAAA,GAAAU,CAAA,CAAA,QAAA,CAAAV,EAAA,CAAAC,EAAA,CAAA,CAAA,GAAAD,EAAA,CAAA,CAAA,GAAA,QAAA,EAAA,MAAAA,GAAA,CAAA,MAAA4qB,GAAA,CAAA5qB,EAAA;AAAAC,EAAA,CAAA,KAAAS,GAAAO,MAAAE,CAAAA,SAAA+G,CAAAA,QAAA9F,CAAAA,IAAA,CAAApC,EAAA,CAAA0I,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,GAAAhI,EAAA,EAAAV,EAAAmH,CAAAA,WAAA,GAAAzG,EAAA,CAAAV,EAAAmH,CAAAA,WAAAI,CAAAA,IAAA,CAAA,IAAA,KAAA,GAAA7G,EAAA,EAAA,KAAA,GAAAA,EAAA,CAAA,MAAAgY,MAAAC,CAAAA,IAAA,CAAA3Y,EAAA,CAAA,IAAA,WAAA,GAAAU,EAAA,EAAA,0CAAAmQ,CAAAA,IAAA,CAAAnQ,EAAA,CAAA,CAAA,MAAAkqB,GAAA,CAAA5qB,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAA,GAAAC,CAAA,EAAAD,EAAA,EAAA,QAAA,EAAA,MAAAA,GAAAkC,CAAAA,MAAA,CAAA,CAAAxB,CAAA,GAAAV,EAAA,CAAAU,CAAA,CAAA,KAAAG,EAAA,CAAAC,EAAAA,CAAAA,QAAA,EAAA,EAAA,OAAA,CAAAN,EAAAM,CAAA,CAAAJ,EAAAA,QAAA,EAAA,CAAA,MAAAG,EAAA,EAAAb,EAAAkC,CAAAA,MAAA,CAAA,CAAA8C,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,KAAA,CAAA,CAAA,CAAArB,MAAA3D,EAAA,CAAAa,CAAA,EAAA,CAAA,CAAA,CAAA,CAAAb,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAA,KAAAA,GAAA,CAAA,CAAA,CAAAmE,EAAArD,CAAA,CAAA,CAAA,KAAA,KAAAiB,SAAA,CAAA,uIAAA,CAAA;AAAA,CAAA,IAAAD,CAAA,CAAAlB,GAAA,CAAA,CAAA,CAAAH,GAAA,CAAA,CAAA,OAAA,CAAAD,EAAAA,QAAA,EAAA,CAAAE,CAAA,CAAAA,CAAA0B,CAAAA,IAAA,CAAApC,EAAA,CAAA,CAAA,CAAAU,EAAAA,QAAA,EAAA,CAAA,IAAAV,GAAAU,CAAAmF,CAAAA,IAAA,EAAA,OAAAjF,GAAA,CAAAZ,EAAAgF,CAAAA,IAAA,CAAAhF,EAAA,CAAA,CAAAA,EAAAA,QAAA,CAAAA,EAAA,CAAA,CAAAS,EAAA,CAAA,CAAA,CAAAqB,EAAA,CAAA9B,EAAA,CAAA,CAAAmE,EAAAA,QAAA,EAAA,CAAA,GAAA,CAAAvD,EAAA,EAAA,IAAA,EAAAF,CAAAiF,CAAAA,MAAA,EAAAjF,CAAAiF,CAAAA,MAAA,EAAA,CAAA,OAAA,CAAA,GAAAlF,EAAA,CAAA,KAAAqB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8oB,QAAAA,GAAA,CAAA5qB,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,IAAA,EAAAA,CAAA,EAAAA,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,IAAAjC,CAAA,CAAAD,EAAAkC,CAAAA,MAAA,CAAA,KAAA,IAAAxB,EAAA,CAAA,CAAAG,EAAA6X,KAAA,CAAAzY,CAAA,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAAS,CAAA,EAAA,CAAAG,CAAA,CAAAH,CAAA,CAAA,CAAAV,EAAA,CAAAU,CAAA,CAAA,OAAAG,EAAA,CAAAgqB,QAAAA,GAAA,CAAA7qB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD;CAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAoqB,QAAAA,GAAA,CAAA9qB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAA4qB,EAAA,CAAA5pB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAmqB,EAAA,CAAA5pB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA+qB,QAAAA,GAAA,CAAA\/qB,EAAA,CAAA,CAAA,IAAAC,EAAA,QAAA,EAAA,CAAA,GAAA,WAAA,EAAA,MAAAmY,QAAA,EAAA,CAAAA,OAAAC,CAAAA,SAAA,EAAAD,OAAAC,CAAAA,SAAAC,CAAAA,IAAA,CAAA,MAAA,CAAA,CAAA;GAAA,UAAA,EAAA,MAAAC,MAAA,CAAA,MAAA,CAAA,CAAA,IAAA,CAAA,MAAA3K,QAAAzM,CAAAA,SAAAqX,CAAAA,OAAApW,CAAAA,IAAA,CAAAgW,OAAAC,CAAAA,SAAA,CAAAzK,OAAA,CAAA,EAAA,CAAA,QAAA,EAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA5N,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,EAAA,OAAA,SAAA,EAAA,CAAAa,IAAAA,EAAAkG,CAAA,CAAA\/G,EAAA,CAAA,IAAAC,CAAA,CAAA,CAAA,IAAAa,EAAAiG,CAAA,CAAA,IAAA,CAAAI,CAAAA,WAAAzG,EAAA,CAAA0X,OAAAC,CAAAA,SAAA,CAAAxX,CAAA,CAAAoB,SAAA,CAAAnB,CAAA,CAAA,CAAA,IAAAJ,EAAA,CAAAG,CAAA4X,CAAAA,KAAA,CAAA,IAAA,CAAAxW,SAAA,CAAA,OAAA6E,EAAA,CAAA,IAAA,CAAApG,CAAA,CAAA,CAAA,CAAAsqB,QAAAA,GAAA,CAAAhrB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA,CAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA;AAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAuqB,QAAAA,GAAA,CAAAjrB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAA+qB,EAAA,CAAA\/pB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAkU,CAAA,CAAAnU,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAsqB,EAAA,CAAA\/pB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAkrB,QAAAA,GAAA,CAAAlrB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAO,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,IAAAiB,MAAAC,CAAAA,qBAAA,CAAA,CAAA,IAAAL,EAAAI,MAAAC,CAAAA,qBAAA,CAAAlB,EAAA,CAAAC,EAAA,GAAAY,CAAA,CAAAA,CAAA8M,CAAAA,MAAA,CAAA,QAAA,CAAA1N,CAAA,CAAA,CAAA,MAAAgB,OAAAuf,CAAAA,wBAAA,CAAAxgB,EAAA;AAAAC,CAAA,CAAA2D,CAAAA,UAAA,CAAA,CAAA,CAAAlD,EAAA2F,CAAAA,IAAAoS,CAAAA,KAAA,CAAA\/X,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAH,EAAA,CAAAyqB,QAAAA,GAAA,CAAAnrB,EAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA,CAAAjC,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAuB,SAAA,CAAAhC,CAAA,CAAA,CAAAgC,SAAA,CAAAhC,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAirB,EAAA,CAAAjqB,MAAA,CAAAP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAW,EAAA,EAAA,CAAAZ,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,MAAAyf,CAAAA,yBAAA,CAAAzf,MAAA0f,CAAAA,gBAAA,CAAA3gB,EAAA,CAAAiB,MAAAyf,CAAAA,yBAAA,CAAAhgB,CAAA,CAAA,CAAA,CAAAwqB,EAAA,CAAAjqB,MAAA,CAAAP,CAAA,CAAA,CAAAkB,CAAAA,OAAA,CAAA,QAAA,CAAA3B,CAAA,CAAA,CAAAgB,MAAAyC,CAAAA,cAAA,CAAA1D,EAAA,CAAAC,CAAA,CAAAgB,MAAAuf,CAAAA,wBAAA,CAAA9f,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAU,CAAAG,CAAAA,CAAA,CAAAZ,CAAA,CAAAS,EAAA2B,CAAAA,CAAA,CAAApC,CAAA,CAAA,CAAAmrB,YAAAA,QAAA,EAAA,CAAA,MAAAppB,GAAA+P,CAAAA,EAAA,CAAA,CAAA1I,QAAAA,QAAA,EAAA,CAAA,MAAAgiB,GAAA,CAAA,CAAAC,YAAAA,QAAA,EAAA,CAAA,MAAA5mB,GAAA,CAAA;AAAA6mB,aAAAA,QAAA,EAAA,CAAA,MAAAC,GAAA,CAAA,CAAAC,eAAAA,QAAA,EAAA,CAAA,MAAAC,GAAA,CAAA,CAAAC,YAAAA,QAAA,EAAA,CAAA,MAAAha,GAAA,CAAA,CAAAia,cAAAA,QAAA,EAAA,CAAA,MAAAC,GAAA,CAAA,CAAAC,mBAAAA,QAAA,EAAA,CAAA,MAAAjL,GAAA,CAAA,CAAAkL,gBAAAA,QAAA,EAAA,CAAA,MAAAC,GAAA,CAAA,CAAAC,wBAAAA,QAAA,EAAA,CAAA,MAAAC,GAAA,CAAA,CAAAC,UAAAA,QAAA,EAAA,CAAA,MAAApmB,GAAA,CAAA,CAAAqmB,aAAAA,QAAA,EAAA,CAAA,MAAAC,GAAA,CAAA,CAAAC,oBAAAA,QAAA,EAAA,CAAA,MAAAC,GAAA,CAAA,CAAAC,QAAAA,QAAA,EAAA,CAAA,MAAAC,GAAA,CAAA,CAAAC,gBAAAA,QAAA,EAAA,CAAA,MAAAC,GAAA,CAAA,CAAAC,gBAAAA,QAAA,EAAA,CAAA,MAAAC,GAAA,CAAA,CAAAC,gBAAAA,QAAA,EAAA,CAAA,MAAAC,GAAA,CAAA,CAAA,CAAA;IAAAlsB,GAAAH,CAAA,CAAA,IAAA,CAAA,CAAAI,GAAAJ,CAAAA,CAAAA,CAAA,CAAAG,EAAA,CAAA,CAAAiB,GAAApB,CAAA,CAAA,IAAA,CAAA,CAAAE,GAAAF,CAAAA,CAAAA,CAAA,CAAAoB,EAAA,CAAA,CAAArB,GAAAC,CAAA,CAAA,IAAA,CAAA,CAAAF,GAAAE,CAAAA,CAAAA,CAAA,CAAAD,EAAA,CAAA,CAAAuB,GAAAtB,CAAA,CAAA,IAAA,CAAA,CAAAyB,GAAA8K,IAAA+f,CAAAA,KAAA,CAAA,+CAAA,CAAA,aAAA,GAAAhrB,EAAA6P,CAAAA,EAAA4E,CAAAA,IAAA,GAAA\/V,CAAAuE,CAAAA,CAAA,CAAAsI,MAAA0f,CAAAA,qBAAA,EAAA,oBAAAvhB,CAAAA,MAAA,CAAAvJ,EAAA+qB,CAAAA,EAAA,CAAA,GAAA,CAAAxhB,CAAAA,MAAA,CAAAvJ,EAAAgrB,CAAAA,EAAA,CAAA,QAAA,CAAA,CAAA,KAAA9qB,GAAA3B,CAAA,CAAA,IAAA,CAAA,CAAAuG,GAAAvG,CAAA,CAAA,IAAA,CAAA,CAAAwG,GAAAxG,CAAAA,CAAAA,CAAA,CAAAuG,EAAA,CAAA,CAAA7B,GAAA1E,CAAA,CAAA,IAAA,CAAA,CAAA2E,GAAA3E,CAAA,CAAA,IAAA,CAAA,CAAAgE,GAAA,CAAAwJ,KAAA,IAAA,CAAAuV,MAAA,SAAA,CAAA,CAAA1d,GAAA,CAAA,CAAAmI,KAAA,OAAA,CAAAuV,MAAA,SAAA,CAAAmB,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA1W,KAAA,OAAA,CAAAuV,MAAA,WAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,QAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,SAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA;AAAAuV,MAAA,UAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,SAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,OAAA,CAAAmB,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA1W,KAAA,OAAA,CAAAuV,MAAA,OAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,UAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,OAAA,CAAAmB,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA1W,KAAA,OAAA,CAAAuV,MAAA,QAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,QAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,kBAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,UAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,KAAA,CAAA,CAAA,CAAAvV,KAAA,SAAA,CAAAuV,MAAA,WAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,KAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,SAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,cAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,YAAA,CAAA;AAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,eAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,SAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,QAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,QAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,sBAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,WAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,QAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,SAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,YAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,SAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,QAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,YAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,MAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,MAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,UAAA,CAAA,CAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,OAAA,CAAA;AAAA,CAAAvV,KAAA,OAAA,CAAAuV,MAAA,YAAA,CAAA,CAAA\/X,CAAAA,MAAA,CAAA,CAAAhH,EAAA,CAAA,CAAAwV,CAAAA,IAAA,CAAA,QAAA,CAAAla,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAAD,GAAAyjB,CAAAA,KAAA,CAAAxjB,CAAAwjB,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA9V,CAAAA,MAAA,CAAA,QAAA,CAAA3N,EAAA,CAAA,CAAA,MAAA,GAAA,EAAAqF,EAAA,CAAArF,EAAAkO,CAAAA,IAAA,CAAA,CAAA,CAAA,aAAA,GAAAlM,EAAA6P,CAAAA,EAAA6E,CAAAA,WAAA,EAAA3Q,EAAAqnB,CAAAA,OAAA,CAAA,CAAAlf,KAAA5H,UAAA,CAAAmd,MAAA,eAAA,CAAA,CAAA,CAAAvV,KAAA,EAAAxC,CAAAA,MAAA,CAAApF,UAAA,CAAA,MAAA,CAAA,CAAAmd,MAAA,uBAAA,CAAAmB,IAAA,CAAA,CAAA,CAAA,CAAA,KAAA3gB,GAAAS,EAAA,CAAA+B,GAAA,EAAA,CAAAnC,GAAA,QAAA,EAAA,CAAA,IAAAtE,GAAA,GAAAqC,EAAAoM,CAAAA,CAAA,EAAAvH,EAAA,EAAAM,CAAAA,IAAA,CAAAxH,QAAAA,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAAiH,GAAA,EAAAL,CAAAA,IAAA,CAAA,QAAA,CAAA7G,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,OAAAA,CAAAwI,CAAAA,IAAA,CAAAxI,CAAA6F,CAAAA,IAAA,EAAA,KAAA,CAAA,CAAA,GAAA5B,EAAA,CAAAhE,CAAA,CAAA+L,QAAAqhB,CAAAA,eAAAC,CAAAA,GAAA,CAAArpB,EAAA2gB,CAAAA,GAAA,CAAA,KAAA,CAAA,KAAA,CAAA5Y,QAAAqhB,CAAAA,eAAAE,CAAAA,IAAA;AAAAtpB,EAAAiK,CAAAA,IAAA,CAAA,CAAAjO,CAAAiO,CAAAA,IAAAsf,CAAAA,UAAA,CAAAlnB,UAAA,CAAA,CAAA,CAAAtG,CAAA6F,CAAAA,IAAA,CAAA,CAAA,MAAA,CAAAY,EAAA,CAAA,EAAAzG,EAAA6F,CAAAA,IAAA,CAAA,EAAA,MAAA,MAAA,CAAA,CAAA,MAAA7F,EAAA6F,CAAAA,IAAA,CAAA,CAAA,CAAAnF,CAAA,CAAA,GAAA,CAAA,CAAA,IAAAgL,CAAAA,MAAA,CAAAzH,EAAAiK,CAAAA,IAAA,CAAA,OAAA,CAAA,CAAA,MAAA,CAAA,CAAAzH,EAAA,CAAAzG,CAAA4E,CAAAA,IAAA,MAAA,EAAA,CAAA,KAAA,KAAA,CAAA,MAAA5E,EAAA2I,CAAAA,IAAA,EAAA,CAAA,CAAA,CAAA3I,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA,SAAA,CAAAC,CAAA,CAAA,CAAA,MAAAD,GAAAyY,CAAAA,KAAA,CAAA,IAAA,CAAAxW,SAAA,CAAA,CAAA,CAAA,EAAA,CAAA8Q,GAAAA,QAAA,CAAA\/S,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAA,IAAAS,EAAA,CAAA,CAAAA,CAAA,CAAAT,CAAAiC,CAAAA,MAAA,CAAA,EAAAxB,CAAA,CAAA,CAAA,IAAAG,EAAAZ,CAAA,CAAAS,CAAA,CAAA,IAAA,IAAA,EAAA,GAAAV,EAAA,CAAAa,CAAA,CAAA,CAAA,MAAAb,GAAA,CAAAA,EAAA,CAAAa,CAAA,CAAA,CAAA,GAAA,QAAA,EAAA,MAAAb,GAAA,CAAA,MAAAA,GAAA,CAAA,CAAAiT,GAAAA,QAAA,CAAAjT,EAAA,CAAAC,CAAA,CAAA,CAAA,GAAAgE,EAAAiK,CAAAA,IAAAsf,CAAAA,UAAA,CAAAlnB,UAAA,CAAA,CAAA,MAAA5F,GAAA,CAAAT,CAAA,CAAA,EAAAyL,CAAAA,MAAA,CAAA1L,EAAA,CAAA,GAAA,CAAA0L,CAAAA,MAAA,CAAAuB,IAAAC,CAAAA,SAAA,CAAAjN,CAAA,CAAAyI,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA;AAAA1I,EAAA,CAAA,KAAA0L,CAAAA,MAAA,CAAAhL,EAAA,CAAA,KAAA,CAAA,KAAAG,EAAAb,EAAAytB,CAAAA,KAAA,CAAA,GAAA,CAAA3sB,EAAAA,CAAAiS,EAAA,CAAAtM,EAAA,CAAA5F,CAAA,CAAAC,EAAAiS,EAAA,CAAA3N,EAAA,CAAAvE,CAAA,CAAA,IAAA,IAAA,EAAA,GAAAC,CAAA,CAAA,KAAAsD,MAAA,CAAA,6BAAAsH,CAAAA,MAAA,CAAA1L,EAAA,CAAA,CAAA,CAAA,GAAAC,CAAA,CAAA,IAAA6B,IAAAA,CAAA,GAAA7B,EAAA,CAAAa,CAAA,CAAAA,CAAAkQ,CAAAA,OAAA,CAAA,IAAAtF,CAAAA,MAAA,CAAA5J,CAAA,CAAA,IAAA,CAAA,CAAA7B,CAAA,CAAA6B,CAAA,CAAA,CAAA,OAAAhB,EAAA,CAAA,CAAAqS,GAAAzS,CAAA,CAAA,IAAA,CAAA,CAAA2S,GAAAA,QAAA,EAAA,CAAA,MAAA,GAAAF,EAAA7P,CAAAA,GAAA,EAAA,KAAA,CAAA,CAAAygB,UAAA,gBAAA,CAAAc,SAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAuhB,SAAA5R,EAAA,CAAA,qBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAQ,GAAA,QAAA,CAAAzT,EAAA,CAAA,CAAAa,QAAAA,EAAA,EAAA,CAAA,IAAAb,CAAA,CAAAC,EAAAgF,EAAA,CAAA,IAAA,CAAApE,CAAA,CAAA,KAAA,IAAAC,GAAAmB,SAAAC,CAAAA,MAAA,CAAAJ,GAAA4W,KAAA,CAAA5X,EAAA,CAAA,CAAAF,GAAA,CAAA,CAAAA,EAAA,CAAAE,EAAA,CAAAF,EAAA,EAAA,CAAAkB,EAAA,CAAAlB,EAAA,CAAA,CAAAqB,SAAA,CAAArB,EAAA,CAAA,OAAAkG,EAAA,CAAA7G,EAAA,EAAAD,CAAA,CAAAC,EAAA,CAAAS,CAAA0B,CAAAA,IAAAqW,CAAAA,KAAA,CAAA\/X,CAAA;AAAA,CAAA,IAAA,CAAAgL,CAAAA,MAAA,CAAA5J,EAAA,CAAA,CAAA,CAAA7B,EAAAytB,CAAAA,KAAA,CAAA,CAAAC,UAAA,CAAA,CAAA,CAAA,CAAA3tB,CAAA,EAAA,CAAAgE,CAAA,CAAAnD,CAAA,CAAAb,EAAA,CAAA,KAAAC,CAAA,CAAAS,EAAA6S,CAAA,CAAA1S,CAAA,CAAA,OAAAwD,EAAA,CAAAxD,CAAA,CAAA,CAAA,CAAA0B,IAAA,mBAAA,CAAAoB,OAAA1D,CAAA,CAAA,GAAAoC,EAAAoM,CAAAA,CAAA,EAAAvH,EAAA,EAAAM,CAAAA,IAAA,CAAAxH,QAAAA,GAAA,EAAA,CAAA,IAAAC,EAAA,CAAAS,GAAA,IAAA,OAAAwG,GAAA,EAAAL,CAAAA,IAAA,CAAA,QAAA,CAAA7G,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,OAAAA,EAAAwI,CAAAA,IAAA,CAAAxI,EAAA6F,CAAAA,IAAA,EAAA,KAAA,CAAA,CAAA,MAAA5F,GAAA,CAAA8F,EAAAme,CAAAA,IAAA,CAAA,QAAA,CAAAlkB,EAAA,CAAA,CAAA,MAAAA,GAAAkO,CAAAA,IAAA,GAAAxN,EAAAkC,CAAAA,KAAAgrB,CAAAA,QAAA,CAAA,CAAA,EAAAlpB,EAAA,CAAA1E,EAAA6F,CAAAA,IAAA,CAAA,CAAA,CAAAvB,EAAA,CAAArE,EAAA,CAAA,MAAA,CAAA,CAAA,IAAA4tB,CAAAA,QAAA,CAAA,CAAAF,UAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,KAAA,KAAA,CAAA,MAAA3tB,GAAA2I,CAAAA,IAAA,EAAA,CAAA,CAAA,CAAA3I,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,QAAA,EAAA,CAAA,MAAAC,EAAAwY,CAAAA,KAAA,CAAA,IAAA,CAAAxW,SAAA,CAAA,CAAA0B,CAAA,CAAA,CAAA,CAAApB,IAAA,QAAA,CAAAoB,MAAAA,QAAA,EAAA,CAAA,MAAA,KAAA+pB,CAAAA,KAAAC,CAAAA,SAAA;AAAA,GAAAxa,EAAA7P,CAAAA,GAAA,EAAA+P,EAAA,CAAA,EAAA,CAAA,CAAA,IAAAzQ,CAAAA,KAAAiiB,CAAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAAhkB,CAAA,CAAA,CAAAL,EAAA,EAAAstB,CAAAA,SAAA,CAAA,MAAArQ,GAAA,CAAAtW,WAAA,CAAAnH,EAAA,CAAA,CAAA,IAAA+tB,CAAAA,MAAA,CAAA\/tB,EAAA,CAAA0d,WAAA,CAAA1d,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAA,KAAA+tB,CAAAA,YAAA,CAAAhuB,EAAA,CAAAC,CAAA,CAAA,CAAA+tB,YAAA,CAAAhuB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAAG,EAAA6Y,EAAA,CAAA1Z,EAAA,CAAAC,CAAA,CAAAS,EAAA,GAAAT,EAAA,CAAA,IAAAguB,CAAAA,eAAA,CAAAjuB,EAAA,CAAAa,CAAA,CAAA,CAAAA,CAAA,CAAAA,CAAA6K,CAAAA,MAAA,CAAAzL,EAAA,CAAA,CAAA,OAAA,CAAA0C,KAAA,YAAA,CAAA4Y,IAAA,IAAA2S,CAAAA,WAAA,CAAArtB,CAAA,CAAAZ,CAAA,CAAA,CAAA,CAAAiuB,WAAA,CAAAluB,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAAS,EAAA,EAAA,KAAA,MAAAG,CAAA,GAAAb,GAAA,CAAAU,CAAA2F,CAAAA,IAAA,CAAA,GAAA,IAAA0nB,CAAAA,MAAAI,CAAAA,aAAA,CAAAttB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAZ,CAAA,CAAA,CAAA,OAAAS,EAAA,CAAAutB,eAAA,CAAAjuB,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAAS,EAAA,EAAA,IAAA,CAAA,CAAAT,CAAAiC,CAAAA,MAAA,CAAA,IAAA,IAAArB,EAAA,CAAA,CAAAA,CAAA,CAAAZ,CAAAiC,CAAAA,MAAA,CAAArB,CAAA,EAAA,CAAA,CAAA,IAAAC,EAAAb,CAAA,CAAAY,CAAA;AAAA,CAAA,CAAA,EAAA,CAAAkY,CAAA,CAAAjY,CAAA,CAAA,GAAAgB,CAAA,CAAA,CAAA7B,CAAA,CAAAY,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAiY,CAAA,CAAAjX,CAAA,CAAA,GAAA7B,CAAA,CAAA,IAAAmuB,CAAAA,oBAAA,CAAApuB,EAAA,CAAA8B,CAAA,CAAA,CAAApB,CAAA2F,CAAAA,IAAA,CAAA,GAAApG,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAS,EAAA,CAAA2tB,iBAAA,CAAAruB,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAAkZ,EAAA,CAAAnZ,EAAA,EAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAAmuB,oBAAA,CAAApuB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAA0T,IAAAoF,CAAAA,GAAA,CAAA,CAAA,CAAA,EAAA,CAAAT,CAAA,CAAA9Y,CAAA,CAAA,CAAA,CAAAY,EAAA,EAAA,KAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAAd,EAAAkC,CAAAA,MAAA,CAAApB,CAAA,EAAA,CAAA,CAAA,IAAAgB,GAAA9B,EAAA,CAAAc,CAAA,CAAA,CAAAF,GAAAZ,EAAA,EAAAc,CAAA,CAAA,CAAA,EAAAd,EAAAkC,CAAAA,MAAA,CAAA,IAAAoX,CAAA,CAAAxX,EAAA,CAAAlB,EAAA,CAAA,GAAAX,CAAA,CAAA,GAAAD,EAAA,CAAAkZ,CAAA,CAAApX,EAAA,CAAAlB,EAAA,CAAAX,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAAa,EAAAA,CAAAiY,CAAA,CAAA,CAAA\/Y,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA6B,GAAAiX,CAAA,CAAA,CAAA\/Y,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAa,GAAA,CAAAJ,CAAA,EAAAoB,EAAA,CAAApB,CAAA,EAAAG,CAAAwF,CAAAA,IAAA,CAAA,CAAA8Z,MAAAngB,EAAA,CAAAigB,SAAAnf,EAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAAD,CAAAqB,CAAAA,MAAA,CAAA,CAAAxB,CAAAA,CAAAG,CAAAqZ,CAAAA,IAAA,CAAA,CAAAla,EAAA,CAAAC,EAAA,CAAA,EAAAD,EAAAigB,CAAAA,QAAA,CAAAhgB,EAAAggB,CAAAA,QAAA,CAAAve,CAAAA,GAAA,CAAA1B,EAAA,EAAAA,EAAAmgB,CAAAA,KAAA,CAAA,IAAAhH,CAAA,CAAAnZ,EAAA;AAAA,GAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAS,CAAA2f,CAAAA,KAAA,EAAA,CAAAlH,CAAA,CAAAnZ,EAAA,CAAA,GAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAS,CAAA4H,CAAAA,GAAA,EAAA,CAAA,CAAA,EAAA5H,CAAAwB,CAAAA,MAAA,CAAA,MAAA,KAAAmsB,CAAAA,iBAAA,CAAAruB,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,EAAAa,EAAAA,CAAA,CAAAb,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA6B,EAAAA,CAAA,EAAA,KAAA7B,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAAa,CAAAoB,CAAAA,MAAA,CAAA,CAAA,CAAAjC,CAAA,EAAA,CAAA,CAAAS,CAAA,CAAA,CAAAI,CAAA,CAAAb,CAAA,CAAA,CAAAa,CAAA,CAAAb,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAAouB,CAAAA,iBAAA,CAAAruB,EAAA,CAAAU,CAAA,CAAA,EAAAoB,CAAAuE,CAAAA,IAAA,CAAA3F,CAAA,CAAA,OAAAoB,EAAA,CAAA,MAAA,KAAAusB,CAAAA,iBAAA,CAAAruB,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,KAAAmd,GAAA,QAAAK,GAAA,CAAAC,WAAA,CAAA1d,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAA,KAAA+tB,CAAAA,YAAA,CAAAhuB,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAAod,GAAA,QAAAI,GAAA,CAAAC,WAAA,CAAA1d,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAAS,EAAA,IAAAstB,CAAAA,YAAA,CAAAhuB,EAAA,CAAAC,CAAA,CAAAY,EAAAA,CAAAI,MAAAK,CAAAA,MAAA,CAAA,EAAA,CAAArB,CAAA,CAAA,CAAA2Z,aAAA3Z,CAAA2Z,CAAAA,YAAAA,CAAA,EAAA,CAAA,CAAA9Y,GAAAA,CAAA,IAAAktB,CAAAA,YAAA,CAAAhuB,EAAA,CAAAa,CAAA,CAAA,OAAAH,EAAA6a,CAAAA,GAAA,CAAA7a,CAAA6a,CAAAA,GAAA7P,CAAAA,MAAA,CAAA5K,EAAAya,CAAAA,GAAA,CAAA;AAAA7a,CAAA,CAAA,CAAA,KAAA4c,GAAA,CAAAnW,WAAA,CAAAnH,EAAA,CAAA,CAAA,IAAA+tB,CAAAA,MAAA,CAAA\/tB,EAAA,CAAA0d,WAAA,CAAA1d,EAAA,CAAAC,CAAA,CAAA,CAAAS,EAAAA,CAAAgZ,EAAA,CAAA1Z,EAAA,CAAAC,CAAA,CAAAgB,MAAAK,CAAAA,MAAA,CAAA,EAAA,CAAArB,CAAA,CAAA,CAAA8b,eAAA,CAAA,CAAAnC,aAAA,CAAA,CAAA8B,UAAA,CAAA,CAAA,CAAA,CAAA,OAAA,KAAA4S,CAAAA,WAAA,CAAA5tB,EAAA,CAAAT,CAAA,CAAA,CAAAquB,WAAA,CAAAtuB,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAAS,EAAA,EAAA,KAAAG,EAAAZ,CAAA4Z,CAAAA,UAAA,EAAA,CAAAhZ,CAAA,GAAAA,CAAA,CAAA,CAAA,CAAAZ,CAAA6Z,CAAAA,WAAA,CAAAjZ,EAAA,CAAAuT,IAAAoF,CAAAA,GAAA,CAAA3Y,CAAA,CAAA,EAAA,CAAA,KAAAC,EAAAb,CAAAsuB,CAAAA,UAAA,EAAA,CAAAztB,CAAA,GAAAA,CAAA,CAAAb,CAAA6Z,CAAAA,WAAA,CAAA,CAAA,CAAA,OAAAhY,GAAAjB,CAAAiB,CAAA,CAAA,KAAA,MAAAlB,EAAA,GAAAZ,GAAA,CAAA,CAAA,IAAAA,GAAA+Y,CAAA,CAAAnY,EAAA,CAAAJ,GAAAA,CAAA4T,IAAAoa,CAAAA,IAAA,CAAAxuB,EAAA,CAAAa,CAAA,CAAAL,CAAA,CAAAR,GAAAgC,EAAAxB,EAAAwB,CAAAnB,CAAA,OAAAsB,IAAAvB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAuB,CAAAvB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAuB,EAAA,CAAAA,CAAAtB,CAAAsB,CAAA,CAAA,CAAAE,GAAA+R,IAAAqF,CAAAA,GAAA,CAAA7Y,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,IAAAZ,GAAA,CAAA,CAAAA,EAAA,CAAAQ,EAAA,CAAAR,EAAA,EAAA,CAAA,CAAA,IAAAY,GAAAyB,EAAAzB,CAAAoB,EAAApB,CAAAZ,EAAAY,CAAAC,CAAA,CAAAJ,GAAA,IAAAstB,CAAAA,MAAAU,CAAAA,mBAAA,CAAAtsB,EAAA;AAAAL,EAAA,CAAAK,EAAA,CAAAL,EAAA,CAAA7B,CAAA,CAAAO,GAAAA,CAAA,IAAAutB,CAAAA,MAAAU,CAAAA,mBAAA,CAAA7tB,EAAA,CAAAkB,EAAA,CAAAlB,EAAA,CAAAkB,EAAA,CAAA7B,CAAA,CAAAgF,GAAAA,CAAA,IAAA8oB,CAAAA,MAAAW,CAAAA,OAAA,CAAAjuB,EAAA,CAAAD,EAAA,CAAAM,CAAA,CAAAA,CAAA,CAAAb,CAAA,CAAAS,EAAA2F,CAAAA,IAAA,CAAA,GAAApB,EAAAsW,CAAAA,GAAA,CAAA,CAAA,CAAA,MAAA,CAAA5Y,KAAA,YAAA,CAAA4Y,IAAA7a,CAAA,CAAA,CAAA,CAAA,KAAA6c,GAAA,CAAApW,WAAA,CAAAnH,EAAA,CAAA,CAAA,IAAA+tB,CAAAA,MAAA,CAAA\/tB,EAAA,CAAA0d,WAAA,CAAA1d,EAAA,CAAAC,CAAA,CAAA,CAAAS,EAAAA,CAAAgZ,EAAA,CAAA1Z,EAAA,CAAAC,CAAA,CAAA,OAAA,CAAA0C,KAAA,YAAA,CAAA4Y,IAAA,IAAAoT,CAAAA,UAAA,CAAAjuB,EAAA,CAAAT,CAAA,CAAA,CAAA,CAAA0uB,UAAA,CAAA3uB,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAAS,EAAA,CAAA,CAAAT,CAAA2uB,CAAAA,UAAA,CAAA,CAAA,CAAA3uB,CAAA4Z,CAAAA,UAAA,CAAA,CAAA,CAAA5Z,CAAA6Z,CAAAA,WAAA,CAAA7Z,CAAA4Z,CAAAA,UAAA,CAAA5Z,CAAA2uB,CAAAA,UAAA,CAAA\/tB,EAAA,CAAA,CAAAZ,CAAA4uB,CAAAA,OAAA,CAAA,CAAA,CAAA5uB,CAAA4Z,CAAAA,UAAA,CAAA,CAAA,CAAA5Z,CAAA6Z,CAAAA,WAAA,CAAA7Z,CAAA4Z,CAAAA,UAAA,CAAA5Z,CAAA4uB,CAAAA,OAAA,CAAA\/tB,EAAA,EAAA,OAAAd,GAAA4B,CAAAA,OAAA,CAAA5B,EAAA,EAAA,CAAA,IAAA8B,GAAAiX,CAAA,CAAA\/Y,EAAA,CAAA,OAAAY,GAAAwT,IAAA0a,CAAAA,KAAA,CAAAhtB,EAAA;CAAApB,CAAA,CAAAG,CAAA,EAAAJ,GAAAA,EAAAqB,EAAArB,CAAAI,CAAAJ,CAAAG,EAAAH,EAAAC,CAAAD,CAAAI,CAAAJ,GAAA,CAAA,KAAAD,GAAAR,EAAA,CAAA,CAAA,CAAA,KAAAgC,GAAAhC,EAAA,CAAA,CAAA,CAAAQ,GAAA,CAAA,CAAA,CAAA,CAAAwB,EAAA,CAAA,CAAA,CAAA,GAAAxB,EAAA,CAAAR,EAAA,CAAA,CAAA,CAAA,CAAAgC,EAAA,CAAAhC,EAAA,CAAA,CAAA,CAAA,CAAAmC,GAAAA,CAAAiS,IAAA2a,CAAAA,IAAA,EAAA\/sB,EAAA,CAAA,CAAA,CAAA,CAAAxB,EAAA,CAAA,CAAA,CAAA,GAAAwB,EAAA,CAAA,CAAA,CAAA,CAAAxB,EAAA,CAAA,CAAA,CAAA,EAAA,KAAAR,EAAA,CAAA,CAAA,CAAAA,EAAA,CAAAY,EAAA,CAAAZ,EAAA,EAAA,CAAA,CAAA,IAAA8B,GAAA9B,EAAA8B,EAAApB,CAAAoB,CAAAjB,CAAAiB,CAAA,CAAAlB,GAAAkB,EAAAlB,CAAAF,CAAAsB,GAAAA,CAAA,CAAAxB,EAAA,CAAA,CAAA,CAAA,CAAAsB,EAAA,CAAAsS,IAAAyE,CAAAA,GAAA,CAAA1W,EAAA,CAAA,CAAA1B,EAAA,CAAA2T,IAAAyE,CAAAA,GAAA,CAAA1W,EAAA,CAAA,CAAA3B,EAAA,CAAA,CAAA,CAAA,CAAAsB,EAAA,CAAAsS,IAAA0E,CAAAA,GAAA,CAAA3W,EAAA,CAAA,CAAA1B,EAAA,CAAA2T,IAAA0E,CAAAA,GAAA,CAAA3W,EAAA,CAAA,CAAAE,GAAAA,CAAA,CAAA7B,EAAA,CAAA,CAAA,CAAA,CAAAI,EAAA,CAAAwT,IAAAyE,CAAAA,GAAA,CAAA1W,EAAA,CAAA,CAAA1B,EAAA,CAAA2T,IAAAyE,CAAAA,GAAA,CAAA1W,EAAA,CAAA,CAAA3B,EAAA,CAAA,CAAA,CAAA,CAAAI,EAAA,CAAAwT,IAAA0E,CAAAA,GAAA,CAAA3W,EAAA,CAAA,CAAA1B,EAAA,CAAA2T,IAAA0E,CAAAA,GAAA,CAAA3W,EAAA,CAAA,CAAArB,EAAAuF,CAAAA,IAAA,CAAA,GAAA,IAAA0nB,CAAAA,MAAAI,CAAAA,aAAA,CAAAnsB,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAK,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAApC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAa,CAAA,CAAA,CAAA,KAAA0c,GAAA,CAAArW,WAAA,CAAAnH,EAAA,CAAA,CAAA,IAAA+tB,CAAAA,MAAA,CAAA\/tB,EAAA,CAAA0d,WAAA,CAAA1d,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAAS,EAAA,CAAA,CAAAT,CAAA4Z,CAAAA,UAAA,CAAA,CAAA,CAAA5Z,CAAA6Z,CAAAA,WAAA;AAAA7Z,CAAA4Z,CAAAA,UAAA,CAAAhZ,EAAA,CAAA,CAAAZ,CAAA+uB,CAAAA,YAAA,CAAAtuB,CAAA,CAAAT,CAAA+uB,CAAAA,YAAAluB,GAAAA,CAAA4Y,EAAA,CAAA1Z,EAAA,CAAAC,CAAA,CAAAgB,MAAAK,CAAAA,MAAA,CAAA,EAAA,CAAArB,CAAA,CAAA,CAAA4Z,WAAAnZ,CAAAmZ,CAAAhZ,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA8B,KAAA,YAAA,CAAA4Y,IAAA,IAAA0T,CAAAA,WAAA,CAAAnuB,EAAA,CAAAD,CAAA,CAAAZ,CAAA,CAAA,CAAA,CAAAgvB,WAAA,CAAAjvB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,MAAAG,EAAA,EAAA,OAAAb,GAAA4B,CAAAA,OAAA,CAAA5B,CAAA,EAAA,CAAA,IAAAc,GAAAiY,CAAA,CAAA\/Y,CAAA,CAAA8B,GAAAA,CAAAsS,IAAAuF,CAAAA,KAAA,CAAA7Y,EAAA,EAAA,CAAA,CAAAb,CAAA,EAAA,KAAAW,GAAAZ,CAAA,CAAA,CAAA,CAAA,KAAAS,GAAAT,CAAA,CAAA,CAAA,CAAAY,GAAA,CAAA,CAAA,CAAA,CAAAH,EAAA,CAAA,CAAA,CAAA,GAAAG,EAAA,CAAAZ,CAAA,CAAA,CAAA,CAAA,CAAAS,EAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAAQ,EAAAA,CAAA4T,IAAA2a,CAAAA,IAAA,EAAAtuB,EAAA,CAAA,CAAA,CAAA,CAAAG,EAAA,CAAA,CAAA,CAAA,GAAAH,EAAA,CAAA,CAAA,CAAA,CAAAG,EAAA,CAAA,CAAA,CAAA,EAAA,KAAAZ,EAAA,CAAA,CAAA,CAAAA,EAAA,CAAA8B,EAAA,CAAA9B,EAAA,EAAA,CAAA,CAAA,IAAAc,GAAA,CAAAA,CAAAd,EAAAc,CAAAb,CAAA,CAAA6B,GAAA,CAAAA,EAAA9B,EAAA8B,CAAA,CAAAA,EAAA7B,CAAA,CAAAQ,GAAA2T,IAAA4E,CAAAA,IAAA,CAAA,CAAA,CAAA5E,IAAA6E,CAAAA,GAAA,CAAAhZ,CAAA,CAAA,CAAA,CAAA,CAAA+B,GAAAA,CAAA,CAAApB,EAAA,CAAA,CAAA,CAAA,CAAAE,EAAA,CAAAsT,IAAAyE,CAAAA,GAAA,CAAArY,CAAA,CAAA,CAAAI,EAAA,CAAA,CAAA,CAAA,CAAAE,EAAA,CAAAsT,IAAA0E,CAAAA,GAAA,CAAAtY,CAAA,CAAA,CAAA2B,GAAAA,CAAA,CAAAvB,EAAA,CAAA,CAAA,CAAA,CAAAkB,EAAA,CAAAsS,IAAAyE,CAAAA,GAAA,CAAArY,CAAA,CAAA,CAAAI,EAAA,CAAA,CAAA,CAAA,CAAAkB,EAAA,CAAAsS,IAAA0E,CAAAA,GAAA,CAAAtY,CAAA,CAAA,CAAA6B;EAAAA,CAAA,CAAAL,EAAA,CAAA,CAAA,CAAA,CAAAvB,EAAA,CAAA2T,IAAAyE,CAAAA,GAAA,CAAArY,CAAA,CAAA4T,IAAAC,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAArS,EAAA,CAAA,CAAA,CAAA,CAAAvB,EAAA,CAAA2T,IAAA0E,CAAAA,GAAA,CAAAtY,CAAA,CAAA4T,IAAAC,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAxT,EAAAwF,CAAAA,IAAA,CAAA,GAAA,IAAA0nB,CAAAA,MAAAI,CAAAA,aAAA,CAAAnsB,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAK,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA3B,CAAA,CAAA,CAAA,GAAA,IAAAqtB,CAAAA,MAAAI,CAAAA,aAAA,CAAA9rB,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAF,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAzB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAG,CAAA,CAAA,CAAA,MAAAsc,GAAA,EAAA,MAAAS,GAAA,CAAAzW,WAAA,CAAAnH,EAAA,CAAA,CAAA,IAAA6b,CAAAA,IAAA,CAAA7b,EAAA,CAAA6F,IAAA,EAAA,CAAA,MAAA,KAAAgW,CAAAA,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,IAAAA,CAAAA,IAAA,CAAAzH,IAAA8a,CAAAA,IAAA,CAAA,KAAA,CAAA,IAAArT,CAAAA,IAAA,CAAA,GAAA,CAAA,EAAA,EAAA,CAAAzH,IAAA+a,CAAAA,MAAA,EAAA,CAAA,CAAA,MAAAvU,GAAA,CAAA7H,EAAA,CAAA,CAAAjR,EAAA,CAAA,CAAAiE,EAAA,CAAA,CAAA\/D,EAAA,CAAA,CAAA2R,EAAA,CAAA,CAAAtP,EAAA,CAAA,CAAA4O,EAAA,CAAA,CAAAxS,EAAA,CAAA,CAAAwD,EAAA,CAAA,CAAAU,EAAA,CAAA,CAAAyY,EAAA,CAAA,CAAA1D,EAAA,CAAA,CAAAtU,EAAA,CAAA,CAAA5E,EAAA,CAAA,CAAAqS,EAAA,CAAA,CAAA5S,EAAA,CAAA,CAAAkU,EAAA,CAAA,CAAAjP,EAAA,CAAA,CAAAuJ,EAAA,CAAA,CAAA8E,EAAA,CAAA,CAAA,CAAA0J,GAAA,CAAAmS,WAAAA,QAAA,CAAApvB,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAAgc,GAAA,CAAAjc,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAAwuB,oBAAAA,QAAA,CAAAzuB,EAAA;AAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,MAAA6b,GAAA,CAAAvc,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,CAAAguB,QAAAA,QAAA,CAAA1uB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,CAAAgB,CAAAA,CAAAga,EAAA,CAAApb,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,OAAAub,GAAA,CAAArc,EAAA,CAAAC,CAAA,CAAAa,CAAA,CAAAgB,CAAA,CAAA4a,CAAAA,KAAA,CAAA,CAAAyR,cAAAA,QAAA,CAAAnuB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,CAAA,MAAAwa,GAAA,CAAAtb,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAuuB,GAAA,CAAAloB,WAAA,CAAAnH,EAAA,CAAA,CAAA,IAAAsvB,CAAAA,cAAA,CAAA,CAAAvS,oBAAA,CAAA,CAAArB,UAAA,CAAA,CAAAqC,OAAA,CAAA,CAAAwR,OAAA,MAAA,CAAAzV,YAAA,CAAA,CAAAmE,eAAA,CAAA,CAAAjC,aAAA,GAAA,CAAAD,eAAA,CAAA,CAAAmB,UAAA,SAAA,CAAAqR,WAAA,CAAA,CAAA,CAAA3U,aAAA,CAAA,EAAA,CAAAC,WAAA,CAAA,CAAA,CAAA+U,WAAA,CAAA,CAAA,CAAAC,QAAA,CAAA,CAAA,CAAAG,aAAA,CAAA,CAAA,CAAAnT,KAAA,CAAA,CAAA2T,sBAAA,CAAA,CAAA,CAAA7T,mBAAA,CAAA,CAAA,CAAAkC,uBAAA,CAAA,CAAA;AAAAG,iBAAA,CAAA,CAAA,CAAA,KAAAyR,CAAAA,MAAA,CAAAzvB,EAAA,EAAA,EAAA,KAAAyvB,CAAAA,MAAAjM,CAAAA,OAAA,GAAA,IAAA8L,CAAAA,cAAA,CAAA,IAAAI,CAAAA,EAAA,CAAA,IAAAD,CAAAA,MAAAjM,CAAAA,OAAA,CAAA,CAAA,CAAAmM,cAAA,EAAA,CAAA,MAAAvb,KAAA0a,CAAAA,KAAA,CAAA1a,IAAA+a,CAAAA,MAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAAO,EAAA,CAAA1vB,EAAA,CAAA,CAAA,MAAAA,GAAA,CAAAiB,MAAAK,CAAAA,MAAA,CAAA,EAAA,CAAA,IAAAguB,CAAAA,cAAA,CAAAtvB,EAAA,CAAA,CAAA,IAAAsvB,CAAAA,cAAA,CAAAM,EAAA,CAAA5vB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,MAAA,CAAAmvB,MAAA7vB,EAAA,CAAA8vB,KAAA7vB,CAAA6vB,EAAA,EAAA,CAAAtM,QAAA9iB,CAAA8iB,EAAA,IAAA8L,CAAAA,cAAA,CAAA,CAAAS,IAAA,CAAA\/vB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,CAAAgB,CAAAA,CAAA,IAAA4tB,CAAAA,EAAA,CAAA5uB,CAAA,CAAA,OAAA,KAAA8uB,CAAAA,EAAA,CAAA,MAAA,CAAA,CAAA,CAAAjtB,KAAA,MAAA,CAAA4Y,IAAAD,EAAA,CAAAtb,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAiB,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAAkuB,SAAA,CAAAhwB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,CAAAgB,CAAAA,CAAA,IAAA4tB,CAAAA,EAAA,CAAA5uB,CAAA,CAAA,OAAAF,GAAA,EAAA,KAAA,GAAAya,EAAA,CAAArb,CAAA,CAAAA,EAAA,CAAAC,CAAA,CAAAD,CAAA,CAAAA,EAAA,CAAAU,CAAA,CAAAT,CAAA,CAAAD,CAAA,CAAAA,EAAA,CAAAU,CAAA,CAAAT,CAAA,CAAAY,CAAA,CAAAb,CAAA,CAAAA,EAAA,CAAAC,CAAA,CAAAY,CAAA,CAAAb,CAAA;AAAA,CAAA,CAAA,CAAA8B,CAAA,CAAAA,EAAAmuB,CAAAA,IAAA,GAAAnvB,EAAA,CAAA,CAAA,CAAAd,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAAU,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAAU,CAAA,CAAAT,CAAA,CAAAY,CAAA,CAAA,CAAA,CAAAb,EAAA,CAAAC,CAAA,CAAAY,CAAA,CAAA,CAAA,CAAA,OAAA,GAAAiB,CAAAob,CAAAA,SAAA,CAAAtc,EAAAyF,CAAAA,IAAA,CAAAyW,EAAA,CAAAhc,EAAA,CAAAgB,CAAA,CAAA,CAAA,CAAAlB,EAAAyF,CAAAA,IAAA,CAAA2W,EAAA,CAAAlc,EAAA,CAAAgB,CAAA,CAAA,CAAA,CAAA,OAAAouB,MAAA,GAAApuB,CAAAytB,CAAAA,MAAA,EAAA3uB,EAAAyF,CAAAA,IAAA,CAAA5F,EAAA,CAAA,CAAA,IAAAmvB,CAAAA,EAAA,CAAA,WAAA,CAAAhvB,EAAA,CAAAkB,CAAA,CAAA,CAAA4sB,OAAA,CAAA1uB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,CAAAgB,CAAAA,CAAA,IAAA4tB,CAAAA,EAAA,CAAA5uB,CAAA,CAAA,OAAAF,GAAA,EAAAH,EAAAA,CAAAqb,EAAA,CAAApb,CAAA,CAAAG,CAAA,CAAAiB,CAAA,CAAAtB,EAAAA,CAAA6b,EAAA,CAAArc,EAAA,CAAAC,CAAA,CAAA6B,CAAA,CAAArB,CAAA,CAAAqB,EAAAmuB,CAAAA,IAAA,GAAA,OAAA,GAAAnuB,CAAAob,CAAAA,SAAA,EAAAxc,EAAA,CAAA2b,EAAA,CAAArc,EAAA,CAAAC,CAAA,CAAA6B,CAAA,CAAArB,CAAA,CAAAic,CAAAA,KAAA,CAAAhc,EAAAiC,CAAAA,IAAA,CAAA,UAAA,CAAA\/B,EAAAyF,CAAAA,IAAA,CAAA3F,EAAA,CAAA,EAAAE,EAAAyF,CAAAA,IAAA,CAAA2W,EAAA,CAAAxc,CAAAic,CAAAA,eAAA,CAAA3a,CAAA,CAAA,CAAA,CAAA,OAAAouB,MAAA,GAAApuB,CAAAytB,CAAAA,MAAA,EAAA3uB,EAAAyF,CAAAA,IAAA,CAAA7F,CAAAkc,CAAAA,KAAA,CAAA,CAAA,IAAAkT,CAAAA,EAAA,CAAA,SAAA,CAAAhvB,EAAA,CAAAkB,CAAA,CAAA,CAAAquB,MAAA,CAAAnwB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAA,CAAAC,EAAAA,CAAA,IAAA4tB,CAAAA,OAAA,CAAA1uB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAA,CAAA,CAAAG,CAAA,CAAA,OAAAC,GAAA+uB,CAAAA,KAAA,CAAA,QAAA;AAAA\/uB,EAAA,CAAAsvB,UAAA,CAAApwB,EAAA,CAAAC,CAAA,CAAA,CAAAS,CAAAA,CAAA,IAAAgvB,CAAAA,EAAA,CAAAzvB,CAAA,CAAA,OAAA,KAAA2vB,CAAAA,EAAA,CAAA,YAAA,CAAA,CAAAvU,EAAA,CAAArb,EAAA,CAAA,CAAA,CAAA,CAAAU,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA2vB,GAAA,CAAArwB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAAgB,EAAA,CAAAlB,EAAA,CAAA,CAAA,CAAA,CAAAH,EAAA,CAAA,CAAAD,EAAAA,CAAA,IAAAkvB,CAAAA,EAAA,CAAAjvB,EAAA,CAAA,OAAAuB,GAAA,EAAA,CAAAG,GAAAwa,EAAA,CAAA3c,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAAgB,EAAA,CAAAlB,EAAA,CAAA,CAAA,CAAA,CAAAJ,EAAA,CAAA,IAAAI,EAAA,EAAAJ,EAAAyvB,CAAAA,IAAA,CAAA,GAAA,OAAA,GAAAzvB,EAAA0c,CAAAA,SAAA,CAAAtc,EAAA,CAAA+b,EAAA,CAAA3c,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAAgB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAtB,EAAA,CAAA,CAAAI,EAAA+B,CAAAA,IAAA,CAAA,UAAA,CAAAX,EAAAqE,CAAAA,IAAA,CAAAzF,EAAA,CAAA,KAAA,CAAAyF,EAAAA,CAAArE,EAAAqE,CAAAA,IAAArE,EAAAA,CAAAoS,IAAA+F,CAAAA,GAAA,CAAAzZ,CAAA,CAAA,CAAA,CAAAyB,EAAAA,CAAAiS,IAAA+F,CAAAA,GAAA,CAAAtZ,CAAA,CAAA,CAAA,CAAAmB,EAAA,EAAAia,EAAA,CAAA,GAAA,CAAAja,CAAA,CAAAxB,EAAA,CAAA,KAAA2B,CAAA,EAAA8Z,EAAA,CAAA,GAAA,CAAA9Z,CAAA,CAAA3B,EAAA,CAAA,CAAA,CAAA,CAAA6B,CAAA,CAAA,CAAAA,CAAA,EAAA,CAAA,CAAA+R,IAAAC,CAAAA,EAAA,CAAApP,EAAA,EAAA,CAAA,CAAAmP,IAAAC,CAAAA,EAAApP,GAAA,CAAA5C,CAAA,CAAA,CAAA,CAAA+R,IAAAC,CAAAA,EAAA,GAAAhS,CAAA,CAAA,CAAA,CAAA4C,EAAA,CAAA,CAAA,CAAAmP,IAAAC,CAAAA,EAAA,CAAA,OAAAlQ,IAAAc,EAAAd,CAAA9B,CAAA8B,EAAA3D,EAAAub,CAAAA,cAAA,CAAA1X,GAAA,EAAA,KAAA,CAAArE,CAAA,EAAAiF,EAAA,CAAAjF,CAAA,EAAAmE,EAAA,CAAAE,EAAAgC,CAAAA,IAAA,CAAA,CAAArG,EAAA,CAAAgC,CAAA,CAAAoS,IAAAyE,CAAAA,GAAA,CAAA7Y,CAAA,CAAA,CAAAC,CAAA;AAAAkC,CAAA,CAAAiS,IAAA0E,CAAAA,GAAA,CAAA9Y,CAAA,CAAA,CAAA,CAAA,GAAA,EAAAqE,EAAAgC,CAAAA,IAAA,CAAA,CAAArG,EAAA,CAAAgC,CAAA,CAAAoS,IAAAyE,CAAAA,GAAA,CAAA5T,EAAA,CAAA,CAAAhF,CAAA,CAAAkC,CAAA,CAAAiS,IAAA0E,CAAAA,GAAA,CAAA7T,EAAA,CAAA,CAAA,CAAA,CAAAZ,EAAAgC,CAAAA,IAAA,CAAA,CAAArG,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA+c,EAAA,CAAA3Y,EAAA,CAAA7D,EAAA,CAAA,CAAA6F,GAAA,CAAA,IAAA,CAAArE,EAAA,CAAA,EAAA,CAAA,CAAA,MAAAkuB,MAAA,GAAA1vB,EAAA+uB,CAAAA,MAAA,EAAAvtB,EAAAqE,CAAAA,IAAA,CAAAlE,EAAA,CAAA,CAAA,IAAAytB,CAAAA,EAAA,CAAA,KAAA,CAAA5tB,EAAA,CAAAxB,EAAA,CAAA,CAAA8vB,KAAA,CAAAtwB,EAAA,CAAAC,CAAA,CAAA,CAAAS,CAAAA,CAAA,IAAAgvB,CAAAA,EAAA,CAAAzvB,CAAA,CAAA,OAAAY,EAAA,EAAA,CAAAC,EAAA0a,EAAA,CAAAxb,EAAA,CAAAU,CAAA,CAAAA,EAAAuvB,CAAAA,IAAA,EAAAC,MAAA,GAAAxvB,CAAAuvB,CAAAA,IAAA,EAAA,CAAA,EAAAjwB,EAAAkC,CAAAA,MAAA,GAAAjC,EAAA,CAAAse,EAAA,CAAA,QAAA,CAAAve,CAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,IAAAS,GAAAV,CAAAkC,CAAAA,MAAA,IAAA,CAAA,CAAAxB,EAAA,CAAA,KAAA0D,MAAA,CAAA,0CAAA,CAAA,CAAA,MAAAvD,GAAA,EAAA,IAAA,CAAA,GAAAH,EAAA,CAAAG,EAAAwF,CAAAA,IAAA,CAAA,CAAA,GAAArG,CAAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,GAAAA,CAAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,GAAAA,CAAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,GAAAA,CAAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,KAAA,CAAAU,EAAAA,CAAA,EAAAA,GAAA2F,CAAAA,IAAA,CAAArG,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAAD,CAAAkC,CAAAA,MAAA,CAAAjC,EAAA,EAAA,CAAAS,EAAA2F,CAAAA,IAAA,CAAArG,CAAA,CAAAC,EAAA,CAAA,CAAA;AAAAA,EAAA,GAAAD,CAAAkC,CAAAA,MAAA,CAAA,CAAA,EAAAxB,EAAA2F,CAAAA,IAAA,CAAArG,CAAA,CAAAC,EAAA,CAAA,CAAAa,EAAAA,CAAA,EAAAgB,GAAAA,CAAA,CAAAA,CAAA7B,EAAAY,GAAAwF,CAAAA,IAAA,CAAA,CAAA,GAAA3F,EAAAV,CAAA,CAAAA,CAAA,CAAA,CAAA,KAAAA,EAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAAU,EAAAwB,CAAAA,MAAA,CAAAlC,EAAA,EAAA,CAAA,CAAA,MAAAC,GAAAS,EAAA,CAAAV,EAAA,CAAAc,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAb,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAa,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAb,EAAA,CAAA,CAAA,CAAA,EAAA6B,EAAA,CAAApB,EAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA8B,EAAA,CAAApB,EAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,EAAA6B,EAAA,CAAApB,EAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA8B,EAAA,CAAApB,EAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAc,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAJ,EAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA8B,EAAA,CAAApB,EAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8B,EAAA,CAAApB,EAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAU,EAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA8B,EAAA,CAAApB,EAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8B,EAAA,CAAApB,EAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAc,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAJ,EAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAU,EAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAa,GAAAwF,CAAAA,IAAA,CAAAvF,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA,CAAAb,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAAU,CAAAgb,CAAAA,SAAA,EAAA,CAAA,CAAA,CAAA,OAAA,GAAAhb,CAAAwc,CAAAA,SAAA,CAAArc,CAAAwF,CAAAA,IAAA,CAAAyW,EAAA,CAAA7c,EAAA,CAAAS,CAAA,CAAA,CAAA,CAAAG,CAAAwF,CAAAA,IAAA,CAAA2W,EAAA,CAAA\/c,EAAA,CAAAS,CAAA,CAAA,CAAA,CAAA,OAAAwvB,MAAA,GAAAxvB,CAAA6uB,CAAAA,MAAA,EAAA1uB,CAAAwF,CAAAA,IAAA,CAAAvF,CAAA,CAAA,CAAA,IAAA8uB,CAAAA,EAAA,CAAA,OAAA;AAAA\/uB,CAAA,CAAAH,CAAA,CAAA,CAAA6vB,OAAA,CAAAvwB,EAAA,CAAAC,CAAA,CAAA,CAAAS,CAAAA,CAAA,IAAAgvB,CAAAA,EAAA,CAAAzvB,CAAA,CAAA,OAAAY,EAAA,EAAA,CAAAC,EAAAua,EAAA,CAAArb,EAAA,CAAA,CAAA,CAAA,CAAAU,CAAA,CAAA,OAAAA,EAAAuvB,CAAAA,IAAA,GAAA,OAAA,GAAAvvB,CAAAwc,CAAAA,SAAA,CAAArc,CAAAwF,CAAAA,IAAA,CAAAyW,EAAA,CAAA9c,EAAA,CAAAU,CAAA,CAAA,CAAA,CAAAG,CAAAwF,CAAAA,IAAA,CAAA2W,EAAA,CAAAhd,EAAA,CAAAU,CAAA,CAAA,CAAA,EAAAwvB,MAAA,GAAAxvB,CAAA6uB,CAAAA,MAAA,EAAA1uB,CAAAwF,CAAAA,IAAA,CAAAvF,CAAA,CAAA,CAAA,IAAA8uB,CAAAA,EAAA,CAAA,SAAA,CAAA\/uB,CAAA,CAAAH,CAAA,CAAA,CAAA8vB,IAAA,CAAAxwB,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAAS,EAAA,IAAAgvB,CAAAA,EAAA,CAAAzvB,CAAA,CAAA,CAAAY,EAAA,EAAA,IAAA,CAAAb,EAAA,CAAA,MAAA,KAAA4vB,CAAAA,EAAA,CAAA,MAAA,CAAA\/uB,CAAA,CAAAH,CAAA,CAAAV,GAAA,CAAAgR,CAAAhR,EAAAgR,EAAA,EAAAA,EAAAA,OAAA,CAAA,KAAA,CAAA,GAAA,CAAAA,CAAAA,OAAA,CAAA,QAAA,CAAA,GAAA,CAAAA,CAAAA,OAAA,CAAA,SAAA,CAAA,GAAA,CAAAlQ,EAAAA,CAAAJ,CAAAuvB,CAAAA,IAAAnvB,EAAA,aAAAA,GAAAJ,CAAAuvB,CAAAA,IAAAnvB,EAAAovB,MAAApvB,GAAAJ,CAAAuvB,CAAAA,IAAA,OAAAnuB,EAAAouB,MAAApuB,GAAApB,CAAA6uB,CAAAA,MAAA,CAAA3uB,GAAA,CAAA,EAAAF,CAAA+vB,CAAAA,cAAA,EAAA,CAAA,CAAA\/vB,CAAA+vB,CAAAA,cAAA,CAAA,CAAAhwB,GAAA,QAAA,CAAAT,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAA,CAAA,IAAAG,GAAAka,EAAA,CAAAD,EAAA,CAAAT,EAAA,CAAAra,EAAA,CAAA,CAAA,CAAAc,GAAAA,CAAA,EAAA,KAAAgB;AAAA,EAAA,KAAAlB,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAAH,GAAA,EAAA,OAAAD,GAAA,EAAAA,EAAA,CAAA,CAAA,EAAAC,EAAAyB,CAAAA,MAAA,EAAAJ,EAAAuE,CAAAA,IAAA,CAAA,GAAAkY,EAAA,CAAA9d,EAAA,CAAAR,EAAA,CAAA,CAAAQ,GAAA,CAAA,EAAA,CAAA,KAAA,MAAA,CAAA,IAAAT,EAAA,CAAA,KAAAC,EAAA,CAAA,EAAAY,GAAA,CAAA,OAAAb,EAAA,EAAA,KAAA,GAAA,CAAAQ,EAAA,EAAAsB,GAAAI,CAAAA,MAAA,GAAApB,EAAAuF,CAAAA,IAAA,CAAAvE,EAAA,CAAA,CAAAA,EAAA,CAAA,EAAA,CAAAlB,GAAA,CAAA,CAAAX,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA6B,GAAAuE,CAAAA,IAAA,CAAAzF,EAAA,CAAA,MAAA,MAAA,GAAA,CAAAJ,EAAA,EAAAsB,GAAAuE,CAAAA,IAAA,CAAA,CAAApG,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAAQ,EAAAyB,CAAAA,MAAA,GAAAlC,EAAA,CAAA8B,EAAAI,CAAAA,MAAA,CAAAJ,EAAA,CAAAA,EAAAI,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAAtB,EAAA,CAAAH,EAAA4F,CAAAA,IAAA,CAAA,CAAArG,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAS,GAAA4F,CAAAA,IAAA,CAAA,CAAApG,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAQ,GAAA4F,CAAAA,IAAA,CAAA,CAAApG,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAQ,GAAA4F,CAAAA,IAAA,CAAA,CAAApG,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAAO,EAAA,EAAA,CAAAsB,EAAAuE,CAAAA,IAAA,CAAA,CAAAzF,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAJ,EAAA,EAAAsB,GAAAI,CAAAA,MAAA,GAAApB,EAAAuF,CAAAA,IAAA,CAAAvE,EAAA,CAAA,CAAAA,EAAA,CAAA,EAAA,CAAA,IAAA,CAAApB,EAAA,CAAA,MAAAI,GAAAqB,GAAAA,CAAA,EAAA,KAAA,MAAAnC,EAAA,GAAAc,GAAA,CAAAb,EAAA;AAAAqe,EAAA,CAAAte,EAAA,CAAA,CAAA,CAAAA,EAAAkC,CAAAA,MAAA,CAAAxB,EAAA,CAAA,CAAAT,EAAAiC,CAAAA,MAAA,EAAAC,EAAAkE,CAAAA,IAAA,CAAApG,EAAA,CAAA,OAAAkC,GAAA,CAAA,CAAAnC,EAAA,CAAA,CAAA,CAAAY,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAF,CAAA+vB,CAAAA,cAAA,EAAA,CAAA,CAAA\/vB,CAAAgb,CAAAA,SAAA,EAAA,CAAA,CAAA,IAAA5a,CAAA,CAAA,GAAAJ,CAAA8uB,CAAAA,qBAAA,CAAA,CAAA,MAAAxvB,GAAA,EAAAS,GAAAmB,CAAAA,OAAA,CAAA3B,EAAA,EAAAD,EAAAqG,CAAAA,IAAA,CAAA,GAAApG,EAAA,CAAA,CAAA,QAAA,GAAAS,CAAAwc,CAAAA,SAAA,CAAArc,CAAAwF,CAAAA,IAAA,CAAAyW,EAAA,CAAA9c,EAAA,CAAAU,CAAA,CAAA,CAAA,CAAAG,CAAAwF,CAAAA,IAAA,CAAA2W,EAAA,CAAAhd,EAAA,CAAAU,CAAA,CAAA,CAAA,CAAA,IAAAD,GAAAmB,CAAAA,OAAA,CAAA5B,EAAA,EAAA,CAAA,OAAA,GAAAU,CAAAwc,CAAAA,SAAA,CAAArc,CAAAwF,CAAAA,IAAA,CAAAyW,EAAA,CAAA9c,EAAA,CAAAU,CAAA,CAAA,CAAA,CAAAG,CAAAwF,CAAAA,IAAA,CAAA2W,EAAA,CAAAhd,EAAA,CAAAU,CAAA,CAAA,CAAA,CAAA,CAAA,OAAAoB,EAAA,GAAAlB,EAAA,CAAAH,EAAAmB,CAAAA,OAAA,CAAA5B,EAAA,EAAA,CAAAa,CAAAwF,CAAAA,IAAA,CAAAgV,EAAA,CAAArb,EAAA,CAAA,CAAA,CAAA,CAAAU,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAG,CAAAwF,CAAAA,IAAA,CAAA,QAAA,CAAArG,EAAA,CAAAC,EAAA,CAAA,CAAAS,EAAAA,CAAAqa,EAAA,CAAAD,EAAA,CAAAT,EAAA,CAAAra,EAAA,CAAA,CAAA,CAAA,OAAAa,GAAA,EAAA,KAAAC,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,IAAA9B,EAAA,CAAA,KAAAY,EAAA,CAAA,EAAAF,GAAA,CAAA,OAAAV,EAAA,EAAA,KAAA,GAAA,CAAA,MAAAA;AAAA,CAAAA,EAAAC,EAAA8c,CAAAA,mBAAA\/c,EAAA,CAAAA,CAAA,CAAAU,GAAAT,EAAA+d,CAAAA,gBAAAnd,GAAAwF,CAAAA,IAAA,CAAA,CAAAwW,GAAA,MAAA,CAAAhC,KAAAja,EAAAc,CAAAA,GAAA,CAAAb,EAAA,EAAAA,EAAA,EAAAH,EAAA,CAAA,CAAA,CAAAub,EAAA,CAAAjc,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA6B,GAAA,CAAA,CAAAlB,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAE,GAAA,CAAA,CAAAF,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAAC,EAAAwF,CAAAA,IAAA,CAAA,GAAAiV,EAAA,CAAAxZ,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAlB,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAX,EAAA,CAAA,CAAA6B,GAAA,CAAA,CAAAlB,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,CAAA,MAAA,CAAAZ,EAAA,CAAAU,EAAA,CAAAI,EAAA,CAAAL,EAAA,CAAAD,EAAA,CAAAwB,EAAA,CAAA,CAAApB,EAAAC,GAAAwF,CAAAA,IAAA,CAAA,GAAA6X,EAAA,CAAAle,EAAA,CAAAU,EAAA,CAAAI,EAAA,CAAAL,EAAA,CAAAD,EAAA,CAAAwB,EAAA,CAAAF,EAAA,CAAA7B,EAAA,CAAA,CAAA6B,GAAA,CAAA,CAAAtB,EAAA,CAAAwB,EAAA,CAAA,MAAA,MAAA,GAAA,CAAAnB,EAAAwF,CAAAA,IAAA,CAAA,GAAAiV,EAAA,CAAAxZ,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAhB,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAb,EAAA,CAAA,CAAA,CAAA6B,EAAA,CAAA,CAAAhB,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA6B,KAAA,MAAA,CAAA4Y,IAAA1a,EAAA,CAAA,CAAA,CAAAb,EAAA,CAAAU,CAAA,CAAA,CAAA,EAAA,IAAAkvB,CAAAA,EAAA,CAAA,MAAA,CAAA\/uB,CAAA,CAAAH,CAAA,CAAA,CAAAgwB,SAAA,CAAA1wB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAA,EAAA,KAAA,MAAAG,CAAA,GAAAb,GAAAub,CAAAA,GAAA,CAAA,OAAAvb,EAAA6c;AAAA,QAAA,EAAA,MAAA5c,EAAA,EAAA,CAAA,EAAAA,CAAA,CAAAY,CAAAga,CAAAA,IAAAnZ,CAAAA,GAAA,CAAA1B,CAAA,EAAA,CAAAA,CAAAmb,CAAAA,OAAA,CAAAlb,CAAA,CAAA,CAAA,CAAAY,CAAAga,CAAAA,IAAAgC,CAAAhc,CAAAgc,CAAAA,EAAA,EAAA,KAAA,MAAA,CAAAnc,CAAA,EAAA,IAAAV,EAAA,CAAA,CAAA,CAAA,IAAAA,EAAA,CAAA,CAAA,CAAA,GAAA,MAAA,MAAA,UAAA,CAAAU,CAAA,EAAA,IAAAV,EAAA,CAAA,CAAA,CAAA,IAAAA,EAAA,CAAA,CAAA,CAAA,KAAAA,EAAA,CAAA,CAAA,CAAA,IAAAA,EAAA,CAAA,CAAA,CAAA,KAAAA,EAAA,CAAA,CAAA,CAAA,IAAAA,EAAA,CAAA,CAAA,CAAA,GAAA,MAAA,MAAA,QAAA,CAAAU,CAAA,EAAA,IAAAV,EAAA,CAAA,CAAA,CAAA,IAAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,MAAAU,EAAAiwB,CAAAA,IAAA,EAAA,CAAAC,OAAA,CAAA5wB,EAAA,CAAA,CAAA,IAAAC,EAAAD,EAAA8vB,CAAAA,IAAA7vB,EAAA,EAAAS,GAAAA,CAAAV,EAAAwjB,CAAAA,OAAA9iB,EAAA,IAAA4uB,CAAAA,cAAA,OAAAzuB,EAAA,EAAA,KAAA,MAAAb,CAAA,GAAAC,EAAA,CAAA,CAAAA,CAAAA,CAAA,IAAA,QAAAD,CAAA2C,CAAAA,IAAA,EAAA,KAAA,MAAA,CAAA1C,CAAA,CAAA,CAAAoC,EAAA,IAAAquB,CAAAA,SAAA,CAAA1wB,CAAA,CAAA,CAAAuvB,OAAA7uB,EAAA6uB,CAAAA,MAAA,CAAAzV,YAAApZ,EAAAoZ,CAAAA,WAAA,CAAAmW,KAAAC,MAAA,CAAA,MAAA,MAAA,UAAA,CAAAjwB,CAAA,CAAA,CAAAoC,EAAA,IAAAquB,CAAAA,SAAA,CAAA1wB,CAAA,CAAA;AAAAuvB,OAAAW,MAAA,CAAApW,YAAA,CAAA,CAAAmW,KAAAvvB,EAAAuvB,CAAAA,IAAAA,EAAAC,MAAA,CAAA,MAAA,MAAA,YAAA,CAAAjwB,CAAA,CAAA,IAAA4wB,CAAAA,UAAA,CAAA7wB,CAAA,CAAAU,EAAA,CAAA,CAAAT,CAAA,EAAAY,CAAAwF,CAAAA,IAAA,CAAApG,CAAA,CAAA,CAAA,MAAAY,EAAA,CAAAgwB,UAAA,CAAA7wB,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAT,CAAAsuB,CAAAA,UAAA,OAAA,EAAA,CAAA7tB,CAAA,GAAAA,CAAA,CAAAT,CAAA6Z,CAAAA,WAAA,CAAA,CAAA,EAAA,CAAAzX,EAAA,IAAAquB,CAAAA,SAAA,CAAA1wB,EAAA,CAAA,CAAAuvB,OAAAtvB,CAAAgwB,CAAAA,IAAAV,EAAAW,MAAA,CAAApW,YAAApZ,CAAA,CAAAuvB,KAAAC,MAAA,CAAA,CAAA,CAAA,KAAAY,GAAA,CAAA3pB,WAAA,CAAAnH,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAA8wB,CAAAA,MAAA,CAAA\/wB,EAAA,KAAAgxB,CAAAA,GAAA,CAAA,IAAAD,CAAAA,MAAAE,CAAAA,UAAA,CAAA,IAAA,CAAA,KAAAC,CAAAA,GAAA,CAAA,IAAA7B,EAAA,CAAApvB,CAAA,CAAA,CAAAkxB,IAAA,CAAAnxB,EAAA,CAAA,CAAA,MAAAC,EAAAD,EAAA8vB,CAAAA,IAAA7vB,EAAA,EAAA,CAAAS,EAAAV,EAAAwjB,CAAAA,OAAA9iB,EAAA,IAAA0wB,CAAAA,iBAAA,EAAA,CAAAvwB,EAAA,IAAAmwB,CAAAA,GAAA,KAAA,MAAAlwB,CAAA,GAAAb,EAAA,CAAA,OAAAa,CAAA6B,CAAAA,IAAA,EAAA,KAAA,MAAA,CAAA9B,CAAAwwB,CAAAA,IAAA,EAAAxwB,EAAAywB,CAAAA,WAAA;AAAA,MAAA,GAAA5wB,CAAA6uB,CAAAA,MAAA,CAAA,aAAA,CAAA7uB,CAAA6uB,CAAAA,MAAA1uB,EAAA0wB,CAAAA,SAAA,CAAA7wB,CAAAoZ,CAAAA,WAAApZ,EAAA8wB,CAAAA,cAAA,EAAA3wB,CAAA4wB,CAAAA,WAAA,CAAA\/wB,CAAA8wB,CAAAA,cAAA,CAAA9wB,EAAAgxB,CAAAA,oBAAA,GAAA7wB,CAAA8wB,CAAAA,cAAA,CAAAjxB,CAAAgxB,CAAAA,oBAAA,CAAA,KAAAE,CAAAA,cAAA,CAAA\/wB,CAAA,CAAAC,CAAA,CAAAD,EAAA2rB,CAAAA,OAAA,EAAA,MAAA,MAAA,UAAA,CAAA3rB,CAAAwwB,CAAAA,IAAA,EAAAxwB,EAAAqc,CAAAA,SAAA,CAAAxc,CAAAuvB,CAAAA,IAAA,EAAA,EAAA,KAAA2B,CAAAA,cAAA,CAAA\/wB,CAAA,CAAAC,CAAA,CAAA,OAAAb,GAAAD,EAAA6vB,CAAAA,KAAA5vB,EAAA,SAAAA,GAAAD,EAAA6vB,CAAAA,KAAA5vB,CAAA,SAAAA,CAAA,SAAA,CAAAY,EAAA2rB,CAAAA,OAAA,EAAA,MAAA,MAAA,YAAA,CAAA,IAAAqE,CAAAA,UAAA,CAAAhwB,CAAA,CAAAC,CAAA,CAAAJ,CAAA,CAAA,CAAA,CAAAmwB,UAAA,CAAA7wB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,IAAAG,EAAAH,CAAA6tB,CAAAA,UAAA,EAAA,CAAA1tB,CAAA,GAAAA,CAAA,CAAAH,CAAAoZ,CAAAA,WAAA,CAAA,CAAA,CAAA9Z,GAAAqxB,CAAAA,IAAA,EAAA3wB,EAAAmxB,CAAAA,YAAA;AAAA7xB,EAAAyxB,CAAAA,WAAA,CAAA\/wB,CAAAmxB,CAAAA,YAAA,CAAAnxB,EAAAoxB,CAAAA,kBAAA,GAAA9xB,EAAA2xB,CAAAA,cAAA,CAAAjxB,CAAAoxB,CAAAA,kBAAA,CAAA9xB,GAAAsxB,CAAAA,WAAA,CAAA5wB,CAAAuvB,CAAAA,IAAA,EAAA,EAAAjwB,GAAAuxB,CAAAA,SAAA,CAAA1wB,CAAA,KAAA+wB,CAAAA,cAAA,CAAA5xB,EAAA,CAAAC,CAAA,CAAAD,GAAAwsB,CAAAA,OAAA,EAAA,CAAAoF,cAAA,CAAA5xB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,SAAA,CAAA,CAAAV,EAAA+xB,CAAAA,SAAA,EAAA,KAAA,MAAArxB,CAAA,GAAAT,EAAAsb,CAAAA,GAAA,CAAA,CAAA,MAAAtb,EAAAS,CAAAma,CAAAA,IAAA,QAAAna,CAAAmc,CAAAA,EAAA,EAAA,KAAA,MAAA,CAAA7c,EAAAgyB,CAAAA,MAAA,CAAA\/xB,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,MAAA,UAAA,CAAAD,EAAAiyB,CAAAA,aAAA,CAAAhyB,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,MAAA,QAAA,CAAAD,EAAAkyB,CAAAA,MAAA,CAAAjyB,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,UAAA,GAAAA,CAAA0C,CAAAA,IAAA,CAAA3C,EAAAiwB,CAAAA,IAAA,CAAAvvB,CAAA,CAAA,CAAAV,EAAAuvB,CAAAA,MAAA,EAAA,CAAA,aAAA,EAAA,CAAA,MAAA,KAAA2B,CAAAA,GAAA,CAAAE,iBAAA,EAAA,CAAA,MAAA,KAAAF,CAAAA,GAAA5B,CAAAA,cAAA,CAAAS,IAAA,CAAA\/vB,EAAA;AAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,CAAAgB,EAAAA,CAAA,IAAAovB,CAAAA,GAAAnB,CAAAA,IAAA,CAAA\/vB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,OAAA,KAAAqwB,CAAAA,IAAA,CAAArvB,EAAA,CAAA,CAAAA,EAAA,CAAAkuB,SAAA,CAAAhwB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,CAAAgB,EAAAA,CAAA,IAAAovB,CAAAA,GAAAlB,CAAAA,SAAA,CAAAhwB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,OAAA,KAAAqwB,CAAAA,IAAA,CAAArvB,EAAA,CAAA,CAAAA,EAAA,CAAA4sB,OAAA,CAAA1uB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,CAAAgB,EAAAA,CAAA,IAAAovB,CAAAA,GAAAxC,CAAAA,OAAA,CAAA1uB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,OAAA,KAAAqwB,CAAAA,IAAA,CAAArvB,EAAA,CAAA,CAAAA,EAAA,CAAAquB,MAAA,CAAAnwB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAA,CAAAC,EAAAA,CAAA,IAAAowB,CAAAA,GAAAf,CAAAA,MAAA,CAAAnwB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAA,OAAA,KAAAswB,CAAAA,IAAA,CAAArwB,EAAA,CAAA,CAAAA,EAAA,CAAAsvB,UAAA,CAAApwB,EAAA,CAAAC,CAAA,CAAA,CAAAS,EAAAA,CAAA,IAAAwwB,CAAAA,GAAAd,CAAAA,UAAA,CAAApwB,EAAA,CAAAC,CAAA,CAAA,OAAA,KAAAkxB,CAAAA,IAAA,CAAAzwB,EAAA,CAAA,CAAAA,EAAA,CAAA6vB,OAAA,CAAAvwB,EAAA,CAAAC,CAAA,CAAA,CAAAS,EAAAA,CAAA,IAAAwwB,CAAAA,GAAAX,CAAAA,OAAA,CAAAvwB,EAAA,CAAAC,CAAA,CAAA,OAAA,KAAAkxB,CAAAA,IAAA,CAAAzwB,EAAA,CAAA,CAAAA,EAAA,CAAA2vB,GAAA,CAAArwB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAAgB,EAAA,CAAAlB,EAAA,CAAA,CAAA,CAAA,CAAAH,EAAA,CAAA,CAAAD,EAAAA,CAAA,IAAA0wB,CAAAA,GAAAb,CAAAA,GAAA,CAAArwB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAAgB,EAAA,CAAAlB,EAAA,CAAAH,EAAA,CAAA,OAAA,KAAA0wB,CAAAA,IAAA,CAAA3wB,EAAA,CAAA;AAAAA,EAAA,CAAA8vB,KAAA,CAAAtwB,EAAA,CAAAC,CAAA,CAAA,CAAAS,EAAAA,CAAA,IAAAwwB,CAAAA,GAAAZ,CAAAA,KAAA,CAAAtwB,EAAA,CAAAC,CAAA,CAAA,OAAA,KAAAkxB,CAAAA,IAAA,CAAAzwB,EAAA,CAAA,CAAAA,EAAA,CAAA8vB,IAAA,CAAAxwB,EAAA,CAAAC,CAAA,CAAA,CAAAS,EAAAA,CAAA,IAAAwwB,CAAAA,GAAAV,CAAAA,IAAA,CAAAxwB,EAAA,CAAAC,CAAA,CAAA,OAAA,KAAAkxB,CAAAA,IAAA,CAAAzwB,EAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,KAAAyxB,GAAA,CAAAhrB,WAAA,CAAAnH,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAmyB,CAAAA,GAAA,CAAApyB,EAAA,KAAAkxB,CAAAA,GAAA,CAAA,IAAA7B,EAAA,CAAApvB,CAAA,CAAA,CAAAkxB,IAAA,CAAAnxB,EAAA,CAAA,CAAA,IAAAC,EAAAD,EAAA8vB,CAAAA,IAAA7vB,EAAA,EAAA,OAAAS,EAAAV,EAAAwjB,CAAAA,OAAA9iB,EAAA,IAAA0wB,CAAAA,iBAAA,EAAA,CAAAvwB,EAAA,IAAAuxB,CAAAA,GAAAC,CAAAA,aAAAxxB,EAAA0M,MAAAvB,CAAAA,QAAA,CAAAlL,EAAAD,CAAAyxB,CAAAA,eAAA,CAAAC,4BAAA,CAAA,GAAA,CAAA,CAAAzwB,GAAA9B,EAAAwjB,CAAAA,OAAAgP,CAAAA,uBAAA,KAAA,MAAA5xB,EAAA,GAAAX,EAAA,CAAA,CAAAA,CAAAA,CAAA,IAAA,QAAAW,EAAA+B,CAAAA,IAAA,EAAA,KAAA,MAAA,CAAA1C,CAAA,CAAAY,CAAAyxB,CAAAA,eAAA,CAAAC,4BAAA,CAAA,MAAA,CAAAtyB,EAAAoM,CAAAA,YAAA,CAAA,GAAA;AAAA,IAAAqkB,CAAAA,SAAA,CAAA9vB,EAAA,CAAAkB,EAAA,CAAA,CAAA7B,EAAAoM,CAAAA,YAAA,CAAA,QAAA,CAAA3L,CAAA6uB,CAAAA,MAAA,CAAAtvB,EAAAoM,CAAAA,YAAA,CAAA,cAAA,CAAA3L,CAAAoZ,CAAAA,WAAA,CAAA,EAAA,CAAA7Z,EAAAoM,CAAAA,YAAA,CAAA,MAAA,CAAA,MAAA,CAAA3L,EAAA8wB,CAAAA,cAAA,EAAAvxB,CAAAoM,CAAAA,YAAA,CAAA,kBAAA,CAAA3L,CAAA8wB,CAAAA,cAAA7vB,CAAAA,IAAA,CAAA,GAAA,CAAAgvB,CAAAA,IAAA,EAAA,CAAAjwB,EAAAgxB,CAAAA,oBAAA,EAAAzxB,CAAAoM,CAAAA,YAAA,CAAA,mBAAA,CAAA,GAAA3L,CAAAgxB,CAAAA,oBAAA,EAAA,CAAA,MAAA,MAAA,UAAA,CAAAzxB,CAAA,CAAAY,CAAAyxB,CAAAA,eAAA,CAAAC,4BAAA,CAAA,MAAA,CAAAtyB,EAAAoM,CAAAA,YAAA,CAAA,GAAA,CAAA,IAAAqkB,CAAAA,SAAA,CAAA9vB,EAAA,CAAAkB,EAAA,CAAA,CAAA7B,EAAAoM,CAAAA,YAAA,CAAA,QAAA,CAAA,MAAA,CAAApM,EAAAoM,CAAAA,YAAA,CAAA,cAAA,CAAA,GAAA,CAAApM,EAAAoM,CAAAA,YAAA,CAAA,MAAA;AAAA3L,CAAAuvB,CAAAA,IAAA,EAAA,EAAA,CAAA,QAAA,GAAAjwB,EAAA6vB,CAAAA,KAAA,EAAA,SAAA,GAAA7vB,EAAA6vB,CAAAA,KAAA,EAAA5vB,CAAAoM,CAAAA,YAAA,CAAA,WAAA,CAAA,SAAA,CAAA,MAAA,MAAA,YAAA,CAAApM,CAAA,CAAA,IAAA4wB,CAAAA,UAAA,CAAAhwB,CAAA,CAAAD,EAAA,CAAAF,CAAA,CAAA,CAAAT,CAAA,EAAAa,CAAAwL,CAAAA,WAAA,CAAArM,CAAA,CAAA,CAAA,MAAAa,EAAA,CAAA+vB,UAAA,CAAA7wB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,IAAAG,EAAAH,CAAA6tB,CAAAA,UAAA,EAAA,CAAA1tB,CAAA,GAAAA,CAAA,CAAAH,CAAAoZ,CAAAA,WAAA,CAAA,CAAA,CAAAhZ,GAAAA,CAAAd,EAAAsyB,CAAAA,eAAA,CAAAC,4BAAA,CAAA,MAAA,CAAA,OAAAzxB,GAAAuL,CAAAA,YAAA,CAAA,GAAA,CAAA,IAAAqkB,CAAAA,SAAA,CAAAzwB,CAAA,CAAAS,CAAA8xB,CAAAA,uBAAA,CAAA,CAAA,CAAA1xB,EAAAuL,CAAAA,YAAA,CAAA,QAAA,CAAA3L,CAAAuvB,CAAAA,IAAA,EAAA,EAAA,CAAA,CAAAnvB,EAAAuL,CAAAA,YAAA,CAAA,cAAA,CAAAxL,CAAA,CAAA,EAAA,CAAA,CAAAC,EAAAuL,CAAAA,YAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA3L,CAAAmxB,CAAAA,YAAA,EAAA\/wB,EAAAuL,CAAAA,YAAA,CAAA,kBAAA;AAAA3L,CAAAmxB,CAAAA,YAAAlwB,CAAAA,IAAA,CAAA,GAAA,CAAAgvB,CAAAA,IAAA,EAAA,CAAA,CAAAjwB,CAAAoxB,CAAAA,kBAAA,EAAAhxB,EAAAuL,CAAAA,YAAA,CAAA,mBAAA,CAAA,GAAA3L,CAAAoxB,CAAAA,kBAAA,EAAA,CAAA,CAAAhxB,EAAA,CAAA,aAAA,EAAA,CAAA,MAAA,KAAAowB,CAAAA,GAAA,CAAAE,iBAAA,EAAA,CAAA,MAAA,KAAAF,CAAAA,GAAA5B,CAAAA,cAAA,CAAAoB,SAAA,CAAA1wB,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAA,KAAAixB,CAAAA,GAAAR,CAAAA,SAAA,CAAA1wB,EAAA,CAAAC,CAAA,CAAA,CAAA8vB,IAAA,CAAA\/vB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,CAAAgB,EAAAA,CAAA,IAAAovB,CAAAA,GAAAnB,CAAAA,IAAA,CAAA\/vB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,OAAA,KAAAqwB,CAAAA,IAAA,CAAArvB,EAAA,CAAA,CAAAkuB,SAAA,CAAAhwB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,CAAAgB,EAAAA,CAAA,IAAAovB,CAAAA,GAAAlB,CAAAA,SAAA,CAAAhwB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,OAAA,KAAAqwB,CAAAA,IAAA,CAAArvB,EAAA,CAAA,CAAA4sB,OAAA,CAAA1uB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,CAAAgB,EAAAA,CAAA,IAAAovB,CAAAA,GAAAxC,CAAAA,OAAA,CAAA1uB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,OAAA,KAAAqwB,CAAAA,IAAA,CAAArvB,EAAA,CAAA,CAAAquB,MAAA,CAAAnwB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAA,CAAAC,EAAAA,CAAA,IAAAowB,CAAAA,GAAAf,CAAAA,MAAA,CAAAnwB,EAAA;AAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAA,OAAA,KAAAswB,CAAAA,IAAA,CAAArwB,EAAA,CAAA,CAAAsvB,UAAA,CAAApwB,EAAA,CAAAC,CAAA,CAAA,CAAAS,EAAAA,CAAA,IAAAwwB,CAAAA,GAAAd,CAAAA,UAAA,CAAApwB,EAAA,CAAAC,CAAA,CAAA,OAAA,KAAAkxB,CAAAA,IAAA,CAAAzwB,EAAA,CAAA,CAAA6vB,OAAA,CAAAvwB,EAAA,CAAAC,CAAA,CAAA,CAAAS,EAAAA,CAAA,IAAAwwB,CAAAA,GAAAX,CAAAA,OAAA,CAAAvwB,EAAA,CAAAC,CAAA,CAAA,OAAA,KAAAkxB,CAAAA,IAAA,CAAAzwB,EAAA,CAAA,CAAA2vB,GAAA,CAAArwB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAAgB,EAAA,CAAAlB,EAAA,CAAA,CAAA,CAAA,CAAAH,EAAA,CAAA,CAAAD,EAAAA,CAAA,IAAA0wB,CAAAA,GAAAb,CAAAA,GAAA,CAAArwB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAAgB,EAAA,CAAAlB,EAAA,CAAAH,EAAA,CAAA,OAAA,KAAA0wB,CAAAA,IAAA,CAAA3wB,EAAA,CAAA,CAAA8vB,KAAA,CAAAtwB,EAAA,CAAAC,CAAA,CAAA,CAAAS,EAAAA,CAAA,IAAAwwB,CAAAA,GAAAZ,CAAAA,KAAA,CAAAtwB,EAAA,CAAAC,CAAA,CAAA,OAAA,KAAAkxB,CAAAA,IAAA,CAAAzwB,EAAA,CAAA,CAAA8vB,IAAA,CAAAxwB,EAAA,CAAAC,CAAA,CAAA,CAAAS,EAAAA,CAAA,IAAAwwB,CAAAA,GAAAV,CAAAA,IAAA,CAAAxwB,EAAA,CAAAC,CAAA,CAAA,OAAA,KAAAkxB,CAAAA,IAAA,CAAAzwB,EAAA,CAAA,CAAA,CAAA,IAAA+xB,GAAA,CAAA1B,OAAA,CAAA\/wB,EAAA,CAAAC,CAAA,CAAA8wB,EAAA,IAAAD,EAAA,CAAA9wB,EAAA,CAAAC,CAAA,CAAA,CAAAmyB,IAAA,CAAApyB,EAAA,CAAAC,CAAA,CAAAmyB,EAAA,IAAAD,EAAA,CAAAnyB,EAAA,CAAAC,CAAA,CAAA,CAAAyyB,UAAA1yB,EAAA0yB,EAAA,IAAArD,EAAA,CAAArvB,EAAA,CAAA,CAAA2vB,QAAA,EAAAA,EAAAN,EAAAM,CAAAA,OAAA,EAAA,CAAA,KAAAgD,GAAA,CAAA3yB,EAAA,CAAA,EAAA,CAAA2yB,EAAA,CAAA,IAAA1yB,EAAA,EAAA,CAAAS,EAAAkyB,MAAAC,CAAAA,eAAA,CAAA,IAAAC,UAAA,CAAA9yB,EAAA,CAAA,CAAA;IAAA,CAAAA,EAAA,EAAA,CAAA,CAAA,CAAA,IAAAa,EAAA,EAAAA,CAAAH,CAAA,CAAAV,EAAA,CAAAC,EAAA,EAAA,EAAA,CAAAY,CAAA,CAAAA,CAAAqH,CAAAA,QAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAArH,CAAA,CAAAqH,CAAArH,CAAAqH,CAAA,EAAAA,EAAAA,QAAA,CAAA,EAAA,CAAAyd,CAAAA,WAAA,EAAA,CAAA,EAAA,CAAA9kB,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,MAAAZ,EAAA,CAAA,KAAA8yB,GAAAA,QAAA,CAAA\/yB,EAAA,CAAA,CAAA,MAAA,KAAA,EAAAA,EAAA,EAAA,MAAA,GAAAA,EAAA2C,CAAAA,IAAA,CAAA,CAAAqwB,GAAAA,QAAA,CAAAhzB,EAAA,CAAA,CAAA,MAAA,KAAA,EAAAA,EAAA,EAAA,UAAA,GAAAA,EAAA2C,CAAAA,IAAA,CAAA,CAAAswB,GAAAA,QAAA,CAAAjzB,EAAA,CAAA,CAAA,MAAA,KAAA,EAAAA,EAAA,EAAAkzB,EAAA,CAAAlzB,EAAA2C,CAAAA,IAAA,CAAA,CAAA,CAAAuwB,GAAAA,QAAA,CAAAlzB,EAAA,CAAA,CAAA,MAAA,OAAA,GAAAA,EAAA,EAAA,MAAA,GAAAA,EAAA,CAAA,CAAAmzB,GAAAA,QAAA,CAAAnzB,EAAA,CAAA,CAAA,MAAA,KAAA,EAAAA,EAAA,EAAA,OAAA,GAAAA,EAAA2C,CAAAA,IAAA,CAAA,CAAAywB,GAAAA,QAAA,CAAApzB,EAAA,CAAA,CAAA,MAAA,KAAA,EAAAA,EAAA,GAAA,WAAA,GAAAA,EAAA2C,CAAAA,IAAA,EAAA,SAAA,GAAA3C,EAAA2C,CAAAA,IAAA,EAAA,SAAA,GAAA3C,EAAA2C,CAAAA,IAAA,EAAA,MAAA,GAAA3C,EAAA2C,CAAAA,IAAA,CAAA,CAAA,CAAA0wB,GAAAA,QAAA,CAAArzB,EAAA;AAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,CAAA,MAAA,EAAAd,EAAA,CAAAU,CAAA,EAAA0T,IAAAyE,CAAAA,GAAA,CAAA\/X,CAAA,CAAA,EAAAb,CAAA,CAAAY,CAAA,EAAAuT,IAAA0E,CAAAA,GAAA,CAAAhY,CAAA,CAAA,CAAAJ,CAAA,EAAAV,EAAA,CAAAU,CAAA,EAAA0T,IAAA0E,CAAAA,GAAA,CAAAhY,CAAA,CAAA,EAAAb,CAAA,CAAAY,CAAA,EAAAuT,IAAAyE,CAAAA,GAAA,CAAA\/X,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAAyyB,GAAAA,QAAA,CAAAtzB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,MAAA2yB,GAAA,CAAArzB,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAAS,CAAA,CAAA,CAAA,CAAA6yB,GAAAA,QAAA,CAAAvzB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAAgB,EAAA,CAAAlB,EAAA,CAAAH,EAAA,CAAA,CAAA,IAAAD,GAAA4T,IAAAyE,CAAAA,GAAA,CAAAhY,CAAA,CAAAmB,EAAAA,CAAAoS,IAAA0E,CAAAA,GAAA,CAAAjY,CAAA,CAAA,OAAAb,GAAAA,CAAAA,CAAA,EAAAA,EAAAiH,CAAAA,CAAA,CAAAhH,CAAA,EAAAa,CAAA,CAAAF,EAAA,CAAAZ,EAAAA,CAAAA,CAAA,EAAAC,CAAA,EAAAa,CAAA,EAAA,CAAA,CAAAN,EAAA,EAAAE,CAAA,EAAAI,CAAA,CAAAkB,CAAA,CAAA\/B,CAAA,EAAAW,EAAA,EAAA,CAAA,CAAAJ,EAAA,EAAAE,CAAA,EAAAE,EAAA,CAAA,CAAAoB,CAAA,EAAAhC,EAAAiH,CAAAA,CAAA,GAAAhH,CAAA,EAAAa,CAAA,EAAA,CAAA,CAAAN,EAAA,EAAAE,CAAA,EAAAI,CAAA,CAAA,CAAAkB,CAAA,CAAA\/B,CAAA,EAAAW,EAAA,EAAA,CAAA,CAAAJ,EAAA,EAAAE,CAAA,EAAAE,EAAA,CAAAoB,CAAA,CAAA,CAAAhC,EAAAU,CAAAA,CAAA,EAAAV,EAAAQ,CAAAA,CAAA,CAAAE,CAAA,EAAAoB,EAAA,CAAArB,EAAA,CAAAT,EAAAU,CAAAA,CAAA,EAAAT,CAAA,EAAA6B,EAAA,CAAAE,CAAA,CAAAtB,CAAA,EAAAoB,EAAA,EAAA,CAAA,CAAAtB,EAAA,EAAAP,CAAA,EAAAQ,EAAA,CAAA,CAAAuB,CAAA,CAAAtB,CAAA,EAAAD,EAAA,EAAA,CAAA,CAAAD,EAAA,CAAA,EAAAR,EAAAQ,CAAAA,CAAA,GAAAP,CAAA,EAAA6B,EAAA,CAAA,CAAAE,CAAA,CAAAtB,CAAA,EAAAoB,EAAA,EAAA,CAAA,CAAAtB,EAAA,EAAAP,CAAA,EAAAQ,EAAA,CAAAuB,CAAA,CAAAtB,CAAA,EAAAD,EAAA,EAAA,CAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAAP,CAAA,CAAAS,CAAA,CAAA,CAAA,CAAA8yB,GAAAA,QAAA,CAAAxzB,EAAA,CAAA,CAAA,IAAAC,EAAA,CAAA,CAAAgC,SAAAC,CAAAA,MAAA;AAAA,IAAA,EAAA,GAAAD,SAAA,CAAA,CAAA,CAAA,CAAAA,SAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,EAAAjC,EAAAkC,CAAAA,MAAA,CAAA,CAAA,IAAAxB,EAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAAA,EAAAkC,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAArB,EAAAH,CAAA,CAAA,CAAA,CAAAI,EAAAA,CAAAJ,CAAA,CAAA,CAAA,CAAA,OAAA0T,KAAAmL,CAAAA,KAAAzd,CAAAhB,CAAAJ,CAAA,CAAAA,CAAAoB,CAAAjB,CAAAb,CAAA,CAAAA,CAAA8B,CAAAhB,CAAAD,CAAA,CAAAA,CAAAiB,CAAAjB,CAAAZ,CAAA,CAAAA,CAAA6B,CAAA,EAAAE,EAAAqP,CAAAA,EAAA,CAAApR,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAAwzB,GAAAA,QAAA,CAAAzzB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,IAAAG,EAAAb,EAAAkC,CAAAA,MAAA,IAAA,CAAA,CAAArB,CAAA,CAAA,MAAA,CAAA,CAAA,KAAAC,EAAA,CAAAsY,MAAAC,CAAAA,gBAAA,CAAA3Y,CAAA,CAAAoB,EAAAA,CAAA,CAAA7B,CAAA,CAAAS,CAAA,CAAA,KAAA,IAAAD,GAAAG,CAAAH,CAAA,CAAA,CAAAA,EAAA,CAAAI,CAAA,CAAAJ,EAAA,EAAA,CAAA,CAAA,IAAAD,GAAAR,EAAA,CAAAS,EAAA,CAAA,CAAAuB,GAAAhC,EAAA,EAAAS,EAAA,CAAA,CAAA,EAAAI,CAAA,CAAA,CAAAL,GAAAA,EAAA,CAAAwB,GAAAA,EAAA,CAAAF,GAAAA,CAAA,CAAAhB,GAAAA,CAAA,CAAAA,GAAAiR,EAAA,CAAA\/R,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAA,CAAAoB,GAAAiQ,EAAA,CAAA\/R,EAAA,CAAAC,EAAA,CAAAY,EAAA,CAAA,CAAAD,GAAAmR,EAAA,CAAArR,EAAA,CAAAG,EAAA,CAAAb,EAAA,CAAA,CAAAS,GAAAsR,EAAA,CAAArR,EAAA,CAAAG,EAAA,CAAAZ,EAAA,CAAA,IAAAa,EAAA,GAAAgB,EAAA,EAAAlB,EAAA,GAAAH,EAAA,EAAA,CAAA,GAAAK,EAAA,EAAA4yB,EAAA,CAAA1zB,EAAA,CAAAU,EAAA,CAAAT,EAAA,CAAA,EAAA,CAAA,GAAA6B,EAAA,EAAA4xB,EAAA,CAAA1zB,EAAA,CAAAa,EAAA,CAAAZ,EAAA,CAAA,EAAA,CAAA,GAAAW,EAAA,EAAA8yB,EAAA,CAAAhzB,EAAA,CAAAV,EAAA,CAAAa,EAAA,CAAA,EAAA,CAAA,GAAAJ,EAAA,EAAAizB,EAAA,CAAAhzB,EAAA,CAAAT,EAAA,CAAAY,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA;AAAAkR,EAAA,CAAAvR,EAAA,CAAAsB,CAAA,CAAAE,EAAA,CAAA,CAAA,MAAA0xB,GAAA,CAAAlzB,EAAA,CAAAsB,CAAA,CAAAE,EAAA,CAAApB,EAAA,EAAA,CAAA,CAAA,MAAA,EAAA,EAAAA,CAAA,CAAA,CAAA,CAAA,CAAA8yB,GAAAA,QAAA,CAAA1zB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,MAAAT,EAAA,CAAA,CAAA,CAAA,EAAAmU,IAAAoF,CAAAA,GAAA,CAAAxZ,EAAA,CAAA,CAAA,CAAA,CAAAU,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAT,CAAA,CAAA,CAAA,CAAA,EAAAmU,IAAAqF,CAAAA,GAAA,CAAAzZ,EAAA,CAAA,CAAA,CAAA,CAAAU,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAT,CAAA,CAAA,CAAA,CAAA,EAAAmU,IAAAoF,CAAAA,GAAA,CAAAxZ,EAAA,CAAA,CAAA,CAAA,CAAAU,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAT,CAAA,CAAA,CAAA,CAAA,EAAAmU,IAAAqF,CAAAA,GAAA,CAAAzZ,EAAA,CAAA,CAAA,CAAA,CAAAU,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAqR,GAAAA,QAAA,CAAA\/R,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAAG,EAAAA,EAAAZ,CAAA,CAAA,CAAA,CAAAY,CAAAb,EAAA,CAAA,CAAA,CAAAa,GAAAH,CAAA,CAAA,CAAA,CAAAG,CAAAZ,CAAA,CAAA,CAAA,CAAAY,GAAAZ,CAAA,CAAA,CAAA,CAAAY,CAAAb,EAAA,CAAA,CAAA,CAAAa,GAAAH,CAAA,CAAA,CAAA,CAAAG,CAAAZ,CAAA,CAAA,CAAA,CAAAY,CAAA,OAAA,EAAA,GAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA8yB,GAAAA,QAAA,CAAA3zB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,MAAAA,EAAA,CAAA,CAAA0T,IAAAuF,CAAAA,KAAA,CAAA3Z,EAAA,CAAAU,CAAA,CAAA,CAAAA,CAAA,CAAA0T,IAAAuF,CAAAA,KAAA,CAAA1Z,CAAA,CAAAS,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAAV,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA2zB,GAAAA,QAAA,CAAA5zB,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,IAAAG,EAAAH,CAAAgB,CAAAA,GAAA,CAAA,QAAA,CAAAzB,EAAA,CAAA,CAAA,MAAAA,GAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAAc,EAAAsT,IAAAoF,CAAAA,GAAAf,CAAAA,KAAA,CAAArE,IAAA,CAAAH,CAAA,CAAApT,CAAA,CAAA,CAAAiB,EAAAA,CAAAsS,IAAAqF,CAAAA,GAAAhB,CAAAA,KAAA,CAAArE,IAAA,CAAAH,CAAA,CAAApT,CAAA,CAAA,CAAAC,EAAAF,EAAAkB,CAAA,KAAArB,GAAA,CAAA,GAAAG,CAAA,CAAA,CAAA;AAAAX,CAAA,CAAAW,CAAA,CAAAJ,GAAA,CAAAA,CAAA,CAAAwB,EAAAA,CAAAtB,CAAAgB,CAAAA,GAAA,CAAA,QAAA,CAAAzB,EAAA,CAAA,CAAA,MAAAA,GAAAyB,CAAAA,GAAA,CAAA,QAAA,CAAAzB,EAAA,CAAAS,EAAA,CAAA,CAAA,GAAAA,EAAA,GAAAV,EAAA,CAAA,MAAAC,GAAAA,GAAAY,EAAAJ,EAAA,OAAAD,GAAA,CAAA4T,IAAAqF,CAAAA,GAAA,CAAA5Y,EAAA,CAAAL,EAAA,CAAA,CAAAK,EAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,GAAAmB,CAAAE,CAAAA,MAAA,CAAA,MAAAF,EAAA,KAAAG,GAAAL,CAAAK,CAAA3B,EAAA,OAAAwB,EAAAN,CAAAA,GAAA,CAAA,QAAA,CAAAzB,EAAA,CAAA,CAAA,MAAAA,GAAAyB,CAAAA,GAAA,CAAA,QAAA,CAAAzB,EAAA,CAAAS,EAAA,CAAA,CAAA,MAAAA,GAAA,GAAAV,EAAA,CAAAC,EAAA,CAAAkC,EAAA,CAAAlC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA4zB,GAAAA,QAAA,CAAA7zB,EAAA,CAAA,CAAA,GAAAgzB,EAAA,CAAAhzB,EAAA,CAAA,CAAA,CAAA,IAAAC,EAAA8T,EAAA,CAAA+f,EAAA,CAAA9zB,EAAAqhB,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAAphB,CAAAS,CAAA,CAAAA,CAAA,CAAAV,EAAA+G,CAAAA,CAAA,CAAA9G,CAAAY,CAAA,CAAAA,CAAA,CAAAb,EAAA8G,CAAAA,CAAA,CAAA7G,CAAAa,CAAA,CAAAA,CAAA,CAAAd,EAAA+G,CAAAA,CAAA,CAAA9G,CAAA6B,CAAA,CAAAA,CAAA,CAAA9B,EAAA8G,CAAAA,CAAA,CAAA,CAAA,IAAA,GAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,KAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,MAAA,CAAA,OAAA,GAAA,CAAA,CAAAitB,GAAAA,QAAA,CAAA\/zB,EAAA,CAAA,CAAA,IAAAC,CAAA,CAAAS,EAAAie,EAAA,CAAA3e,EAAA8vB,CAAAA,IAAA,CAAA,IAAA,CAAA,IAAApvB,CAAAF,CAAAA,CAAA,EAAA,CAAA,CAAAwE,CAAA\/E,CAAA+E,CAAAtE,CAAAA,CAAAA,CAAA,EAAAsE,EAAAA,IAAA,CAAA,CAAA,CAAA,IAAAnE,EAAAZ,CAAA0D,CAAAA,KAAA,IAAA,MAAA;AAAA9C,CAAA8B,CAAAA,IAAA,CAAA,MAAA9B,EAAA0a,CAAAA,GAAA,CAAA,CAAA,MAAAvb,CAAA,CAAA,CAAAU,CAAAV,CAAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,OAAA,CAAAU,CAAAyD,CAAAA,CAAA,EAAA,CAAA,MAAAnE,GAAA8vB,CAAAA,IAAA,CAAA,CAAA,CAAAvU,CAAAA,GAAA,CAAA,CAAAyY,GAAAA,QAAA,CAAAh0B,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAG,GAAAA,CAAAb,EAAA8f,CAAAA,MAAA,CAAA,QAAA,CAAA9f,CAAA,CAAAa,CAAA,CAAA,CAAA,IAAAC,GAAAD,CAAAgc,CAAAA,EAAA\/a,EAAAA,CAAAjB,CAAAga,CAAAA,IAAA,IAAA,MAAA,GAAA\/Z,EAAA,CAAAJ,CAAA,CAAAoB,CAAA,KAAA,IAAA,UAAA,GAAAhB,EAAA,CAAA,CAAA,IAAAF,GAAA,CAAAkB,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAArB,GAAA,CAAAqB,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAtB,GAAA,CAAAsB,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAE,GAAAtB,CAAAA,EAAA,CAAAF,EAAA2B,GAAAA,CAAAA,QAAA,CAAAnC,EAAA,CAAAC,EAAA,CAAA,CAAA,MAAAmU,KAAA6E,CAAAA,GAAA,CAAA,CAAA,CAAAjZ,EAAA,CAAA,CAAA,CAAA,CAAAQ,EAAA,CAAAP,EAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAAoU,IAAA6E,CAAAA,GAAA,CAAA,CAAA,CAAAjZ,EAAA,CAAA,CAAA,CAAA,CAAAS,EAAA,CAAAR,EAAA,CAAA,CAAA,CAAA,CAAAmU,IAAA6E,CAAAA,GAAA,CAAAjZ,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAA,EAAA,EAAAY,EAAA,CAAAX,EAAA,CAAA,CAAA+B,EAAA,CAAA\/B,EAAA,CAAA,CAAAmU,IAAA6E,CAAAA,GAAA,CAAAjZ,EAAA,CAAA,CAAA,CAAA,CAAA,KAAAqC,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAA,CAAA,CAAA,CAAA,CAAA,IAAA4C,GAAA9C,EAAA,CAAAE,CAAA,CAAA,CAAA,CAAA,CAAA8B,GAAAhC,EAAA,CAAAE,CAAA,CAAA,CAAA,CAAApC,EAAA,GAAAoE,EAAA,CAAA0P,EAAA,CAAA9T,CAAA,CAAAgF,EAAA,CAAAd,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAc,EAAA,CAAAZ,EAAA,CAAA,CAAA,CAAA,CAAAF,EAAA,CAAAE,EAAA,CAAA,CAAA,CAAA,CAAArE,EAAAi0B,CAAAA,IAAA,CAAA7f,IAAAqF,CAAAA,GAAA,CAAAzZ,CAAAi0B,CAAAA,IAAA,CAAA9vB,EAAA,CAAAnE,EAAAk0B,CAAAA,IAAA;AAAA9f,IAAAqF,CAAAA,GAAA,CAAAzZ,CAAAk0B,CAAAA,IAAA,CAAAjvB,EAAA,CAAAjF,EAAAm0B,CAAAA,IAAA,CAAA\/f,IAAAoF,CAAAA,GAAA,CAAAxZ,CAAAm0B,CAAAA,IAAA,CAAAlvB,EAAA,CAAAjF,EAAAo0B,CAAAA,IAAA,CAAAhgB,IAAAoF,CAAAA,GAAA,CAAAxZ,CAAAo0B,CAAAA,IAAA,CAAAjwB,EAAA,CAAA9B,EAAA,EAAA,EAAA,CAAA,CAAA,MAAArC,EAAA,CAAA,CAAA,CAAAk0B,KAAA,CAAAA,CAAA,CAAA,CAAAD,KAAA,CAAAA,CAAA,CAAA,CAAAE,KAAA,CAAA,CAAAA,CAAA,CAAA,CAAAC,KAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAAvzB,EAAAqzB,CAAAA,IAAA,CAAArzB,EAAAozB,CAAAA,IAAA,CAAApzB,EAAAszB,CAAAA,IAAA,CAAAtzB,EAAAuzB,CAAAA,IAAA,CAAA,CAAA,CAAAN,GAAAA,QAAA,CAAA9zB,EAAA,CAAA,CAAA,IAAAC,CAAA,CAAAS,EAAA,CAAAA,CAAA,CAAA,CAAAG,EAAA,CAAAA,CAAA,CAAA,CAAAC,EAAA,CAAA,CAAAA,CAAA,CAAA,CAAAgB,GAAA,CAAA,CAAAA,CAAA,CAAAlB,GAAAA,CAAA+d,EAAA,CAAA3e,EAAA,CAAA,IAAA,CAAA,IAAAY,EAAAJ,CAAAA,CAAA,EAAA,CAAA,CAAAwE,CAAA\/E,CAAA+E,CAAApE,EAAAF,CAAAA,CAAA,EAAAsE,EAAAA,IAAA,CAAA,CAAA,CAAA,IAAAvE,GAAAsT,EAAA,CAAA9T,CAAA0D,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAAnD,GAAAC,EAAA,CAAA,CAAA,CAAA,CAAAuB,GAAAvB,EAAA,CAAA,CAAA,CAAAC,EAAA,CAAA0T,IAAAqF,CAAAA,GAAA,CAAA\/Y,CAAA,CAAAF,EAAA,CAAAK,EAAA,CAAAuT,IAAAqF,CAAAA,GAAA,CAAA5Y,CAAA,CAAAmB,EAAA,CAAAlB,EAAA,CAAAsT,IAAAoF,CAAAA,GAAA,CAAA1Y,CAAA,CAAAN,EAAA,CAAAsB,GAAA,CAAAsS,IAAAoF,CAAAA,GAAA,CAAA1X,EAAA,CAAAE,EAAA,CAAA,CAAA,CAAA,MAAAhC,EAAA,CAAA,CAAAY,EAAAZ,CAAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,OAAA,CAAAY,EAAAuD,CAAAA,CAAA,EAAA,CAAA,MAAA,CAAAzD,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAAgB,EAAA,CAAA,CAAA,CAAAuyB,GAAAA,QAAA,CAAAr0B,EAAA,CAAA,CAAA,GAAA,CAAA,CAAAA,EAAAqhB,CAAAA,MAAAnf,CAAAA,MAAA,EAAA,CAAAoyB,EAAAlN,CAAAA,GAAA,CAAApnB,EAAA,CAAA,CAAA,CAAA,IAAAU,EAAAV,EAAAqhB,CAAAA,MAAAvB,CAAAA,MAAA,CAAA,QAAA,CAAA9f,CAAA;AAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAqT,EAAA,CAAA9T,CAAA,CAAA,CAAA,CAAAY,EAAAA,CAAAH,CAAA,CAAA,CAAA,CAAAI,EAAAA,CAAAJ,CAAA,CAAA,CAAA,CAAA,OAAAV,EAAAi0B,CAAAA,IAAA,CAAA7f,IAAAqF,CAAAA,GAAA,CAAAzZ,CAAAi0B,CAAAA,IAAA,CAAAnzB,CAAA,CAAA,CAAAd,CAAAk0B,CAAAA,IAAA,CAAA9f,IAAAqF,CAAAA,GAAA,CAAAzZ,CAAAk0B,CAAAA,IAAA,CAAArzB,CAAA,CAAA,CAAAb,CAAAm0B,CAAAA,IAAA,CAAA\/f,IAAAoF,CAAAA,GAAA,CAAAxZ,CAAAm0B,CAAAA,IAAA,CAAAtzB,CAAA,CAAA,CAAAb,CAAAo0B,CAAAA,IAAA,CAAAhgB,IAAAoF,CAAAA,GAAA,CAAAxZ,CAAAo0B,CAAAA,IAAA,CAAAtzB,CAAA,CAAA,CAAAd,CAAA,CAAA,CAAA,CAAAk0B,KAAA,CAAAA,CAAA,CAAA,CAAAD,KAAA,CAAAA,CAAA,CAAA,CAAAE,KAAA,CAAA,CAAAA,CAAA,CAAA,CAAAC,KAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAAn0B,GAAA,CAAA,CAAAS,CAAAwzB,CAAAA,IAAA,CAAAl0B,EAAA+G,CAAAA,CAAA,CAAArG,CAAAuzB,CAAAA,IAAA,CAAAj0B,EAAA8G,CAAAA,CAAA,CAAApG,CAAAyzB,CAAAA,IAAA,CAAAn0B,EAAA+G,CAAAA,CAAA,CAAArG,CAAA0zB,CAAAA,IAAA,CAAAp0B,EAAA8G,CAAAA,CAAA,CAAA,CAAA,IAAArG,EAAA,CAAA6zB,EAAAlN,CAAAA,GAAA,CAAApnB,EAAA,CAAA,CAAAQ,CAAA,CAAAuzB,EAAA,CAAAtzB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAuB,CAAA,CAAA+R,EAAA,CAAAigB,EAAA,CAAAxzB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAP,EAAA,CAAA,CAAA+B,CAAAG,CAAA,CAAAA,CAAA,CAAAnC,EAAA+G,CAAAA,CAAA,CAAA\/E,CAAAK,CAAA,CAAAA,CAAA,CAAArC,EAAA8G,CAAAA,CAAA,CAAA9E,CAAAiD,CAAA,CAAAA,CAAA,CAAAjF,EAAA+G,CAAAA,CAAA,CAAA\/E,CAAAmC,CAAA,CAAAA,CAAA,CAAAnE,EAAA8G,CAAAA,CAAA,CAAA,OAAA7G,GAAA,CAAA,CAAAs0B,GAAAA,QAAA,CAAAv0B,EAAA,CAAA,CAAA,IAAAU,EAAAqT,EAAA,CAAA8f,EAAA,CAAA7zB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAa,EAAAH,CAAA,CAAA,CAAA,CAAA,CAAAI,EAAAJ,CAAA,CAAA,CAAA,CAAAoB,KAAAA,EAAApB,CAAA,CAAA,CAAA,CAAA,KAAAE,GAAAF,CAAA,CAAA,CAAA,CAAA,CAAAD,IAAAI,CAAAJ,CAAAqB,CAAArB,EAAA,CAAA,CAAAD,IAAAM,CAAAN,CAAAI,EAAAJ,EAAA,CAAA,IAAAwyB,EAAA,CAAAhzB,EAAA,CAAA,CAAA,MAAAgC,EAAA,CAAA8xB,EAAA,CAAA9zB,EAAAqhB,CAAAA,MAAA3f,CAAAA,GAAA,CAAA,QAAA,CAAAzB,EAAA,CAAA,CAAAS,EAAAA,CAAAqT,EAAA,CAAA9T,EAAA,CAAA,CAAA,CAAA,OAAAozB,GAAA,CAAA3yB,EAAAG,CAAA,CAAAA,CAAA;AAAAH,EAAAI,CAAA,CAAAA,CAAA,CAAAL,EAAA,CAAAT,EAAA+G,CAAAA,CAAA,CAAAvG,EAAA,CAAAR,EAAA8G,CAAAA,CAAA,CAAA9G,EAAAw0B,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAryB,CAAA,CAAA4R,EAAA,CAAA\/R,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAG,CAAAE,CAAA,CAAAA,CAAA,CAAArC,EAAA+G,CAAAA,CAAA,CAAA5E,CAAA8C,CAAA,CAAAA,CAAA,CAAAjF,EAAA8G,CAAAA,CAAA,CAAA3E,CAAAgC,CAAA,CAAAA,CAAA,CAAAnE,EAAA+G,CAAAA,CAAA,CAAA5E,CAAAkC,CAAA,CAAAA,CAAA,CAAArE,EAAA8G,CAAAA,CAAA,CAAA,IAAAmsB,EAAA,CAAAjzB,EAAA,CAAA,CAAAC,CAAA,CAAA,QAAA,CAAAD,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAA,CAAA,GAAA,CAAA,CAAAV,EAAAqhB,CAAAA,MAAAnf,CAAAA,MAAA,EAAA,CAAAoyB,EAAAlN,CAAAA,GAAA,CAAApnB,EAAA,CAAA,CAAA,CAAA,IAAAa,GAAAb,EAAAqhB,CAAAA,MAAAvB,CAAAA,MAAA,CAAA,QAAA,CAAAjf,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAgB,GAAAiS,EAAA,CAAAjT,EAAA,CAAA,CAAA,CAAAF,GAAAA,CAAAkB,EAAA,CAAA,CAAA,CAAArB,GAAAA,CAAAqB,EAAA,CAAA,CAAA,CAAA,KAAAtB,GAAAuT,EAAA,CAAAsf,EAAA,CAAArzB,EAAA+G,CAAAA,CAAA,CAAAnG,EAAA,CAAAZ,EAAA8G,CAAAA,CAAA,CAAArG,EAAA,CAAAR,EAAA,CAAAS,EAAA,CAAAV,EAAAw0B,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,OAAA5zB,GAAA,CAAAJ,EAAA,CAAA,CAAA,CAAA,CAAAC,EAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAAK,EAAAozB,CAAAA,IAAA,CAAA7f,IAAAqF,CAAAA,GAAA,CAAA5Y,EAAAozB,CAAAA,IAAA,CAAAxzB,EAAA,CAAA,CAAAI,EAAAqzB,CAAAA,IAAA,CAAA9f,IAAAqF,CAAAA,GAAA,CAAA5Y,EAAAqzB,CAAAA,IAAA,CAAAtzB,EAAA,CAAA,CAAAC,EAAAszB,CAAAA,IAAA,CAAA\/f,IAAAoF,CAAAA,GAAA,CAAA3Y,EAAAszB,CAAAA,IAAA,CAAAvzB,EAAA,CAAA,CAAAC,EAAAuzB,CAAAA,IAAA,CAAAhgB,IAAAoF,CAAAA,GAAA,CAAA3Y,EAAAuzB,CAAAA,IAAA,CAAA3zB,EAAA,CAAA,CAAAI,EAAA,CAAA,CAAA,CAAAqzB,KAAA,CAAAA,CAAA,CAAA,CAAAD,KAAA,CAAAA,CAAA,CAAA,CAAAE,KAAA,CAAA,CAAAA,CAAA,CAAA,CAAAC,KAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAAvzB,EAAAqzB,CAAAA,IAAA,CAAArzB,EAAAozB,CAAAA,IAAA,CAAApzB,EAAAszB,CAAAA,IAAA,CAAAtzB,EAAAuzB,CAAAA,IAAA,CAAA,CAAAtzB,EAAAA;AAAAwzB,EAAAlN,CAAAA,GAAA,CAAApnB,EAAA,CAAA8B,GAAAA,CAAAiyB,EAAA,CAAAjzB,EAAA,CAAA,CAAA,CAAA,CAAA,OAAAkzB,GAAA,CAAAlyB,EAAA,CAAA,QAAA,CAAAjB,EAAA,CAAAC,EAAA,CAAA,CAAA,MAAAuyB,GAAA,CAAArzB,EAAA+G,CAAAA,CAAA,CAAAlG,EAAA,CAAAb,EAAA8G,CAAAA,CAAA,CAAAhG,EAAA,CAAAb,EAAA,CAAAS,EAAA,CAAAV,EAAAw0B,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAx0B,EAAA,CAAAS,EAAA,CAAAD,EAAA,CAAA,KAAA,IAAA,SAAA,GAAAR,EAAA2C,CAAAA,IAAA,CAAA,CAAAgC,CAAAA,CAAAoP,EAAA,CAAAsf,EAAA,CAAA5yB,EAAA,CAAAK,CAAA,CAAAL,EAAA,CAAAD,EAAA,CAAAR,EAAAw0B,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAAxwB,EAAAA,CAAAW,CAAA,CAAA,CAAA,CAAAO,EAAAA,CAAAP,CAAA,CAAA,CAAA,CAAAQ,GAAAA,CAAA4O,EAAA,CAAAsf,EAAA,CAAA5yB,EAAA,CAAAG,EAAA,CAAAH,EAAA,CAAAD,EAAA,CAAAR,EAAAw0B,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,KAAA1tB,GAAA3B,EAAA,CAAA,CAAA,CAAA4B,GAAAA,CAAA5B,EAAA,CAAA,CAAA,CAAA,KAAA8B,GAAA8M,EAAA,CAAAsf,EAAA,CAAAxyB,CAAA,CAAAL,EAAA,CAAAC,EAAA,CAAAD,EAAA,CAAAR,EAAAw0B,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAAttB,EAAAA,CAAAD,EAAA,CAAA,CAAA,CAAA7B,GAAAA,CAAA6B,EAAA,CAAA,CAAA,CAAA,KAAA5B,GAAA0O,EAAA,CAAAsf,EAAA,CAAAvxB,CAAA,CAAAtB,EAAA,CAAAC,EAAA,CAAAD,EAAA,CAAAR,EAAAw0B,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA9vB,EAAAA,CAAAW,EAAA,CAAA,CAAA,CAAAU,GAAAA,CAAAV,EAAA,CAAA,CAAA,CAAApF,EAAA,CAAA,CAAAmU,IAAAqF,CAAAA,GAAA,CAAAzV,CAAA,CAAA8C,EAAA,CAAAI,CAAA,CAAAxC,CAAA,CAAA,CAAA0P,IAAAqF,CAAAA,GAAA,CAAAvU,CAAA,CAAA6B,EAAA,CAAA3B,EAAA,CAAAW,EAAA,CAAA,CAAAqO,IAAAoF,CAAAA,GAAA,CAAAxV,CAAA,CAAA8C,EAAA,CAAAI,CAAA,CAAAxC,CAAA,CAAA,CAAA0P,IAAAoF,CAAAA,GAAA,CAAAtU,CAAA,CAAA6B,EAAA,CAAA3B,EAAA,CAAAW,EAAA,CAAA,CAAA,CAAA,IAAA,SAAA,GAAA\/F,EAAA2C,CAAAA,IAAA,EAAA2D,CAAA,EAAAxE,CAAA,CAAAjB,CAAA,EAAA,CAAA,CAAAoD,CAAA,EAAArD,EAAA,CAAAE,CAAA,EAAA,CAAA,CAAA2F,EAAA,CAAA2N,IAAAyE,CAAAA,GAAA,CAAA7Y,EAAAw0B,CAAAA,KAAA,CAAA,CAAAlwB,CAAA;AAAA8P,IAAA0E,CAAAA,GAAA,CAAA9Y,EAAAw0B,CAAAA,KAAA,CAAA,CAAA3hB,CAAA,CAAAuB,IAAAmL,CAAAA,KAAA,CAAAjZ,CAAA,CAAAG,EAAA,CAAAxC,CAAA,CAAAK,CAAA,CAAA,CAAAyO,CAAA,CAAAqB,IAAAmL,CAAAA,KAAA,CAAAtb,CAAA,CAAAwC,EAAA,CAAAH,CAAA,CAAAhC,CAAA,CAAA,CAAArE,CAAA,CAAA,CAAAQ,EAAA,CAAAoS,CAAA,CAAArS,EAAA,CAAAuS,CAAA,CAAAtS,EAAA,CAAAoS,CAAA,CAAArS,EAAA,CAAAuS,CAAA,CAAA,GAAAE,EAAA,CAAAc,EAAA,CAAAsf,EAAA,CAAAxyB,CAAA,CAAAC,CAAA,CAAAL,EAAA,CAAAD,EAAA,CAAAR,EAAAw0B,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAArhB,CAAA,CAAAF,EAAA,CAAA,CAAA,CAAA,CAAAI,EAAA,CAAAJ,EAAA,CAAA,CAAA,CAAA,CAAAM,EAAA,CAAAQ,EAAA,CAAAsf,EAAA,CAAAxyB,CAAA,CAAAD,EAAA,CAAAH,EAAA,CAAAD,EAAA,CAAAR,EAAAw0B,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA\/gB,CAAA,CAAAF,EAAA,CAAA,CAAA,CAAA,CAAAI,EAAA,CAAAJ,EAAA,CAAA,CAAA,CAAA,CAAAM,EAAA,CAAAE,EAAA,CAAAsf,EAAA,CAAAvxB,CAAA,CAAAlB,EAAA,CAAAH,EAAA,CAAAD,EAAA,CAAAR,EAAAw0B,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAvgB,EAAA,CAAAJ,EAAA,CAAA,CAAA,CAAA,CAAAM,EAAA,CAAAN,EAAA,CAAA,CAAA,CAAA,CAAA+E,CAAA,CAAA7E,EAAA,CAAAsf,EAAA,CAAAvxB,CAAA,CAAAhB,CAAA,CAAAL,EAAA,CAAAD,EAAA,CAAAR,EAAAw0B,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAzb,CAAA,CAAAH,CAAA,CAAA,CAAA,CAAA,CAAAM,CAAA,CAAAN,CAAA,CAAA,CAAA,CAAA,CAAA3Y,CAAA,CAAA,CAAAmU,IAAAqF,CAAAA,GAAA,CAAAtG,CAAA,CAAAM,CAAA,CAAAQ,EAAA,CAAA8E,CAAA,CAAA,CAAA3E,IAAAqF,CAAAA,GAAA,CAAApG,EAAA,CAAAM,EAAA,CAAAQ,EAAA,CAAA+E,CAAA,CAAA,CAAA9E,IAAAoF,CAAAA,GAAA,CAAArG,CAAA,CAAAM,CAAA,CAAAQ,EAAA,CAAA8E,CAAA,CAAA,CAAA3E,IAAAoF,CAAAA,GAAA,CAAAnG,EAAA,CAAAM,EAAA,CAAAQ,EAAA,CAAA+E,CAAA,CAAA,CAAA,CAAA,OAAAjZ,EAAA,CAAA,CAAAw0B,GAAAA,QAAA,CAAAz0B,EAAA,CAAA,CAAA,GAAA,CAAAA,EAAAkC,CAAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAAjC,EAAA,CAAAA,CAAA,CAAA,CAAAS,EAAA,CAAA,CAAAA,CAAA,CAAA,CAAAG,EAAA,CAAAA,CAAA,CAAA,CAAAC,EAAA,CAAA,CAAAA,CAAA,CAAA,OAAAd,GAAA4B,CAAAA,OAAA,CAAA,QAAA,CAAA5B,EAAA,CAAA,CAAA8B,EAAAA,CAAAiS,EAAA,CAAAwgB,EAAA,CAAAv0B,EAAA,CAAA;AAAA,CAAA,CAAA,KAAAS,GAAAqB,EAAA,CAAA,CAAA,CAAA,CAAAtB,GAAAsB,EAAA,CAAA,CAAA,CAAA,CAAAE,GAAAF,EAAA,CAAA,CAAA,CAAA7B,EAAA,CAAAmU,IAAAqF,CAAAA,GAAA,CAAAxZ,CAAA,CAAA6B,EAAAlB,CAAA,CAAAA,CAAA,CAAAC,EAAA,CAAAuT,IAAAqF,CAAAA,GAAA,CAAA5Y,CAAA,CAAAJ,EAAA,CAAAC,EAAA,CAAA0T,IAAAoF,CAAAA,GAAA,CAAA9Y,CAAA,CAAAF,EAAA,CAAAM,EAAA,CAAAsT,IAAAoF,CAAAA,GAAA,CAAA1Y,CAAA,CAAAkB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA\/B,CAAA,CAAAY,CAAA,CAAAH,CAAA,CAAAI,CAAA,CAAA,CAAA,CAAA4zB,GAAAA,QAAA,CAAA10B,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,GAAA,CAAAuyB,EAAA,CAAAjzB,EAAA,CAAA,EAAA,CAAAgzB,EAAA,CAAAhzB,EAAA,CAAA,CAAA,MAAA,CAAAA,EAAA+G,CAAAA,CAAA,CAAA\/G,EAAA8G,CAAAA,CAAA,CAAA9G,EAAA+G,CAAAA,CAAA,CAAA9G,CAAA,CAAAD,EAAA8G,CAAAA,CAAA,CAAApG,CAAA,CAAAI,EAAAA,CAAA8yB,EAAA,CAAA,CAAA,CAAA3zB,CAAA,CAAA2zB,EAAA,CAAA,CAAA,CAAAlzB,CAAA,CAAAV,EAAAqhB,CAAAA,MAAA,CAAA,CAAA2R,GAAA,CAAAhzB,EAAA,CAAA,CAAAa,CAAA,CAAAizB,EAAA,CAAAhzB,CAAA,CAAA,EAAAgB,CAAA,CAAA2wB,EAAAC,CAAAA,SAAA,EAAA,CAAA9xB,CAAA,CAAA,OAAA,GAAAZ,EAAA20B,CAAAA,eAAA,CAAA7yB,CAAAsuB,CAAAA,UAAA,CAAAtvB,CAAA,CAAA8zB,EAAA,CAAA50B,EAAA,CAAA,CAAA,CAAA8B,CAAAwuB,CAAAA,KAAA,CAAAxvB,CAAA,CAAA8zB,EAAA,CAAA50B,EAAA,CAAA,CAAA,CAAAS,CAAA,CAAAszB,EAAA,CAAAnzB,CAAA,CAAA,CAAAC,CAAA,CAAAmzB,EAAA,CAAAvzB,CAAA,CAAA,CAAAD,EAAAA,CAAAuT,EAAA,CAAAlT,CAAA,CAAA,CAAA,CAAA,OAAA,CAAAL,CAAAwB,CAAA,CAAAA,CAAA,CAAAhC,EAAA+G,CAAAA,CAAA,CAAAvG,CAAA2B,CAAA,CAAAA,CAAA,CAAAnC,EAAA8G,CAAAA,CAAA,CAAAtG,CAAA6B,CAAA,CAAAA,CAAA,CAAArC,EAAA+G,CAAAA,CAAA,CAAAvG,CAAAyE,CAAA,CAAAA,CAAA,CAAAjF,EAAA8G,CAAAA,CAAA,CAAA,CAAA,CAAA+tB,GAAAA,QAAA,CAAA70B,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,IAAAG,EAAA4xB,EAAAC,CAAAA,SAAA,EAAA5xB,EAAAA,CAAA,OAAA,GAAAJ,CAAA,CAAAG,CAAAuvB,CAAAA,UAAA,CAAAnwB,CAAA,CAAA20B,EAAA,CAAA50B,EAAA,CAAA,CAAA,CAAAa,CAAAyvB,CAAAA,KAAA,CAAArwB,CAAA,CAAA20B,EAAA,CAAA50B,EAAA,CAAA,CAAA8B,EAAAA,CAAAiyB,EAAA,CAAAjzB,CAAA,CAAAF;CAAAA,CAAAmT,EAAA,CAAAigB,EAAA,CAAAlyB,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAAlB,CAAAH,CAAA,CAAAA,CAAA,CAAAT,EAAA+G,CAAAA,CAAA,CAAAnG,CAAAJ,CAAA,CAAAA,CAAA,CAAAR,EAAA8G,CAAAA,CAAA,CAAAlG,CAAAoB,CAAA,CAAAA,CAAA,CAAAhC,EAAA+G,CAAAA,CAAA,CAAAnG,CAAAuB,CAAA,CAAAA,CAAA,CAAAnC,EAAA8G,CAAAA,CAAA,CAAA,CAAA,CAAAguB,GAAA7nB,IAAA+f,CAAAA,KAAA,CAAA,y7CAAA,CAAA;AAAA+H,GAAAA,QAAA,CAAA\/0B,EAAA,CAAA,CAAA,MAAA,CAAA80B,EAAAE,CAAAA,GAAA,CAAAh1B,EAAA,CAAA,CAAA80B,EAAAG,CAAAA,IAAA,CAAAj1B,EAAA,CAAA,CAAA80B,EAAAI,CAAAA,KAAA,CAAAl1B,EAAA,CAAA,CAAA80B,EAAAK,CAAAA,MAAA,CAAAn1B,EAAA,CAAA,CAAA80B,EAAAM,CAAAA,MAAA,CAAAp1B,EAAA,CAAA,CAAA80B,EAAAO,CAAAA,IAAA,CAAAr1B,EAAA,CAAA,CAAA80B,EAAAQ,CAAAA,IAAA,CAAAt1B,EAAA,CAAA,CAAA80B,EAAAS,CAAAA,IAAA,CAAAv1B,EAAA,CAAA,CAAA80B,EAAAU,CAAAA,KAAA,CAAAx1B,EAAA,CAAA,CAAA80B,EAAAW,CAAAA,IAAA,CAAAz1B,EAAA,CAAA,CAAA80B,EAAAY,CAAAA,MAAA,CAAA11B,EAAA,CAAA,CAAA80B,EAAAa,CAAAA,MAAA,CAAA31B,EAAA,CAAA,CAAA,CAAA,CAAA41B,GAAA,CAAAC,iBAAA,CAAAf,EAAAgB,CAAAA,KAAA,CAAAhB,EAAAiB,CAAAA,IAAA,CAAA,CAAA,CAAA,CAAAjB,EAAAiB,CAAAA,IAAA,CAAA,CAAA,CAAA,CAAArqB,CAAAA,MAAA,CAAAuI,CAAA,CAAA8gB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAiB,kBAAA,CAAA,aAAA,CAAAlB,EAAAiB,CAAAA,IAAA,CAAA,CAAA,CAAA,CAAAjB,EAAAiB,CAAAA,IAAA,CAAA,CAAA,CAAA,CAAArqB,CAAAA,MAAA,CAAAuI,CAAA,CAAA8gB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkB,cAAA,CAAAnB,EAAAoB,CAAAA,KAAA,CAAApB,EAAAiB,CAAAA,IAAA,CAAA,CAAA,CAAA,CAAAjB,EAAAiB,CAAAA,IAAA,CAAA,CAAA,CAAA,CAAArqB,CAAAA,MAAA,CAAAuI,CAAA,CAAA8gB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAoB,GAAAz1B,CAAA,CAAA,IAAA,CAAA,CAAA01B,GAAA,sBAAAvlB,CAAAA,IAAA,CAAAtD,MAAA8oB,CAAAA,SAAAC,CAAAA,QAAA,CAAA,CAAAC,GAAA,MAAA1lB,CAAAA,IAAA,CAAAtD,MAAA8oB,CAAAA,SAAAC,CAAAA,QAAA,CAAA,CAAAE;AAAAJ,EAAA,CAAA,SAAA,CAAA,SAAA,CAAAzR,GAAAA,QAAA,CAAA3kB,EAAA,CAAA,CAAA,MAAA8kB,WAAA,GAAA9kB,EAAA,EAAA+kB,YAAA,GAAA\/kB,EAAA,EAAAglB,WAAA,GAAAhlB,EAAA,EAAAilB,SAAA,GAAAjlB,EAAA,CAAA,CAAAy2B,GAAAA,QAAA,CAAAz2B,EAAA,CAAA,CAAA,MAAAA,GAAAyI,CAAAA,MAAA,CAAA,CAAA,CAAAkd,CAAAA,WAAA,EAAA,CAAA3lB,EAAA0I,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAguB,GAAAA,QAAA,CAAA12B,EAAA,CAAA,CAAA,MAAAA,GAAA,WAAA22B,YAAA,EAAA,SAAA,GAAA32B,EAAA42B,CAAAA,OAAAj0B,CAAAA,IAAA,EAAA3C,EAAA,WAAA62B,cAAA,EAAA72B,EAAA,WAAA82B,oBAAA,EAAA92B,EAAA,WAAA+2B,iBAAA,GAAA,MAAA,GAAA\/2B,EAAA2C,CAAAA,IAAA,EAAA,QAAA,GAAA3C,EAAA2C,CAAAA,IAAA,CAAA,CAAA,CAAAq0B,GAAAA,QAAA,CAAAh3B,EAAA,CAAA,CAAAC,EAAAA,CAAAD,EAAAi3B,CAAAA,UAAA,KAAA,IAAAv2B,EAAA,CAAA,CAAAG,EAAAI,MAAAi2B,CAAAA,OAAA,CAAAl1B,EAAA+P,CAAAA,EAAA,CAAA,CAAArR,CAAA,CAAAG,CAAAqB,CAAAA,MAAA,CAAAxB,CAAA,EAAA,CAAA,CAAA,IAAAI,EAAAiT,EAAA,CAAAlT,CAAA,CAAAH,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAoB,EAAAhB,CAAA,CAAA,CAAA,CAAA;GAAAA,CAAA,CAAA,CAAA,CAAA,GAAAb,EAAA,CAAA,MAAA,EAAAyL,CAAAA,MAAA,CAAA5J,CAAA,CAAA,IAAA,CAAA4J,CAAAA,MAAA,CAAA1J,EAAAgQ,CAAAA,EAAA,CAAA,CAAA,MAAAhQ,GAAAgQ,CAAAA,EAAA,CAAA,CAAAmlB,GAAAA,QAAA,CAAAn3B,EAAA,CAAA,CAAA,IAAAU,EAAAV,EAAAi3B,CAAAA,UAAA,OAAA,EAAAvrB,CAAAA,MAAA,CAAA1L,EAAAo3B,CAAAA,QAAA,CAAA,KAAA,CAAA1rB,CAAAA,MAAA,CAAAsrB,EAAA,CAAA,CAAAC,WAAAv2B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA22B,GAAAA,QAAA,CAAAr3B,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAsL,QAAAC,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAApL,EAAAmL,QAAAsrB,CAAAA,IAAA52B,EAAA62B,CAAAA,KAAAC,CAAAA,QAAA,CAAA,UAAA92B,EAAA62B,CAAAA,KAAAE,CAAAA,UAAA,CAAA,KAAA\/2B,EAAA62B,CAAAA,KAAAG,CAAAA,IAAA,CAAAz3B,CAAAY,EAAAyL,CAAAA,WAAA,CAAA5L,CAAA,CAAAA,EAAAi3B,CAAAA,SAAA,CAAA33B,EAAAytB,CAAAA,KAAA,CAAA,IAAA,CAAA\/rB,CAAAA,GAAA,CAAA,QAAA,CAAA1B,CAAA,CAAA,CAAA,MAAAA,EAAA,EAAA,GAAA,CAAA,CAAA2B,CAAAA,IAAA,CAAA,IAAA,CAAAb,GAAAA,CAAAJ,CAAAk3B,CAAAA,WAAA91B,EAAAA,CAAApB,CAAAm3B,CAAAA,YAAAj3B,EAAAA,CAAAoL,QAAAC,CAAAA,aAAA,CAAA,MAAA,CAAArL,EAAA22B,CAAAA,KAAAO,CAAAA,OAAA,CAAA,cAAAl3B,EAAA22B,CAAAA,KAAAQ,CAAAA,QAAA;AAAA,QAAAn3B,EAAA22B,CAAAA,KAAAS,CAAAA,KAAA,CAAA,KAAAp3B,EAAA22B,CAAAA,KAAAU,CAAAA,MAAA,CAAA,KAAAv3B,EAAA4L,CAAAA,WAAA,CAAA1L,CAAA,CAAAH,EAAAA,CAAAG,CAAAs3B,CAAAA,SAAAz3B,CAAAG,CAAAi3B,CAAAA,YAAA,OAAA7rB,SAAAsrB,CAAAA,IAAA3qB,CAAAA,WAAA,CAAAjM,CAAA,CAAA,CAAA,CAAAs3B,MAAAl3B,EAAA,CAAAm3B,OAAAn2B,CAAA,CAAAq2B,SAAA13B,CAAA,CAAA,CAAA,CAAA23B,GAAAA,QAAA,CAAAp4B,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAA,CAAA,CAAAG,EAAA,IAAA,CAAAC,EAAAA,QAAA,EAAA,CAAA,IAAA,IAAAA,GAAAmB,SAAAC,CAAAA,MAAA,CAAAJ,GAAA4W,KAAA,CAAA5X,EAAA,CAAA,CAAAF,GAAA,CAAA,CAAAA,EAAA,CAAAE,EAAA,CAAAF,EAAA,EAAA,CAAAkB,EAAA,CAAAlB,EAAA,CAAA,CAAAqB,SAAA,CAAArB,EAAA,CAAAC,EAAA,CAAAiB,EAAAu2B,aAAA,CAAA33B,CAAA,CAAAA,EAAA,CAAA6M,MAAAkX,CAAAA,UAAA,CAAA,QAAA,EAAA,CAAA5jB,CAAA,CAAA,IAAAb,GAAAyY,CAAAA,KAAA,CAAA,IAAA,EAAA,CAAA3W,EAAA,CAAA,CAAA,CAAA7B,CAAA,CAAA,CAAA,OAAAa,EAAAw3B,CAAAA,KAAA,CAAAC,QAAA,EAAA,CAAA,GAAAF,YAAA,CAAA33B,CAAA,CAAA,CAAAG,CAAA,CAAA,CAAA,IAAAZ,GAAAY,CAAAA,EAAA,CAAA,IAAAb,GAAAyY,CAAAA,KAAA,CAAA,IAAA,EAAA,CAAAxE,CAAA,CAAAhU,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAa,CAAA03B,CAAAA,MAAA,CAAAC,QAAA,EAAA,CAAA53B,CAAA,CAAA,IAAAw3B,aAAA,CAAA33B,CAAA,CAAA,CAAA;AAAAI,CAAA,CAAA,CAAA43B,GAAAA,QAAA,CAAA14B,EAAA,CAAA,CAAAA,EAAA,GAAAA,EAAAu3B,CAAAA,KAAAoB,CAAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAAC,GAAAA,QAAA,CAAA54B,EAAA,CAAAC,CAAA,CAAA,CAAAD,EAAA,GAAAA,EAAAu3B,CAAAA,KAAAoB,CAAAA,MAAA,CAAA14B,CAAA,CAAA,CAAA,CAAA44B,GAAAA,QAAA,CAAA74B,EAAA,CAAAC,CAAA,CAAA,CAAAD,EAAA,GAAA,WAAA,GAAAC,CAAA,CAAAy4B,EAAA,CAAA14B,EAAA,CAAA,CAAAA,EAAAu3B,CAAAA,KAAAoB,CAAAA,MAAA,CAAA32B,EAAA0P,CAAAA,EAAA6C,CAAAA,SAAA,CAAA,CAAA,CAAAukB,GAAAA,QAAA,EAAA,CAAA,IAAA94B,EAAA,OAAA,MAAA,IAAA,IAAA,IAAAA,EAAA,CAAAgM,QAAA+sB,CAAAA,iBAAA,GAAA,IAAA,EAAA,GAAA\/4B,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAAg5B,CAAAA,QAAA,CAAA,CAAA,CAAAC,GAAAA,QAAA,CAAAj5B,EAAA,CAAA,CAAA,MAAAA,GAAA,CAAAA,EAAAgR,CAAAA,OAAA,CAAA,UAAA,CAAA,KAAA,CAAAA,CAAAA,OAAA,CAAA,YAAA,CAAA,OAAA,CAAAA,CAAAA,OAAA,CAAA,qBAAA,CAAA,OAAA,CAAAA,CAAAA,OAAA,CAAA,UAAA,CAAA,QAAA,CAAA,CAAAolB,EAAA,CAAAp2B,EAAAgR,CAAAA,OAAA,CAAA,gBAAA,CAAA,KAAA,CAAAA,CAAAA,OAAA,CAAA,UAAA,CAAA,QAAA,CAAA,CAAAhR,EAAAgR,CAAAA,OAAA,CAAA,gBAAA;AAAA,MAAA,CAAA,CAAA,CAAAkoB,GAAAA,QAAA,CAAAl5B,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAa,EAAAb,CAAAk5B,CAAAA,IAAA,CAAAn3B,EAAA,CAAAA,CAAAlB,CAAA6C,CAAAA,KAAA,OAAA,CAAAoD,GAAA\/G,EAAAo5B,CAAAA,OAAAryB,CAAAjG,CAAAu4B,CAAAA,WAAAtyB,CAAAA,CAAAA,CAAA9G,CAAAq5B,CAAAA,UAAAvyB,EAAA\/E,CAAA+E,CAAA9G,CAAAs5B,CAAAA,OAAA,CAAAzyB,GAAA9G,EAAAw5B,CAAAA,OAAA1yB,CAAAhG,CAAAu4B,CAAAA,WAAAvyB,CAAAA,CAAAA,CAAA7G,CAAAi4B,CAAAA,SAAApxB,EAAA9E,CAAA8E,CAAA7G,CAAAw5B,CAAAA,OAAA,CAAA,CAAA,CAAAC,GAAAA,QAAA,CAAA15B,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAa,EAAAb,CAAAk5B,CAAAA,IAAA,OAAA,CAAApyB,GAAA\/G,EAAA25B,CAAAA,MAAA5yB,CAAA9G,CAAAs5B,CAAAA,OAAAxyB,CAAA9G,CAAAq5B,CAAAA,UAAAvyB,EAAAjG,CAAA6C,CAAAA,KAAAoD,CAAAjG,CAAAu4B,CAAAA,WAAAtyB,CAAAA,CAAA,CAAAD,GAAA9G,EAAA45B,CAAAA,MAAA9yB,CAAA7G,CAAAw5B,CAAAA,OAAA3yB,CAAA7G,CAAAi4B,CAAAA,SAAApxB,EAAAhG,CAAA6C,CAAAA,KAAAmD,CAAAhG,CAAAu4B,CAAAA,WAAAvyB,CAAAA,CAAA,CAAA,CAAA,CAAA+yB,GAAAA,QAAA,CAAA75B,EAAA,CAAA,CAAA,MAAA85B,iBAAA,CAAA9tB,QAAAqhB,CAAAA,eAAA,CAAA0M,CAAAA,gBAAA,CAAA,IAAAruB,CAAAA,MAAA,CAAA1L,EAAA,CAAA,CAAA,CAAA,CAAAg6B,GAAA,IAAAxf,MAAA,CAAA,KAAA9O,CAAAA,MAAA,CAAA,gCAAA,CAAA,KAAA,CAAAA,CAAAA,MAAA,CAAA,WAAA;AAAA,GAAA,CAAA,CAAA,CAAAuuB,GAAAA,QAAA,CAAAj6B,EAAA,CAAA,CAAAC,EAAAA,CAAA8T,EAAA,CAAA\/T,EAAA,CAAA,CAAA,CAAA,OAAA,CAAA+G,EAAA9G,EAAA,CAAA,CAAA,CAAA,CAAA6G,EAAA7G,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAi6B,GAAAA,QAAA,CAAAl6B,EAAA,CAAA,CAAA,GAAA,YAAA,IAAA,IAAA,EAAAA,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAAuH,CAAAA,IAAA,EAAA,KAAAvH,GAAA,CAAA,CAAA,CAAAm6B,GAAAA,QAAA,CAAAn6B,EAAA,CAAA,CAAA,IAAAC,EAAA,CAAAA,GAAAD,EAAAkC,CAAAA,MAAAjC,EAAA,GAAAA,GAAAD,EAAA2a,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAja,EAAA,CAAAA,GAAAV,EAAAkC,CAAAA,MAAAxB,EAAA,IAAAA,GAAAV,EAAA2a,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA1a,EAAA,EAAAS,CAAA,EAAAV,EAAA,GAAA41B,EAAAI,CAAAA,iBAAA,CAAA,CAAA,CAAA,CAAA,CAAAoE,GAAAA,QAAA,CAAAp6B,EAAA,CAAA,CAAA,MAAA,SAAA,CAAAC,CAAA,CAAA,CAAA,GAAAk2B,EAAAkE,CAAAA,uBAAA,EAAAr6B,EAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAq6B,GAAAt4B,EAAAgS,CAAAA,EAAAumB,CAAAA,QAAA,CAAAC,gBAAA,CAAA,CAAAA,gBAAA,CAAA,CAAA,CAAAC,GAAAA,QAAA,EAAA,CAAA,IAAA,GAAA,IAAAvT,GAAA,CAAAhV,EAAAlQ,EAAAkQ,CAAAA,EAAA,CAAAD,EAAAjQ,EAAAiQ,CAAAA,EAAA,CAAAikB,EAAApB,EAAAoB,CAAAA,KAAA,CAAA\/jB,EAAAnQ,EAAAmQ,CAAAA,EAAA,CAAA,GAAA,EAAAzG,CAAAA,MAAA,CAAAuH,EAAA,CAAA,iBAAA,CAAA,CAAA,GAAA,CAAA;AAAAvH,GAAA,EAAAA,CAAAA,MAAA,KAAA1L,GAAA,IAAA06B,IAAAz6B,KAAAA,GAAAD,EAAA26B,CAAAA,WAAA,EAAA,KAAAj6B,GAAA,EAAAgL,CAAAA,MAAA,CAAA1L,EAAA46B,CAAAA,QAAA,EAAA,CAAA,CAAA,CAAAC,CAAAA,QAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAAh6B,GAAA,EAAA6K,CAAAA,MAAA,CAAA1L,EAAA86B,CAAAA,OAAA,EAAA,CAAAD,CAAAA,QAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA\/5B,GAAA,EAAA4K,CAAAA,MAAA,CAAA1L,EAAA+6B,CAAAA,QAAA,EAAA,CAAAF,CAAAA,QAAA,CAAA,CAAA,CAAA,GAAA,CAAA\/4B,GAAAA,CAAA,EAAA4J,CAAAA,MAAA,CAAA1L,EAAAg7B,CAAAA,UAAA,EAAA,CAAAH,CAAAA,QAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,EAAAnvB,CAAAA,MAAA,CAAAzL,EAAA,CAAA,GAAA,CAAAyL,CAAAA,MAAA,CAAAhL,EAAA,CAAA,GAAA,CAAAgL,CAAAA,MAAA,CAAA7K,EAAA,CAAA,GAAA,CAAA6K,CAAAA,MAAA,CAAA5K,EAAA,CAAA4K,CAAAA,MAAA,CAAA5J,EAAA,CAAA,OAAA,CAAAkW,MAAA,OAAA,CAAAijB,cAAA,EAAA,CAAAC,iBAAA,KAAA,CAAAC,2BAAA,aAAA,CAAAC,wBAAA,OAAA,CAAAC,qBAAA,SAAA,CAAAC,sBAAAppB,CAAA,CAAAqpB,oBAAAtpB,CAAA;AAAAupB,iCAAA,OAAA,CAAAC,mBAAA,GAAA,CAAAC,qBAAA,CAAA,CAAAC,0BAAA,IAAA,CAAAC,uBAAA1F,CAAA,CAAA2F,2BAAA,OAAA,CAAAC,uBAAA,OAAA,CAAAC,uBAAA,CAAA,CAAAC,qBAAA7pB,CAAA,CAAA8pB,aAAA,IAAA,CAAAC,gBAAA,IAAA,CAAAC,eAAA,IAAA,CAAAC,eAAA,IAAA,CAAAC,qBAAA,IAAA,CAAAC,cAAA,CAAA,CAAA,CAAAC,YAAA,WAAA,CAAAC,aAAA,IAAA,CAAAC,iBAAA,CAAA,CAAA,CAAAC,YAAApC,EAAA,CAAAqC,iBAAA,CAAA,CAAA,CAAAC,mBAAA,CAAA,CAAA,CAAAC,WAAA,IAAA;AAAAC,SAAA,IAAA,CAAAC,iBAAA,CAAA,CAAA,CAAAC,cAAA,CAAA,CAAA,CAAArP,UAAA,CAAA,CAAA,CAAAsP,WAAA,CAAA,CAAA,CAAAC,WAAA,CAAA,CAAA,CAAAC,oBAAA,OAAA,CAAAC,aAAA,IAAA,CAAA71B,KAAAmE,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA2xB,SAAA,IAAA,CAAAC,UAAA,IAAA,CAAAC,YAAA,CAAAC,MAAA,CAAA,CAAA,CAAA3iB,KAAA,IAAA,CAAA,CAAA4iB,2BAAA,EAAA,CAAAC,gBAAA,IAAA,CAAAC,gBAAA,CAAA,CAAA,CAAApE,QAAA,CAAA,CAAAE,QAAA,CAAA,CAAAmE,mBAAA,EAAA,CAAAC,iBAAA,EAAA,CAAAC,iBAAA,IAAA,CAAAC,sBAAA,CAAA,CAAA,CAAAC,eAAA,CAAA,CAAA,CAAAC,UAAA,CAAA,CAAA,CAAAC,kBAAA,IAAA,CAAAC,kBAAA,EAAA,CAAAC,aAAA,IAAA,CAAAC,oBAAAvJ,EAAAgB,CAAAA,KAAA;AAAAwI,eAAA,CAAA,CAAA,CAAAnF,KAAA,CAAAx1B,MAAA,CAAA,CAAA01B,YAAA,CAAAtyB,EAAA,CAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAAy3B,gBAAA,CAAA,CAAA,CAAA,CAAA,CAAAC,GAAA,CAAAxmB,MAAA,CAAAymB,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAqjB,cAAA,CAAAwD,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAsjB,iBAAA,CAAAuD,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAujB,2BAAA,CAAAsD,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAwjB,wBAAA,CAAAqD,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAyjB,qBAAA,CAAAoD,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA0jB,sBAAA,CAAAmD,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA2jB,oBAAA,CAAAkD,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA4jB,iCAAA,CAAAiD,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA6jB,mBAAA,CAAAgD,QAAA,CAAA,CAAA;AAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA8jB,qBAAA,CAAA+C,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA+jB,0BAAA,CAAA8C,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAgkB,uBAAA,CAAA6C,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAikB,2BAAA,CAAA4C,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAkkB,uBAAA,CAAA2C,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAmkB,uBAAA,CAAA0C,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAokB,qBAAA,CAAAyC,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAqkB,aAAA,CAAAwC,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAskB,gBAAA,CAAAuC,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAukB,eAAA,CAAAsC,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAwkB,eAAA,CAAAqC,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAykB,qBAAA,CAAAoC,QAAA,CAAA,CAAA;AAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA0kB,cAAA,CAAAmC,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA2kB,YAAA,CAAAkC,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA4kB,aAAA,CAAAiC,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA6kB,iBAAA,CAAAgC,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA+kB,iBAAA,CAAA8B,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA8kB,YAAA,CAAA+B,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAglB,mBAAA,CAAA6B,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAilB,WAAA,CAAA4B,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAklB,SAAA,CAAA2B,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAqgB,OAAA,CAAAwG,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAmlB,iBAAA,CAAA0B,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAolB,cAAA,CAAAyB,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA+V,UAAA,CAAA8Q,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAqlB,WAAA,CAAAwB,QAAA,CAAA,CAAA;AAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAslB,WAAA,CAAAuB,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAulB,oBAAA,CAAAsB,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAwlB,aAAA,CAAAqB,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAArQ,KAAA,CAAAk3B,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA0hB,WAAA,CAAAmF,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAsgB,UAAA,CAAAuG,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAylB,SAAA,CAAAoB,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA0lB,UAAA,CAAAmB,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA2lB,YAAA,CAAAkB,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA6lB,2BAAA,CAAAgB,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA8lB,gBAAA,CAAAe,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA+lB,gBAAA,CAAAc,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA2hB,QAAA,CAAAkF,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA6hB,QAAA,CAAAgF,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA;AAAAgmB,mBAAA,CAAAa,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAimB,iBAAA,CAAAY,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAkmB,iBAAA,CAAAW,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAmmB,sBAAA,CAAAU,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAomB,eAAA,CAAAS,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAqmB,UAAA,CAAAQ,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAsmB,kBAAA,CAAAO,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAumB,kBAAA,CAAAM,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAwmB,aAAA,CAAAK,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAymB,oBAAA,CAAAI,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAogB,MAAA,CAAAyG,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA0mB,eAAA,CAAAG,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAAuhB,KAAA,CAAAsF,QAAA,CAAA,CAAA,CAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA2mB,gBAAA,CAAAE,QAAA,CAAA,CAAA;AAAA7mB,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA8mB,GAAAA,QAAA,CAAA1+B,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,CAAA,CAAAG,EAAA,EAAA,CAAAC,EAAA+d,EAAA,CAAA5d,MAAAY,CAAAA,IAAA,CAAA7B,EAAA,CAAA,CAAA,IAAA,CAAA,IAAAc,CAAAN,CAAAA,CAAA,EAAA,CAAA,CAAAwE,CAAAtE,CAAAsE,CAAAlE,CAAAJ,CAAAA,CAAA,EAAAsE,EAAAA,IAAA,CAAA,CAAA,CAAA,IAAAlD,GAAApB,CAAAiD,CAAAA,KAAA,CAAA\/C,GAAA49B,EAAA,CAAA18B,EAAA,CAAA,KAAA,EAAAlB,EAAA,EAAAA,EAAA,CAAAX,CAAA,CAAA,GAAAY,CAAA,CAAAiB,EAAA,CAAA,CAAA9B,EAAA,CAAA8B,EAAA,CAAA,CAAA,CAAA,CAAA,MAAA9B,EAAA,CAAA,CAAAc,CAAAd,CAAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,OAAA,CAAAc,CAAAqD,CAAAA,CAAA,EAAA,CAAA,MAAAtD,EAAA,CAAA,CAAA,CAAA,IAAAmf,EAAA,CAAA,GAAA2e,EAAA,CAAA,CAAAvqB,IAAA,CAAAgM,GAAAue,EAAAve,CAAA,IAAA,CAAAwe,GAAAnE,EAAA,EAAA,CAAAoE,GAAAA,QAAA,CAAA7+B,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,OAAAA,CAAAo+B,CAAAA,WAAA,CAAA9+B,EAAA++B,CAAAA,OAAA,CAAA,GAAA,CAAA\/+B,EAAA2C,CAAAA,IAAA,EAAA,KAAA,WAAA,CAAA,KAAA,SAAA,CAAA,KAAA,SAAA,CAAAjC,CAAAs+B,CAAAA,QAAA,CAAA,OAAAt+B,EAAAu+B,CAAAA,OAAA,CAAA,OAAAh\/B,EAAAkxB,CAAAA,IAAA,CAAAmD,EAAAlN,CAAAA,GAAA,CAAApnB,EAAA,CAAA,CAAA,MAAA,MAAA,OAAA,CAAA,KAAA,MAAA,CAAAU,CAAAs+B,CAAAA,QAAA,CAAA,OAAAt+B,EAAAu+B,CAAAA,OAAA,CAAA,OAAA3K,GAAAlN,CAAAA,GAAA,CAAApnB,EAAA,CAAA4B,CAAAA,OAAA,CAAA,QAAA,CAAA5B,EAAA,CAAA,CAAAC,CAAAkxB,CAAAA,IAAA,CAAAnxB,EAAA,CAAA,CAAA,CAAA;KAAA,MAAA,UAAA,CAAAU,CAAA2wB,CAAAA,IAAA,EAAA3wB,EAAAwc,CAAAA,SAAA,CAAAld,EAAAk\/B,CAAAA,WAAA,KAAAr+B,EAAAkgB,EAAAqG,CAAAA,GAAA,CAAApnB,EAAA,CAAAU,EAAAwc,CAAAA,SAAA,CAAAld,EAAAk\/B,CAAAA,WAAAx+B,EAAAuvB,CAAAA,IAAA,CAAApvB,CAAA,CAAAH,EAAA8rB,CAAAA,OAAA,EAAA,MAAA,SAAA,GAAA,CAAAuG,EAAA,CAAA\/yB,EAAA,CAAA,CAAA,KAAAoE,MAAA,CAAA,qBAAAsH,CAAAA,MAAA,CAAA1L,EAAA2C,CAAAA,IAAA,CAAA,CAAA,CAAA,IAAA7B,EAAAk5B,EAAAnpB,CAAAA,IAAA,CAAA7Q,EAAAua,CAAAA,IAAA,CAAA,EAAAzY,CAAA,CAAAhB,CAAA,EAAA,CAAAJ,CAAAqwB,CAAAA,MAAAoO,CAAAA,WAAA,GAAAnzB,QAAAsrB,CAAAA,IAAAhrB,CAAAA,WAAA,CAAA5L,CAAAqwB,CAAAA,MAAA,CAAArwB,EAAAqwB,CAAAA,MAAA1kB,CAAAA,YAAA,CAAA,KAAA,CAAAvL,CAAA,CAAA,KAAA,CAAA,KAAA,CAAAJ,EAAA2wB,CAAAA,IAAA,EAAA3wB,EAAAg3B,CAAAA,IAAA,CAAAP,EAAA,CAAAn3B,EAAA,CAAAU,EAAAwc,CAAAA,SAAA,CAAAld,EAAAk\/B,CAAAA,WAAAx+B,EAAA0+B,CAAAA,SAAA,CAAAp\/B,EAAAo\/B,CAAAA,SAAAx+B,EAAAA,CAAAZ,EAAAua,CAAAA,IAAAvJ,CAAAA,OAAA,CAAA,QAAA,CAAA,IAAA,CAAAyc,CAAAA,KAAA,CAAA,IAAA,CAAA,KAAAhtB,GAAAT,EAAAi4B,CAAAA,MAAAx3B,CAAAG,CAAAsB,CAAAA,MAAA,CAAA1B,GAAAR,EAAAi4B,CAAAA,MAAAz3B,CAAAR,EAAAm4B,CAAAA,QAAAn2B;EAAAA,CAAA,QAAA,GAAAhC,EAAAo\/B,CAAAA,SAAA,CAAAp\/B,EAAAg4B,CAAAA,KAAA,CAAA,CAAA,CAAA,OAAA,GAAAh4B,EAAAo\/B,CAAAA,SAAA,CAAAp\/B,EAAAg4B,CAAAA,KAAA,CAAA,CAAA,KAAA,IAAA71B,GAAA,CAAA,CAAAA,EAAA,CAAAvB,CAAAsB,CAAAA,MAAA,CAAAC,EAAA,EAAA,CAAAzB,CAAA2+B,CAAAA,QAAA,CAAAz+B,CAAA,CAAAuB,EAAA,CAAA,CAAAH,EAAA,EAAAG,EAAA,CAAA,CAAA,EAAA1B,EAAA,CAAAD,EAAA,CAAAE,EAAA8rB,CAAAA,OAAA,EAAA1qB,EAAA,EAAApB,CAAAqwB,CAAAA,MAAAuO,CAAAA,MAAA,EAAA,CAAA5+B,CAAAo+B,CAAAA,WAAA,CAAA,CAAA,CAAA,CAAAS,GAAA,IAAAC,OAAA,CAAAlL,GAAA,IAAAkL,OAAA,CAAA5K,GAAAA,QAAA,CAAA50B,EAAA,CAAA,CAAA,IAAAU,EAAA,CAAAmb,KAAA7b,EAAA6b,CAAAA,IAAA,CAAA2V,eAAA,QAAA,GAAAxxB,EAAAsxB,CAAAA,WAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAtxB,EAAA8Z,CAAAA,WAAA,CAAA,CAAA,QAAA,GAAA9Z,EAAAsxB,CAAAA,WAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAAtxB,EAAA8Z,CAAAA,WAAA,CAAA,CAAA,IAAA,EAAA,CAAA6B,mBAAA,OAAAA,GAAA3b,EAAAsxB,CAAAA,WAAA,CAAAxX,YAAA,OAAA,GAAA9Z,EAAAsxB,CAAAA,WAAA,CAAAtxB,EAAA8Z,CAAAA,WAAA,CAAA,EAAA,CAAA9Z,EAAA8Z,CAAAA,WAAA,CAAAyU,WAAAvuB,EAAA8Z,CAAAA,WAAAyU;AAAA,CAAA,CAAA1U,WAAA,CAAAA,CAAA7Z,EAAA8Z,CAAAA,WAAA,CAAA4B,UAAA1b,EAAA0b,CAAAA,SAAA,CAAA6T,OAAAvvB,EAAAk\/B,CAAAA,WAAA,CAAAlhB,iBAAA,CAAAA,CAAA\/b,SAAAC,CAAAA,MAAA8b,EAAA,IAAA,EAAAA,GAAA\/b,SAAA,CAAA,CAAA,CAAA+b,EAAA\/b,SAAA,CAAA,CAAA,CAAA,CAAA,QAAAjC,EAAA2C,CAAAA,IAAA,EAAA,KAAA,WAAA,CAAA,KAAA,SAAA,CAAA,KAAA,SAAA,CAAA,MAAAjC,EAAAwc,CAAAA,SAAA,CAAAld,EAAAkd,CAAAA,SAAA,CAAAxc,CAAAuvB,CAAAA,IAAA,CAAA,aAAA,GAAAjwB,EAAAy\/B,CAAAA,eAAA,CAAA,IAAA,EAAA,CAAAz\/B,EAAAy\/B,CAAAA,eAAA,CAAA,SAAA,GAAAz\/B,EAAA2C,CAAAA,IAAA,GAAAjC,CAAAsb,CAAAA,YAAA,CAAA,CAAA,EAAAtb,CAAA,MAAA,MAAA,CAAA,MAAA8yB,GAAA,CAAAxzB,EAAAqhB,CAAAA,MAAA,CAAA,GAAA3gB,CAAAwc,CAAAA,SAAA,CAAAld,EAAAkd,CAAAA,SAAA,CAAAxc,CAAAuvB,CAAAA,IAAA,CAAA,aAAA,GAAAjwB,EAAAy\/B,CAAAA,eAAA,CAAA,IAAA,EAAA,CAAAz\/B,EAAAy\/B,CAAAA,eAAA,EAAA\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\/T,EAAAqhB,CAAAA,MAAA,CAAA\/c,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAyO,GAAAA,CAAAF,EAAA,CAAA,CAAA,CAAAI,GAAAA,CAAAJ,EAAA,CAAA,CAAA,CAAA,KAAAM,GAAAY,EAAA,CAAA\/T,EAAAqhB,CAAAA,MAAA,CAAA\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\/B,CAAAA,UAAAp\/B,GAAAJ,CAAAiD,CAAAA,KAAA7C,EAAA,EAAA,IAAA,EAAAb,CAAA,EAAAA,CAAA89B,CAAAA,qBAAA,CAAA,IAAA,CAAAl9B,CAAA,EAAAC,CAAA,CAAA,CAAAJ,CAAAA,CAAAsL,QAAAC,CAAAA,aAAA,CAAA,QAAA,CAAApL,EAAAA,CAAAH,CAAAuwB,CAAAA,UAAA,CAAA,IAAA,CAAA,KAAAnwB,EAAA,UAAA,GAAAd,EAAA2C,CAAAA,IAAA,CAAA,EAAA,CAAA3C,EAAA8Z,CAAAA,WAAA,CAAA,EAAA,CAAAhY,GAAA,CAAA,CAAAlB,GAAA,CAAA,IAAAqyB,EAAA,CAAAjzB,EAAA,CAAA,EAAAgzB,EAAA,CAAAhzB,EAAA,CAAA,CAAA,CAAA,IAAAS,GAAAsT,EAAA,CAAA8f,EAAA,CAAA7zB,EAAA,CAAA,CAAA,CAAA,CAAAQ,GAAAA,CAAAC,EAAA,CAAA,CAAA,CAAAuB,GAAAA,CAAAvB,EAAA,CAAA,CAAA,CAAA,KAAA0B,GAAA1B,EAAA,CAAA,CAAA,CAAA4B,GAAAA,CAAA5B,EAAA,CAAA,CAAA,CAAAD,GAAA,CAAA4T,IAAA0a,CAAAA,KAAA,CAAAtuB,EAAA,CAAA2B,GAAA,CAAAiS,IAAAoa,CAAAA,IAAA,CAAArsB,EAAA,CAAAH,GAAA,CAAAoS,IAAA0a,CAAAA,KAAA,CAAA9sB,EAAA,CAAAK,GAAA,CAAA+R,IAAAoa,CAAAA,IAAA,CAAAnsB,EAAA,CAAA3B,EAAAs3B,CAAAA,KAAA,CAAA5jB,IAAA+F,CAAAA,GAAA,CAAA3Z,EAAA,CAAA2B,EAAA,CAAA,CAAAoL,MAAAitB,CAAAA,gBAAA,CAAA95B,CAAAiD,CAAAA,KAAA,CAAA7C,CAAA,CAAAJ,CAAAiD,CAAAA,KAAA,CAAA,CAAAjD,EAAAu3B,CAAAA,MAAA,CAAA7jB,IAAA+F,CAAAA,GAAA,CAAAnY,EAAA,CAAAK,EAAA,CAAA,CAAAkL,MAAAitB,CAAAA,gBAAA,CAAA95B,CAAAiD,CAAAA,KAAA,CAAA7C,CAAA,CAAAJ,CAAAiD,CAAAA,KAAA,CAAA,CAAA7B,GAAA,CAAA9B,EAAA+G,CAAAA,CAAA;AAAAvG,EAAA,CAAA4T,IAAA0a,CAAAA,KAAA,CAAA1a,IAAA+F,CAAAA,GAAA,CAAAna,EAAA+G,CAAAA,CAAA,CAAAvG,EAAA,CAAA,CAAA,CAAA+M,MAAAitB,CAAAA,gBAAA,CAAA95B,CAAAiD,CAAAA,KAAA,CAAA,CAAA\/C,GAAA,CAAAZ,EAAA8G,CAAAA,CAAA,CAAA9E,EAAA,CAAAoS,IAAA0a,CAAAA,KAAA,CAAA1a,IAAA+F,CAAAA,GAAA,CAAAna,EAAA8G,CAAAA,CAAA,CAAA9E,EAAA,CAAA,CAAA,CAAAuL,MAAAitB,CAAAA,gBAAA,CAAA95B,CAAAiD,CAAAA,KAAA,CAAA,CAAA9C,EAAAs\/B,CAAAA,SAAA,CAAAr+B,EAAA,CAAAlB,EAAA,CAAA,CAAA,IAAAF,EAAAs3B,CAAAA,KAAA,CAAAh4B,EAAAg4B,CAAAA,KAAA,CAAAzqB,MAAAitB,CAAAA,gBAAA,CAAA95B,CAAAiD,CAAAA,KAAA,CAAA7C,CAAA,CAAAJ,CAAAiD,CAAAA,KAAA,CAAA,CAAA,CAAAjD,CAAAu3B,CAAAA,MAAA,CAAAj4B,EAAAi4B,CAAAA,MAAA,CAAA1qB,MAAAitB,CAAAA,gBAAA,CAAA95B,CAAAiD,CAAAA,KAAA,CAAA7C,CAAA,CAAAJ,CAAAiD,CAAAA,KAAA,CAAA,CAAA9C,EAAAwwB,CAAAA,IAAA,EAAAxwB,EAAAs\/B,CAAAA,SAAA,CAAAr\/B,CAAA,CAAAJ,CAAAiD,CAAAA,KAAA,CAAA7C,CAAA,CAAAJ,CAAAiD,CAAAA,KAAA,CAAA9C,EAAAu\/B,CAAAA,KAAA,CAAA7yB,MAAAitB,CAAAA,gBAAA,CAAA95B,CAAAiD,CAAAA,KAAA,CAAA4J,MAAAitB,CAAAA,gBAAA,CAAA95B,CAAAiD,CAAAA,KAAA,CAAAsB,EAAAA,CAAAwtB,EAAA1B,CAAAA,MAAA,CAAArwB,CAAA,CAAA,EAAA,EAAAm+B,EAAA,CAAA7+B,EAAA,CAAAiF,CAAA,CAAApE,CAAA,CAAA,CAAAA,CAAA2rB,CAAAA,OAAA,EAAA,CAAA,CAAA6T,QAAArgC,EAAA,CAAA+wB,OAAArwB,CAAA,CAAAw\/B,WAAAx\/B,CAAAiD,CAAAA,KAAA,CAAA28B,cAAAx+B,EAAA;AAAAy+B,cAAA3\/B,EAAA,CAAA,CAAA,OAAA2+B,GAAAve,CAAAA,GAAA,CAAAhhB,EAAA,CAAA8B,CAAA,CAAA,CAAAA,CAAA,CAAA,MAAAjB,EAAA,CAAA,CAAA2\/B,GAAAA,QAAA,CAAAxgC,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAA,CAAAC,CAAAA,CAAAd,EAAAqgC,CAAAA,OAAA,KAAAv+B,EAAA,UAAA,GAAAhB,CAAA6B,CAAAA,IAAA,CAAA,EAAA,CAAA7B,CAAAgZ,CAAAA,WAAA,CAAA,EAAA,CAAAlZ,GAAAmT,EAAA,CAAA8f,EAAA,CAAA\/yB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAL,GAAAG,EAAA,CAAA,CAAA,CAAA,CAAAJ,GAAAI,EAAA,CAAA,CAAA,CAAA,CAAAoB,GAAApB,EAAA,CAAA,CAAA,CAAAuB,GAAAA,CAAAvB,EAAA,CAAA,CAAA,CAAAoyB,GAAA,CAAAlyB,CAAA,CAAA,GAAAL,EAAA,CAAA2T,IAAA0a,CAAAA,KAAA,CAAAruB,EAAA,CAAA,CAAAuB,EAAA,CAAAoS,IAAAoa,CAAAA,IAAA,CAAAxsB,EAAA,CAAA,CAAAxB,EAAA,CAAA4T,IAAA0a,CAAAA,KAAA,CAAAtuB,EAAA,CAAA,CAAA2B,EAAA,CAAAiS,IAAAoa,CAAAA,IAAA,CAAArsB,EAAA,CAAA,CAAA,KAAAE,KAAA5B,EAAA4B,CAAAL,EAAAK,EAAA,CAAAA,CAAAxB,CAAA04B,CAAAA,OAAAl3B,EAAAkL,MAAAitB,CAAAA,gBAAAv1B,EAAAA,GAAAzE,EAAAyE,CAAA9C,EAAA8C,EAAA,CAAAA,CAAApE,CAAA44B,CAAAA,OAAAx0B,EAAAsI,MAAAitB,CAAAA,gBAAA95B,EAAA2wB,CAAAA,IAAA,EAAA3wB,EAAA0\/B,CAAAA,KAAA,CAAA,CAAA,CAAA7yB,MAAAitB,CAAAA,gBAAA,CAAA,CAAA,CAAAjtB,MAAAitB,CAAAA,gBAAA,CAAA95B,EAAAy\/B,CAAAA,SAAA,CAAA99B,EAAA,CAAA4C,CAAA,CAAAvE,EAAA+\/B,CAAAA,MAAA,CAAA3\/B,CAAA0zB,CAAAA,KAAA,CAAA9zB,EAAAggC,CAAAA,SAAA,CAAA1gC,EAAA+wB,CAAAA,MAAA,CAAA,EAAA\/uB,EAAA,CAAAvB,EAAA,CAAA,CAAA,CAAA;AAAA8M,MAAAitB,CAAAA,gBAAA,CAAA14B,CAAA,CAAA9B,EAAAkgC,CAAAA,UAAA,CAAAlgC,EAAAkgC,CAAAA,UAAA,CAAA,EAAA\/9B,EAAA,CAAA3B,EAAA,CAAA,CAAA,CAAA,CAAA+M,MAAAitB,CAAAA,gBAAA,CAAA14B,CAAA,CAAA9B,EAAAkgC,CAAAA,UAAA,CAAAlgC,EAAAkgC,CAAAA,UAAA,CAAAlgC,EAAA+wB,CAAAA,MAAAiH,CAAAA,KAAA,CAAAh4B,EAAAkgC,CAAAA,UAAA,CAAAlgC,EAAA+wB,CAAAA,MAAAkH,CAAAA,MAAA,CAAAj4B,EAAAkgC,CAAAA,UAAA,CAAAx\/B,EAAA8rB,CAAAA,OAAA,EAAA,CAAA,CAAAmU,GAAAA,QAAA,CAAA3gC,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAA,CAAA,IAAAgB,GAAA7B,CAAAyyB,CAAAA,SAAA,QAAA1yB,EAAA2C,CAAAA,IAAA,EAAA,KAAA,WAAA,CAAAjC,CAAA2wB,CAAAA,IAAA,EAAA3wB,EAAAy\/B,CAAAA,SAAA,CAAAngC,EAAA+G,CAAAA,CAAA,CAAAjG,CAAAy4B,CAAAA,OAAA,CAAAv5B,EAAA8G,CAAAA,CAAA,CAAAhG,CAAA24B,CAAAA,OAAA,CAAA\/4B,EAAAwc,CAAAA,SAAA,CAAA,uBAAAxc,EAAAkgC,CAAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA5gC,EAAAg4B,CAAAA,KAAA,CAAAh4B,EAAAi4B,CAAAA,MAAA,CAAAv3B,EAAA8rB,CAAAA,OAAA,EAAA,MAAA,MAAA,UAAA,CAAA,GAAAkT,EAAA,CAAA1\/B,EAAA,CAAA8B,EAAA,CAAA,CAAAjB,CAAA,CAAAD,EAAA,CAAAq\/B,EAAA,CAAAjgC,EAAA,CAAAc,CAAA,CAAA,CAAA0\/B,EAAA,CAAA5\/B,EAAA,CAAA,CAAA,CAAAF,CAAA,CAAAI,CAAA,CAAA,KAAA,CAAAL,EAAAA,CAAAsT,EAAA,CAAA8f,EAAA,CAAA7zB,EAAA,CAAA,CAAA,CAAA,CAAA,KAAAQ,GAAAC,EAAA,CAAA,CAAA,CAAAuB;CAAAA,CAAAvB,EAAA,CAAA,CAAA,CAAA,KAAA0B,GAAA1B,EAAA,CAAA,CAAA,CAAA,CAAA4B,GAAA5B,EAAA,CAAA,CAAA,CAAAwE,GAAAA,EAAAzE,EAAAyE,CAAA9C,EAAA8C,EAAA,CAAAA,CAAAnE,CAAAy4B,CAAAA,OAAAp1B,EAAAA,EAAAnC,CAAAmC,CAAA9B,EAAA8B,EAAA,CAAAA,CAAArD,CAAA24B,CAAAA,OAAAp1B,GAAAA,EAAAlC,EAAAkC,CAAA7D,EAAA6D,EAAA,CAAAA,EAAArE,EAAA+G,CAAAA,CAAA1C,CAAA7D,EAAA6D,CAAAM,EAAAA,EAAAtC,EAAAsC,CAAA3C,CAAA2C,EAAA,CAAAA,EAAA3E,EAAA8G,CAAAA,CAAAnC,CAAA3C,CAAA2C,CAAAjE,EAAA2wB,CAAAA,IAAA,EAAA3wB,EAAAy\/B,CAAAA,SAAA,CAAAl7B,EAAA,CAAAd,CAAA,CAAAzD,EAAA+\/B,CAAAA,MAAA,CAAAzgC,EAAAw0B,CAAAA,KAAA,CAAA9zB,EAAAy\/B,CAAAA,SAAA,CAAA,CAAA97B,EAAA,CAAA,CAAAM,CAAA,CAAAk6B,GAAA,CAAA7+B,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAA,EAAA8rB,CAAAA,OAAA,EAAA,CAAA,KAAA,MAAA,WAAA,CAAA,KAAA,SAAA,CAAA,KAAA,SAAA,CAAA,KAAA,MAAA,CAAA,KAAA,OAAA,CAAA,KAAA,MAAA,CAAA,CAAAkT,EAAA,CAAA1\/B,EAAA,CAAA8B,EAAA,CAAA,CAAAjB,CAAA,GAAAmD,EAAA,CAAAi8B,EAAA,CAAAjgC,EAAA,CAAAc,CAAA,CAAA,CAAA0\/B,EAAA,CAAAx8B,EAAA,CAAA,CAAA,CAAAtD,CAAA,CAAAI,CAAA,CAAA,GAAAoE,EAAA,CAAA6O,EAAA,CAAA8f,EAAA,CAAA7zB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAmF,EAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAA4B,CAAA,CAAA5B,EAAA,CAAA,CAAA,CAAA,CAAA6B,EAAA,CAAA7B,EAAA,CAAA,CAAA,CAAA,CAAA+B,EAAA,CAAA\/B,EAAA,CAAA,CAAA,CAAA,CAAAgC,EAAA,EAAA\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\/F,EAAAi4B,CAAAA,MAAAlyB,CAAA\/F,EAAAm4B,CAAAA,QAAA,CAAA7xB,GAAA,QAAA,GAAAtG,EAAAo\/B,CAAAA,SAAA,CAAAp\/B,EAAAg4B,CAAAA,KAAA,CAAA,CAAA,CAAA,OAAA,GAAAh4B,EAAAo\/B,CAAAA,SAAA,CAAAp\/B,EAAAg4B,CAAAA,KAAA,CAAA,CAAA,CAAA\/zB,GAAA+1B,EAAAnpB,CAAAA,IAAA,CAAA7Q,EAAAua,CAAAA,IAAA,CAAA,CAAA,KAAA,CAAA,KAAA,CAAA9T,GAAA,QAAA,GAAAzG,EAAAo\/B,CAAAA,SAAA,CAAA,QAAA,CAAA,OAAA,GAAAp\/B,EAAAo\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\/B,CAAAA,WAAA,CAAAz+B,GAAAR,CAAAw\/B,CAAAA,eAAA,CAAAj\/B,GAAAP,CAAAid,CAAAA,SAAA,CAAAlb,GAAA\/B,CAAA6Z,CAAAA,WAAA,CAAA3X,GAAAlC,CAAAqxB,CAAAA,WAAA,CAAAjvB,GAAApC,CAAAyb,CAAAA,SAAA,CAAAzW,GAAAhF,CAAA8+B,CAAAA,OAAA,CAAA56B,GAAAlE,CAAA+3B,CAAAA,KAAA3zB;EAAAA,CAAA,IAAA,EAAA,GAAAF,EAAA,CAAA,CAAA,CAAAA,EAAA,KAAAQ,GAAA1E,CAAAg4B,CAAAA,MAAAj0B,GAAAA,CAAA,IAAA,EAAA,GAAAW,EAAA,CAAA,CAAA,CAAAA,EAAA,KAAAO,GAAAjF,CAAAu0B,CAAAA,KAAArvB,GAAAA,CAAA,IAAA,EAAA,GAAAD,EAAA,CAAA,CAAA,CAAAA,EAAA,KAAA4B,GAAA7G,CAAA6iC,CAAAA,QAAA\/7B,GAAAA,CAAA,IAAA,EAAA,GAAAD,EAAA,CAAA,EAAA,CAAAA,EAAA,KAAAG,GAAAhH,CAAA00B,CAAAA,eAAA,CAAAztB,GAAAjH,CAAAsjC,CAAAA,eAAAn+B,GAAAA,CAAA,IAAA,EAAA,GAAA8B,EAAA,CAAA,IAAA,CAAAA,EAAA7B,EAAAA,CAAA0c,EAAA,CAAA9hB,CAAA,CAAAojC,EAAA,CAAA,OAAA,CAAA1iC,GAAA0E,CAAA1E,CAAAA,EAAAA,EAAAgyB,EAAA,EAAA,CAAAhwB,KAAA3C,EAAA,CAAA+G,EAAAjG,CAAA,CAAAgG,EAAAhF,EAAA,CAAAk2B,MAAA3zB,EAAA,CAAA4zB,OAAAj0B,EAAA,CAAAwwB,MAAArvB,EAAA,CAAA+5B,YAAAt+B,EAAA,CAAA6+B,gBAAAh\/B,EAAA,CAAAyc,UAAA1c,EAAA,CAAAsZ,YAAA9X,EAAA,CAAAsvB,YAAAnvB,EAAA,CAAAuZ,UAAArZ,EAAA,CAAA08B,QAAA95B,EAAA,CAAA69B,SAAA\/7B,EAAA,CAAA4tB,gBAAA1tB,EAAA,CAAA4U,KAAA,IAAA,IAAAnb,CAAA,CAAA2E,CAAAwW,CAAAA,IAAA,GAAA,IAAA,EAAA,GAAAnb,CAAA,CAAAA,CAAA,CAAAyhC,EAAA,EAAA,CAAAE,QAAAh9B,CAAAg9B,CAAAA,OAAAA,EAAA,CAAA,CAAAC,aAAA,IAAA,IAAAzhC,CAAA,CAAAwE,CAAAi9B,CAAAA,YAAA;AAAA,IAAA,EAAA,GAAAzhC,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA2gC,UAAA,CAAA,CAAA,CAAA+B,gBAAAn+B,EAAA,CAAA,CAAA,CAAAo+B,GAAAA,QAAA,CAAAxjC,EAAA,CAAA,CAAA,MAAAsjC,GAAA,CAAAtjC,EAAA2C,CAAAA,IAAA,CAAA3C,EAAA,CAAA,CAAA,CAAAyjC,GAAAA,QAAA,CAAAzjC,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAA,CAAA8G,EAAA,QAAA,GAAA\/G,EAAAo\/B,CAAAA,SAAA,CAAAn\/B,CAAA+3B,CAAAA,KAAA,CAAA,CAAA,CAAA,OAAA,GAAAh4B,EAAAo\/B,CAAAA,SAAA,CAAAn\/B,CAAA+3B,CAAAA,KAAA,CAAA,CAAA,CAAAlxB,EAAA,QAAA,GAAA9G,EAAA0jC,CAAAA,aAAA,CAAAzjC,CAAAg4B,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA0L,GAAAA,QAAA,CAAA3jC,EAAA,CAAA,CAAA,IAAAC,EAAAo3B,EAAA,CAAAr3B,EAAAua,CAAAA,IAAA,CAAA4c,EAAA,CAAAn3B,EAAA,CAAA,CAAA,CAAAU,EAAA+iC,EAAA,CAAAzjC,EAAA,CAAAC,CAAA,CAAA,OAAAuiC,GAAA,CAAAngB,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAAihB,EAAA,CAAA,MAAA,CAAAtjC,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAua,KAAAva,EAAAua,CAAAA,IAAA,CAAA6c,SAAAp3B,EAAAo3B,CAAAA,QAAA,CAAAH,WAAAj3B,EAAAi3B,CAAAA,UAAA,CAAAmI,UAAAp\/B,EAAAo\/B,CAAAA,SAAA,CAAAsE,cAAA1jC,EAAA0jC,CAAAA,aAAA,CAAA38B,EAAA\/G,EAAA+G,CAAAA,CAAAA,CAAArG,CAAAqG,CAAAA,CAAA,CAAAD,EAAA9G,EAAA8G,CAAAA,CAAAA,CAAApG,CAAAoG,CAAAA,CAAA,CAAAkxB,MAAA\/3B,CAAA+3B,CAAAA,KAAA,CAAAC,OAAAh4B,CAAAg4B,CAAAA,MAAA,CAAAE,SAAAl4B,CAAAk4B,CAAAA,QAAA,CAAA,CAAA;AAAA,EAAA,CAAA,CAAA,CAAAyL,GAAAA,QAAA,CAAA5jC,EAAA,CAAA,CAAA,MAAAqiB,GAAA,CAAAA,EAAA,CAAA,EAAA,CAAAihB,EAAA,CAAAtjC,EAAA2C,CAAAA,IAAA,CAAA3C,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAqhB,OAAArhB,EAAAqhB,CAAAA,MAAAA,EAAA,EAAA,CAAAwiB,mBAAA,IAAA,CAAAC,aAAA,IAAA,CAAAC,WAAA,IAAA,CAAAnE,eAAA5\/B,EAAA4\/B,CAAAA,cAAA,CAAAC,aAAA7\/B,EAAA6\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,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAA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\/B,CAAAA,eAAA,CAAA,CAAA,CAAA,MAAA,GAAAz\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\/B,EAAAsB,CAAAA,QAAA,CAAA\/hC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAI,EAAAkoC,CAAAA,WAAA,CAAA,CAAA,CAAA,CAAAloC,EAAAoB,EAAAA,CAAAhC,CAAAipC,CAAAA,wBAAA,CAAAzoC,EAAA;AAAAE,CAAAy4B,CAAAA,IAAA,CAAAr3B,EAAAiF,CAAAA,CAAA,CAAAjF,EAAAgF,CAAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA9E,CAAA,CAAApB,EAAAmoC,CAAAA,UAAA,CAAAvoC,EAAA,KAAA,CAAA,IAAA2B,GAAAzB,CAAA27B,CAAAA,oBAAAh6B,GAAAA,CAAAF,EAAAsmC,CAAAA,mBAAAxjC,GAAAA,CAAA9C,EAAAqmC,CAAAA,iBAAA9nC,EAAAq8B,CAAAA,gBAAA,EAAA5J,EAAA,CAAA3yB,EAAA,CAAA,EAAA0oC,EAAA,CAAA1oC,EAAA,CAAA6B,EAAA,CAAA4C,EAAA,CAAA,CAAAd,EAAAA,CAAA4P,EAAA,CAAA8f,EAAA,CAAArzB,EAAA,CAAA,CAAA,CAAA,CAAAwD,GAAAA,EAAAG,EAAAE,CAAA,CAAAA,CAAAL,CAAAG,EAAA,CAAA,CAAA,CAAAH,EAAA,CAAAkB,GAAAA,EAAAf,EAAAQ,CAAA,CAAAA,CAAAO,CAAAf,EAAA,CAAA,CAAA,CAAAe,EAAA,CAAAC,GAAAA,CAAA,CAAA,CAAAA,CAAAnD,CAAAmD,EAAAkuB,EAAA,CAAA7yB,EAAAuG,CAAAA,CAAA,CAAAvG,EAAA6gB,CAAAA,MAAA,CAAArf,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAxB,EAAAsG,CAAAA,CAAA,CAAAtG,EAAA6gB,CAAAA,MAAA,CAAArf,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgC,EAAA,CAAAkB,EAAA,CAAA1E,EAAAg0B,CAAAA,KAAA,CAAA,OAAA3zB,EAAA,CAAA,CAAAw7B,qBAAA5Z,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAA\/hB,CAAA27B,CAAAA,oBAAA,CAAA,CAAA,EAAA,CAAA,CAAAgM,iBAAA,CAAA,CAAA,CAAArmC,CAAA,CAAAA,CAAA,CAAA,IAAA,CAAAumC,cAAApjC,EAAA,CAAA,CAAA4B,EAAAjF,EAAAiF,CAAAA,CAAAA,CAAA5B,EAAA,CAAA,CAAA,CAAA,CAAA2B,EAAAhF,EAAAgF,CAAAA,CAAAA,CAAA3B,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA4B,EAAA,CAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAlG,EAAA,CAAA,CAAA,CAAA,CAAA2B,IAAA,mBAAA,CAAAoB,MAAAA,QAAA,CAAA1D,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAAC,EAAA;AAAAgB,EAAA,CAAA,CAAA,IAAArB,GAAAK,EAAAsnC,CAAAA,oBAAA,CAAA5nC,GAAAR,CAAAuhC,CAAAA,UAAA,CAAAzgC,EAAAonC,CAAAA,SAAA,CAAA,IAAA,CAAA1nC,EAAA,CAAA,MAAAM,GAAA,KAAAkB,GAAAxB,EAAA6gB,CAAAA,MAAA,CAAAlf,GAAAH,EAAA,CAAAA,EAAAE,CAAAA,MAAA,CAAA,CAAA,CAAA,IAAA,CAAAjC,CAAAqkB,CAAAA,MAAA,CAAA,MAAAniB,GAAA,GAAA1B,EAAA,EAAAT,CAAA2oC,CAAAA,SAAA,CAAAnoC,EAAA,CAAAwB,EAAAE,CAAAA,MAAA,CAAA,CAAA,CAAA,QAAA,CAAA,CAAAugB,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAA3hB,EAAA,CAAA,CAAA,EAAA,CAAA,CAAAsnC,qBAAA,IAAA,CAAA,CAAA\/lC,EAAAA,CAAArC,CAAA0oC,CAAAA,aAAA,CAAAloC,EAAA,CAAAE,CAAA,CAAAI,EAAAynC,CAAAA,aAAAxhC,CAAAA,CAAA,CAAAlG,CAAA,CAAAC,EAAAynC,CAAAA,aAAAzhC,CAAAA,CAAA,CAAAhF,EAAA,CAAA,OAAAK,GAAA,GAAA1B,EAAA,CAAAT,CAAA2oC,CAAAA,SAAA,CAAAnoC,EAAA,CAAAA,EAAA6gB,CAAAA,MAAAnf,CAAAA,MAAA,CAAA,CAAA,CAAAG,CAAA,CAAA,CAAArC,CAAA2oC,CAAAA,SAAA,CAAAnoC,EAAA,CAAA,KAAA,CAAA6B,CAAA,CAAA,CAAAogB,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAA3hB,EAAA,CAAA,CAAA,EAAA,CAAA,CAAAsnC,qBAAA5nC,EAAA6gB,CAAAA,MAAA,CAAA7gB,EAAA6gB,CAAAA,MAAAnf,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAK,IAAA,4BAAA,CAAAoB,MAAAA,QAAA,CAAA3D,CAAA,CAAA,CAAA,IAAAC;AAAA8T,EAAA,CAAA8f,EAAA,CAAA7zB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAY,GAAAX,CAAAS,CAAA,CAAAA,CAAAE,CAAAX,CAAAa,CAAA,CAAAA,CAAAF,EAAA,CAAA,CAAAH,IAAAR,CAAAY,CAAA,CAAAA,CAAAJ,CAAAR,CAAA6B,CAAA,CAAAA,CAAArB,EAAA,CAAA,OAAAT,EAAAqhB,CAAAA,MAAA3f,CAAAA,GAAA,CAAA,QAAA,CAAAzB,EAAA,CAAA,CAAAa,EAAAA,CAAAiT,EAAA,CAAAsf,EAAA,CAAArzB,CAAA+G,CAAAA,CAAA,CAAA9G,EAAA,CAAA,CAAA,CAAA,CAAAD,CAAA8G,CAAAA,CAAA,CAAA7G,EAAA,CAAA,CAAA,CAAA,CAAAW,CAAA,CAAAH,EAAA,CAAAT,CAAAw0B,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA1zB,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAyB,IAAA,kCAAA,CAAAoB,MAAAA,QAAA,CAAA3D,CAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAA,CAAA,CAAAT,CAAA,CAAAD,CAAAqhB,CAAAA,MAAAnf,CAAAA,MAAA,CAAAjC,CAAA,CAAAA,CAAAY,EAAAA,CAAAkT,EAAA,CAAA8f,EAAA,CAAA7zB,CAAA,CAAA,CAAA,CAAA,CAAAQ,EAAAA,CAAAR,CAAAqhB,CAAAA,MAAA,CAAA3gB,CAAA,CAAA,OAAA2yB,GAAA,CAAArzB,CAAA+G,CAAAA,CAAA,CAAAvG,CAAA,CAAA,CAAA,CAAA,CAAAR,CAAA8G,CAAAA,CAAA,CAAAtG,CAAA,CAAA,CAAA,CAAA,EAAAK,CAAAC,CAAA,CAAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAAA,CAAAiB,CAAA,CAAAA,CAAA,CAAAjB,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAb,CAAAw0B,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAjyB,IAAA,yBAAA,CAAAoB,MAAAA,QAAA,CAAA3D,CAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAqT,EAAA,CAAA8f,EAAA,CAAA7zB,CAAA,CAAA,CAAA,CAAA,CAAAS,EAAAA,CAAAsT,EAAA,CAAAsf,EAAA,CAAApzB,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,EAAAS,CAAAG,CAAA,CAAAA,CAAA,CAAAH,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAAA,CAAAI,CAAA,CAAAA,CAAA,CAAAJ,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAAV,CAAAw0B,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA\/zB,CAAAD,CAAA,CAAAA,CAAA,CAAAR,CAAA+G,CAAAA,CAAA,CAAAtG,CAAAuB,CAAA,CAAAA,CAAA,CAAAhC,CAAA8G,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAvE,IAAA,0BAAA;AAAAoB,MAAAA,QAAA,CAAA3D,CAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,EAAA,CAAA,CAAAC,CAAAA,CAAA,IAAAqoC,CAAAA,0BAAA,CAAAnpC,CAAA,CAAA,KAAA,IAAA8B,GAAAhB,CAAAoB,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,EAAAJ,EAAA,CAAA,CAAA,CAAA,IAAAlB,GAAAE,CAAA,CAAAgB,EAAA,CAAA,IAAAsS,IAAAmL,CAAAA,KAAA,CAAA3e,EAAAF,CAAA,CAAAA,CAAA,CAAAA,CAAA,CAAAE,EAAAC,CAAA,CAAAA,CAAA,CAAAA,EAAA,CAAA,CAAAZ,CAAA0D,CAAAA,KAAA,CAAA,IAAAylC,CAAAA,iBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAtnC,GAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAS,IAAA,eAAA,CAAAoB,MAAAA,QAAA,CAAA3D,CAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,EAAA,CAAA,CAAAC,CAAAA,CAAA6yB,EAAA,CAAA1zB,CAAA,CAAAS,CAAA,CAAAG,EAAA,CAAAiB,EAAAA,CAAAiS,EAAA,CAAA8f,EAAA,CAAA7zB,CAAA,CAAA,CAAA,CAAA,CAAAmC,EAAAA,CAAA4R,EAAA,CAAAsf,EAAA,CAAAvyB,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,EAAAgB,CAAAlB,CAAA,CAAAA,CAAA,CAAAkB,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAAA,CAAArB,CAAA,CAAAA,CAAA,CAAAqB,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA9B,CAAAw0B,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAAryB,CAAAE,CAAA,CAAAA,CAAA,CAAArC,CAAA+G,CAAAA,CAAA,CAAA5E,CAAA8C,CAAA,CAAAA,CAAA,CAAAjF,CAAA8G,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAvE,IAAA,qBAAA,CAAAoB,MAAAA,QAAA,CAAA3D,CAAA,CAAA,CAAA,IAAAC,EAAAD,CAAAqhB,CAAAA,MAAA,CAAA3gB,EAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAY,GAAAZ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAAohB,OAAAphB,CAAAyB,CAAAA,GAAA,CAAA,QAAA,CAAA1B,EAAA,CAAAC,EAAA,CAAA,CAAA,MAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAAU,CAAA,CAAAV,EAAA,CAAA,CAAA,CAAA,CAAAa,EAAA,CAAA,CAAA,CAAA,CAAAkG,EAAA\/G,CAAA+G,CAAAA,CAAAA;AAAArG,CAAA,CAAAoG,EAAA9G,CAAA8G,CAAAA,CAAAA,CAAAjG,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA0B,IAAA,iBAAA,CAAAoB,MAAAA,QAAA,CAAA1D,CAAA,CAAA,CAAAmiC,EAAA,CAAAniC,CAAA,CAAAD,CAAAqpC,CAAAA,mBAAA,CAAAppC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAsC,IAAA,mBAAA,CAAAoB,MAAAA,QAAA,CAAA1D,CAAA,CAAAS,CAAA,CAAAG,CAAA,CAAA,CAAA,IAAAC,GAAAiT,EAAA,CAAA9T,CAAAohB,CAAAA,MAAA,CAAA3gB,CAAA,CAAA,CAAA,CAAA,CAAAV,EAAA2oC,CAAAA,SAAA,CAAA1oC,CAAA,CAAAS,CAAA,CAAA,CAAAI,EAAAgB,CAAA,CAAAA,CAAA,CAAAjB,CAAAkG,CAAAA,CAAA,CAAAjG,EAAAF,CAAA,CAAAA,CAAA,CAAAC,CAAAiG,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAvE,IAAA,WAAA,CAAAoB,MAAAA,QAAA,CAAA3D,CAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,EAAA,CAAA,CAAA,IAAAiB,GAAA9B,CAAAqhB,CAAAA,MAAA,CAAAzgB,GAAA,CAAA,CAAAH,GAAA,CAAA,IAAA,QAAA,GAAAC,CAAA,CAAA,CAAA,GAAA,KAAA,GAAAT,CAAA,CAAA,KAAAmE,MAAA,CAAA,2BAAA,CAAA,CAAA4J,CAAAlN,CAAAkN,CAAAlM,EAAA4G,CAAAA,KAAA,EAAAsF,EAAAA,MAAA,CAAA\/N,CAAA,CAAA,CAAA,CAAA,EAAA,GAAAA,CAAA,GAAAW,EAAA,CAAAE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAL,EAAA,CAAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAAA,CAAAY,CAAAA,GAAA,CAAA,QAAA,CAAA1B,EAAA,CAAAC,EAAA,CAAA,CAAA,MAAA,EAAA,GAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAAY,EAAA,CAAAZ,EAAA,CAAA,CAAA,CAAA,CAAAS,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,IAAA,KAAA,GAAAR,CAAA,CAAAa,CAAA,CAAA,EAAA4K,CAAAA,MAAA,CAAAuI,CAAA,CAAAnS,EAAA,CAAA,CAAA,CAAApB,CAAA,CAAA,CAAA;IAAA,CAAA,IAAAF,GAAAE,CAAA,CAAA,CAAA,CAAAF,CAAAsB,EAAA,CAAA7B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA+B,GAAAtB,CAAA,CAAA,CAAA,CAAAsB,CAAAF,EAAA,CAAA7B,CAAA,CAAA,CAAA,CAAA,CAAAa,EAAA,CAAAgB,EAAAJ,CAAAA,GAAA,CAAA,QAAA,CAAA1B,EAAA,CAAAU,EAAA,CAAA,CAAA,MAAAA,GAAA,GAAAT,CAAA,CAAA,CAAA,GAAAS,EAAA,EAAAE,EAAA,CAAAJ,EAAA,CAAAC,EAAA,CAAAuB,EAAA,CAAAhC,EAAA,GAAAY,EAAA,CAAA,CAAA,CAAAH,EAAA,CAAA,CAAA,CAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAAQ,EAAA,CAAAR,EAAA,CAAA,CAAA,CAAA,CAAAgC,EAAA,CAAA,CAAA,CAAApB,EAAA,EAAAH,EAAA,CAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAAY,EAAA,CAAAZ,EAAA,CAAA,CAAA,CAAA,CAAAS,EAAA,CAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,IAAAmC,GAAA0yB,EAAA,CAAA70B,CAAA,CAAAc,CAAA,CAAAd,CAAA20B,CAAAA,eAAA,EAAA,OAAA,CAAAtyB,GAAAA,CAAAwyB,EAAA,CAAA70B,CAAA,CAAA8B,EAAA,CAAA9B,CAAA20B,CAAAA,eAAA,EAAA,OAAA,CAAA3wB,GAAAA,CAAAqvB,EAAA,CAAAzyB,EAAA,CAAAH,EAAA,EAAA4B,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAAF,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAAE,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAAF,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAnC,CAAAw0B,CAAAA,KAAA,CAAA4N,GAAA,CAAApiC,CAAA,CAAAyiB,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAA5hB,EAAA,CAAA,CAAA,EAAA,CAAA,CAAAwgB,OAAAvgB,CAAA,CAAAiG,EAAA\/G,CAAA+G,CAAAA,CAAAA,CAAA\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\/B,GAAA,IAAAq\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\/G,EAAA+G,CAAAA,CAAAA,EAAA\/E,EAAA+E,CAAAjF,EAAAiF,GAAAjG,EAAAiG,CAAA,CAAAA,EAAAjF,EAAAiF,CAAAtG,EAAAD,CAAA,CAAAA,CAAA,CAAAsG,EAAA9G,EAAA8G,CAAAA,CAAAA,EAAA3E,EAAA2E,CAAAlG,EAAAkG,GAAAhG,EAAAgG,CAAA,CAAAA,EAAAlG,EAAAkG,CAAArG,EAAA4B,CAAA,CAAAA,CAAA,CAAA,CAAA,MAAA,MAAA,IAAA,CAAAvB,EAAA;AAAAsT,IAAAoF,CAAAA,GAAA,EAAA9Y,CAAA,CAAAD,EAAA,GAAAuB,EAAA,CAAAvB,EAAA,GAAA0B,EAAA,CAAAtB,CAAA,GAAAsB,EAAA,CAAA3B,EAAA,EAAAsB,GAAA,CAAAA,QAAA,CAAA9B,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAA,CAAA,IAAAG,GAAAkT,EAAA,CAAA9T,EAAA,CAAA,CAAA,CAAA6B,GAAAA,CAAAjB,EAAA,CAAA,CAAA,CAAAD,GAAAA,CAAAC,EAAA,CAAA,CAAA,CAAAL,GAAAA,CAAAuT,EAAA,CAAArT,EAAA,CAAA,CAAA,CAAA,OAAA,CAAAqG,EAAA\/G,EAAA+G,CAAAA,CAAAA,EAAAjF,EAAAiF,CAAAtG,EAAAsG,GAAAjG,EAAAiG,CAAA,CAAAA,EAAAjF,EAAAiF,CAAAvG,EAAAwB,CAAA,CAAAA,CAAA,CAAA8E,EAAA9G,EAAA8G,CAAAA,CAAAA,EAAA3E,EAAA2E,CAAAlG,EAAAkG,GAAAhG,EAAAgG,CAAA,CAAAA,EAAAlG,EAAAkG,CAAAtG,EAAA6B,CAAA,CAAAA,CAAA,CAAA,CAAA,MAAA,MAAA,IAAA,CAAAvB,EAAA,CAAAsT,IAAAoF,CAAAA,GAAA,EAAAxX,EAAA,CAAAtB,CAAA,GAAAsB,EAAA,CAAAvB,EAAA,GAAAI,CAAA,CAAAL,EAAA,GAAA2B,EAAA,CAAA3B,EAAA,EAAA,CAAAsB,EAAA,CAAAA,QAAA,CAAA9B,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAA,CAAA,IAAAG,GAAAkT,EAAA,CAAA9T,EAAA,CAAA,CAAA,CAAA6B,GAAAA,CAAAjB,EAAA,CAAA,CAAA,CAAAD,GAAAA,CAAAC,EAAA,CAAA,CAAA,CAAAJ,GAAAA,CAAAsT,EAAA,CAAArT,EAAA,CAAA,CAAA,CAAA,OAAA,CAAAqG,EAAA\/G,EAAA+G,CAAAA,CAAAA,EAAA\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\/T,CAAA+rC,CAAAA,UAAA,CAAA\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\/tC,CAAA,CAAA,CAAAsvB,OAAAye,EAAA,CAAA\/tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA,CAAA,CAAA,GAAA3G,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,iJAAA,CAAA4tB,KAAA8d,EAAA,CAAA9tC,CAAA,CAAA,CAAAsvB,OAAAwe,EAAA,CAAA9tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAke,MAAA,EAAA,CAAAkW,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAqB,CAAA;AAAAE,GAAAjvC,EAAA,EAAAgvC,CAAAA,IAAA,CAAA,QAAA,CAAAxvC,CAAA,CAAA,CAAAC,CAAAA,CAAAD,CAAAgY,CAAAA,KAAA,OAAAi2B,GAAA,CAAA,GAAA96B,EAAA5P,CAAAA,IAAA,EAAA4P,EAAApQ,CAAAA,QAAA,CAAA,CAAA8hB,SAAA,CAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,iJAAA,CAAA4tB,KAAA8d,EAAA,CAAA9tC,CAAA,CAAA,CAAAsvB,OAAAwe,EAAA,CAAA9tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA,CAAA,CAAA,GAAA3G,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,iJAAA,CAAA4tB,KAAA+d,EAAA,CAAA\/tC,CAAA,CAAA,CAAAsvB,OAAAye,EAAA,CAAA\/tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,CAAAke,MAAA,EAAA,CAAAkW,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAwB,GAAAlvC,EAAA,EAAAgvC,CAAAA,IAAA,CAAA,QAAA,CAAAxvC,CAAA,CAAA,CAAAC,CAAAA,CAAAD,CAAAgY,CAAAA,KAAA,OAAAi2B,GAAA,CAAA,GAAA96B,EAAA5P,CAAAA,IAAA,EAAA4P,EAAApQ,CAAAA,QAAA,CAAA,CAAA8hB,SAAA,CAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,qHAAA,CAAA4tB,KAAA+d,EAAA,CAAA\/tC,CAAA,CAAA,CAAAsvB,OAAAye,EAAA,CAAA\/tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA,CAAA,CAAA,GAAA3G,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,gJAAA,CAAA4tB,KAAA8d,EAAA,CAAA9tC,CAAA,CAAA,CAAAsvB,OAAAwe,EAAA,CAAA9tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAke,MAAA,EAAA;AAAAkW,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAyB,GAAAnvC,EAAA,EAAAgvC,CAAAA,IAAA,CAAA,QAAA,CAAAxvC,CAAA,CAAA,CAAAC,CAAAA,CAAAD,CAAAgY,CAAAA,KAAA,OAAAi2B,GAAA,CAAA,GAAA96B,EAAA5P,CAAAA,IAAA,EAAA4P,EAAApQ,CAAAA,QAAA,CAAA,CAAA8hB,SAAA,CAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,gJAAA,CAAA4tB,KAAA8d,EAAA,CAAA9tC,CAAA,CAAA,CAAAsvB,OAAAwe,EAAA,CAAA9tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA,CAAA,CAAA,GAAA3G,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,6GAAA,CAAA4tB,KAAA+d,EAAA,CAAA\/tC,CAAA,CAAA,CAAAsvB,OAAAye,EAAA,CAAA\/tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAke,MAAA,EAAA,CAAAkW,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA0B,GAAApvC,EAAA,EAAAgvC,CAAAA,IAAA,CAAA,QAAA,CAAAxvC,CAAA,CAAA,CAAAC,CAAAA,CAAAD,CAAAgY,CAAAA,KAAA,OAAAi2B,GAAA,CAAA,GAAA96B,EAAA5P,CAAAA,IAAA,EAAA4P,EAAApQ,CAAAA,QAAA,CAAA,CAAA8hB,SAAA,CAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,YAAA,CAAA4tB,KAAA+d,EAAA,CAAA\/tC,CAAA,CAAA,CAAAsvB,OAAAye,EAAA,CAAA\/tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA+1B,cAAA,OAAA,CAAA,CAAA,CAAA,GAAA18B,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,sRAAA,CAAA4tB,KAAA8d,EAAA,CAAA9tC,CAAA,CAAA,CAAAsvB,OAAAwe,EAAA,CAAA9tC,CAAA,CAAA;AAAA6Z,YAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAke,MAAA,EAAA,CAAAkW,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA4B,GAAAtvC,EAAA,EAAAgvC,CAAAA,IAAA,CAAA,QAAA,CAAAxvC,CAAA,CAAA,CAAAC,CAAAA,CAAAD,CAAAgY,CAAAA,KAAA,OAAAi2B,GAAA,CAAA,GAAA96B,EAAA5P,CAAAA,IAAA,EAAA4P,EAAApQ,CAAAA,QAAA,CAAA,CAAA8hB,SAAA,CAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,aAAA,CAAA4tB,KAAA+d,EAAA,CAAA\/tC,CAAA,CAAA,CAAAsvB,OAAAye,EAAA,CAAA\/tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA+1B,cAAA,OAAA,CAAA,CAAA,CAAA,GAAA18B,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,2RAAA;AAAA4tB,KAAA8d,EAAA,CAAA9tC,CAAA,CAAA,CAAAsvB,OAAAwe,EAAA,CAAA9tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAke,MAAA,EAAA,CAAAkW,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA6B,GAAAvvC,EAAA,EAAAgvC,CAAAA,IAAA,CAAA,QAAA,CAAAxvC,CAAA,CAAA,CAAAC,CAAAA,CAAAD,CAAAgY,CAAAA,KAAA,OAAAi2B,GAAA,CAAA,GAAA96B,EAAA5P,CAAAA,IAAA,EAAA4P,EAAApQ,CAAAA,QAAA,CAAA,CAAA8hB,SAAA,CAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,YAAA,CAAA4tB,KAAA+d,EAAA,CAAA\/tC,CAAA,CAAA,CAAAsvB,OAAAye,EAAA,CAAA\/tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA+1B,cAAA,OAAA,CAAA,CAAA,CAAA,GAAA18B,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,2TAAA;AAAA4tB,KAAA8d,EAAA,CAAA9tC,CAAA,CAAA,CAAAsvB,OAAAwe,EAAA,CAAA9tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAke,MAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAgY,GAAAxvC,EAAA,EAAAgvC,CAAAA,IAAA,CAAA,QAAA,CAAAxvC,CAAA,CAAA,CAAAC,CAAAA,CAAAD,CAAAgY,CAAAA,KAAA,OAAAi2B,GAAA,CAAA,GAAA96B,EAAA5P,CAAAA,IAAA,EAAA4P,EAAApQ,CAAAA,QAAA,CAAA,CAAA8hB,SAAA,CAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,aAAA,CAAA4tB,KAAA+d,EAAA,CAAA\/tC,CAAA,CAAA,CAAAsvB,OAAAye,EAAA,CAAA\/tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA+1B,cAAA,OAAA,CAAA,CAAA,CAAA,GAAA18B,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,6TAAA;AAAA4tB,KAAA8d,EAAA,CAAA9tC,CAAA,CAAA,CAAAsvB,OAAAwe,EAAA,CAAA9tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAke,MAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAiY,GAAAzvC,EAAA,EAAAgvC,CAAAA,IAAA,CAAA,QAAA,CAAAxvC,CAAA,CAAA,CAAAC,CAAAA,CAAAD,CAAAgY,CAAAA,KAAA,OAAAi2B,GAAA,CAAA,GAAA96B,EAAA5P,CAAAA,IAAA,EAAA4P,EAAApQ,CAAAA,QAAA,CAAA,CAAA8hB,SAAA,CAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,iBAAA,CAAAktB,OAAAye,EAAA,CAAA\/tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA+1B,cAAA,OAAA,CAAA,CAAA,CAAA,GAAA18B,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,gHAAA,CAAA4tB,KAAA8d,EAAA,CAAA9tC,CAAA,CAAA,CAAAsvB,OAAAwe,EAAA,CAAA9tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAke,MAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAkY,GAAA1vC,EAAA,EAAAgvC,CAAAA,IAAA,CAAA,QAAA,CAAAxvC,CAAA,CAAA,CAAAC,CAAAA,CAAAD,CAAAgY,CAAAA,KAAA,OAAAi2B,GAAA,CAAA,GAAA96B,EAAA5P,CAAAA,IAAA,EAAA4P,EAAApQ,CAAAA,QAAA,CAAA,CAAA8hB,SAAA,CAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAA,MAAA;AAAA,CAAAjB,EAAA,mBAAA,CAAA4tB,KAAA+d,EAAA,CAAA\/tC,CAAA,CAAA,CAAAsvB,OAAAye,EAAA,CAAA\/tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA+1B,cAAA,OAAA,CAAA,CAAA,CAAA,GAAA18B,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,gHAAA,CAAA4tB,KAAA8d,EAAA,CAAA9tC,CAAA,CAAA,CAAAsvB,OAAAwe,EAAA,CAAA9tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAke,MAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAmY,GAAA3vC,EAAA,EAAAgvC,CAAAA,IAAA,CAAA,QAAA,CAAAxvC,CAAA,CAAA,CAAAC,CAAAA,CAAAD,CAAAgY,CAAAA,KAAA,OAAAi2B,GAAA,CAAA,GAAA96B,EAAA5P,CAAAA,IAAA,EAAA4P,EAAApQ,CAAAA,QAAA,CAAA,CAAA8hB,SAAA,CAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,kQAAA;AAAA4tB,KAAA8d,EAAA,CAAA9tC,CAAA,CAAA,CAAAsvB,OAAAwe,EAAA,CAAA9tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA,CAAA,CAAA,GAAA3G,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,aAAA,CAAA4tB,KAAA+d,EAAA,CAAA\/tC,CAAA,CAAA,CAAAsvB,OAAAye,EAAA,CAAA\/tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAAs2B,gBAAA,QAAA,CAAAP,cAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA7X,MAAA,EAAA,CAAAkW,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAmC,GAAA7vC,EAAA,EAAAgvC,CAAAA,IAAA,CAAA,QAAA,CAAAxvC,CAAA,CAAA,CAAAC,CAAAA,CAAAD,CAAAgY,CAAAA,KAAA,OAAAi2B,GAAA,CAAA,GAAA96B,EAAA5P,CAAAA,IAAA,EAAA4P,EAAApQ,CAAAA,QAAA,CAAA,CAAA8hB,SAAA,CAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,uRAAA;AAAA4tB,KAAA8d,EAAA,CAAA9tC,CAAA,CAAA,CAAAsvB,OAAAwe,EAAA,CAAA9tC,CAAA,CAAA,CAAA6Z,YAAA,GAAA,CAAA,CAAA,CAAA,GAAA3G,EAAA7P,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAjB,EAAA,aAAA,CAAA4tB,KAAA+d,EAAA,CAAA\/tC,CAAA,CAAA,CAAAsvB,OAAAye,EAAA,CAAA\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\/tC,CAAA,CAAA,CAAAgwB,KAAA+d,EAAA,CAAA\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\/G,EAAA+G,CAAAA,CAAAA;AAAA\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\/B,gBAAA\/+B,CAAAy6B,CAAAA,0BAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA6X,SAAAxsB,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAAvmB,CAAA,CAAA,CAAAS,CAAA,CAAA,CAAAuyC,gBAAA,CAAA,CAAAvyC,CAAAy6B,CAAAA,0BAAA,CAAA,CAAA,CAAA;AAAAmY,eAAAA,QAAA,CAAAtzC,CAAA,CAAA,CAAA,IAAAC,EAAAD,CAAAqhC,CAAAA,QAAA,CAAA3gC,EAAAV,CAAAgzC,CAAAA,QAAA,CAAAnyC,EAAAb,CAAAuzC,CAAAA,UAAA,OAAA,GAAApgC,EAAA5P,CAAAA,IAAA,EAAA4P,EAAApQ,CAAAA,QAAA,CAAA,CAAA8hB,SAAA,CAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAA,IAAA,CAAA,CAAA,cAAA,MAAA,CAAAuhB,SAAA5R,EAAA,CAAA,mBAAA,CAAA,CAAA,CAAA,CAAA,GAAAE,EAAA7P,CAAAA,GAAA,EAAA0yC,EAAA,CAAA,CAAArzC,KAAA,mBAAA,CAAA8gB,MAAAxQ,EAAA,CAAA,mBAAA,CAAA,CAAAoiC,MAAAe,EAAA,CAAAn2C,CAAA,CAAAS,CAAA,CAAA,QAAA,CAAAV,EAAA,CAAA,CAAA,MAAAA,GAAAy\/B,CAAAA,eAAA,CAAA,CAAA\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\/yB,EAAA,CAAA,EAAAA,EAAAo\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\/B,eAAA\/+B,EAAA,CAAA,CAAA,IAAA,KAAA,GAAAZ,EAAA,CAAA,MAAAuiC,GAAA,CAAAxiC,CAAA,CAAA,CAAA6\/B,aAAAh\/B,EAAA,CAAA,CAAA,CAAA,MAAAb,EAAA,CAAA,CAAA,CAAAgzC,SAAAxsB,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAAvmB,CAAA,CAAA,CAAA,EAAA,CAAAkU,CAAA,CAAA,EAAA,CAAA,OAAA,GAAAzT,CAAA82B,CAAAA,QAAA,CAAA,2BAAA,CAAA,yBAAA,CAAA92B,CAAAiC,CAAAA,IAAA,CAAA,CAAA,CAAAswC,gBAAA,CAAA,CAAA,CAAA,CAAA,CAAAK,eAAAA,QAAA,CAAAtzC,CAAA,CAAA,CAAA,IAAAC,EAAAD,CAAAqhC,CAAAA,QAAA,CAAA3gC,EAAAV,CAAAgzC,CAAAA,QAAA,CAAAnyC,EAAAb,CAAAuzC,CAAAA,UAAAzyC,EAAAA,CAAAmD,EAAA2gB,CAAAA,GAAA,OAAA,GAAAzR,EAAA5P,CAAAA,IAAA,EAAA,UAAA,CAAA,CAAAshB,SAAA,CAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAA,QAAA,CAAA,CAAAuhB,SAAA5R,EAAA,CAAA,mBAAA,CAAA,CAAA,CAAA;AAAA,GAAAE,EAAA5P,CAAAA,IAAA,EAAA,KAAA,CAAA,CAAAwgB,UAAA,gBAAA,CAAAc,SAAA,CAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAAwiB,EAAA,CAAA,CAAArC,MAAA,iBAAA,CAAAD,QAAA,CAAA,CAAA7f,MAAA,IAAA,CAAA4W,KAAAtH,EAAA,CAAA,uBAAA,CAAA,CAAA4S,KAAA,GAAA1S,EAAA7P,CAAAA,GAAA,EAAAquC,EAAA,CAAA,CAAA35B,MAAAtX,CAAAsX,CAAAA,KAAA,CAAA,CAAA,CAAAmM,WAAA,GAAA,CAAA,CAAA,CAAAxgB,MAAA,OAAA,CAAA4W,KAAAtH,EAAA,CAAA,wBAAA,CAAA,CAAA4S,KAAA,GAAA1S,EAAA7P,CAAAA,GAAA,EAAAsuC,EAAA,CAAA,CAAA55B,MAAAtX,CAAAsX,CAAAA,KAAA,CAAA65B,KAAA,CAAA\/wC,CAAA,CAAA,CAAA,CAAAqjB,WAAA,GAAA,CAAA,CAAA,CAAAxgB,MAAA,KAAA,CAAA4W,KAAAtH,EAAA,CAAA,sBAAA,CAAA,CAAA4S,KAAA,GAAA1S,EAAA7P,CAAAA,GAAA,EAAA0uC,EAAA,CAAA,CAAAh6B,MAAAtX,CAAAsX,CAAAA,KAAA,CAAA65B,KAAA,CAAA\/wC,CAAA,CAAA,CAAA,CAAAqjB,WAAA,GAAA,CAAA,CAAA,CAAAxgB,MAAA,KAAA,CAAA4W,KAAAtH,EAAA,CAAA,sBAAA,CAAA,CAAA4S,KAAA,GAAA1S,EAAA7P,CAAAA,GAAA,EAAAyuC,EAAA,CAAA,CAAA\/5B,MAAAtX,CAAAsX,CAAAA,KAAA,CAAA65B,KAAA,CAAA\/wC,CAAA,CAAA,CAAA;AAAAqjB,WAAA,GAAA,CAAA,CAAA,CAAAxgB,MAAAyyC,EAAA,CAAAn2C,CAAA,CAAAS,CAAA,CAAA,QAAA,CAAAV,EAAA,CAAA,CAAA,MAAAizB,GAAA,CAAAjzB,EAAA,CAAA,EAAA,OAAA,GAAAA,EAAA2C,CAAAA,IAAA,CAAA3C,EAAA4\/B,CAAAA,cAAA,CAAAl\/B,CAAAi7B,CAAAA,yBAAA,CAAA,CAAAj7B,CAAAi7B,CAAAA,yBAAA,CAAA,CAAAjY,SAAAA,QAAA,CAAA1jB,EAAA,CAAA,CAAA,MAAAa,EAAA,CAAA,CAAA22B,SAAA,OAAA,CAAA70B,KAAA3C,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAmT,EAAA7P,CAAAA,GAAA,EAAAwiB,EAAA,CAAA,CAAArC,MAAA,eAAA,CAAAsC,MAAA,YAAA,CAAAvC,QAAA,CAAA,CAAA7f,MAAA,IAAA,CAAA4W,KAAAtH,EAAA,CAAA,uBAAA,CAAA,CAAAkR,WAAA,GAAA,CAAA0B,KAAA,GAAA1S,EAAA7P,CAAAA,GAAA,EAAAquC,EAAA,CAAA,CAAA35B,MAAAtX,CAAAsX,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAArU,MAAA,OAAA,CAAA4W,KAAAtH,EAAA,CAAA,wBAAA,CAAA,CAAAkR,WAAA,GAAA,CAAA0B,KAAA,GAAA1S,EAAA7P,CAAAA,GAAA,EAAAsuC,EAAA,CAAA,CAAA55B,MAAAtX,CAAAsX,CAAAA,KAAA,CAAA65B,KAAA\/wC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA6C,MAAA,KAAA,CAAA4W,KAAAtH,EAAA,CAAA,sBAAA,CAAA;AAAAkR,WAAA,GAAA,CAAA0B,KAAA,GAAA1S,EAAA7P,CAAAA,GAAA,EAAA0uC,EAAA,CAAA,CAAAh6B,MAAAtX,CAAAsX,CAAAA,KAAA,CAAA65B,KAAA\/wC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA6C,MAAA,KAAA,CAAA4W,KAAAtH,EAAA,CAAA,sBAAA,CAAA,CAAAkR,WAAA,GAAA,CAAA0B,KAAA,GAAA1S,EAAA7P,CAAAA,GAAA,EAAAyuC,EAAA,CAAA,CAAA\/5B,MAAAtX,CAAAsX,CAAAA,KAAA,CAAA65B,KAAA\/wC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA6C,MAAAyyC,EAAA,CAAAn2C,CAAA,CAAAS,CAAA,CAAA,QAAA,CAAAV,EAAA,CAAA,CAAA,MAAAizB,GAAA,CAAAjzB,EAAA,CAAA,EAAA,OAAA,GAAAA,EAAA2C,CAAAA,IAAA,CAAA3C,EAAA6\/B,CAAAA,YAAA,CAAAn\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\/B,SAAA,CAAA,CAAAh\/B,EAAAgf,CAAAA,MAAAnf,CAAAA,MAAA,EAAAgqB,EAAA,CAAA7pB,EAAA,CAAA,CAAArC,CAAA2N,CAAAA,MAAA,CAAA,QAAA,CAAA3N,EAAA,CAAA,CAAA,MAAAA,GAAAW,CAAAA,EAAA,GAAA0B,EAAA1B,CAAAA,EAAA,CAAA,CAAA,CAAA,IAAA,EAAA,CAAAqyC,SAAApsB,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAA3mB,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAo8B,qBAAA,IAAA,CAAA,CAAA,CAAA4W,gBAAA,CAAA,CAAA,CAAA,CAAA1lC,MAAAvB,CAAAA,QAAA0Y,CAAAA,aAAA,WAAAiS,YAAA,EAAA\/1B,CAAA,EAAA,IAAAuD,CAAA,CAAAlE,CAAAm9B,CAAAA,YAAA,CAAAn9B,CAAAm9B,CAAAA,YAAA,CAAA,UAAA,IAAA,IAAA,IAAAt8B,EAAA,CAAAb,CAAAk8B,CAAAA,cAAA,GAAA,IAAA,EAAA,GAAAr7B,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAA6B,CAAAA,IAAA,EAAA1C,CAAAk8B,CAAAA,cAAA,CAAA,IAAA,CAAA,CAAA,UAAA,GAAAh4B,CAAAxB,CAAAA,IAAA,EAAA,OAAA,GAAA1C,CAAAk9B,CAAAA,mBAAA,GAAA94B,EAAA,CAAAF,CAAAkd,CAAAA,MAAA;CAAA1c,EAAA,CAAAR,CAAA0\/B,CAAAA,kBAAA,GAAAx\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\/qB,GAAAqqB,CAAAA,MAAA,EAAA\/R,GAAAA,CAAA5c,EAAA66C,CAAAA,sBAAA,CAAAviC,EAAA,CAAA,KAAAiE;AAAA,EAAAI,GAAA,GAAA46B,EAAAqB,CAAAA,IAAA,CAAAr8B,EAAA,CAAAu8B,EAAA,CAAA,IAAA,CAAA,IAAAhuC,CAAAA,MAAA,CAAAysC,EAAAqB,CAAAA,IAAA,CAAA,GAAA,CAAA,CAAAj8B,EAAA,GAAA46B,EAAAsB,CAAAA,IAAA,CAAAt8B,EAAA,CAAAu8B,EAAA,CAAA,cAAA,CAAA,IAAAhuC,CAAAA,MAAA,CAAAysC,EAAAsB,CAAAA,IAAA,CAAA,GAAA,CAAA,CAAAl8B,EAAA,GAAA46B,EAAAoB,CAAAA,MAAA,GAAAp8B,EAAA,CAAAu8B,EAAA,CAAA,cAAA,CAAA,EAAA,CAAA97B,GAAAA,CAAA,EAAAlS,CAAAA,MAAA,CAAA8R,EAAA,CAAA,EAAA9R,CAAAA,MAAA,CAAA8R,EAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA9R,CAAAA,MAAA,CAAAyR,EAAA,CAAA,EAAAM,EAAA,EAAAG,EAAA,GAAAnP,EAAA,EAAA6K,CAAA,CAAAC,EAAA,EAAAG,EAAA,CAAAqB,EAAA,CAAA7V,EAAAw2C,CAAAA,WAAA,CAAA99B,EAAA,CAAA,CAAA3C,EAAA,CAAAF,EAAA4gC,CAAAA,wBAAA,CAAA5gC,EAAA6gC,CAAAA,uBAAA,CAAA12C,EAAAgY,CAAAA,SAAA,CAAAI,EAAA,CAAApY,EAAA07B,CAAAA,QAAA,CAAAhmB,EAAA,CAAA,CAAA,CAAAihC,EAAA,CAAA,CAAA,CAAA9gC,EAAAid,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA\/c,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA\/V,EAAAgY,CAAAA,SAAA,CAAAG,EAAA,CAAAnY,EAAA07B,CAAAA,QAAA,CAAAhmB,EAAA,CAAAihC,EAAA,CAAA9gC,EAAAid,CAAAA,KAAA,CAAA,CAAA,CAAA\/c,EAAA,CAAA,CAAA,CAAA,CAAA\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\/lC,WAAA\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\/+B,CAAA++B,CAAAA,OAAA,CAAA,GAAA,CAAA\/+B,CAAA++B,CAAAA,OAAA,CAAAvK,MAAAx0B,CAAAw0B,CAAAA,KAAAA,EAAA,CAAA,CAAAztB,EAAA,IAAA,IAAAnG,EAAA,CAAA,IAAA,IAAAH,EAAA,CAAAR,CAAA8G,CAAAA,CAAA,GAAA,IAAA,EAAA,GAAAtG,EAAA,CAAAA,EAAA,CAAAT,CAAA+G,CAAAA,CAAA,GAAA,IAAA,EAAA,GAAAnG,EAAA,CAAAA,EAAA,CAAA,CAAA,CAAAkG,EAAA,IAAA;CAAAtG,EAAA,CAAA,IAAA,IAAAwB,EAAA,CAAA\/B,CAAA6G,CAAAA,CAAA,GAAA,IAAA,EAAA,GAAA9E,EAAA,CAAAA,EAAA,CAAAhC,CAAA8G,CAAAA,CAAA,GAAA,IAAA,EAAA,GAAAtG,EAAA,CAAAA,EAAA,CAAA,CAAA,CAAA0+B,YAAAl\/B,CAAAk\/B,CAAAA,WAAA,CAAAO,gBAAAz\/B,CAAAy\/B,CAAAA,eAAA,CAAAzH,MAAAh4B,CAAAg4B,CAAAA,KAAAA,EAAA,CAAA,CAAAC,OAAAj4B,CAAAi4B,CAAAA,MAAAA,EAAA,CAAA,CAAApc,KAAA,IAAA,IAAA1Z,EAAA,CAAAnC,CAAA6b,CAAAA,IAAA,GAAA,IAAA,EAAA,GAAA1Z,EAAA,CAAAA,EAAA,CAAA,CAAA,CAAA2gC,SAAA,IAAA,IAAAzgC,EAAA,CAAArC,CAAA8iC,CAAAA,QAAA,GAAA,IAAA,EAAA,GAAAzgC,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAAsyB,gBAAA,IAAA,IAAA1vB,EAAA,CAAAjF,CAAA20B,CAAAA,eAAA,GAAA,IAAA,EAAA,GAAA1vB,EAAA,CAAAA,EAAA,CAAAiuB,EAAA,CAAAlzB,CAAA2C,CAAAA,IAAA,CAAA,CAAA,OAAA,CAAA,OAAA,CAAA4gC,gBAAA,IAAA,IAAAp\/B,EAAA,CAAAnE,CAAAujC,CAAAA,eAAA,GAAA,IAAA,EAAA,GAAAp\/B,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAA,OAAAsjB,GAAA,CAAAA,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAApjB,EAAA,CAAA,CAAAu+B,EAAA,CAAAv+B,EAAA,CAAA,CAAA,CAAApE,CAAA,CAAA,CAAA,CAAAg+C,GAAAA,QAAA,CAAAj+C,CAAA,CAAA,CAAA,IAAAC,CAAA,QAAAD,CAAA2C,CAAAA,IAAA,EAAA,KAAA,MAAA,CAAA,IAAA9B,EAAAb,CAAAo3B,CAAAA,QAAA;AAAAt2B,EAAAd,CAAAi3B,CAAAA,UAAA,OAAA,EAAAj3B,EAAA,GAAA8B,CAAA,CAAAiS,EAAA,CAAA\/T,CAAA03B,CAAAA,IAAAjK,CAAAA,KAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAAhtB,CAAA,CAAAqB,CAAA,CAAA,CAAA,CAAA,CAAAjB,CAAA,CAAAorC,QAAA,CAAAnqC,CAAAlB,CAAA,CAAAA,CAAA,CAAA,EAAA,CAAA,CAAAE,CAAA,CAAAG,MAAAY,CAAAA,IAAA,CAAAG,EAAA+P,CAAAA,EAAA,CAAAwoB,CAAAA,QAAA,CAAA95B,CAAA,CAAA,CAAAuB,EAAA+P,CAAAA,EAAA,CAAAtR,CAAA,CAAA,CAAAuB,EAAAkQ,CAAAA,EAAA,CAAA,OAAA8rC,GAAA,CAAAh+C,CAAA,CAAA,CAAAo3B,SAAAv2B,CAAA,CAAAo2B,WAAAn2B,CAAA,CAAAyZ,KAAA,IAAA,IAAAta,CAAA,CAAAD,CAAAua,CAAAA,IAAA,GAAA,IAAA,EAAA,GAAAta,CAAA,CAAAA,CAAA,CAAA,EAAA,CAAAk4B,SAAAn4B,CAAAm4B,CAAAA,QAAA,CAAAiH,UAAAp\/B,CAAAo\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\/pC,EAAAu\/B,CAAAA,QAAA,EAAA,EAAA,CAAA,CAAA2R,SAAArrB,EAAA,CAAAA,EAAA,CAAA,CAAA3P,MAAA,IAAA,EAAAtX,CAAA,CAAA,IAAA,EAAA,CAAAA,CAAAsX,CAAAA,KAAA,CAAA6kB,WAAA58B,CAAAg\/C,CAAAA,MAAApiB,EAAA,IAAA,CAAA,CAAA6B,EAAA,CAAA58B,EAAAkxC,CAAAA,QAAA,EAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAAtyC,CAAA,CAAAmsC,EAAA,CAAA\/qC,EAAAu\/B,CAAAA,QAAA,EAAA,EAAA,CAAA3gC,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAAA,CAAA,CAAAG,EAAA,CAAA,CAAAb,EAAA+E,CAAAA,MAAA,CAAA,QAAA,CAAAnE,EAAA,CAAA,MAAA,EAAA,CAAA,KAAAZ,GAAAwI,CAAAA,IAAA,CAAA,EAAA,CAAAxI,EAAAo+C,CAAAA,EAAA,CAAAp+C,EAAA+I,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA29B,OAAAgU,CAAAA,KAAA,CAAA16C,EAAAo+C,CAAAA,EAAA5B,CAAAA,OAAA,CAAA;AAAAp4C,KAAA,CAAA6O,EAAA,CAAA,gCAAA,CAAA,CAAA,CAAA,KAAA,EAAA,CAAA,KAAA,KAAA,CAAA,MAAAjT,GAAA2I,CAAAA,IAAA,EAAA,CAAA,CAAA,CAAA3I,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA,SAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,EAAA,CAAA,CAAA,MAAAb,EAAAyY,CAAAA,KAAA,CAAA,IAAA,CAAAxW,SAAA,CAAA,CAAA,CAAA,EAAA,CAAAsqB,GAAA,QAAA,EAAA,CAAA,IAAAvsB,EAAA,GAAAqC,EAAAoM,CAAAA,CAAA,EAAAvH,EAAA,EAAAM,CAAAA,IAAA,CAAAxH,QAAAA,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAA,CAAAG,EAAA,OAAAqG,GAAA,EAAAL,CAAAA,IAAA,CAAA,QAAA,CAAA7G,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,OAAAA,EAAAwI,CAAAA,IAAA,CAAAxI,EAAA6F,CAAAA,IAAA,EAAA,KAAA,CAAA,CAAA,MAAA7F,GAAA6F,CAAAA,IAAA,CAAA,CAAA,CAAAq4C,EAAA,CAAAj+C,CAAA,CAAA,MAAA,CAAA,CAAA,GAAAS,EAAA,CAAAV,EAAA4E,CAAAA,IAAA,CAAAjC,CAAA9B,EAAA8B,CAAAsK,IAAA+f,CAAAA,KAAA,CAAAtsB,EAAA,CAAAiC,EAAAA,IAAA,GAAAX,EAAAsQ,CAAAA,EAAA4E,CAAAA,iBAAA,CAAA,CAAAlX,EAAA6F,CAAAA,IAAA,CAAA,CAAA,MAAA,CAAA,KAAAzB,MAAA,CAAA6O,EAAA,CAAA,gCAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,MAAAjT,GAAA+E,CAAAA,MAAA,CAAA,QAAA,CAAAlE,EAAA,CAAA,MAAA,CAAA,CAAA,KAAA,KAAA,CAAA,MAAAb,GAAA2I,CAAAA,IAAA,EAAA,CAAA,CAAA;AAAA3I,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA,SAAA,CAAAC,CAAA,CAAA,CAAA,MAAAD,EAAAyY,CAAAA,KAAA,CAAA,IAAA,CAAAxW,SAAA,CAAA,CAAA,CAAA,EAAA,CAAAi9C,GAAA,QAAA,EAAA,CAAA,IAAAl\/C,EAAA,GAAAqC,EAAAoM,CAAAA,CAAA,EAAAvH,EAAA,EAAAM,CAAAA,IAAA,CAAAxH,QAAAA,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAAiH,GAAA,EAAAL,CAAAA,IAAA,CAAA,QAAA,CAAA7G,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,OAAAA,EAAAwI,CAAAA,IAAA,CAAAxI,EAAA6F,CAAAA,IAAA,EAAA,KAAA,CAAA,CAAA,MAAA7F,GAAA+E,CAAAA,MAAA,CAAA,QAAA,CAAA,IAAAkD,OAAA,CAAA,QAAA,CAAAjI,EAAA,CAAAU,EAAA,CAAA,CAAA,GAAA,CAAAT,CAAAk\/C,CAAAA,MAAA,CAAA,QAAA,CAAAl\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\/C,CAAAA,aAAA,CAAAj\/C,EAAA,CAAA,MAAA,CAAA,CAAA,KAAA,KAAA,CAAA,MAAAV,GAAA2I,CAAAA,IAAA,EAAA,CAAA,CAAA,CAAA3I,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA,SAAA,CAAAC,CAAA,CAAA,CAAA,MAAAD,EAAAyY,CAAAA,KAAA,CAAA,IAAA,CAAAxW,SAAA,CAAA,CAAA,CAAA,EAAA,CAAA29C,GAAAA,QAAA,CAAA5\/C,CAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,IAAAG,EAAAH,CAAA+7B,CAAAA,gBAAA,CAAA37B,GAAAJ,CAAAm\/C,CAAAA,aAAA\/9C,GAAAA,CAAA,IAAA,EAAA,GAAAhB,EAAA,CAAAkB,EAAAkS,CAAAA,EAAA,CAAApT,EAAA,KAAAF,GAAAF,CAAA29B,CAAAA,mBAAA,CAAA59B,GAAA,CAAA,CAAAwB,SAAAC,CAAAA,MAAA,EAAA,IAAA,EAAA,GAAAD,SAAA,CAAA,CAAA,CAAA,CAAAA,SAAA,CAAA,CAAA,CAAA,CAAA,QAAA,CAAAjC,EAAA,CAAAU,EAAA,CAAA,CAAA,IAAAG,GAAAmL,QAAAC,CAAAA,aAAA,CAAA,QAAA,CAAA,OAAApL,GAAAm3B,CAAAA,KAAA,CAAAh4B,EAAA,CAAAC,CAAAy8B,CAAAA,WAAA,CAAA77B,EAAAo3B,CAAAA,MAAA;AAAAv3B,EAAA,CAAAT,CAAAy8B,CAAAA,WAAA,CAAA,CAAA3L,OAAAlwB,EAAA,CAAAu\/B,MAAAngC,CAAAy8B,CAAAA,WAAA,CAAA,CAAA,CAAAl8B,GAAAs\/C,EAAA,CAAA9\/C,CAAA,CAAA8B,EAAA,CAAA,CAAAK,GAAA4R,EAAA,CAAAvT,EAAA,CAAA,CAAA,CAAA6B,GAAAA,CAAAF,EAAA,CAAA,CAAA,CAAA,KAAA8C,GAAA9C,EAAA,CAAA,CAAA,CAAAwC,GAAAA,CAAAlE,EAAA,CAAA0B,EAAAgC,CAAA,CAAAA,CAAA,CAAAhC,EAAAkC,CAAA,CAAAA,CAAA,CAAAL,GAAAA,CAAAW,EAAAosB,CAAAA,MAAA7rB,GAAAA,CAAAP,EAAAy7B,CAAAA,KAAA,OAAA8Z,GAAA,CAAAl6C,CAAA,CAAAC,CAAA,CAAA,IAAA,CAAA,IAAA,EAAAkF,GAAAD,EAAAC,CAAA,CAAAA,CAAAD,EAAA,CAAAutB,EAAA1B,CAAAA,MAAA,CAAA\/sB,EAAA,CAAA,CAAAA,EAAA,CAAA,CAAAq6B,oBAAAx9B,CAAA,CAAAD,EAAA,CAAA,IAAA,CAAAg8B,mBAAA38B,CAAA28B,CAAAA,kBAAA,CAAArD,QAAA,CAAAl3B,EAAAk3B,CAAAz3B,EAAA,CAAA23B,QAAA,CAAAx0B,EAAAw0B,CAAA33B,EAAA,CAAAq3B,KAAAsB,EAAA,EAAAtB,CAAAA,IAAA,CAAAkiB,4BAAA,EAAA,CAAAR,yBAAA,EAAA,CAAA9c,sBAAA,CAAA,CAAA,CAAA0d,uBAAA,EAAA,CAAAH,wBAAA,EAAA,CAAA,CAAA,CAAAnB,iBAAA,CAAA,CAAA,CAAAC,gBAAA,CAAA,CAAA,CAAAC,oBAAA,CAAA,CAAA;AAAAC,WAAA,CAAA,CAAA,CAAA,CAAA,CAAAt2C,EAAA,CAAA,CAAA+7C,GAAA,QAAA,EAAA,CAAA,IAAA\/\/C,EAAA,GAAAqC,EAAAoM,CAAAA,CAAA,EAAAvH,EAAA,EAAAM,CAAAA,IAAA,CAAAxH,QAAAA,GAAA,CAAAC,CAAA,CAAAY,CAAA,CAAA,CAAA,IAAAC,EAAA,CAAAgB,EAAA,CAAAlB,EAAA,CAAAH,EAAA,CAAAD,EAAA,CAAA2B,EAAA,CAAAE,EAAA,CAAA4C,EAAA,CAAAd,EAAA,CAAAE,EAAA,CAAAM,EAAA,CAAAX,EAAA,CAAAkB,EAAA,CAAAC,EAAA,CAAA2B,EAAA,CAAAC,EAAA,OAAAG,GAAA,EAAAL,CAAAA,IAAA,CAAA,QAAA,CAAA7G,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,OAAAA,EAAAwI,CAAAA,IAAA,CAAAxI,EAAA6F,CAAAA,IAAA,EAAA,KAAA,CAAA,CAAA,GAAA\/E,EAAA,CAAAD,CAAAg\/C,CAAAA,aAAA,CAAA\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\/C,EAAAA,CAAA,IAAAA,GAAAy\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\/C,CAAAA,UAAAtgD,GAAAA,CAAAqB,EAAAm\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\/C,EAAAA,CAAAy\/C,EAAA,CAAArgD,CAAA,CAAA,OAAAwgD,mBAAA,GAAA5\/C,CAAA8B,CAAAA,IAAA,GAAA7B,CAAA,CAAAw\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\/B,EAAAu\/B,CAAAA,QAAA,CAAA,CAAA,MAAA,EAAA,CAAA,MAAArhC,GAAA+E,CAAAA,MAAA,CAAA,QAAA,CAAAjE,EAAA,CAAA,MAAA,EAAA,CAAA,MAAAd,GAAAwI,CAAAA,IAAA,CAAA,EAAA,CAAAxI,EAAAo+C,CAAAA,EAAA,CAAAp+C,EAAA+I,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA\/I,EAAA+E,CAAAA,MAAA,CAAA,QAAA,CAAAy8C,EAAA,EAAA1gD,EAAAugC,CAAAA,QAAA,CAAAvgC,EAAA,CAAA,CAAAyZ,KAAA7Z,EAAA,CAAA,CAAA,MAAA,EAAA,CAAA,KAAA,KAAA,CAAA,MAAAV,GAAA2I,CAAAA,IAAA,EAAA,CAAA,IAAA\/H,EAAA,CAAA,CAAAZ,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA,SAAA,CAAAC,CAAA,CAAA,CAAA,MAAAD,EAAAyY,CAAAA,KAAA,CAAA,IAAA,CAAAxW,SAAA,CAAA,CAAA,CAAA,EAAA,CAAAsgD,GAAA,QAAA,EAAA,CAAA,IAAAviD,EAAA,GAAAqC,EAAAoM,CAAAA,CAAA,EAAAvH,EAAA,EAAAM,CAAAA,IAAA,CAAAxH,QAAAA,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAAiH,GAAA,EAAAL,CAAAA,IAAA,CAAA,QAAA,CAAA7G,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,OAAAA,EAAAwI,CAAAA,IAAA;AAAAxI,EAAA6F,CAAAA,IAAA,EAAA,KAAA,CAAA,CAAA,MAAA7F,GAAA6F,CAAAA,IAAA,CAAA,CAAA,CAAAwwB,SAAAqrB,CAAAA,SAAAc,CAAAA,KAAA,CAAA,CAAA,IAAAj1C,MAAAk1C,CAAAA,aAAA,CAAA,CAAA,YAAAxiD,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,KAAA,KAAA,CAAA,MAAAD,GAAA2I,CAAAA,IAAA,EAAA,CAAA,CAAA,CAAA3I,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA,SAAA,CAAAC,CAAA,CAAA,CAAA,MAAAD,EAAAyY,CAAAA,KAAA,CAAA,IAAA,CAAAxW,SAAA,CAAA,CAAA,CAAA,EAAA,CAAA8\/C,GAAA,QAAA,EAAA,CAAA,IAAA\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\/C,EAAA,CAAAw\/C,SAAAz2B,EAAA,CAAAlsB,CAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,MAAA,EAAA,CAAAkD,EAAA,CAAAhE,EAAA4E,CAAAA,IAAA,MAAA,EAAA,CAAA,MAAA5E,GAAA6F,CAAAA,IAAA,CAAA,EAAA,CAAA43C,EAAA,CAAAz5C,EAAA,CAAA,CAAAuD,KAAAlF,EAAA,CAAAs7C,UAAA,KAAA,CAAA9gB,WAAA14B,EAAA,CAAA,CAAA,MAAA,EAAA,CAAA,MAAAnE,GAAA+E,CAAAA,MAAA,CAAA,QAAA,CAAA\/E,EAAA4E,CAAAA,IAAA,CAAA,MAAA,EAAA,CAAA,GAAA,WAAA,GAAA3E,CAAA,CAAA,CAAAD,EAAA6F,CAAAA,IAAA,CAAA,EAAA,MAAA,CAAA,MAAA7F,GAAAwI,CAAAA,IAAA,CAAA,EAAA,CAAAxI,EAAA6F,CAAAA,IAAA,CAAA,EAAA,CAAA08C,EAAA,CAAAv+C,EAAA,CAAA,MAAA,EAAA,CAAAhE,EAAA6F,CAAAA,IAAA,CAAA,EAAA,MAAA,MAAA,EAAA,CAAA,GAAA7F,EAAAwI,CAAAA,IAAA,CAAA,EAAA,CAAAxI,EAAAo+C,CAAAA,EAAA,CAAAp+C,EAAA+I,CAAAA,KAAA,CAAA,EAAA,CAAA,CAAA,yBAAA,GAAA\/I,EAAAo+C,CAAAA,EAAA72C,CAAAA,IAAA,CAAA,CAAAvH,EAAA6F,CAAAA,IAAA,CAAA,EAAA,MAAA,CAAA,KAAA7F,GAAAo+C,CAAAA,EAAA,CAAA,KAAA,EAAA,CAAA,KAAAh6C,MAAA,CAAA6O,EAAA,CAAA,gCAAA,CAAA,CAAA;AAAA,KAAA,EAAA,CAAA,KAAA,KAAA,CAAA,MAAAjT,GAAA2I,CAAAA,IAAA,EAAA,CAAA,CAAA,CAAA3I,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA,SAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAG,EAAA,CAAAC,EAAA,CAAA,CAAA,MAAAd,EAAAyY,CAAAA,KAAA,CAAA,IAAA,CAAAxW,SAAA,CAAA,CAAA,CAAA,EAAA,CAAAwhD,GAAA,QAAA,EAAA,CAAA,IAAAzjD,EAAA,GAAAqC,EAAAoM,CAAAA,CAAA,EAAAvH,EAAA,EAAAM,CAAAA,IAAA,CAAAxH,QAAAA,GAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,IAAAG,EAAA,CAAAC,EAAA,CAAAgB,EAAA,CAAAlB,EAAA,CAAAH,EAAA,CAAAD,EAAA,OAAA0G,GAAA,EAAAL,CAAAA,IAAA,CAAA,QAAA,CAAA7G,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,OAAAA,EAAAwI,CAAAA,IAAA,CAAAxI,EAAA6F,CAAAA,IAAA,EAAA,KAAA,CAAA,CAAA,GAAA\/E,EAAA,CAAA27B,CAAA57B,EAAA47B,CAAA\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\/\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\/E,EAAAiwB,CAAAA,MAAA,CAAA,CAAA\/wB,EAAA6F,CAAAA,IAAA;AAAA,CAAA,MAAA,CAAA,MAAA7F,GAAA+E,CAAAA,MAAA,CAAA,QAAA,CAAA,CAAAkuC,gBAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,MAAAnxC,GAAA,CAAAqhC,EAAA,CAAAvB,EAAA,CAAA3hC,EAAA,CAAA,CAAAS,EAAA,CAAA,CAAAV,EAAAwI,CAAAA,IAAA,CAAA,CAAA,CAAAxI,EAAA6F,CAAAA,IAAA,CAAA,CAAA,CAAAu9C,EAAA,CAAA,eAAA,CAAAthD,EAAAI,CAAAA,MAAA,CAAAJ,EAAA,CAAA8\/B,EAAA,CAAA3hC,EAAA,CAAA,CAAAS,EAAA,CAAAA,EAAA,CAAA,MAAA,CAAA,CAAA,MAAAV,GAAA+E,CAAAA,MAAA,CAAA,QAAA,CAAA,CAAAkuC,gBAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,MAAAjzC,GAAAwI,CAAAA,IAAA,CAAA,CAAA,CAAAxI,EAAAo+C,CAAAA,EAAA,CAAAp+C,EAAA+I,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA29B,OAAAgU,CAAAA,KAAA,CAAA16C,EAAAo+C,CAAAA,EAAA,CAAA,CAAAp+C,EAAA+E,CAAAA,MAAA,CAAA,QAAA,CAAA,CAAAiuC,SAAA3pB,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAA3oB,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA87B,aAAAx8B,EAAAo+C,CAAAA,EAAA5B,CAAAA,OAAA,CAAA,CAAA,CAAAvJ,gBAAA,CAAA,CAAA,CAAA,CAAA,MAAA,EAAA,CAAA,KAAA,KAAA,CAAA,MAAAjzC,GAAA2I,CAAAA,IAAA,EAAA,CAAA,CAAA,CAAA3I,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA,SAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAG,EAAA,CAAAC,EAAA,CAAA,CAAA,MAAAd,EAAAyY,CAAAA,KAAA,CAAA,IAAA,CAAAxW,SAAA,CAAA,CAAA,CAAA,EAAA,CAAAixC,iBAAA,kBAAA,CAAA,CAAA;AAAAuU,GAAA7U,EAAA,CAAA,CAAArrC,KAAA,WAAA,CAAAwrC,QAAA,QAAA,EAAA,CAAA,IAAA\/yC,EAAA,GAAAqC,EAAAoM,CAAAA,CAAA,EAAAvH,EAAA,EAAAM,CAAAA,IAAA,CAAAxH,QAAAA,GAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAG,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAgB,EAAA,OAAAoF,GAAA,EAAAL,CAAAA,IAAA,CAAA,QAAA,CAAA7G,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,OAAAA,EAAAwI,CAAAA,IAAA,CAAAxI,EAAA6F,CAAAA,IAAA,EAAA,KAAA,CAAA,CAAA,GAAA\/E,EAAAiwB,CAAAA,MAAA,CAAA,CAAA\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\/\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\/\/B,EAAA7P,CAAAA,GAAA,EAAA,IAAA,CAAA,CAAA,cAAA9C,EAAA,CAAAglB,QAAA9kB,EAAA,CAAAmkB,SAAA,GAAA1R,EAAA5P,CAAAA,IAAA,EAAA,QAAA,CAAA,CAAAwgB,UAAArF,EAAA,CAAA,qBAAA,CAAA,CAAAkuC,UAAA,wBAAAA,GAAApsD,EAAA,CAAAqsD,UAAA,IAAA,IAAAhsD,EAAA,CAAAb,EAAA8tC,CAAAA,OAAA,GAAA,IAAA,EAAA,GAAAjtC,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAAuB,CAAAA,IAAA,CAAApC,EAAA,CAAAY,EAAA,CAAA,CAAA,CAAA,CAAA4kB,QAAAA,QAAA,EAAA,CAAA,MAAA1jB,GAAAgrD,CAAAA,aAAA,CAAA9sD,EAAA,CAAA,CAAA,CAAA6kB,SAAA,CAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAA,KAAA,CAAA,CAAAygB,UAAA,4BAAA,CAAAc,SAAA7iB,EAAA,CAAA,CAAA,CAAA,GAAAmR,EAAA7P,CAAAA,GAAA,EAAA,KAAA,CAAA,CAAAygB,UAAA,+BAAA;AAAAc,SAAArkB,EAAA,EAAAC,EAAA,CAAAyqD,EAAA,CAAA1qD,EAAA,CAAA,CAAAC,EAAA,EAAA,CAAA,CAAAA,EAAAyB,CAAAA,MAAA,CAAAzB,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAR,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA8sD,GAAA,IAAAvtB,OAAA,CAAAwtB,GAAAA,QAAA,CAAAhtD,CAAA,CAAA,CAAA,IAAAC,EAAA,CAAAS,EAAA,CAAAG,GAAA,EAAAb,EAAAwjB,CAAAA,OAAA5hB,CAAAA,OAAA,CAAA,QAAA,CAAA5B,EAAA,CAAA,CAAAA,EAAA,EAAAa,EAAAwF,CAAAA,IAAA,CAAArG,EAAA,CAAA,CAAA,CAAAa,GAAAqB,CAAAA,MAAA,EAAA,GAAAi0B,EAAA82B,CAAAA,MAAA,EAAA,GAAA95C,EAAA7P,CAAAA,GAAA,EAAAmpD,EAAA,CAAA,CAAAvgB,IAAAlsC,CAAAksC,CAAAA,GAAA,CAAA5lB,KAAAtmB,CAAAsmB,CAAAA,IAAA,CAAA9C,QAAA3iB,EAAA,CAAAslB,eAAAA,QAAA,EAAA,CAAA,MAAAlmB,GAAA,CAAAD,CAAAktD,CAAAA,SAAA,CAAA,MAAAxsD,EAAA,CAAAqsD,EAAA3lC,CAAAA,GAAA,CAAAnnB,EAAA,CAAA,IAAA,GAAAk2B,EAAAg3B,CAAAA,sBAAA,EAAAzsD,EAAA,CAAA,CAAAA,EAAA4+B,CAAAA,MAAA,EAAA,CAAAytB,EAAAptB,CAAAA,MAAA,CAAA1\/B,EAAA,CAAA,EAAA,KAAAA,EAAA,CAAAS,EAAA,CAAA,CAAAgsD,cAAA1sD,CAAA0sD,CAAAA,aAAA,CAAA1Z,SAAAhzC,CAAAgzC,CAAAA,QAAA,CAAA,CAAA,EAAA\/yC,EAAA,CAAAD,CAAAktD,CAAAA,SAAA,EAAAxsD,EAAA,CAAAqsD,EAAA3lC,CAAAA,GAAA,CAAAnnB,EAAA,CAAA,IAAAS,EAAA,CAAAsL,QAAAC,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAhM,EAAAqN,CAAAA,aAAA,CAAA,kCAAA,CAAAhB,CAAAA,WAAA,CAAA5L,EAAA,CAAA;AAAAqsD,EAAA\/rC,CAAAA,GAAA,CAAA\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\/C,CAAAA,aAAA,CAAA\/+C,GAAA,IAAA,EAAA,GAAAD,EAAA,CAAAmB,EAAAkS,CAAAA,EAAA,CAAArT,EAAAiB,GAAAA,CAAA9B,CAAA0sD,CAAAA,aAAA,KAAA9rD,GAAAZ,CAAA8uD,CAAAA,aAAA,CAAAtuD,GAAAR,CAAA+uD,CAAAA,aAAA,CAAA5sD,GAAAnC,CAAAgvD,CAAAA,mBAAA,CAAA3sD,GAAAmqC,EAAA,CAAAvsC,EAAA,CAAAS,EAAA,CAAAuE,EAAAA,CAAA8O,EAAA,CAAA,GAAAtT,EAAAulB,CAAAA,QAAA,EAAA3jB,EAAA,CAAA,CAAA,CAAA,CAAA,KAAA8B,GAAAc,CAAA,CAAA,CAAA,CAAA,CAAAZ,GAAAY,CAAA,CAAA,CAAA,CAAA,CAAAN,GAAA,GAAAlE,EAAAmjB,CAAAA,MAAA,EAAA,IAAA,CAAA,CAAA5f,GAAAtD,EAAA+7B,CAAAA,gBAAA,CAAAv3B,GAAAxE,EAAA29B,CAAAA,mBAAA,CAAAl5B,GAAAhB,EAAA,CAAAg\/B,EAAA,CAAAljC,EAAA,CAAAS,EAAA,CAAA,CAAAT,EAAA,OAAA,GAAAQ,EAAAojB,CAAAA,SAAA,EAAA,QAAA,EAAA,CAAAxf,EAAA,CAAAhC,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,GAAA5B,EAAAojB,CAAAA,SAAA,EAAA,QAAA,EAAA,CAAA,IAAA7jB,GAAA2E,EAAA7B,CAAAA,OAAA,IAAA9C,EAAA,CAAA,GAAA,CAAA,IAAAC,GAAA2\/C,EAAA,CAAAz6C,EAAA;AAAAzE,EAAA,CAAA,CAAA+7B,iBAAAz4B,EAAA,CAAAq6B,oBAAAn5B,EAAA,CAAA26C,cAAA\/+C,EAAA,CAAA,CAAAo+C,GAAA,CAAAj\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\/C,CAAAA,aAAA\/+C,GAAAA,CAAA,IAAA,EAAA,GAAAD,EAAA,CAAAmB,EAAAkS,CAAAA,EAAA,CAAArT,EAAA,KAAAiB,GAAA9B,CAAA0sD,CAAAA,aAAA,CAAA9rD,GAAAZ,CAAA8uD,CAAAA,aAAA,CAAA3sD,GAAAnC,CAAA+uD,CAAAA,aAAA1sD,EAAAA,CAAArC,CAAAgvD,CAAAA,mBAAA,KAAA\/pD,GAAA8O,EAAA,CAAA,GAAAtT,EAAAulB,CAAAA,QAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA7hB,GAAAc,EAAA,CAAA,CAAA,CAAA,CAAAZ,GAAAY,EAAA,CAAA,CAAA,CAAAN,GAAAA,CAAAnE,EAAA,EAAAq1C,CAAAA,WAAA,CAAA,QAAA,EAAA,CAAAxxC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,OAAA,GAAA8O,EAAA5P,CAAAA,IAAA,EAAA4P,EAAApQ,CAAAA,QAAA,CAAA,CAAA8hB,SAAA,CAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAA8pC,EAAA,CAAA,CAAA5nB,QAAAA,QAAA,EAAA,CAAAnhB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,cAAA,qBAAA;AAAAwhB,KAAAipB,EAAA,CAAAnsC,KAAA,QAAA,CAAA,aAAAsQ,EAAA,CAAA,qBAAA,CAAA,CAAA46B,cAAAz6B,EAAA,EAAA,CAAAsS,MAAAzS,EAAA,CAAA,qBAAA,CAAA,CAAA,CAAA,CAAA9O,EAAA,EAAA,GAAAgP,EAAA7P,CAAAA,GAAA,EAAA6qD,EAAA,CAAA,CAAAhoC,eAAAxhB,EAAA,CAAA+gB,MAAAzS,EAAA,CAAA,qBAAA,CAAA,CAAA4R,SAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAAurD,EAAA,CAAA,CAAAxtB,SAAAphC,EAAA,CAAA+yC,SAAAtyC,EAAA,CAAAm\/C,cAAA\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\/\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\/C,UAAA,CAAA,GAAA,CAAAt\/C,EAAA,CAAA,kBAAA,CAAA,CAAAA,EAAA,CAAA,kBAAA,CAAA,CAAAA,EAAA,CAAA,kBAAA,CAAA,CAAA,CAAAw\/C,KAAA,CAAA,CAAA,CAAA,CAAA;AAAA,GAAAt\/C,EAAA7P,CAAAA,GAAA,EAAA8uD,EAAA,CAAA,CAAA3uC,MAAAxQ,EAAA,CAAA,uBAAA,CAAA,CAAAs\/C,UAAA,CAAA,GAAA,CAAAt\/C,EAAA,CAAA,kBAAA,CAAA,CAAAA,EAAA,CAAA,kBAAA,CAAA,CAAAA,EAAA,CAAA,kBAAA,CAAA,CAAA,CAAAw\/C,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAt\/C,EAAA7P,CAAAA,GAAA,EAAA8uD,EAAA,CAAA,CAAA3uC,MAAAxQ,EAAA,CAAA,cAAA,CAAA,CAAAs\/C,UAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,GAAAp\/C,EAAA7P,CAAAA,GAAA,EAAA8uD,EAAA,CAAA,CAAA3uC,MAAAxQ,EAAA,CAAA,2BAAA,CAAA,CAAAs\/C,UAAA,CAAAt5B,EAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA9lB,EAAA5P,CAAAA,IAAA,EAAA2uD,EAAA,CAAA,CAAAC,QAAAl\/C,EAAA,CAAA,iBAAA,CAAA,CAAA4R,SAAA,CAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAA8uD,EAAA,CAAA,CAAA3uC,MAAAxQ,EAAA,CAAA,gBAAA,CAAA,CAAAs\/C,UAAA,CAAAt5B,EAAA,CAAA,aAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA9lB,EAAA7P,CAAAA,GAAA,EAAA8uD,EAAA,CAAA,CAAA3uC,MAAAxQ,EAAA,CAAA,iBAAA,CAAA,CAAAs\/C,UAAA,CAAAt5B,EAAA,CAAA,aAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA9lB,EAAA7P,CAAAA,GAAA,EAAA8uD,EAAA;AAAA,CAAA3uC,MAAAxQ,EAAA,CAAA,mBAAA,CAAA,CAAAs\/C,UAAA,CAAAt5B,EAAA,CAAA,aAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA9lB,EAAA7P,CAAAA,GAAA,EAAA8uD,EAAA,CAAA,CAAA3uC,MAAAxQ,EAAA,CAAA,sBAAA,CAAA,CAAAs\/C,UAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,GAAAp\/C,EAAA7P,CAAAA,GAAA,EAAA8uD,EAAA,CAAA,CAAA3uC,MAAAxQ,EAAA,CAAA,4BAAA,CAAA,CAAAs\/C,UAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,GAAAp\/C,EAAA7P,CAAAA,GAAA,EAAA8uD,EAAA,CAAA,CAAA3uC,MAAAxQ,EAAA,CAAA,oBAAA,CAAA,CAAAs\/C,UAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,GAAAp\/C,EAAA7P,CAAAA,GAAA,EAAA8uD,EAAA,CAAA,CAAA3uC,MAAAxQ,EAAA,CAAA,iBAAA,CAAA,CAAAs\/C,UAAA,CAAAt5B,EAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA9lB,EAAA7P,CAAAA,GAAA,EAAA8uD,EAAA,CAAA,CAAA3uC,MAAAxQ,EAAA,CAAA,iBAAA,CAAA,CAAAs\/C,UAAA,CAAAt5B,EAAA,CAAA,aAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA9lB,EAAA7P,CAAAA,GAAA,EAAA8uD,EAAA,CAAA,CAAA3uC,MAAAxQ,EAAA,CAAA,iBAAA,CAAA,CAAAs\/C,UAAA,CAAAt5B,EAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA9lB,EAAA7P,CAAAA,GAAA,EAAA8uD,EAAA;AAAA,CAAA3uC,MAAAxQ,EAAA,CAAA,oBAAA,CAAA,CAAAs\/C,UAAA,CAAAt5B,EAAA,CAAA,aAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA9lB,EAAA7P,CAAAA,GAAA,EAAA8uD,EAAA,CAAA,CAAA3uC,MAAAxQ,EAAA,CAAA,aAAA,CAAA,CAAAs\/C,UAAA,CAAAt5B,EAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA9lB,EAAA7P,CAAAA,GAAA,EAAA2uD,EAAA,CAAA,CAAAptC,SAAA,GAAA1R,EAAA5P,CAAAA,IAAA,EAAA2uD,EAAA,CAAA,CAAAC,QAAAl\/C,EAAA,CAAA,mBAAA,CAAA,CAAA4R,SAAA,CAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAA8uD,EAAA,CAAA,CAAA3uC,MAAAxQ,EAAA,CAAA,kBAAA,CAAA,CAAAs\/C,UAAA,CAAAt5B,EAAA,CAAA,aAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA9lB,EAAA7P,CAAAA,GAAA,EAAA8uD,EAAA,CAAA,CAAA3uC,MAAAxQ,EAAA,CAAA,oBAAA,CAAA,CAAAs\/C,UAAA,CAAAt5B,EAAA,CAAA,QAAAvtB,CAAAA,MAAA,CAAAuH,EAAA,CAAA,kBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAE,EAAA7P,CAAAA,GAAA,EAAA8uD,EAAA,CAAA,CAAA3uC,MAAAxQ,EAAA,CAAA,mBAAA,CAAA,CAAAs\/C,UAAA,CAAAt5B,EAAA,CAAA,QAAAvtB,CAAAA,MAAA,CAAAuH,EAAA,CAAA,iBAAA,CAAA,CAAA,CAAA,CAAAgmB,EAAA,CAAA,QAAAvtB,CAAAA,MAAA,CAAAuH,EAAA,CAAA,iBAAA,CAAA,CAAA,CAAA,CAAA;AAAAw\/C,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAt\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\/C,CAAAA,OAAA,CAAA15C,GAAA\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\/sB,CAAAA,WAAA,EAAA\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\/G,EAAA69D,CAAAA,UAAA\/2D,CAAAA,CAAA,CAAAjG,EAAAiG,CAAAA,CAAA,CAAA7G,EAAA8+D,CAAAA,iBAAA,CAAA\/+D,EAAA,CAAAU,EAAA,CAAA,EAAA,MAAA,CAAA,CAAA,IAAAT,EAAAytB,CAAAA,KAAA2O,CAAAA,oBAAA,EAAA4L,EAAAi3B,CAAAA,mBAAA,CAAAj\/D,EAAAytB,CAAAA,KAAA,CAAA,QAAA,CAAA1tB,EAAA,CAAA,CAAA,MAAAC,GAAA4tB,CAAAA,QAAA,CAAA7tB,EAAA,CAAA,CAAA,CAAAa,EAAAkG,CAAAA,CAAA,CAAAlG,EAAAiG,CAAAA,CAAA,CAAA,QAAA,CAAA9G,EAAA,CAAAU,EAAA,CAAA,CAAAT,EAAAk\/D,CAAAA,2CAAA,CAAAn\/D,EAAA,CAAAU,EAAA,CAAAG,EAAA,CAAA,CAAA,CAAA,CAAA,MAAAb,GAAA69D,CAAAA,UAAA92D,CAAAA,CAAA;AAAAlG,EAAAkG,CAAAA,CAAA,CAAA,KAAA\/G,EAAA69D,CAAAA,UAAA\/2D,CAAAA,CAAA,CAAAjG,EAAAiG,CAAAA,CAAA,CAAA,IAAA9G,EAAAk+D,CAAAA,GAAAC,CAAAA,cAAAl3B,CAAAA,IAAA,CAAA,QAAA,CAAAjnC,EAAA,CAAA,CAAA,MAAAC,GAAAm\/D,CAAAA,kBAAA,CAAAp\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\/4D,GAAA2+B,EAAA,CAAA\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\/G,EAAA69D,CAAAA,UAAA\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\/2D,CAAAA,CAAA2yB,EAAA,IAAA\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\/B,EAAA,CAAAh\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\/+D,EAAAuG,CAAAA,CAAA,CAAAy4D,UAAAh\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\/\/D,EAAAi3D,CAAAA,KAAA\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\/\/D,EAAAi\/C,CAAAA,OAAAv9C,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAAjC,EAAA4F,CAAAA,IAAA,CAAA,EAAA,MAAA,CAAA,MAAA5F,GAAA4F,CAAAA,IAAA,CAAA,EAAA,CAAA7F,CAAAy\/C,CAAAA,OAAAE,CAAAA,aAAA,CAAAl\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\/qC,EAAAu\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\/D,CAAAA,cAAA,CAAA\/+D,EAAA,CAAAoG,EAAArG,EAAA,CAAAA,EAAAi\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\/I,EAAA,CAAAhvB,EAAA,CAAA,CAAAnE,CAAAm\/D,CAAAA,2CAAA,CAAAh7D,EAAA,CAAA,KAAA,CAAA3D,EAAA,CAAAR,CAAA0tB,CAAAA,KAAAwQ,CAAAA,iBAAA,CAAA,CAAAl+B,CAAA2jE,CAAAA,2BAAA,CAAAnjE,EAAA,CAAA,CAAA,IAAAR,CAAA0tB,CAAAA,KAAA0P,CAAAA,YAAA,CAAA,CAAA\/4B,EAAAA;AAAArE,CAAA0tB,CAAAA,KAAA0P,CAAAA,YAAAz4B,GAAAA,CAAAN,EAAA0C,CAAAA,CAAA\/C,GAAAA,CAAAK,EAAAyC,CAAAA,CAAA5B,GAAAA,CAAAb,EAAAgd,CAAAA,MAAA,KAAAlc,GAAAd,EAAAw\/B,CAAAA,kBAAA,CAAA\/8B,GAAA5B,EAAA,CAAAA,EAAAhD,CAAAA,MAAA,CAAA,CAAA,CAAA,OAAA22B,GAAA,CAAA74B,CAAA+wB,CAAAA,MAAA,CAAA\/wB,CAAA0tB,CAAAA,KAAA6O,CAAAA,WAAA,CAAA,CAAA,KAAAz1B,EAAA,GAAA3B,EAAA,CAAAiP,IAAAmL,CAAAA,KAAA,CAAAzY,EAAApG,CAAA,CAAAA,CAAA,EAAAyB,EAAA,CAAAwC,EAAA,EAAAmC,EAAAjG,CAAA,CAAAA,CAAA,EAAAwB,EAAA,CAAA2B,EAAA,EAAA,EAAAhC,EAAAqP,CAAAA,EAAA,CAAA+wB,EAAA,CAAA\/9B,EAAA,CAAA,CAAAgd,OAAA,EAAA3V,CAAAA,MAAA,CAAAuI,CAAA,CAAA\/O,EAAA,CAAA,CAAA,CAAA,CAAA\/C,EAAA,CAAAwC,EAAA,CAAAtC,EAAA,CAAA2B,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA40B,EAAA,CAAA54B,CAAA+wB,CAAAA,MAAA,CAAA\/uB,EAAA0P,CAAAA,EAAAgD,CAAAA,OAAA,CAAA,CAAA,CAAA,CAAAxP,EAAAhD,CAAAA,MAAA,EAAAiD,EAAA,EAAAiP,IAAAmL,CAAAA,KAAA,CAAApa,EAAAzE,CAAA,CAAAA,CAAA,EAAAyB,EAAA,CAAAwC,EAAA,EAAAQ,EAAAtE,CAAA,CAAAA,CAAA,EAAAwB,EAAA,CAAA2B,EAAA,EAAA,CAAAhC,EAAAqP,CAAAA,EAAA,EAAAunB,EAAA,CAAA54B,CAAA+wB,CAAAA,MAAA,CAAA\/uB,EAAA0P,CAAAA,EAAAgD,CAAAA,OAAA,CAAA,CAAA0tB,EAAA,CAAA\/9B,EAAA,CAAA,CAAAgd,OAAAnc,EAAAwD,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA8qB,EAAA,CAAAtuB,EAAA,CAAAlF,CAAA0tB,CAAAA,KAAAyL,CAAAA,IAAAx1B,CAAAA,KAAA,CAAA,EAAAi1B,EAAA,CAAA54B,CAAA+wB,CAAAA,MAAA,CAAA\/uB,EAAA0P,CAAAA,EAAAgD,CAAAA,OAAA,CAAA,CAAA0tB,EAAA,CAAA\/9B,EAAA,CAAA,CAAAgd,OAAA,EAAA3V,CAAAA,MAAA,CAAAuI,CAAA,CAAA\/O,EAAAwD,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAvG,EAAA,CAAAwC,EAAA;AAAAtC,EAAA,CAAA2B,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,EAAA\/D,EAAA2jE,CAAAA,OAAA,EAAA,WAAA,GAAA5jE,CAAA0tB,CAAAA,KAAA6O,CAAAA,WAAA,EAAA,MAAA,GAAAv8B,CAAA0tB,CAAAA,KAAA6O,CAAAA,WAAA,CAAA,CAAA,CAAAx1B,EAAAA,CAAA\/G,CAAAi3D,CAAAA,KAAA\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\/D,CAAAA,kBAAA,CAAAn\/D,EAAA,CAAA,CAAA,CAAA,IAAA,IAAA,GAAAO,EAAA,EAAAwB,EAAA,EAAA\/B,EAAA8zC,CAAAA,QAAA,EAAArzC,EAAAw9D,CAAAA,GAAAI,CAAAA,yCAAA,EAAAt+D,CAAAwlE,CAAAA,cAAA,CAAAhlE,EAAA,CAAA,CAAA,IAAA,EAAAA,EAAA,CAAA,CAAA,GAAAP,EAAA,CAAAu2B,EAAA,CAAA,CAAA,MAAAx2B,EAAA0tB,CAAAA,KAAAkQ,CAAAA,kBAAA,CAAAp9B,EAAAG,CAAAA,EAAA,CAAA,GAAAD,EAAAw9D,CAAAA,GAAAE,CAAAA,mBAAA,CAAA,CAAA,CAAA,EAAAp+D,CAAA6tB,CAAAA,QAAA,CAAA,QAAA,CAAA5tB,EAAA,CAAA,CAAA,EAAA,CAAAkiB,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAAliB,EAAA,CAAA,CAAA,EAAA,CAAA,CAAAm8B,eAAA57B,EAAAsiC,CAAAA,QAAA5gC,CAAAA,MAAA;AAAA1B,EAAAsiC,CAAAA,QAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAAjF,iBAAA,EAAA,CAAAD,mBAAAzpB,CAAA,CAAA,EAAA,CAAA3T,EAAAG,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAAAmqB,GAAA,CAAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA2S,2BAAAz9B,CAAA0tB,CAAAA,KAAAkQ,CAAAA,kBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA59B,EAAA0tB,CAAAA,KAAAkQ,CAAAA,kBAAA,CAAAp9B,EAAAG,CAAAA,EAAA,CAAA,GAAAX,CAAA0tB,CAAAA,KAAA0O,CAAAA,cAAA,EAAA,CAAA57B,EAAAsiC,CAAAA,QAAAvI,CAAAA,QAAA,CAAAv6B,CAAA0tB,CAAAA,KAAA0O,CAAAA,cAAA,CAAA,EAAAp8B,CAAA6tB,CAAAA,QAAA,CAAA,CAAA+P,mBAAA,EAAA,CAAAC,iBAAA,EAAA,CAAAzB,eAAA,IAAA,CAAA,CAAA,CAAAp6B,EAAA,EAAAtB,EAAAw9D,CAAAA,GAAAI,CAAAA,yCAAA,GAAAt+D,CAAA6tB,CAAAA,QAAA,CAAA,QAAA,CAAA5tB,EAAA,CAAA,CAAA,MAAAijC,GAAA,CAAApY,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAA7qB,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA29B,mBAAA9S,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAA7qB,EAAA29B,CAAAA,kBAAA,CAAA;AAAA,EAAA,CAAAzpB,CAAA,CAAA,EAAA,CAAA3T,EAAAG,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAX,CAAAi3D,CAAAA,KAAA\/sB,CAAAA,WAAA,EAAA,CAAA,CAAA,CAAA,CAAAxpC,EAAAw9D,CAAAA,GAAAE,CAAAA,mBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAp+D,CAAA6tB,CAAAA,QAAA,CAAA,CAAA4P,2BAAAz9B,CAAA0tB,CAAAA,KAAAkQ,CAAAA,kBAAA,CAAA,CAAA,CAAA,CAAA,IAAAz7B,EAAA,CAAAE,EAAA,CAAA4C,EAAA,CAAAd,EAAA,CAAAE,EAAA,CAAAM,EAAA,OAAA,CAAA,CAAA,CAAA,KAAAugE,CAAAA,uBAAA,CAAAO,QAAA,CAAAxlE,EAAA,CAAAS,EAAA,CAAA,CAAA,IAAAG,EAAA,OAAA,IAAA,IAAA,IAAAA,EAAA,CAAAb,CAAA0tB,CAAAA,KAAAyO,CAAAA,cAAA,GAAA,IAAA,EAAA,GAAAt7B,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAA8B,CAAAA,IAAA,IAAA3C,CAAA8iE,CAAAA,gBAAA,CAAA,CAAAnpC,OAAAj5B,EAAA0W,CAAAA,MAAArQ,CAAAA,CAAA,CAAA6yB,OAAAl5B,EAAA0W,CAAAA,MAAAtQ,CAAAA,CAAA,CAAAq8D,qBAAA,CAAAljE,EAAAqkB,CAAAA,MAAA,CAAA,CAAA,CAAAoU,EAAA,CAAA14B,CAAA+wB,CAAAA,MAAA,CAAA,CAAA\/wB,CAAA0tB,CAAAA,KAAA4O,CAAAA,aAAA,EAAAt8B,CAAA6tB,CAAAA,QAAA,CAAA,CAAA0O,YAAA,WAAA,CAAA,CAAA,CAAA,CAAA,KAAAqoC,CAAAA,kCAAA;AAAAc,QAAA,CAAAzlE,EAAA,CAAAS,EAAA,CAAAG,EAAA,CAAA,CAAA,IAAAC,EAAA,CAAAgB,GAAAiS,EAAA,CAAA4f,EAAA,CAAA9yB,EAAAuW,CAAAA,MAAArQ,CAAAA,CAAA,CAAAlG,EAAAuW,CAAAA,MAAAtQ,CAAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAAtG,IAAAM,EAAA,CAAA,CAAA6B,KAAAjC,EAAA,CAAAqG,EAAAjF,EAAAlB,CAAA,CAAAA,CAAA,CAAAkG,EAAAhF,EAAArB,CAAA,CAAAA,CAAA,CAAAy+B,YAAAl\/B,CAAA0tB,CAAAA,KAAAkO,CAAAA,sBAAA,CAAA6D,gBAAAz\/B,CAAA0tB,CAAAA,KAAAyN,CAAAA,0BAAA,CAAAje,UAAAld,CAAA0tB,CAAAA,KAAA2N,CAAAA,oBAAA,CAAAvhB,YAAA9Z,CAAA0tB,CAAAA,KAAAqO,CAAAA,sBAAA,CAAAzK,YAAAtxB,CAAA0tB,CAAAA,KAAAoO,CAAAA,sBAAA,CAAApgB,UAAA1b,CAAA0tB,CAAAA,KAAAgO,CAAAA,oBAAA,CAAAqD,QAAA\/+B,CAAA0tB,CAAAA,KAAA+N,CAAAA,kBAAA,CAAA9G,gBAAA30B,CAAA0tB,CAAAA,KAAA8N,CAAAA,gCAAA,CAAApa,iBAAA,EAAAA,GAAAnhB,EAAA8f,CAAAA,QAAA,CAAA,CAAAsC,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAAihB,EAAA,CAAAxiC,EAAA6B,CAAAA,IAAA;AAAA7B,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAugB,OAAAvgB,EAAAugB,CAAAA,MAAAA,EAAA,EAAA,CAAAC,UAAA,EAAA,CAAAF,iBAAAtgB,EAAAsgB,CAAAA,gBAAA,CAAAyiB,mBAAA,IAAA,CAAA,CAAArjC,CAAAR,EAAA6tB,CAAAA,QAAA,CAAA,QAAA,CAAA7tB,EAAA,CAAA,CAAA,MAAA,CAAA49B,mBAAA9S,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAA9qB,EAAA49B,CAAAA,kBAAA,CAAA,CAAA,EAAA,CAAAzpB,CAAA,CAAA,EAAA,CAAA3T,EAAAG,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAqB,GAAAA,CAAAxB,EAAA4gB,CAAAA,gBAAA,CAAA5gB,EAAA8gB,CAAAA,SAAA,CAAA,EAAA5V,CAAAA,MAAA,CAAAuI,CAAA,CAAAzT,EAAA8gB,CAAAA,SAAA,CAAA,CAAA,CAAArhB,EAAA8f,CAAAA,QAAA,CAAA,CAAAqiB,GAAA,CAAA5hC,EAAA,CAAA,CAAA6gB,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAC,UAAAtf,EAAA,CAAA,CAAAG,GAAAA,CAAAymC,EAAA,CAAA\/nC,EAAAuW,CAAAA,MAAA,CAAApX,CAAAi3D,CAAAA,KAAA,CAAAj3D,EAAAi3D,CAAAA,KAAA2E,CAAAA,kBAAA,CAAA,EAAAlwD,CAAAA,MAAA,CAAAuI,CAAA,CAAAjU,CAAAi3D,CAAAA,KAAAvO,CAAAA,2BAAA,EAAA,CAAA,CAAA,CAAAloD,EAAA,CAAA,CAAA,CAAAR,EAAA6tB,CAAAA,QAAA,CAAA,CAAAqO,gBAAA17B,EAAA,CAAA27B,eAAA37B,EAAA,CAAA09B,kBAAA\/7B,EAAA;AAAAg8B,kBAAA,EAAA,CAAA,CAAA,CAAA,KAAAwmC,CAAAA,gCAAA,CAAAgB,QAAA,CAAA1lE,EAAA,CAAAS,EAAA,CAAAG,EAAA,CAAA,CAAA,GAAAb,CAAA0tB,CAAAA,KAAA0P,CAAAA,YAAA,CAAA,CAAA,IAAAt8B,GAAAd,CAAA0tB,CAAAA,KAAA0P,CAAAA,YAAA,IAAA,MAAA,GAAAt8B,EAAA6B,CAAAA,IAAA,EAAA6wB,EAAA,CAAA1yB,EAAAugB,CAAAA,MAAA,CAAArhB,CAAA0tB,CAAAA,KAAAyL,CAAAA,IAAAx1B,CAAAA,KAAA,CAAA,CAAA,MAAAy+B,GAAA,CAAAthC,EAAA,CAAA,CAAA+iC,mBAAA\/iC,EAAAugB,CAAAA,MAAA,CAAAvgB,EAAAugB,CAAAA,MAAAnf,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAAlC,EAAA0sD,CAAAA,aAAAI,CAAAA,aAAA,CAAA1U,EAAA,CAAAt2C,GAAAA,CAAAhB,EAAAiG,CAAAA,CAAAnG,GAAAA,CAAAE,EAAAgG,CAAAA,CAAA,KAAArG,GAAAK,EAAA+iC,CAAAA,kBAAA,IAAA,CAAA,CAAA\/iC,EAAAugB,CAAAA,MAAAnf,CAAAA,MAAA,EAAAzB,EAAA,EAAA2T,IAAAmL,CAAAA,KAAA,CAAA9e,EAAAC,CAAA,CAAAA,CAAA,EAAAG,EAAAuW,CAAAA,MAAArQ,CAAAA,CAAA,CAAAjF,EAAA,EAAArB,EAAAI,CAAA,CAAAA,CAAA,EAAAA,EAAAuW,CAAAA,MAAAtQ,CAAAA,CAAA,CAAAlG,EAAA,EAAA,CAAAoB,EAAAqP,CAAAA,EAAA,CAAA,MAAA,KAAArR,EAAA0sD,CAAAA,aAAAI,CAAAA,aAAA,CAAA1U,EAAA,CAAAp4C,EAAA6tB,CAAAA,QAAA,CAAA,QAAA,CAAA7tB,EAAA,CAAA,CAAA,MAAA,CAAA49B,mBAAA9S,EAAA,CAAAA,EAAA,CAAA,EAAA;AAAA9qB,EAAA49B,CAAAA,kBAAA,CAAA,CAAA,EAAA,CAAAzpB,CAAA,CAAA,EAAA,CAAArT,EAAAH,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAyhC,GAAA,CAAAthC,EAAA,CAAA,CAAA+iC,mBAAA\/iC,EAAAugB,CAAAA,MAAA,CAAAvgB,EAAAugB,CAAAA,MAAAnf,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA02B,GAAA,CAAA54B,CAAA+wB,CAAAA,MAAA,CAAA\/uB,EAAA0P,CAAAA,EAAAgD,CAAAA,OAAA,CAAA,CAAA,IAAA,CAAAlU,EAAAA,CAAAuT,EAAA,CAAA4f,EAAA,CAAA9yB,EAAAuW,CAAAA,MAAArQ,CAAAA,CAAA,CAAAlG,EAAAuW,CAAAA,MAAAtQ,CAAAA,CAAA,CAAA9G,CAAA0tB,CAAAA,KAAAoP,CAAAA,QAAA,CAAA,CAAA,CAAA,CAAA36B,GAAAA,CAAA3B,EAAA,CAAA,CAAA,CAAA6B,GAAAA,CAAA7B,EAAA,CAAA,CAAA,CAAA,KAAAyE,GAAAjF,CAAA0tB,CAAAA,KAAA,CAAAvpB,GAAAc,EAAA02B,CAAAA,yBAAAt3B,GAAAA,CAAAY,EAAAm2B,CAAAA,uBAAAz2B,GAAAA,CAAAoP,EAAA,CAAA,OAAA,GAAArT,EAAA,CAAA,CAAAyD,EAAA,CAAAE,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,KAAAc,GAAAy+B,EAAA,CAAA,CAAAjhC,KAAAjC,EAAA,CAAAqG,EAAA5E,EAAA,CAAA2E,EAAAzE,EAAA,CAAA68B,YAAAl\/B,CAAA0tB,CAAAA,KAAAkO,CAAAA,sBAAA,CAAA6D,gBAAAz\/B,CAAA0tB,CAAAA,KAAAyN,CAAAA,0BAAA,CAAAje,UAAAld,CAAA0tB,CAAAA,KAAA2N,CAAAA,oBAAA,CAAAvhB,YAAA9Z,CAAA0tB,CAAAA,KAAAqO,CAAAA,sBAAA;AAAAzK,YAAAtxB,CAAA0tB,CAAAA,KAAAoO,CAAAA,sBAAA,CAAApgB,UAAA1b,CAAA0tB,CAAAA,KAAAgO,CAAAA,oBAAA,CAAAqD,QAAA\/+B,CAAA0tB,CAAAA,KAAA+N,CAAAA,kBAAA,CAAA9G,gBAAA30B,CAAA0tB,CAAAA,KAAA8N,CAAAA,gCAAA,CAAAoE,eAAAj7B,EAAAX,CAAA,CAAAA,CAAA,CAAA67B,aAAAl7B,EAAAO,CAAA,CAAAA,CAAA,CAAA,CAAAlF,EAAA6tB,CAAAA,QAAA,CAAA,QAAA,CAAA7tB,EAAA,CAAA,CAAA,MAAA,CAAA49B,mBAAA9S,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAA9qB,EAAA49B,CAAAA,kBAAA,CAAA,CAAA,EAAA,CAAAzpB,CAAA,CAAA,EAAA,CAAAhP,EAAAxE,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAyhC,GAAA,CAAAj9B,EAAA,CAAA,CAAAkc,OAAA,EAAA3V,CAAAA,MAAA,CAAAuI,CAAA,CAAA9O,EAAAkc,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAva,GAAAA,CAAA8hC,EAAA,CAAA\/nC,EAAAuW,CAAAA,MAAA,CAAApX,CAAAi3D,CAAAA,KAAA,CAAAj3D,EAAAi3D,CAAAA,KAAA2E,CAAAA,kBAAA,CAAA,EAAAlwD,CAAAA,MAAA,CAAAuI,CAAA,CAAAjU,CAAAi3D,CAAAA,KAAAvO,CAAAA,2BAAA,EAAA,CAAA,CAAA,CAAAvjD,EAAA,CAAA,CAAA,CAAAnF,EAAA6tB,CAAAA,QAAA,CAAA,CAAAqO,gBAAA\/2B,EAAA;AAAAg3B,eAAAh3B,EAAA,CAAA+4B,kBAAAp3B,EAAA,CAAAq3B,kBAAA,EAAA,CAAA,CAAA,CAAA,CAAA,KAAA0mC,CAAAA,iCAAA,CAAAe,QAAA,CAAA3lE,EAAA,CAAAS,EAAA,CAAA,CAAAG,EAAAA,CAAAkT,EAAA,CAAA4f,EAAA,CAAAjzB,EAAA0W,CAAAA,MAAArQ,CAAAA,CAAA,CAAArG,EAAA0W,CAAAA,MAAAtQ,CAAAA,CAAA,CAAA9G,CAAA0tB,CAAAA,KAAAoP,CAAAA,QAAA,CAAA,CAAA,CAAA,CAAAl8B,GAAAA,CAAA4iC,EAAA,CAAA,CAAA7gC,KAAA1C,EAAA,CAAA8G,EAAAlG,EAAAC,CAAA,CAAAA,CAAA,CAAAgG,EAAAjG,EAAAiB,CAAA,CAAAA,CAAA,CAAAo9B,YAAAl\/B,CAAA0tB,CAAAA,KAAAkO,CAAAA,sBAAA,CAAA6D,gBAAAz\/B,CAAA0tB,CAAAA,KAAAyN,CAAAA,0BAAA,CAAAje,UAAAld,CAAA0tB,CAAAA,KAAA2N,CAAAA,oBAAA,CAAAvhB,YAAA9Z,CAAA0tB,CAAAA,KAAAqO,CAAAA,sBAAA,CAAAzK,YAAAtxB,CAAA0tB,CAAAA,KAAAoO,CAAAA,sBAAA,CAAApgB,UAAA1b,CAAA0tB,CAAAA,KAAAgO,CAAAA,oBAAA,CAAAqD,QAAA\/+B,CAAA0tB,CAAAA,KAAA+N,CAAAA,kBAAA,CAAA9G,gBAAA30B,CAAA0tB,CAAAA,KAAAmO,CAAAA,0BAAA,CAAA,CAAA;WAAA,GAAAj7B,EAAA+B,CAAAA,IAAA,CAAA3C,CAAA6tB,CAAAA,QAAA,CAAA,CAAAiQ,iBAAAl9B,EAAA,CAAAs7B,gBAAAt7B,EAAA,CAAA,CAAA,EAAAZ,CAAAi3D,CAAAA,KAAA2E,CAAAA,kBAAA,CAAA,EAAAlwD,CAAAA,MAAA,CAAAuI,CAAA,CAAAjU,CAAAi3D,CAAAA,KAAAvO,CAAAA,2BAAA,EAAA,CAAA,CAAA,CAAA9nD,EAAA,CAAA,CAAA,CAAA,CAAAZ,CAAA6tB,CAAAA,QAAA,CAAA,CAAAuP,aAAA,IAAA,CAAAlB,gBAAAt7B,EAAA,CAAAu7B,eAAAv7B,EAAA,CAAA,CAAA,CAAA,CAAA,KAAA6jE,CAAAA,iCAAA,CAAAoB,QAAA,CAAA5lE,EAAA,CAAA,CAAAS,EAAAA,CAAA,CAAAT,EAAA,CAAAu2B,EAAA,CAAAx2B,EAAA0tB,CAAAA,KAAAqP,CAAAA,gBAAA,GAAAr8B,EAAA,EAAAV,CAAA6tB,CAAAA,QAAA,CAAA,CAAAkP,iBAAAr8B,EAAA,CAAA,CAAA,CAAA,KAAAijE,CAAAA,2BAAA,CAAAmC,QAAA,CAAA7lE,EAAA,CAAA,CAAAS,EAAAA,CAAAkoC,EAAA,CAAA3oC,EAAA,CAAAD,CAAAi3D,CAAAA,KAAA,CAAAj3D,EAAA6tB,CAAAA,QAAA,CAAA,CAAAsQ,kBAAA,IAAA,EAAAz9B,EAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,KAAAy+D,CAAAA,2CAAA;AAAA4G,QAAA,CAAA9lE,EAAA,CAAAS,EAAA,CAAAG,EAAA,CAAAC,EAAA,CAAA,CAAAgB,EAAAA,CAAA8mC,EAAA,CAAA\/nC,EAAA,CAAAb,CAAAi3D,CAAAA,KAAA,CAAAj3D,EAAA6tB,CAAAA,QAAA,CAAA,CAAAsQ,kBAAA,IAAA,EAAAr8B,EAAA,GAAA,IAAA7B,EAAAa,EAAAb,CAAA,IAAA,EAAAA,CAAAa,EAAAH,CAAAA,EAAA,IAAAmB,EAAAnB,CAAAA,EAAA,EAAA,CAAA,CAAAV,EAAAohB,CAAAA,MAAAnf,CAAAA,MAAA,CAAA,EAAA,CAAA,CAAAJ,EAAA,CAAA,CAAA,CAAA,CAAA,KAAA01D,CAAAA,eAAA,CAAAwO,QAAA,CAAA\/lE,EAAA,CAAA,CAAA,IAAAS,EAAA,CAAAG,EAAA,CAAAC,EAAA,KAAA,GAAAb,EAAA,EAAAD,CAAA+wB,CAAAA,MAAA,CAAA9wB,EAAA,CAAAD,CAAAy0C,CAAAA,EAAA,CAAAhiB,EAAA1B,CAAAA,MAAA,CAAA\/wB,CAAA+wB,CAAAA,MAAA,CAAA,CAAA\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\/D,CAAAA,WAAA,EAAA,CAAA,CAAA\/nD,GAAA+kD,EAAAF,CAAAA,oBAAA,CAAAzlD,CAAA0sD,CAAAA,aAAAhE,CAAAA,2BAAA,EAAA,CAAA1oD,CAAA0sD,CAAAA,aAAA\/D,CAAAA,WAAA,EAAA,CAAA;AAAAloD,GAAAqmD,EAAArB,CAAAA,oBAAA,CAAAzlD,CAAA0sD,CAAAA,aAAAhE,CAAAA,2BAAA,EAAA,CAAA1oD,CAAA0sD,CAAAA,aAAA\/D,CAAAA,WAAA,EAAA,CAAA,CAAAnoD,GAAA0mD,EAAAzB,CAAAA,oBAAA,CAAAzlD,CAAA0sD,CAAAA,aAAAhE,CAAAA,2BAAA,EAAA,CAAA1oD,CAAA0sD,CAAAA,aAAA\/D,CAAAA,WAAA,EAAA,CAAA,CAAAxmD,GAAAnC,CAAAi3D,CAAAA,KAAA\/sB,CAAAA,WAAA,EAAA,CAAA7nC,GAAA,EAAA,EAAAu\/C,EAAA,EAAA,CAAA,CAAAz\/C,EAAAD,CAAAA,MAAA,EAAAG,EAAAgE,CAAAA,IAAA,CAAAohD,EAAA,CAAA,CAAA9F,EAAA,EAAA,CAAA,CAAAx\/C,EAAAD,CAAAA,MAAA,EAAAG,EAAAgE,CAAAA,IAAA,CAAAmhD,EAAA,CAAA,CAAA,QAAA,GAAA9mD,EAAA,GAAAuE,EAAA,CAAA,EAAAyG,CAAAA,MAAA,CAAArJ,EAAA,CAAA,CAAA,IAAA,EAAA,GAAArC,CAAA4C,CAAAA,KAAAozD,CAAAA,eAAA,EAAApO,EAAA,CAAA,IAAA,EAAA,GAAA5nD,CAAA4C,CAAAA,KAAA07B,CAAAA,cAAA,EAAAwpB,EAAA,CAAA,IAAA,EAAA,GAAA9nD,CAAA4C,CAAAA,KAAA27B,CAAAA,eAAA,EAAAq2B,EAAA,CAAA5M,EAAA,CAAA,CAAA,CAAAhoD,CAAA0tB,CAAAA,KAAA6Q,CAAAA,eAAA,CAAAyuB,EAAA,CAAA,CAAAxpC,QAAAve,EAAA,CAAAinC,IAAAprC,EAAA,CAAAwlB,KAAAzlB,EAAA,CAAA6rD,cAAA1sD,CAAA0sD,CAAAA,aAAA;AAAA1Z,SAAAhzC,CAAA0tB,CAAAA,KAAA,CAAAw\/B,UAAAltD,CAAAg3D,CAAAA,sBAAAl0D,CAAAA,OAAA,CAAA,CAAA,CAAAkqD,EAAA,CAAA,CAAAxpC,QAAA,CAAAxjB,CAAAs4D,CAAAA,QAAA,EAAAjiC,SAAAqrB,CAAAA,SAAA,EAAA,CAAAn6C,KAAA,OAAA,CAAAwrC,QAAAA,QAAA,CAAA9yC,EAAA,CAAAS,EAAA,CAAA,CAAA,MAAAV,EAAAq6D,CAAAA,kBAAA,CAAA,IAAA,CAAA,CAAA,CAAApnB,gBAAA,CAAA,CAAA,CAAA,CAAA,CAAAC,iBAAA,cAAA,CAAA,CAAAlzC,CAAAs4D,CAAAA,QAAA,EAAAjiC,SAAAqrB,CAAAA,SAAA,EAAA1\/C,WAAA,CAAA4\/C,EAAA,EAAA,CAAA,CAAAz\/C,EAAAD,CAAAA,MAAA,EAAAulD,EAAA,CAAA9F,EAAA,EAAA,CAAA,CAAAx\/C,EAAAD,CAAAA,MAAA,EAAAslD,EAAA,EAAA5F,EAAA,EAAA,CAAA,CAAAz\/C,EAAAD,CAAAA,MAAA,EAAAy\/C,EAAA,EAAA,CAAA,CAAAx\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\/B,CAAAu\/B,CAAAA,QAAA,CAAA,CAAApW,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAAxqB,EAAA,CAAA,CAAA,EAAA,CAAA,CAAAy3B,UAAA,CAAA,CAAAoB,WAAA,CAAA,CAAAtB,MAAA,CAAA,CAAAC,OAAA,CAAA,CAAA,CAAA,CAAA,CAAAwE,iBAAAj8B,EAAA,CAAA69B,oBAAAr8B,EAAA,CAAA,CAAA,QAAA,CAAAhC,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAsL,QAAAC,CAAAA,aAAA,CAAA,QAAA,CAAApL,GAAAA,CAAAC,EAAA,CAAAd,EAAA,CAAAC,EAAA,CAAA,OAAAS,GAAAs3B,CAAAA,KAAA,CAAAn3B,EAAAm3B,CAAAA,KAAA,CAAAt3B,EAAAu3B,CAAAA,MAAA,CAAAp3B,EAAAo3B,CAAAA,MAAA,CAAA,CAAAlH,OAAArwB,EAAA,CAAA0\/B,MAAAv\/B,EAAAu\/B,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA5U,GAAAA,QAAA,CAAAxrB,CAAA,CAAA,CAAA,IAAAC,GAAAyrB,EAAA,CAAA1rB,CAAA,CAAA,CAAAU,GAAAV,CAAAmnE,CAAAA,QAAA,CAAAtmE,GAAA,IAAA,EAAA,GAAAH,EAAA,CAAA,WAAA,CAAAA,EAAA,CAAAI,GAAAd,CAAAonE,CAAAA,OAAA,OAAA,WAAA,GAAAvmE,EAAA,EAAA,QAAA,EAAA,MAAAC,GAAA,EAAA4lC,OAAAC,CAAAA,IAAA,CAAA,oDAAA,CAAA;AAAA,WAAA,GAAA9lC,EAAA,GAAAA,EAAA,CAAA,YAAA,EAAAC,EAAA,CAAAA,EAAA,GAAA,cAAA+P,CAAAA,IAAA,CAAAhQ,EAAA,CAAA,CAAA,GAAA,CAAA,EAAA,EAAA,IAAAoH,OAAA,CAAA,QAAA,CAAAjI,EAAA,CAAA,CAAAC,EAAAk\/C,CAAAA,MAAA,CAAA,QAAA,CAAAl\/C,EAAA,CAAA,CAAAD,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAAY,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA6Q,GAAA,QAAA,EAAA,CAAA,IAAA3R,EAAA,GAAAqC,EAAAoM,CAAAA,CAAA,EAAAvH,EAAA,EAAAM,CAAAA,IAAA,CAAAxH,QAAAA,GAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,EAAA,CAAAG,EAAA,CAAAC,EAAA,CAAAgB,EAAA,CAAAlB,EAAA,CAAAH,EAAA,CAAAD,EAAA,OAAA0G,GAAA,EAAAL,CAAAA,IAAA,CAAA,QAAA,CAAA7G,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,OAAAA,EAAAwI,CAAAA,IAAA,CAAAxI,EAAA6F,CAAAA,IAAA,EAAA,KAAA,CAAA,CAAA,MAAAnF,GAAA,CAAAT,EAAAohC,CAAAA,QAAA,CAAAxgC,EAAA,CAAAZ,EAAA+yC,CAAAA,QAAA,CAAAlyC,EAAA,CAAA,IAAA,EAAA,GAAAD,EAAA,CAAA45B,EAAA,EAAA,CAAA55B,EAAA,CAAAiB,EAAA,CAAA7B,EAAA4\/C,CAAAA,aAAA,CAAAj\/C,EAAA,CAAA6rB,EAAA,CAAA,CAAA4U,SAAA3gC,EAAA,CAAAsyC,SAAAlyC,EAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAAL,EAAA,CAAAG,EAAAygC,CAAAA,QAAA,CAAA7gC,EAAA,CAAAI,EAAAoyC,CAAAA,QAAA,CAAAhzC,EAAA+E,CAAAA,MAAA,CAAA,QAAA,CAAAg7C,EAAA,CAAAne,EAAA,CAAAnhC,EAAA,CAAA,CAAAwqB,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAAzqB,EAAA,CAAA,CAAA,EAAA,CAAA,CAAAq\/C,cAAA\/9C,EAAA,CAAA,CAAA,CAAA,CAAA;KAAA,CAAA,CAAA,KAAA,KAAA,CAAA,MAAA9B,GAAA2I,CAAAA,IAAA,EAAA,CAAA,CAAA,CAAA3I,EAAA,CAAA,CAAA,CAAA,CAAA,OAAA,SAAA,CAAAC,EAAA,CAAA,CAAA,MAAAD,EAAAyY,CAAAA,KAAA,CAAA,IAAA,CAAAxW,SAAA,CAAA,CAAA,CAAA,EAAA,CAAAolE,GAAA,CAAA,aAAA,CAAA,WAAA,CAAA,CAAAC,GAAA,CAAA,aAAA,CAAA,WAAA,CAAA,CAAAC,GAAAA,QAAA,CAAAvnE,CAAA,CAAA,CAAA,IAAAC,EAAA,CAAAS,EAAA,CAAAG,GAAAb,CAAA0jB,CAAAA,QAAA,CAAA5iB,GAAAd,CAAA8gE,CAAAA,WAAA,CAAAh\/D,GAAA9B,CAAA+1D,CAAAA,aAAA,CAAAn1D,GAAAZ,CAAAkxD,CAAAA,mBAAA,CAAA1wD,GAAAR,CAAA4tD,CAAAA,eAAA,CAAAzrD,GAAAnC,CAAA8mE,CAAAA,eAAA,CAAAzkE,GAAArC,CAAAm0D,CAAAA,gBAAA,CAAAlvD,GAAAjF,CAAAq4D,CAAAA,YAAA,CAAAl0D,GAAAnE,CAAA4tB,CAAAA,QAAAvpB,GAAAA,CAAA,IAAA,EAAA,GAAAF,EAAA,CAAAO,EAAAwJ,CAAAA,IAAA,CAAA\/J,EAAA,KAAAQ,GAAA3E,CAAAu+B,CAAAA,eAAA,CAAAv6B,GAAAhE,CAAAs+B,CAAAA,cAAA,CAAAp5B,GAAAlF,CAAAg2D,CAAAA,eAAA,CAAA7wD,GAAAnF,CAAAuzD,CAAAA,gBAAA,CAAAzsD,GAAA9G,CAAAgY,CAAAA,KAAA,CAAAjR,GAAA\/G,CAAAuH,CAAAA,IAAA,CAAAN,GAAAjH,CAAAy0D,CAAAA,iBAAA;AAAAvtD,GAAAlH,CAAA0hE,CAAAA,OAAA,CAAAt8D,GAAApF,CAAAwnE,CAAAA,YAAAniE,GAAAA,CAAA,IAAA,EAAAA,GAAAD,EAAAC,EAAAD,EAAA,KAAAW,GAAA\/F,CAAAy4D,CAAAA,sBAAAnyD,GAAAA,CAAA,IAAA,EAAAA,GAAAP,EAAAO,EAAAP,EAAA,KAAA9B,GAAAjE,CAAAipD,CAAAA,eAAA,CAAAxiD,GAAAzG,CAAA6\/D,CAAAA,SAAAv7D,GAAAA,CAAA,IAAA,EAAAA,GAAAmC,EAAAnC,EAAAmC,EAAAoM,EAAAA,CAAA,IAAA,IAAA5S,EAAA,CAAAD,CAAAyoD,CAAAA,SAAA,GAAA,IAAA,EAAA,GAAAxoD,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAAwX,CAAAA,aAAA1E,GAAAA,CAAA,CAAA0E,cAAA0T,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAAnpB,EAAAsR,CAAAA,EAAAmE,CAAAA,aAAA,CAAA,CAAA5E,CAAA,CAAA,CAAA,KAAA,EAAAA,CAAA,EAAAA,CAAA+E,CAAAA,MAAA,GAAA7E,EAAA0E,CAAAA,aAAAG,CAAAA,MAAAC,CAAAA,cAAA,EAAA,IAAA,IAAAnX,EAAA,CAAAmS,CAAA+E,CAAAA,MAAA,GAAA,IAAA,EAAA,GAAAlX,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAAmX,CAAAA,cAAA,GAAA7V,EAAAsR,CAAAA,EAAAmE,CAAAA,aAAAG,CAAAA,MAAAC,CAAAA,cAAA,CAAA,OAAA,GAAApX,EAAAojB,CAAAA,SAAA,EAAA,QAAA,EAAA,CAAA,IAAA7jB,GAAAA,QAAA,CAAAA,EAAA,CAAA,CAAA,QAAA;AAAA,MAAAA,GAAAogC,CAAAA,KAAA,EAAA,CAAA,GAAApgC,EAAAogC,CAAAA,KAAA,EAAApgC,EAAAklB,CAAAA,cAAA,EAAA,CAAA,OAAAlZ,SAAAipC,CAAAA,gBAAA,CAAA,WAAA,CAAAj1C,EAAA,CAAA,CAAAi7D,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,QAAA,EAAA,CAAAjvD,QAAAkpC,CAAAA,mBAAA,CAAA,WAAA,CAAAl1C,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAAmT,EAAA7P,CAAAA,GAAA,EAAAmQ,EAAA,CAAA,CAAAma,SAAAvpB,EAAA,CAAAwgB,SAAA,GAAA1R,EAAA7P,CAAAA,GAAA,EAAAuyD,EAAA,CAAA,CAAAnyC,SAAA7iB,EAAA,CAAAigE,YAAAhgE,EAAA,CAAAi1D,cAAAj0D,EAAA,CAAAovD,oBAAAtwD,EAAA,CAAAgtD,gBAAAptD,EAAA,CAAAsmE,gBAAA3kE,EAAA,CAAAgyD,iBAAA9xD,EAAA,CAAAg2D,aAAApzD,EAAA,CAAA2oB,SAAAvpB,EAAA,CAAAk6B,gBAAA55B,EAAA,CAAA25B,eAAAt6B,EAAA,CAAAgyD,gBAAA9wD,EAAA,CAAAquD,iBAAApuD,EAAA,CAAA6S,MAAAlR,EAAA,CAAAS,KAAAR,EAAA,CAAA0tD,kBAAAxtD,EAAA,CAAAwhD,UAAA11C,EAAA;AAAA2uD,QAAAx6D,EAAA,CAAAsgE,aAAAniE,EAAA,CAAAozD,uBAAAnyD,EAAA,CAAA2iD,gBAAAhlD,EAAA,CAAA47D,UAAAv7D,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAmjE,GAAA,GAAAhnE,EAAA4sC,CAAAA,UAAA,EAAA,QAAA,CAAArtC,CAAA,CAAAC,EAAA,CAAA,CAAA,MAAA,GAAAkT,EAAA7P,CAAAA,GAAA,EAAAikE,EAAA,CAAAp8C,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAAnrB,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA+1D,cAAA91D,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAynE,GAAAlnE,EAAA,EAAAgvC,CAAAA,IAAA,CAAAi4B,EAAA,CAAAE,QAAA,CAAA3nE,CAAA,CAAAC,EAAA,CAAA,CAAAD,CAAA8gE,CAAAA,WAAA,KAAApgE,GAAAV,CAAAyoD,CAAAA,SAAA,CAAA5nD,GAAA,IAAA,EAAA,GAAAH,EAAA,CAAA,EAAA,CAAAA,EAAA,CAAAoB,GAAAhB,EAAA,EAAA,CAAAd,CAAA,CAAAqnE,EAAA,CAAAzmE,GAAAA,EAAAX,EAAA6gE,CAAAA,WAAA,CAAA7gE,EAAAwoD,CAAAA,SAAA7nD,CAAA,KAAAH,GAAA,IAAA,EAAA,GAAAG,EAAA,CAAA,EAAA,CAAAA,EAAA,CAAAJ,GAAAM,EAAA,EAAA,CAAAb,EAAA,CAAAqnE,EAAA,CAAAtlE,GAAAA,CAAAf,MAAAY,CAAAA,IAAA,CAAAhB,EAAA,CAAA,KAAAsB,GAAAlB,MAAAY,CAAAA,IAAA,CAAApB,EAAA,CAAA,IAAAuB,EAAAE,CAAAA,MAAA,GAAAC,EAAAD,CAAAA,MAAA,CAAA,MAAA,CAAA,CAAAG,GAAAA,CAAAL,EAAAy0C,CAAAA,KAAA,CAAA,QAAA,CAAAz2C,EAAA,CAAA,CAAA,eAAA,GAAAA,EAAA,EAAAiB,MAAAY,CAAAA,IAAA,CAAAhB,EAAA4W,CAAAA,aAAA,CAAAg\/B,CAAAA,KAAA,CAAA,QAAA,CAAAz2C,EAAA,CAAA,CAAA,IAAAC,EAAA;AAAAS,EAAA,CAAAI,EAAA,CAAAgB,EAAA,OAAA,QAAA,GAAA9B,EAAA,EAAA,IAAA,EAAAa,EAAA,EAAA,IAAA,IAAAZ,EAAA,CAAAY,EAAA4W,CAAAA,aAAA,GAAA,IAAA,EAAA,GAAAxX,EAAA,EAAAA,EAAA2X,CAAAA,MAAA,EAAA,IAAA,EAAAnX,EAAA,EAAA,IAAA,IAAAC,EAAA,CAAAD,EAAAgX,CAAAA,aAAA,GAAA,IAAA,EAAA,GAAA\/W,EAAA,EAAAA,EAAAkX,CAAAA,MAAA,CAAA\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","sources":["node_modules\/@excalidraw\/excalidraw\/dist\/excalidraw.production.min.js"],"sourcesContent":["shadow$provide[582] = function(global,require,module,exports) {\nvar process = require('process');\n\/*! For license information please see excalidraw.production.min.js.LICENSE.txt *\/\n!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t(require(\"react\"),require(\"react-dom\")):\"function\"==typeof define&&define.amd?define([\"react\",\"react-dom\"],t):\"object\"==typeof exports?exports.Excalidraw=t(require(\"react\"),require(\"react-dom\")):e.Excalidraw=t(e.React,e.ReactDOM)}(self,(function(e,t){return function(){var n,r,o,a,i={7945:function(e,t,n){e.exports=n(1602)},4516:function(e){\"use strict\";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError(\"Object.assign cannot be called with null or undefined\");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String(\"abc\");if(e[5]=\"de\",\"5\"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t[\"_\"+String.fromCharCode(n)]=n;if(\"0123456789\"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(\"\"))return!1;var r={};return\"abcdefghijklmnopqrst\".split(\"\").forEach((function(e){r[e]=e})),\"abcdefghijklmnopqrst\"===Object.keys(Object.assign({},r)).join(\"\")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,l,s=o(e),c=1;c<arguments.length;c++){for(var u in i=Object(arguments[c]))n.call(i,u)&&(s[u]=i[u]);if(t){l=t(i);for(var d=0;d<l.length;d++)r.call(i,l[d])&&(s[l[d]]=i[l[d]])}}return s}},6094:function(e,t,n){\"use strict\";n(4516);var r=n(4698),o=60103;if(t.Fragment=60107,\"function\"==typeof Symbol&&Symbol.for){var a=Symbol.for;o=a(\"react.element\"),t.Fragment=a(\"react.fragment\")}var i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l=Object.prototype.hasOwnProperty,s={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,a={},c=null,u=null;for(r in void 0!==n&&(c=\"\"+n),void 0!==t.key&&(c=\"\"+t.key),void 0!==t.ref&&(u=t.ref),t)l.call(t,r)&&!s.hasOwnProperty(r)&&(a[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===a[r]&&(a[r]=t[r]);return{$$typeof:o,type:e,key:c,ref:u,props:a,_owner:i.current}}t.jsx=c,t.jsxs=c},4512:function(e,t,n){\"use strict\";e.exports=n(6094)},1602:function(e){var t=function(e){\"use strict\";var t,n=Object.prototype,r=n.hasOwnProperty,o=\"function\"==typeof Symbol?Symbol:{},a=o.iterator||\"@@iterator\",i=o.asyncIterator||\"@@asyncIterator\",l=o.toStringTag||\"@@toStringTag\";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},\"\")}catch(e){s=function(e,t,n){return e[t]=n}}function c(e,t,n,r){var o=t&&t.prototype instanceof g?t:g,a=Object.create(o.prototype),i=new M(r||[]);return a._invoke=function(e,t,n){var r=d;return function(o,a){if(r===f)throw new Error(\"Generator is already running\");if(r===h){if(\"throw\"===o)throw a;return P()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=j(i,n);if(l){if(l===m)continue;return l}}if(\"next\"===n.method)n.sent=n._sent=n.arg;else if(\"throw\"===n.method){if(r===d)throw r=h,n.arg;n.dispatchException(n.arg)}else\"return\"===n.method&&n.abrupt(\"return\",n.arg);r=f;var s=u(e,t,n);if(\"normal\"===s.type){if(r=n.done?h:p,s.arg===m)continue;return{value:s.arg,done:n.done}}\"throw\"===s.type&&(r=h,n.method=\"throw\",n.arg=s.arg)}}}(e,n,i),a}function u(e,t,n){try{return{type:\"normal\",arg:e.call(t,n)}}catch(e){return{type:\"throw\",arg:e}}}e.wrap=c;var d=\"suspendedStart\",p=\"suspendedYield\",f=\"executing\",h=\"completed\",m={};function g(){}function v(){}function b(){}var y={};y[a]=function(){return this};var x=Object.getPrototypeOf,w=x&&x(x(I([])));w&&w!==n&&r.call(w,a)&&(y=w);var k=b.prototype=g.prototype=Object.create(y);function S(e){[\"next\",\"throw\",\"return\"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,a,i,l){var s=u(e[o],e,a);if(\"throw\"!==s.type){var c=s.arg,d=c.value;return d&&\"object\"==typeof d&&r.call(d,\"__await\")?t.resolve(d.__await).then((function(e){n(\"next\",e,i,l)}),(function(e){n(\"throw\",e,i,l)})):t.resolve(d).then((function(e){c.value=e,i(c)}),(function(e){return n(\"throw\",e,i,l)}))}l(s.arg)}var o;this._invoke=function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}}function j(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,\"throw\"===n.method){if(e.iterator.return&&(n.method=\"return\",n.arg=t,j(e,n),\"throw\"===n.method))return m;n.method=\"throw\",n.arg=new TypeError(\"The iterator does not provide a 'throw' method\")}return m}var o=u(r,e.iterator,n.arg);if(\"throw\"===o.type)return n.method=\"throw\",n.arg=o.arg,n.delegate=null,m;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,\"return\"!==n.method&&(n.method=\"next\",n.arg=t),n.delegate=null,m):a:(n.method=\"throw\",n.arg=new TypeError(\"iterator result is not an object\"),n.delegate=null,m)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type=\"normal\",delete t.arg,e.completion=t}function M(e){this.tryEntries=[{tryLoc:\"root\"}],e.forEach(C,this),this.reset(!0)}function I(e){if(e){var n=e[a];if(n)return n.call(e);if(\"function\"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:P}}function P(){return{value:t,done:!0}}return v.prototype=k.constructor=b,b.constructor=v,v.displayName=s(b,l,\"GeneratorFunction\"),e.isGeneratorFunction=function(e){var t=\"function\"==typeof e&&e.constructor;return!!t&&(t===v||\"GeneratorFunction\"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,l,\"GeneratorFunction\")),e.prototype=Object.create(k),e},e.awrap=function(e){return{__await:e}},S(E.prototype),E.prototype[i]=function(){return this},e.AsyncIterator=E,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new E(c(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(k),s(k,l,\"Generator\"),k[a]=function(){return this},k.toString=function(){return\"[object Generator]\"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=I,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=t,this.tryEntries.forEach(O),!e)for(var n in this)\"t\"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if(\"throw\"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return l.type=\"throw\",l.arg=e,n.next=r,o&&(n.method=\"next\",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if(\"root\"===i.tryLoc)return o(\"end\");if(i.tryLoc<=this.prev){var s=r.call(i,\"catchLoc\"),c=r.call(i,\"finallyLoc\");if(s&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error(\"try statement without catch or finally\");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,\"finallyLoc\")&&this.prev<o.finallyLoc){var a=o;break}}a&&(\"break\"===e||\"continue\"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method=\"next\",this.next=a.finallyLoc,m):this.complete(i)},complete:function(e,t){if(\"throw\"===e.type)throw e.arg;return\"break\"===e.type||\"continue\"===e.type?this.next=e.arg:\"return\"===e.type?(this.rval=this.arg=e.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if(\"throw\"===r.type){var o=r.arg;O(n)}return o}}throw new Error(\"illegal catch attempt\")},delegateYield:function(e,n,r){return this.delegate={iterator:I(e),resultName:n,nextLoc:r},\"next\"===this.method&&(this.arg=t),m}},e}(e.exports);try{regeneratorRuntime=t}catch(e){Function(\"r\",\"regeneratorRuntime = r\")(t)}},8336:function(e,t,n){var r=n(487),o=n(4295);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},554:function(e,t,n){var r=n(487),o=n(9135);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},2789:function(e,t,n){var r=n(487),o=n(3729);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},5080:function(e,t,n){var r=n(487),o=n(4241);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},7225:function(e,t,n){var r=n(487),o=n(6029);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},778:function(e,t,n){var r=n(487),o=n(9609);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},4220:function(e,t,n){var r=n(487),o=n(2345);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},1292:function(e,t,n){var r=n(487),o=n(6578);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},196:function(e,t,n){var r=n(487),o=n(9482);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},2205:function(e,t,n){var r=n(487),o=n(7955);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},1310:function(e,t,n){var r=n(487),o=n(3195);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},3922:function(e,t,n){var r=n(487),o=n(2978);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},7096:function(e,t,n){var r=n(487),o=n(1587);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},7117:function(e,t,n){var r=n(487),o=n(9478);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},1106:function(e,t,n){var r=n(487),o=n(7369);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},3336:function(e,t,n){var r=n(487),o=n(1434);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},694:function(e,t,n){var r=n(487),o=n(5644);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},8328:function(e,t,n){var r=n(487),o=n(6843);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},8051:function(e,t,n){var r=n(487),o=n(8461);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},4301:function(e,t,n){var r=n(487),o=n(9935);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},9966:function(e,t,n){var r=n(487),o=n(532);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},4623:function(e,t,n){var r=n(487),o=n(3874);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},1528:function(e,t,n){var r=n(487),o=n(2681);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},518:function(e,t,n){var r=n(487),o=n(6759);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},9757:function(e,t,n){var r=n(487),o=n(9650);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},5422:function(e,t,n){var r=n(487),o=n(2044);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},6781:function(e,t,n){var r=n(487),o=n(6626);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},580:function(e,t,n){var r=n(487),o=n(6359);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},4285:function(e,t,n){var r=n(487),o=n(9915);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},3313:function(e,t,n){var r=n(487),o=n(9310);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},8635:function(e,t,n){var r=n(487),o=n(6464);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},487:function(e,t,n){\"use strict\";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function l(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],o=0;o<e.length;o++){var a=e[o],s=t.base?a[0]+t.base:a[0],c=n[s]||0,u=\"\".concat(s,\" \").concat(c);n[s]=c+1;var d=l(u),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(i[d].references++,i[d].updater(p)):i.push({identifier:u,updater:g(p,t),references:1}),r.push(u)}return r}function c(e){var t=document.createElement(\"style\"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),\"function\"==typeof e.insert)e.insert(t);else{var i=a(e.insert||\"head\");if(!i)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");i.appendChild(t)}return t}var u,d=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join(\"\\n\")});function p(e,t,n,r){var o=n?\"\":r.media?\"@media \".concat(r.media,\" {\").concat(r.css,\"}\"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function f(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o?e.setAttribute(\"media\",o):e.removeAttribute(\"media\"),a&&\"undefined\"!=typeof btoa&&(r+=\"\\n\/*# sourceMappingURL=data:application\/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a)))),\" *\/\")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function g(e,t){var n,r,o;if(t.singleton){var a=m++;n=h||(h=c(t)),r=p.bind(null,n,a,!1),o=p.bind(null,n,a,!0)}else n=c(t),r=f.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||\"boolean\"==typeof t.singleton||(t.singleton=o());var n=s(e=e||[],t);return function(e){if(e=e||[],\"[object Array]\"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=l(n[r]);i[o].references--}for(var a=s(e,t),c=0;c<n.length;c++){var u=l(n[c]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}n=a}}}},788:function(e,t,n){var r={\".\/ar-SA.json\":[7822,558],\".\/bg-BG.json\":[1203,384],\".\/ca-ES.json\":[510,351],\".\/cs-CZ.json\":[7605,387],\".\/da-DK.json\":[2392,617],\".\/de-DE.json\":[2853,43],\".\/el-GR.json\":[9876,526],\".\/en.json\":[1463],\".\/es-ES.json\":[2264,317],\".\/fa-IR.json\":[3747,710],\".\/fi-FI.json\":[9490,472],\".\/fr-FR.json\":[7830,364],\".\/he-IL.json\":[1994,262],\".\/hi-IN.json\":[4646,933],\".\/hu-HU.json\":[6373,661],\".\/id-ID.json\":[3247,491],\".\/it-IT.json\":[3257,465],\".\/ja-JP.json\":[198,137],\".\/kab-KAB.json\":[228,164],\".\/kk-KZ.json\":[8972,649],\".\/ko-KR.json\":[7596,60],\".\/lv-LV.json\":[2327,899],\".\/my-MM.json\":[7704,242],\".\/nb-NO.json\":[1167,246],\".\/nl-NL.json\":[290,196],\".\/nn-NO.json\":[4481,920],\".\/oc-FR.json\":[2284,565],\".\/pa-IN.json\":[6773,280],\".\/percentages.json\":[4451],\".\/pl-PL.json\":[3661,852],\".\/pt-BR.json\":[8881,381],\".\/pt-PT.json\":[5622,149],\".\/ro-RO.json\":[2013,752],\".\/ru-RU.json\":[2253,869],\".\/sk-SK.json\":[4570,401],\".\/sv-SE.json\":[6006,698],\".\/tr-TR.json\":[7315,213],\".\/uk-UA.json\":[334,583],\".\/zh-CN.json\":[1037,304],\".\/zh-TW.json\":[931,62]};function o(e){if(!n.o(r,e))return Promise.resolve().then((function(){var t=new Error(\"Cannot find module '\"+e+\"'\");throw t.code=\"MODULE_NOT_FOUND\",t}));var t=r[e],o=t[0];return Promise.all(t.slice(1).map(n.e)).then((function(){return n.t(o,19)}))}o.keys=function(){return Object.keys(r)},o.id=788,e.exports=o},9713:function(e){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},6479:function(e,t,n){var r=n(7316);e.exports=function(e,t){if(null==e)return{};var n,o,a=r(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}},7316:function(e){e.exports=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}},4295:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r),a=n(1667),i=n.n(a),l=n(7464),s=n(9638),c=o()((function(e){return e[1]})),u=i()(l.Z),d=i()(s.Z);c.push([e.id,'@font-face{font-family:\"Virgil\";src:url('+u+');font-display:swap}@font-face{font-family:\"Cascadia\";src:url('+d+\");font-display:swap}\",\"\"]),t.default=c},9135:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\".excalidraw .ActiveFile .ActiveFile__fileName{display:flex;align-items:center}.excalidraw .ActiveFile .ActiveFile__fileName span{text-overflow:ellipsis;overflow:hidden;white-space:nowrap;width:9.3em}.excalidraw .ActiveFile .ActiveFile__fileName svg{width:1.15em;-webkit-margin-end:.3em;margin-inline-end:.3em;-webkit-transform:scaleY(0.9);transform:scaleY(0.9)}\",\"\"]),t.default=o},3729:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Avatar{width:2.5rem;height:2.5rem;border-radius:1.25rem;display:flex;justify-content:center;align-items:center;color:#fff;cursor:pointer;font-size:.8rem;font-weight:500}\",\"\"]),t.default=o},4241:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Card{display:flex;flex-direction:column;align-items:center;max-width:290px;margin:1em;text-align:center}.excalidraw .Card .Card-icon{font-size:2.6em;display:flex;flex:0 0 auto;padding:1.4rem;border-radius:50%;background:var(--card-color);color:#fff}.excalidraw .Card .Card-icon svg{width:2.8rem;height:2.8rem}.excalidraw .Card .Card-details{font-size:.96em;min-height:90px;padding:0 1em;margin-bottom:auto}.excalidraw .Card .Card-button.ToolIcon_type_button{height:2.5rem;margin-top:1em;margin-bottom:.3em;background-color:var(--card-color)}.excalidraw .Card .Card-button.ToolIcon_type_button:hover{background-color:var(--card-color-darker)}.excalidraw .Card .Card-button.ToolIcon_type_button:active{background-color:var(--card-color-darkest)}.excalidraw .Card .Card-button.ToolIcon_type_button .ToolIcon__label{color:#fff}\",\"\"]),t.default=o},6029:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Checkbox{margin:4px .3em;display:flex;align-items:center;cursor:pointer;-webkit-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.excalidraw .Checkbox:hover:not(.is-checked) .Checkbox-box:not(:focus){box-shadow:0 0 0 2px #4dabf7}.excalidraw .Checkbox:hover:not(.is-checked) .Checkbox-box:not(:focus) svg{display:block;opacity:.3}.excalidraw .Checkbox:active .Checkbox-box{box-shadow:0 0 2px 1px inset #1c7ed6 !important}.excalidraw .Checkbox:hover .Checkbox-box{background-color:rgba(208,235,255,.2)}.excalidraw .Checkbox.is-checked .Checkbox-box{background-color:#d0ebff}.excalidraw .Checkbox.is-checked .Checkbox-box svg{display:block}.excalidraw .Checkbox.is-checked:hover .Checkbox-box{background-color:#a5d8ff}.excalidraw .Checkbox .Checkbox-box{width:22px;height:22px;padding:0;flex:0 0 auto;margin:0 1em;display:flex;align-items:center;justify-content:center;box-shadow:0 0 0 2px #1c7ed6;background-color:transparent;border-radius:4px;color:#1c7ed6}.excalidraw .Checkbox .Checkbox-box:focus{box-shadow:0 0 0 3px #1c7ed6}.excalidraw .Checkbox .Checkbox-box svg{display:none;width:16px;height:16px;stroke-width:3px}.excalidraw .Checkbox .Checkbox-label{display:flex;align-items:center}.excalidraw .Checkbox .excalidraw-tooltip-icon{width:1em;height:1em}\",\"\"]),t.default=o},9609:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .CollabButton.is-collaborating{background-color:var(--button-special-active-bg-color)}.excalidraw .CollabButton.is-collaborating .ToolIcon__icon svg,.excalidraw .CollabButton.is-collaborating .ToolIcon__label{color:var(--icon-green-fill-color)}.excalidraw .CollabButton-collaborators{min-width:1em;position:absolute;bottom:-5px;padding:3px;border-radius:50%;background-color:#40c057;color:#fff;font-size:.7em;font-family:var(--ui-font)}:root[dir=ltr] .excalidraw .CollabButton-collaborators{right:-5px}:root[dir=rtl] .excalidraw .CollabButton-collaborators{left:-5px}\",\"\"]),t.default=o},2345:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,':export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .color-picker{background:var(--popup-bg-color);border:0 solid rgba(255,255,255,.25);box-shadow:rgba(0,0,0,.25) 0 1px 4px;border-radius:4px;position:absolute}:root[dir=ltr] .excalidraw .color-picker{left:-5.5px}:root[dir=rtl] .excalidraw .color-picker{right:-5.5px}.excalidraw .color-picker-control-container{display:grid;grid-template-columns:auto 1fr;align-items:center}.excalidraw .color-picker-triangle{width:0;height:0;border-style:solid;border-width:0 9px 10px;border-color:transparent transparent var(--popup-bg-color);position:absolute;top:-10px}:root[dir=ltr] .excalidraw .color-picker-triangle{left:12px}:root[dir=rtl] .excalidraw .color-picker-triangle{right:12px}.excalidraw .color-picker-triangle-shadow{border-color:transparent transparent rgba(0,0,0,.1);top:-11px}.excalidraw .color-picker-content{padding:.5rem;display:grid;grid-template-columns:repeat(5, auto);grid-gap:.5rem;border-radius:4px}.excalidraw .color-picker-content:focus{outline:none;box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .color-picker-content .color-input-container{grid-column:1\/span 5}.excalidraw .color-picker-swatch{position:relative;height:1.875rem;width:1.875rem;cursor:pointer;border-radius:4px;margin:0;box-sizing:border-box;border:1px solid #ddd;background-color:currentColor !important;-webkit-filter:var(--theme-filter);filter:var(--theme-filter)}.excalidraw .color-picker-swatch:focus{box-shadow:0 0 4px 1px currentColor;border-color:var(--select-highlight-color)}.excalidraw .color-picker-transparent{border-radius:4px;box-shadow:rgba(0,0,0,.1) 0 0 0 1px inset;position:absolute;top:0;right:0;bottom:0;left:0}.excalidraw .color-picker-transparent,.excalidraw .color-picker-label-swatch{background:url(\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAAMUlEQVQ4T2NkYGAQYcAP3uCTZhw1gGGYhAGBZIA\/nYDCgBDAm9BGDWAAJyRCgLaBCAAgXwixzAS0pgAAAABJRU5ErkJggg==\") left center}.excalidraw .color-picker-hash{background:var(--input-border-color);height:1.875rem;width:1.875rem;color:var(--input-label-color);display:flex;align-items:center;justify-content:center;position:relative}:root[dir=ltr] .excalidraw .color-picker-hash{border-radius:4px 0 0 4px}:root[dir=rtl] .excalidraw .color-picker-hash{border-radius:0 4px 4px 0}.excalidraw .color-input-container:focus-within .color-picker-hash{box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .color-input-container:focus-within .color-picker-hash::before,.excalidraw .color-input-container:focus-within .color-picker-hash::after{content:\"\";width:1px;height:100%;position:absolute;top:0}.excalidraw .color-input-container:focus-within .color-picker-hash::before{background:var(--input-border-color)}:root[dir=ltr] .excalidraw .color-input-container:focus-within .color-picker-hash::before{right:-1px}:root[dir=rtl] .excalidraw .color-input-container:focus-within .color-picker-hash::before{left:-1px}.excalidraw .color-input-container:focus-within .color-picker-hash::after{background:var(--input-bg-color)}:root[dir=ltr] .excalidraw .color-input-container:focus-within .color-picker-hash::after{right:-2px}:root[dir=rtl] .excalidraw .color-input-container:focus-within .color-picker-hash::after{left:-2px}.excalidraw .color-input-container{display:flex}.excalidraw .color-picker-input{width:11ch;margin:0;font-size:1rem;background-color:var(--input-bg-color);color:var(--text-primary-color);border:0;outline:none;height:1.75em;box-shadow:var(--input-border-color) 0 0 0 1px inset;float:left;padding:1px;-webkit-padding-start:.5em;padding-inline-start:.5em;-webkit-appearance:none;appearance:none}:root[dir=ltr] .excalidraw .color-picker-input{border-radius:0 4px 4px 0}:root[dir=rtl] .excalidraw .color-picker-input{border-radius:4px 0 0 4px}.excalidraw .color-picker-label-swatch{height:1.875rem;width:1.875rem;-webkit-margin-end:.25rem;margin-inline-end:.25rem;border:1px solid #dee2e6;position:relative;overflow:hidden;background-color:transparent !important;-webkit-filter:var(--theme-filter);filter:var(--theme-filter)}.excalidraw .color-picker-label-swatch:after{content:\"\";position:absolute;top:0;left:0;width:100%;height:100%;background:var(--swatch-color)}.excalidraw .color-picker-keybinding{position:absolute;bottom:2px;font-size:.7em}:root[dir=ltr] .excalidraw .color-picker-keybinding{right:2px}:root[dir=rtl] .excalidraw .color-picker-keybinding{left:2px}.excalidraw--mobile.excalidraw .color-picker-keybinding{display:none}.excalidraw .color-picker-type-canvasBackground .color-picker-keybinding{color:#aaa}.excalidraw .color-picker-type-elementBackground .color-picker-keybinding{color:#fff}.excalidraw .color-picker-swatch[aria-label=transparent] .color-picker-keybinding{color:#aaa}.excalidraw .color-picker-type-elementStroke .color-picker-keybinding{color:#d4d4d4}.excalidraw.theme--dark .color-picker-type-elementBackground .color-picker-keybinding{color:#000}.excalidraw.theme--dark .color-picker-swatch[aria-label=transparent] .color-picker-keybinding{color:#000}',\"\"]),t.default=o},6578:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,':export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .context-menu{position:relative;border-radius:4px;box-shadow:0 3px 10px rgba(0,0,0,.2);padding:0;list-style:none;-webkit-user-select:none;user-select:none;margin:-0.25rem 0 0 .125rem;padding:.5rem 0;background-color:var(--popup-secondary-bg-color);border:1px solid var(--button-gray-3);cursor:default}.excalidraw .context-menu button{color:var(--popup-text-color)}.excalidraw .context-menu-option{position:relative;width:100%;min-width:9.5rem;margin:0;padding:.25rem 1rem .25rem 1.25rem;text-align:start;border-radius:0;background-color:transparent;border:none;white-space:nowrap;display:grid;grid-template-columns:1fr .2fr;align-items:center}.excalidraw .context-menu-option.checkmark::before{position:absolute;left:6px;margin-bottom:1px;content:\"\u2713\"}.excalidraw .context-menu-option.dangerous .context-menu-option__label{color:#f03e3e}.excalidraw .context-menu-option .context-menu-option__label{justify-self:start;-webkit-margin-end:20px;margin-inline-end:20px}.excalidraw .context-menu-option .context-menu-option__shortcut{justify-self:end;opacity:.6;font-family:inherit;font-size:.7rem}.excalidraw .context-menu-option:hover{color:var(--popup-bg-color);background-color:var(--select-highlight-color)}.excalidraw .context-menu-option:hover.dangerous{background-color:#fa5252}.excalidraw .context-menu-option:hover.dangerous .context-menu-option__label{color:var(--popup-bg-color)}.excalidraw .context-menu-option:focus{z-index:1}.excalidraw--mobile.excalidraw .context-menu-option{display:block}.excalidraw--mobile.excalidraw .context-menu-option .context-menu-option__label{-webkit-margin-end:0;margin-inline-end:0}.excalidraw--mobile.excalidraw .context-menu-option .context-menu-option__shortcut{display:none}.excalidraw .context-menu-option-separator{border:none;border-top:1px solid #adb5bd}',\"\"]),t.default=o},9482:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Dialog{-webkit-user-select:text;user-select:text;cursor:auto}.excalidraw .Dialog__title{display:grid;align-items:center;margin-top:0;grid-template-columns:1fr calc(var(--space-factor) * 7);grid-gap:var(--metric);padding:calc(var(--space-factor) * 2);text-align:center;font-variant:small-caps;font-size:1.2em}.excalidraw .Dialog__titleContent{flex:1}.excalidraw .Dialog .Modal__close{color:var(--icon-fill-color);margin:0}.excalidraw .Dialog__content{padding:0 16px 16px}.excalidraw--mobile.excalidraw .Dialog{--metric: calc(var(--space-factor) * 4);--inset-left: max(var(--metric), var(--sal));--inset-right: max(var(--metric), var(--sar))}.excalidraw--mobile.excalidraw .Dialog__title{grid-template-columns:calc(var(--space-factor) * 7) 1fr calc( var(--space-factor) * 7 );position:-webkit-sticky;position:sticky;top:0;padding:calc(var(--space-factor) * 2);background:var(--island-bg-color);font-size:1.25em;box-sizing:border-box;border-bottom:1px solid var(--button-gray-2);z-index:1}.excalidraw--mobile.excalidraw .Dialog__titleContent{text-align:center}.excalidraw--mobile.excalidraw .Dialog .Island{width:100vw;height:100%;box-sizing:border-box;overflow-y:auto;padding-left:max(calc(var(--padding) * var(--space-factor)), var(--sal));padding-right:max(calc(var(--padding) * var(--space-factor)), var(--sar));padding-bottom:max(calc(var(--padding) * var(--space-factor)), var(--sab))}.excalidraw--mobile.excalidraw .Dialog .Modal__close{order:-1}\",\"\"]),t.default=o},7955:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,':export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .ExportDialog__preview{--preview-padding: calc(var(--space-factor) * 4);background:url(\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAAMUlEQVQ4T2NkYGAQYcAP3uCTZhw1gGGYhAGBZIA\/nYDCgBDAm9BGDWAAJyRCgLaBCAAgXwixzAS0pgAAAABJRU5ErkJggg==\") left center;text-align:center;padding:var(--preview-padding);margin-bottom:calc(var(--space-factor) * 3)}.excalidraw .ExportDialog__preview canvas{max-width:calc(100% - var(--preview-padding) * 2);max-height:25rem}.excalidraw.theme--dark .ExportDialog__preview canvas{-webkit-filter:none;filter:none}.excalidraw .ExportDialog__actions{width:100%;display:flex;grid-gap:calc(var(--space-factor) * 2);align-items:top;justify-content:space-between}.excalidraw--mobile.excalidraw .ExportDialog{display:flex;flex-direction:column}.excalidraw--mobile.excalidraw .ExportDialog__actions{flex-direction:column;align-items:center}.excalidraw--mobile.excalidraw .ExportDialog__actions>*{margin-bottom:calc(var(--space-factor) * 3)}.excalidraw--mobile.excalidraw .ExportDialog__preview canvas{max-height:30vh}.excalidraw--mobile.excalidraw .ExportDialog__dialog,.excalidraw--mobile.excalidraw .ExportDialog__dialog .Island{height:100%;box-sizing:border-box}.excalidraw--mobile.excalidraw .ExportDialog__dialog .Island{overflow-y:auto}.excalidraw .ExportDialog--json .ExportDialog-cards{display:grid;grid-template-columns:repeat(auto-fit, minmax(200px, 1fr));justify-items:center;row-gap:2em}@media(max-width: 460px){.excalidraw .ExportDialog--json .ExportDialog-cards{grid-template-columns:repeat(auto-fit, minmax(240px, 1fr))}.excalidraw .ExportDialog--json .ExportDialog-cards .Card-details{min-height:40px}}.excalidraw .ExportDialog--json .ExportDialog-cards .ProjectName{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;margin:1em auto;align-items:flex-start;flex-direction:column}.excalidraw .ExportDialog--json .ExportDialog-cards .ProjectName .TextInput{width:auto}.excalidraw .ExportDialog--json .ExportDialog-cards .ProjectName-label{margin:.625em 0;font-weight:bold}.excalidraw button.ExportDialog-imageExportButton{width:5rem;height:5rem;margin:0 .2em;border-radius:1rem;background-color:var(--button-color);box-shadow:0 3px 5px -1px rgba(0,0,0,.28),0 6px 10px 0 rgba(0,0,0,.14);font-family:Cascadia;font-size:1.8em;color:#fff}.excalidraw button.ExportDialog-imageExportButton:hover{background-color:var(--button-color-darker)}.excalidraw button.ExportDialog-imageExportButton:active{background-color:var(--button-color-darkest);box-shadow:none}.excalidraw button.ExportDialog-imageExportButton svg{width:.9em}',\"\"]),t.default=o},3195:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\".excalidraw .FixedSideContainer{position:absolute;pointer-events:none}.excalidraw .FixedSideContainer>*{pointer-events:all}.excalidraw .FixedSideContainer_side_top{left:var(--space-factor);top:var(--space-factor);right:var(--space-factor);z-index:2}.excalidraw .FixedSideContainer_side_top.zen-mode{right:42px}\",\"\"]),t.default=o},2978:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .HelpDialog h3{border-bottom:1px solid var(--button-gray-2);padding-bottom:4px}.excalidraw .HelpDialog--island{border:1px solid var(--button-gray-2);margin-bottom:16px}.excalidraw .HelpDialog--island-title{margin:0;padding:4px;background-color:var(--button-gray-1);text-align:center}.excalidraw .HelpDialog--shortcut{border-top:1px solid var(--button-gray-2)}.excalidraw .HelpDialog--key{word-break:keep-all;border:1px solid var(--button-gray-2);padding:2px 8px;margin:auto 4px;background-color:var(--button-gray-1);border-radius:2px;font-size:.8em;min-height:26px;box-sizing:border-box;display:flex;align-items:center;font-family:inherit}.excalidraw .HelpDialog--header{display:flex;flex-direction:row;justify-content:space-evenly;margin-bottom:32px;padding-bottom:16px}.excalidraw .HelpDialog--btn{border:1px solid var(--link-color);padding:8px 32px;border-radius:4px}.excalidraw .HelpDialog--btn:hover{text-decoration:none}\",\"\"]),t.default=o},1587:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .HintViewer{pointer-events:none;box-sizing:border-box;position:absolute;display:flex;justify-content:center;left:0;top:100%;max-width:100%;width:100%;margin-top:6px;text-align:center;color:#868e96;font-size:.8rem}.excalidraw--mobile.excalidraw .HintViewer{position:static;padding-right:2em}.excalidraw .HintViewer>span{padding:.2rem .4rem;background-color:var(--overlay-bg-color);border-radius:4px}\",\"\"]),t.default=o},9478:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,':export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .picker-container{display:inline-block;box-sizing:border-box;margin-right:.25rem}.excalidraw .picker{background:var(--popup-bg-color);border:0 solid rgba(255,255,255,.25);box-shadow:rgba(0,0,0,.25) 0 1px 4px;border-radius:4px;position:absolute}.excalidraw .picker-container button,.excalidraw .picker button{position:relative;display:flex;align-items:center;justify-content:center}.excalidraw .picker-container button:focus,.excalidraw .picker button:focus{outline:transparent;background-color:var(--button-gray-2)}.excalidraw .picker-container button:focus svg,.excalidraw .picker button:focus svg{opacity:1}.excalidraw .picker-container button:hover,.excalidraw .picker button:hover{background-color:var(--button-gray-2)}.excalidraw .picker-container button:active,.excalidraw .picker button:active{background-color:var(--button-gray-3)}.excalidraw .picker-container button:disabled,.excalidraw .picker button:disabled{cursor:not-allowed}.excalidraw .picker-container button svg,.excalidraw .picker button svg{margin:0;width:36px;height:18px;opacity:.6;pointer-events:none}.excalidraw .picker button{padding:.25rem .28rem .35rem .25rem}.excalidraw .picker-triangle{width:0;height:0;position:relative;top:-10px;z-index:10}:root[dir=ltr] .excalidraw .picker-triangle{left:12px}:root[dir=rtl] .excalidraw .picker-triangle{right:12px}.excalidraw .picker-triangle:before{content:\"\";position:absolute;border-style:solid;border-width:0 9px 10px;border-color:transparent transparent rgba(0,0,0,.1);top:-1px}.excalidraw .picker-triangle:after{content:\"\";position:absolute;border-style:solid;border-width:0 9px 10px;border-color:transparent transparent var(--popup-bg-color)}.excalidraw .picker-content{padding:.5rem;display:grid;grid-auto-flow:column;grid-gap:.5rem;border-radius:4px}:root[dir=rtl] .excalidraw .picker-content{padding:.4rem}.excalidraw .picker-keybinding{position:absolute;bottom:2px;font-size:.7em;color:var(--keybinding-color)}:root[dir=ltr] .excalidraw .picker-keybinding{right:2px}:root[dir=rtl] .excalidraw .picker-keybinding{left:2px}.excalidraw--mobile.excalidraw .picker-keybinding{display:none}.excalidraw .picker-type-canvasBackground .picker-keybinding{color:#aaa}.excalidraw .picker-type-elementBackground .picker-keybinding{color:#fff}.excalidraw .picker-swatch[aria-label=transparent] .picker-keybinding{color:#aaa}.excalidraw .picker-type-elementStroke .picker-keybinding{color:#d4d4d4}.excalidraw.theme--dark .picker-type-elementBackground .picker-keybinding{color:#000}.excalidraw.theme--dark .picker-swatch[aria-label=transparent] .picker-keybinding{color:#000}',\"\"]),t.default=o},7369:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\".excalidraw .Island{--padding: 0;background-color:var(--island-bg-color);box-shadow:var(--shadow-island);border-radius:4px;padding:calc(var(--padding) * var(--space-factor));position:relative;transition:box-shadow .5s ease-in-out}.excalidraw .Island.zen-mode{box-shadow:none}\",\"\"]),t.default=o},1434:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\".excalidraw .layer-ui__library{margin:auto;display:flex;align-items:center;justify-content:center}.excalidraw .layer-ui__library .layer-ui__library-header{display:flex;align-items:center;width:100%;margin:2px 0}.excalidraw .layer-ui__library .layer-ui__library-header button{margin:0 2px}.excalidraw .layer-ui__library .layer-ui__library-header a{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-padding-end:18px;padding-inline-end:18px;white-space:nowrap}.excalidraw .layer-ui__library-message{padding:10px 20px;max-width:200px}.excalidraw .layer-ui__library-items{max-height:50vh;overflow:auto}.excalidraw .layer-ui__wrapper{z-index:var(--zIndex-layerUI)}.excalidraw .layer-ui__wrapper__top-right{display:flex}.excalidraw .layer-ui__wrapper__footer{width:100%}.excalidraw .layer-ui__wrapper__footer-right{z-index:100;display:flex}.excalidraw .layer-ui__wrapper .zen-mode-transition{transition:-webkit-transform .5s ease-in-out;transition:transform .5s ease-in-out;transition:transform .5s ease-in-out, -webkit-transform .5s ease-in-out}:root[dir=ltr] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-left{-webkit-transform:translate(-999px, 0);transform:translate(-999px, 0)}:root[dir=ltr] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-right{-webkit-transform:translate(999px, 0);transform:translate(999px, 0)}:root[dir=rtl] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-left{-webkit-transform:translate(999px, 0);transform:translate(999px, 0)}:root[dir=rtl] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-right{-webkit-transform:translate(-999px, 0);transform:translate(-999px, 0)}:root[dir=ltr] .excalidraw .layer-ui__wrapper .zen-mode-transition.layer-ui__wrapper__footer-left--transition-left{-webkit-transform:translate(-76px, 0);transform:translate(-76px, 0)}:root[dir=rtl] .excalidraw .layer-ui__wrapper .zen-mode-transition.layer-ui__wrapper__footer-left--transition-left{-webkit-transform:translate(76px, 0);transform:translate(76px, 0)}.excalidraw .layer-ui__wrapper .zen-mode-transition.layer-ui__wrapper__footer-left--transition-bottom{-webkit-transform:translate(0, 92px);transform:translate(0, 92px)}.excalidraw .layer-ui__wrapper .disable-zen-mode{height:30px;position:absolute;bottom:10px;font-size:10px;padding:10px;font-weight:500;opacity:0;visibility:hidden;transition:visibility 0s linear 0s,opacity .5s}[dir=ltr] .excalidraw .layer-ui__wrapper .disable-zen-mode{right:15px}[dir=rtl] .excalidraw .layer-ui__wrapper .disable-zen-mode{left:15px}.excalidraw .layer-ui__wrapper .disable-zen-mode--visible{opacity:1;visibility:visible;transition:visibility 0s linear 300ms,opacity .5s;transition-delay:.8s}.excalidraw .layer-ui__wrapper .layer-ui__wrapper__footer-center{pointer-events:none}.excalidraw .layer-ui__wrapper .layer-ui__wrapper__footer-center>*{pointer-events:all}.excalidraw .layer-ui__wrapper .layer-ui__wrapper__footer-left,.excalidraw .layer-ui__wrapper .layer-ui__wrapper__footer-right,.excalidraw .layer-ui__wrapper .disable-zen-mode--visible{pointer-events:all}.excalidraw .layer-ui__wrapper .layer-ui__wrapper__footer-left{margin-bottom:.2em}.excalidraw .layer-ui__wrapper .layer-ui__wrapper__footer-right{margin-top:auto;margin-bottom:auto;-webkit-margin-end:1em;margin-inline-end:1em}\",\"\"]),t.default=o},5644:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\".excalidraw .library-unit{align-items:center;border:1px solid var(--button-gray-2);display:flex;justify-content:center;position:relative;width:63px;height:63px}.excalidraw .library-unit__dragger{display:flex;height:100%;width:100%}.excalidraw .library-unit__dragger>svg{-webkit-filter:var(--theme-filter);filter:var(--theme-filter);flex-grow:1;max-height:100%;max-width:100%}.excalidraw .library-unit__removeFromLibrary,.excalidraw .library-unit__removeFromLibrary:hover,.excalidraw .library-unit__removeFromLibrary:active{align-items:center;background:none;border:none;color:var(--icon-fill-color);display:flex;justify-content:center;margin:0;padding:0;position:absolute;right:5px;top:5px}.excalidraw .library-unit__removeFromLibrary>svg{height:16px;width:16px}.excalidraw .library-unit__pulse{-webkit-transform:scale(1);transform:scale(1);-webkit-animation:library-unit__pulse-animation 1s ease-in infinite;animation:library-unit__pulse-animation 1s ease-in infinite}.excalidraw .library-unit__adder{position:absolute;left:50%;top:50%;width:20px;height:20px;margin-left:-10px;margin-top:-10px;pointer-events:none}.excalidraw .library-unit__active{cursor:pointer}@-webkit-keyframes library-unit__pulse-animation{0%{-webkit-transform:scale(0.95);transform:scale(0.95)}50%{-webkit-transform:scale(1);transform:scale(1)}100%{-webkit-transform:scale(0.95);transform:scale(0.95)}}@keyframes library-unit__pulse-animation{0%{-webkit-transform:scale(0.95);transform:scale(0.95)}50%{-webkit-transform:scale(1);transform:scale(1)}100%{-webkit-transform:scale(0.95);transform:scale(0.95)}}\",\"\"]),t.default=o},6843:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw.excalidraw-modal-container{position:absolute;z-index:10}.excalidraw .Modal{position:absolute;top:0;left:0;right:0;bottom:0;display:flex;align-items:center;justify-content:center;overflow:auto;padding:calc(var(--space-factor) * 10)}.excalidraw .Modal__background{position:absolute;top:0;left:0;right:0;bottom:0;z-index:1;background-color:rgba(0,0,0,.7)}.excalidraw .Modal__content{position:relative;z-index:2;width:100%;max-width:var(--max-width);max-height:100%;opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px);-webkit-animation:Modal__content_fade-in .1s ease-out .05s forwards;animation:Modal__content_fade-in .1s ease-out .05s forwards;position:relative;overflow-y:auto;background:var(--island-bg-color);border:1px solid var(--dialog-border-color);box-shadow:0 2px 10px rgba(0,0,0,.25);border-radius:6px;box-sizing:border-box}.excalidraw .Modal__content:focus{outline:none}.excalidraw--mobile.excalidraw .Modal__content{max-width:100%;border:0;border-radius:0}@-webkit-keyframes Modal__content_fade-in{from{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}to{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes Modal__content_fade-in{from{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}to{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}.excalidraw .Modal__close{width:calc(var(--space-factor) * 7);height:calc(var(--space-factor) * 7);display:flex;align-items:center;justify-content:center}.excalidraw .Modal__close svg{height:calc(var(--space-factor) * 5)}.excalidraw--mobile.excalidraw .Modal{padding:0}.excalidraw--mobile.excalidraw .Modal__content{position:absolute;top:0;left:0;right:0;bottom:0}\",\"\"]),t.default=o},8461:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw--mobile.excalidraw .PasteChartDialog .Island{display:flex;flex-direction:column}.excalidraw .PasteChartDialog .container{display:flex;align-items:center;justify-content:space-around;flex-wrap:wrap}.excalidraw--mobile.excalidraw .PasteChartDialog .container{flex-direction:column;justify-content:center}.excalidraw .PasteChartDialog .ChartPreview{margin:8px;text-align:center;width:192px;height:128px;border-radius:2px;padding:1px;border:1px solid #ced4da;display:flex;align-items:center;justify-content:center;background:transparent}.excalidraw .PasteChartDialog .ChartPreview div{display:inline-block}.excalidraw .PasteChartDialog .ChartPreview svg{max-height:120px;max-width:186px}.excalidraw .PasteChartDialog .ChartPreview:hover{padding:0;border:2px solid #339af0}\",\"\"]),t.default=o},9935:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\".excalidraw .popover{position:absolute;z-index:10}\",\"\"]),t.default=o},532:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\".ProjectName{margin:auto;display:flex;align-items:center}.ProjectName .TextInput{height:calc(1rem - 3px);width:200px;overflow:hidden;text-align:center;margin-left:8px;text-overflow:ellipsis}.ProjectName .TextInput--readonly{background:none;border:none;width:auto;max-width:200px;padding-left:2px}.ProjectName .TextInput--readonly:hover{background:none}\",\"\"]),t.default=o},3874:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\".excalidraw .Stack{--gap: 0;display:grid;gap:calc(var(--space-factor) * var(--gap))}.excalidraw .Stack_vertical{grid-template-columns:auto;grid-auto-flow:row;grid-auto-rows:-webkit-min-content;grid-auto-rows:min-content}.excalidraw .Stack_horizontal{grid-template-rows:auto;grid-auto-flow:column;grid-auto-columns:-webkit-min-content;grid-auto-columns:min-content}\",\"\"]),t.default=o},2681:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Stats{position:absolute;top:64px;right:12px;font-size:12px;z-index:10}.excalidraw .Stats h3{margin:0 24px 8px 0;white-space:nowrap}.excalidraw .Stats .close{float:right;height:16px;width:16px;cursor:pointer}.excalidraw .Stats .close svg{width:100%;height:100%}.excalidraw .Stats table{width:100%}.excalidraw .Stats table th{border-bottom:1px solid var(--input-border-color);padding:4px}.excalidraw .Stats table tr td:nth-child(2){min-width:24px;text-align:right}:root[dir=rtl] .excalidraw .Stats{left:12px;right:initial}:root[dir=rtl] .excalidraw .Stats h3{margin:0 0 8px 24px}:root[dir=rtl] .excalidraw .Stats .close{float:left}\",\"\"]),t.default=o},6759:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .TextInput{color:var(--text-primary-color);display:inline-block;border:1.5px solid var(--button-gray-1);line-height:1;padding:.75rem;white-space:nowrap;border-radius:var(--space-factor);background-color:var(--input-bg-color)}.excalidraw .TextInput:not(:focus):hover{background-color:var(--input-hover-bg-color)}.excalidraw .TextInput:focus{outline:none;box-shadow:0 0 0 2px var(--focus-highlight-color)}\",\"\"]),t.default=o},9650:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Toast{-webkit-animation:fade-in .5s;animation:fade-in .5s;background-color:var(--button-gray-1);border-radius:4px;bottom:10px;box-sizing:border-box;cursor:default;left:50%;margin-left:-150px;padding:4px 0;position:absolute;text-align:center;width:300px;z-index:999999}.excalidraw .Toast__message{color:var(--popup-text-color);white-space:pre-wrap}@-webkit-keyframes fade-in{from{opacity:0}to{opacity:1}}@keyframes fade-in{from{opacity:0}to{opacity:1}}\",\"\"]),t.default=o},2044:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .ToolIcon{display:inline-flex;align-items:center;position:relative;font-family:Cascadia;cursor:pointer;-webkit-tap-highlight-color:transparent;border-radius:var(--space-factor);-webkit-user-select:none;user-select:none;background-color:var(--button-gray-1)}.excalidraw .ToolIcon:hover{background-color:var(--button-gray-2)}.excalidraw .ToolIcon:active{background-color:var(--button-gray-3)}.excalidraw .ToolIcon--plain{background-color:transparent}.excalidraw .ToolIcon--plain .ToolIcon__icon{width:2rem;height:2rem}.excalidraw .ToolIcon__icon{width:2.5rem;height:2.5rem;color:var(--icon-fill-color);display:flex;justify-content:center;align-items:center;border-radius:var(--space-factor)}.excalidraw .ToolIcon__icon svg{position:relative;height:1em;fill:var(--icon-fill-color);color:var(--icon-fill-color)}.excalidraw .ToolIcon__icon+.ToolIcon__label{-webkit-margin-start:0;margin-inline-start:0}.excalidraw .ToolIcon__label{color:var(--icon-fill-color);font-family:var(--ui-font);margin:0 .8em;text-overflow:ellipsis}.excalidraw .ToolIcon_size_small .ToolIcon__icon{width:2rem;height:2rem;font-size:.8em}.excalidraw .excalidraw .ToolIcon_type_button,.excalidraw .Modal .ToolIcon_type_button,.excalidraw .ToolIcon_type_button{padding:0;border:none;margin:0;font-size:inherit}.excalidraw .excalidraw .ToolIcon_type_button:focus,.excalidraw .Modal .ToolIcon_type_button:focus,.excalidraw .ToolIcon_type_button:focus{box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .excalidraw .ToolIcon_type_button.ToolIcon--selected,.excalidraw .Modal .ToolIcon_type_button.ToolIcon--selected,.excalidraw .ToolIcon_type_button.ToolIcon--selected{background-color:var(--button-gray-2)}.excalidraw .excalidraw .ToolIcon_type_button.ToolIcon--selected:active,.excalidraw .Modal .ToolIcon_type_button.ToolIcon--selected:active,.excalidraw .ToolIcon_type_button.ToolIcon--selected:active{background-color:var(--button-gray-3)}.excalidraw .excalidraw .ToolIcon_type_button:hover,.excalidraw .Modal .ToolIcon_type_button:hover,.excalidraw .ToolIcon_type_button:hover{background-color:var(--button-gray-2)}.excalidraw .excalidraw .ToolIcon_type_button:active,.excalidraw .Modal .ToolIcon_type_button:active,.excalidraw .ToolIcon_type_button:active{background-color:var(--button-gray-3)}.excalidraw .excalidraw .ToolIcon_type_button--show,.excalidraw .Modal .ToolIcon_type_button--show,.excalidraw .ToolIcon_type_button--show{visibility:visible}.excalidraw .excalidraw .ToolIcon_type_button--hide,.excalidraw .Modal .ToolIcon_type_button--hide,.excalidraw .ToolIcon_type_button--hide{visibility:hidden}.excalidraw .ToolIcon_type_radio,.excalidraw .ToolIcon_type_checkbox{position:absolute;opacity:0;pointer-events:none}.excalidraw .ToolIcon_type_radio:not(.ToolIcon_toggle_opaque):checked+.ToolIcon__icon,.excalidraw .ToolIcon_type_checkbox:not(.ToolIcon_toggle_opaque):checked+.ToolIcon__icon{background-color:var(--button-gray-2)}.excalidraw .ToolIcon_type_radio:not(.ToolIcon_toggle_opaque):checked+.ToolIcon__icon:active,.excalidraw .ToolIcon_type_checkbox:not(.ToolIcon_toggle_opaque):checked+.ToolIcon__icon:active{background-color:var(--button-gray-3)}.excalidraw .ToolIcon_type_radio:focus+.ToolIcon__icon,.excalidraw .ToolIcon_type_checkbox:focus+.ToolIcon__icon{box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .ToolIcon_type_radio:active+.ToolIcon__icon,.excalidraw .ToolIcon_type_checkbox:active+.ToolIcon__icon{background-color:var(--button-gray-3)}.excalidraw .ToolIcon_type_floating{background-color:transparent}.excalidraw .ToolIcon_type_floating:hover{background-color:transparent}.excalidraw .ToolIcon_type_floating:active{background-color:transparent}.excalidraw .ToolIcon_type_floating:focus{box-shadow:none}.excalidraw .ToolIcon_type_floating .ToolIcon__icon{background-color:var(--button-gray-1);width:2rem;height:2em}.excalidraw .ToolIcon_type_floating .ToolIcon__icon:hover{background-color:var(--button-gray-2)}.excalidraw .ToolIcon_type_floating .ToolIcon__icon:active{background-color:var(--button-gray-3)}.excalidraw .ToolIcon.ToolIcon__lock{-webkit-margin-end:var(--space-factor);margin-inline-end:var(--space-factor)}.excalidraw .ToolIcon.ToolIcon__lock.ToolIcon_type_floating{margin-left:.1rem}.excalidraw .ToolIcon__keybinding{position:absolute;bottom:2px;right:3px;font-size:.5em;color:var(--keybinding-color);font-family:var(--ui-font);-webkit-user-select:none;user-select:none}@media(max-width: 425px){.excalidraw .Shape .ToolIcon__icon{width:2rem;height:2rem}.excalidraw .Shape .ToolIcon__icon svg{height:.8em}}@media(max-width: 760px){.excalidraw .ToolIcon.ToolIcon_type_floating{display:inline-block;position:absolute;right:-8px;margin-left:0;border-radius:20px 0 0 20px;z-index:1;background-color:var(--button-gray-1)}.excalidraw .ToolIcon.ToolIcon_type_floating:hover{background-color:var(--button-gray-1)}.excalidraw .ToolIcon.ToolIcon_type_floating:active{background-color:var(--button-gray-2)}.excalidraw .ToolIcon.ToolIcon_type_floating .ToolIcon__icon{border-radius:inherit}.excalidraw .ToolIcon.ToolIcon_type_floating svg{position:static}.excalidraw .ToolIcon.ToolIcon__library{top:100px}.excalidraw .ToolIcon.ToolIcon__lock{-webkit-margin-end:0;margin-inline-end:0;top:60px}}:root[dir=ltr] .excalidraw .unlocked-icon{left:2px}:root[dir=rtl] .excalidraw .unlocked-icon{right:2px}\",\"\"]),t.default=o},6626:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw-tooltip{position:absolute;z-index:1000;padding:8px;border-radius:6px;box-sizing:border-box;pointer-events:none;word-wrap:break-word;background:#000;line-height:1.5;text-align:center;font-size:13px;font-weight:500;color:#fff;display:none}.excalidraw-tooltip.excalidraw-tooltip--visible{display:block}.excalidraw-tooltip-wrapper{display:flex;height:100%}.excalidraw-tooltip-icon{width:.9em;height:.9em;margin-left:5px;margin-top:1px;display:flex}.excalidraw--mobile.excalidraw-tooltip-icon{display:none}\",\"\"]),t.default=o},6359:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\".excalidraw .UserList{pointer-events:none;padding:var(--space-factor) var(--space-factor) var(--space-factor) var(--space-factor);display:flex;flex-wrap:wrap;justify-content:flex-end}.excalidraw .UserList>*{pointer-events:all;margin:0 0 var(--space-factor) var(--space-factor)}.excalidraw .UserList_mobile{padding:0;justify-content:normal}.excalidraw .UserList_mobile>*{margin:0 var(--space-factor) var(--space-factor) 0}\",\"\"]),t.default=o},9915:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\".visually-hidden{position:absolute !important;height:1px;width:1px;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);white-space:nowrap;-webkit-user-select:none;user-select:none}.LoadingMessage{position:absolute;top:0;right:0;bottom:0;left:0;z-index:999;display:flex;align-items:center;justify-content:center;pointer-events:none}.LoadingMessage span{background-color:var(--button-gray-1);border-radius:5px;padding:.8em 1.2em;color:var(--popup-text-color);font-size:1.3em}\",\"\"]),t.default=o},9310:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,':export{themeFilter:invert(93%) hue-rotate(180deg)}:export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw{--theme-filter: none;--button-destructive-bg-color: #ffe3e3;--button-destructive-color: #c92a2a;--button-gray-1: #e9ecef;--button-gray-2: #ced4da;--button-gray-3: #adb5bd;--button-special-active-bg-color: #ebfbee;--dialog-border-color: #868e96;--dropdown-icon: url(\\'data:image\/svg+xml,<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" width=\"292.4\" height=\"292.4\" viewBox=\"0 0 292 292\"><path d=\"M287 197L159 69c-4-3-8-5-13-5s-9 2-13 5L5 197c-3 4-5 8-5 13s2 9 5 13c4 4 8 5 13 5h256c5 0 9-1 13-5s5-8 5-13-1-9-5-13z\"\/><\/svg>\\');--focus-highlight-color: #a5d8ff;--icon-fill-color: #000000;--icon-green-fill-color: #2b8a3e;--default-bg-color: #ffffff;--input-bg-color: #ffffff;--input-border-color: #dee2e6;--input-hover-bg-color: #f1f3f5;--input-label-color: #495057;--island-bg-color: rgba(255, 255, 255, 0.96);--keybinding-color: #adb5bd;--link-color: #1c7ed6;--overlay-bg-color: rgba(255, 255, 255, 0.88);--popup-bg-color: #ffffff;--popup-secondary-bg-color: #f1f3f5;--popup-text-color: #000000;--popup-text-inverted-color: #ffffff;--sab: env(safe-area-inset-bottom);--sal: env(safe-area-inset-left);--sar: env(safe-area-inset-right);--sat: env(safe-area-inset-top);--select-highlight-color: #339af0;--shadow-island: 0 1px 5px rgba(0, 0, 0, 0.15);--space-factor: 0.25rem;--text-primary-color: #343a40}.excalidraw.theme--dark{background:#000}.excalidraw.theme--dark.theme--dark-background-none{background:none}.excalidraw.theme--dark{--theme-filter: invert(93%) hue-rotate(180deg);--button-destructive-bg-color: #5a0000;--button-destructive-color: #ffa8a8;--button-gray-1: #363636;--button-gray-2: #272727;--button-gray-3: #222;--button-special-active-bg-color: #204624;--dialog-border-color: #212529;--dropdown-icon: url(\\'data:image\/svg+xml,<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" width=\"292.4\" height=\"292.4\" viewBox=\"0 0 292 292\"><path fill=\"%23ced4da\" d=\"M287 197L159 69c-4-3-8-5-13-5s-9 2-13 5L5 197c-3 4-5 8-5 13s2 9 5 13c4 4 8 5 13 5h256c5 0 9-1 13-5s5-8 5-13-1-9-5-13z\"\/><\/svg>\\');--focus-highlight-color: #228be6;--icon-fill-color: #ced4da;--icon-green-fill-color: #69db7c;--default-bg-color: #121212;--input-bg-color: #121212;--input-border-color: #2e2e2e;--input-hover-bg-color: #181818;--input-label-color: #e9ecef;--island-bg-color: rgba(30, 30, 30, 0.98);--keybinding-color: #868e96;--overlay-bg-color: rgba(52, 58, 64, 0.12);--popup-bg-color: #2c2c2c;--popup-secondary-bg-color: #222;--popup-text-color: #ced4da;--popup-text-inverted-color: #2c2c2c;--select-highlight-color: #4dabf7;--shadow-island: 0 1px 5px rgba(0, 0, 0, 0.3);--text-primary-color: #ced4da}:root{--zIndex-canvas: 1;--zIndex-wysiwyg: 2;--zIndex-layerUI: 3}.excalidraw{position:relative;overflow:hidden;color:var(--text-primary-color);display:flex;top:0;bottom:0;left:0;right:0;height:100%;width:100%;-webkit-user-select:none;user-select:none}.excalidraw:focus{outline:none}.excalidraw a{font-weight:500;text-decoration:none;color:var(--link-color)}.excalidraw a:hover{text-decoration:underline}.excalidraw canvas{touch-action:none;image-rendering:pixelated;image-rendering:-moz-crisp-edges;z-index:var(--zIndex-canvas)}.excalidraw__canvas{position:absolute}.excalidraw.theme--dark canvas{-webkit-filter:var(--theme-filter);filter:var(--theme-filter)}.excalidraw .FixedSideContainer{padding-top:var(--sat, 0);padding-right:var(--sar, 0);padding-bottom:var(--sab, 0);padding-left:var(--sal, 0)}.excalidraw .panelRow{display:flex;justify-content:space-between}.excalidraw .panelColumn{display:flex;flex-direction:column}.excalidraw .panelColumn h3,.excalidraw .panelColumn legend,.excalidraw .panelColumn .control-label{margin-top:.333rem;margin-bottom:.333rem;font-size:.75rem;color:var(--text-primary-color);font-weight:bold;display:block}.excalidraw .panelColumn .control-label input{display:block;width:100%}.excalidraw .panelColumn h3:first-child,.excalidraw .panelColumn legend:first-child,.excalidraw .panelColumn .control-label:first-child{margin-top:0}.excalidraw .panelColumn legend{padding:0}.excalidraw .panelColumn .iconSelectList{flex-wrap:wrap;position:relative}.excalidraw .panelColumn .buttonList{flex-wrap:wrap}.excalidraw .panelColumn .buttonList label{margin-right:.25rem;font-size:.75rem;display:inline-block}.excalidraw .panelColumn .buttonList input[type=radio],.excalidraw .panelColumn .buttonList input[type=button]{opacity:0;position:absolute;pointer-events:none}.excalidraw .panelColumn .buttonList .iconRow{margin-top:8px}.excalidraw .panelColumn .buttonList .ToolIcon{margin:0;-webkit-margin-end:8px;margin-inline-end:8px}.excalidraw .panelColumn .buttonList .ToolIcon:focus{outline:transparent;box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .panelColumn .buttonList .ToolIcon:hover{background-color:var(--button-gray-2)}.excalidraw .panelColumn .buttonList .ToolIcon:active{background-color:var(--button-gray-3)}.excalidraw .panelColumn .buttonList .ToolIcon:disabled{cursor:not-allowed}.excalidraw .panelColumn .buttonList .ToolIcon__icon{width:28px;height:28px}.excalidraw .panelColumn fieldset{margin:0;margin-top:.333rem;padding:0;border:none}.excalidraw .divider{width:1px;background-color:#e9ecef;margin:1px}.excalidraw .buttonList label:focus-within,.excalidraw input:focus{outline:transparent;box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw button,.excalidraw .buttonList label{-webkit-user-select:none;user-select:none;background-color:var(--button-gray-1);border:0;border-radius:4px;margin:.125rem 0;padding:.25rem;white-space:nowrap;cursor:pointer}.excalidraw button:focus,.excalidraw .buttonList label:focus{outline:transparent;box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw button:hover,.excalidraw .buttonList label:hover{background-color:var(--button-gray-2)}.excalidraw button:active,.excalidraw .buttonList label:active{background-color:var(--button-gray-3)}.excalidraw button:disabled,.excalidraw .buttonList label:disabled{cursor:not-allowed}.excalidraw .active,.excalidraw .buttonList label.active{background-color:var(--button-gray-2)}.excalidraw .active:hover,.excalidraw .buttonList label.active:hover{background-color:var(--button-gray-2)}.excalidraw .active:active,.excalidraw .buttonList label.active:active{background-color:var(--button-gray-3)}.excalidraw .buttonList.buttonListIcon label{display:inline-flex;justify-content:center;align-items:center}.excalidraw .buttonList.buttonListIcon label svg{width:36px;height:14px;padding:2px;opacity:.6}.excalidraw .buttonList.buttonListIcon label.active svg{opacity:1}.excalidraw .App-top-bar{z-index:var(--zIndex-layerUI);display:flex;flex-direction:column;align-items:center}.excalidraw .App-bottom-bar{position:absolute;top:0;bottom:0;left:0;right:0;--bar-padding: calc(4 * var(--space-factor));padding-top:max(var(--bar-padding), var(--sat,0));padding-right:var(--sar, 0);padding-bottom:var(--sab, 0);padding-left:var(--sal, 0);z-index:4;display:flex;align-items:flex-end;pointer-events:none}.excalidraw .App-bottom-bar>.Island{width:100%;max-width:100%;min-width:100%;box-sizing:border-box;max-height:100%;display:flex;flex-direction:column;pointer-events:initial}.excalidraw .App-bottom-bar>.Island .panelColumn{padding:8px 8px 0 8px}.excalidraw .App-toolbar{width:100%;box-sizing:border-box}.excalidraw .App-toolbar-content{display:flex;align-items:center;justify-content:space-between;padding:8px}.excalidraw .App-mobile-menu{width:100%;overflow-x:visible;overflow-y:auto;box-sizing:border-box;margin-bottom:var(--bar-padding)}.excalidraw .App-menu{display:grid;color:var(--icon-fill-color)}.excalidraw .App-menu_top{grid-template-columns:1fr auto 1fr;grid-gap:4px;align-items:flex-start;cursor:default;pointer-events:none !important}.excalidraw .layer-ui__wrapper:not(.disable-pointerEvents) .App-menu_top>*{pointer-events:all}.excalidraw .App-menu_top>*:first-child{justify-self:flex-start}.excalidraw .App-menu_top>*:last-child{justify-self:flex-end}.excalidraw .App-menu_bottom{position:absolute;bottom:0;grid-template-columns:-webkit-min-content auto -webkit-min-content;grid-template-columns:min-content auto min-content;grid-gap:15px;align-items:flex-start;cursor:default;pointer-events:none !important;z-index:100}:root[dir=ltr] .excalidraw .App-menu_bottom{left:.25rem}:root[dir=rtl] .excalidraw .App-menu_bottom{right:.25rem}.excalidraw .App-menu_bottom--transition-left section{width:185px}.excalidraw .App-menu_bottom section{display:flex}.excalidraw .App-menu_bottom>*:first-child{justify-self:flex-start}.excalidraw .App-menu_bottom>*:last-child{justify-self:flex-end}.excalidraw .App-menu_left{grid-template-rows:1fr auto 1fr;height:100%}.excalidraw .App-menu_right{grid-template-rows:1fr;height:100%}.excalidraw .App-menu__left{overflow-y:auto}.excalidraw .dropdown-select{height:1.5rem;padding:0;-webkit-padding-start:.5rem;padding-inline-start:.5rem;-webkit-padding-end:1.5rem;padding-inline-end:1.5rem;color:var(--icon-fill-color);background-color:var(--button-gray-1);border-radius:var(--space-factor);border:1px solid var(--button-gray-2);font-size:.8rem;outline:none;-webkit-appearance:none;appearance:none;background-image:var(--dropdown-icon);background-repeat:no-repeat;background-position:right .7rem top 50%,0 0;background-size:.65em auto,100%}:root[dir=rtl] .excalidraw .dropdown-select{background-position:left .7rem top 50%,0 0}.excalidraw .dropdown-select:focus{box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .dropdown-select:hover{background-color:var(--button-gray-2)}.excalidraw .dropdown-select:active{background-color:var(--button-gray-2)}.excalidraw .zIndexButton{margin:0;-webkit-margin-end:8px;margin-inline-end:8px;padding:5px;display:inline-flex;align-items:center;justify-content:center}.excalidraw .zIndexButton svg{width:18px;height:18px}.excalidraw .scroll-back-to-content{color:var(--popup-text-color);position:absolute;left:50%;bottom:30px;-webkit-transform:translateX(-50%);transform:translateX(-50%);padding:10px 20px}.excalidraw .help-icon{display:flex;cursor:pointer;fill:#868e96;padding:0;margin:0;background:none;color:var(--icon-fill-color)}.excalidraw .help-icon svg{width:1.5rem;height:1.5rem}.excalidraw .help-icon:hover{background:none}.excalidraw .reset-zoom-button{padding:.2em;background:transparent;color:var(--text-primary-color);font-family:var(--ui-font)}.excalidraw .undo-redo-buttons{display:grid;grid-auto-flow:column;gap:.4em;margin-top:auto;margin-bottom:auto;-webkit-margin-start:.6em;margin-inline-start:.6em}.excalidraw--mobile.excalidraw aside{display:none}.excalidraw--mobile.excalidraw .scroll-back-to-content{bottom:calc(80px + var(--sab, 0));z-index:-1}:root[dir=rtl] .excalidraw .rtl-mirror{-webkit-transform:scaleX(-1);transform:scaleX(-1)}.excalidraw .zen-mode-visibility{visibility:visible;opacity:1;height:auto;width:auto;transition:opacity .5s}.excalidraw .zen-mode-visibility.zen-mode-visibility--hidden{visibility:hidden;opacity:0;height:0;width:0;transition:opacity .5s}.excalidraw .disable-pointerEvents{pointer-events:none !important}.excalidraw.excalidraw--view-mode .App-menu{display:flex;justify-content:space-between}@media print{.excalidraw .App-bottom-bar,.excalidraw .FixedSideContainer,.excalidraw .layer-ui__wrapper{display:none}}.ErrorSplash.excalidraw{min-height:100vh;padding:20px 0;overflow:auto;display:flex;align-items:center;justify-content:center;-webkit-user-select:text;user-select:text}.ErrorSplash.excalidraw .ErrorSplash-messageContainer{display:flex;flex-direction:column;align-items:center;justify-content:center;padding:40px;background-color:#ffe3e3;border:3px solid #c92a2a}.ErrorSplash.excalidraw .ErrorSplash-paragraph{margin:15px 0;max-width:600px}.ErrorSplash.excalidraw .ErrorSplash-paragraph.align-center{text-align:center}.ErrorSplash.excalidraw .bigger,.ErrorSplash.excalidraw .bigger button{font-size:1.1em}.ErrorSplash.excalidraw .smaller,.ErrorSplash.excalidraw .smaller button{font-size:.9em}.ErrorSplash.excalidraw .ErrorSplash-details{display:flex;flex-direction:column;align-items:flex-start}.ErrorSplash.excalidraw .ErrorSplash-details textarea{width:100%;margin:10px 0;font-family:\"Cascadia\";font-size:.8em}',\"\"]),t.default=o},6464:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\"\",\"\"]),o.locals={themeFilter:\"invert(93%) hue-rotate(180deg)\"},t.default=o},3645:function(e){\"use strict\";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?\"@media \".concat(t[2],\" {\").concat(n,\"}\"):n})).join(\"\")},t.i=function(e,n,r){\"string\"==typeof e&&(e=[[null,e,\"\"]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var l=0;l<e.length;l++){var s=[].concat(e[l]);r&&o[s[0]]||(n&&(s[2]?s[2]=\"\".concat(n,\" and \").concat(s[2]):s[2]=n),t.push(s))}},t}},1667:function(e){\"use strict\";e.exports=function(e,t){return t||(t={}),\"string\"!=typeof(e=e&&e.__esModule?e.default:e)?e:(\/^['\"].*['\"]$\/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),\/[\"'() \\t\\n]\/.test(e)||t.needQuotes?'\"'.concat(e.replace(\/\"\/g,'\\\\\"').replace(\/\\n\/g,\"\\\\n\"),'\"'):e)}},9638:function(e,t,n){\"use strict\";t.Z=n.p+\"excalidraw-assets\/Cascadia.woff2\"},7464:function(e,t,n){\"use strict\";t.Z=n.p+\"excalidraw-assets\/Virgil.woff2\"},8288:function(e,t,n){\"use strict\";n.d(t,{iC:function(){return i},f:function(){return l},qx:function(){return s},Iw:function(){return c},$e:function(){return u},wZ:function(){return d},ay:function(){return p},oc:function(){return f},Oh:function(){return h},Ks:function(){return r},Vi:function(){return m},$C:function(){return g},ut:function(){return v},_D:function(){return b},n5:function(){return y},rk:function(){return x},Hg:function(){return w},hs:function(){return k},k:function(){return S},LO:function(){return E},r8:function(){return j},pb:function(){return C},Gj:function(){return O},nM:function(){return M},Lg:function(){return I},HM:function(){return P},V4:function(){return T},EH:function(){return A},ZF:function(){return L},UO:function(){return _},ah:function(){return D},cW:function(){return z},kV:function(){return B},sS:function(){return H},Yx:function(){return N},zK:function(){return R},ZB:function(){return F},qy:function(){return V}});var r,o=n(8635),a=n.n(o),i=\"Excalidraw\",l=10,s=8,c=5,u=1,d=30,p=Math.PI\/12,f={TEXT:\"text\",CROSSHAIR:\"crosshair\",GRABBING:\"grabbing\",GRAB:\"grab\",POINTER:\"pointer\",MOVE:\"move\",AUTO:\"\"},h={MAIN:0,WHEEL:1,SECONDARY:2,TOUCH:-1};!function(e){e.COPY=\"copy\",e.PASTE=\"paste\",e.CUT=\"cut\",e.KEYDOWN=\"keydown\",e.KEYUP=\"keyup\",e.MOUSE_MOVE=\"mousemove\",e.RESIZE=\"resize\",e.UNLOAD=\"unload\",e.FOCUS=\"focus\",e.BLUR=\"blur\",e.DRAG_OVER=\"dragover\",e.DROP=\"drop\",e.GESTURE_END=\"gestureend\",e.BEFORE_UNLOAD=\"beforeunload\",e.GESTURE_START=\"gesturestart\",e.GESTURE_CHANGE=\"gesturechange\",e.POINTER_MOVE=\"pointermove\",e.POINTER_UP=\"pointerup\",e.STATE_CHANGE=\"statechange\",e.WHEEL=\"wheel\",e.TOUCH_START=\"touchstart\",e.TOUCH_END=\"touchend\",e.HASHCHANGE=\"hashchange\",e.VISIBILITY_CHANGE=\"visibilitychange\",e.SCROLL=\"scroll\"}(r||(r={}));var m={TEST:\"test\",DEVELOPMENT:\"development\"},g={SHAPE_ACTIONS_MENU:\"App-menu__left\"},v={Virgil:1,Helvetica:2,Cascadia:3},b=\"Segoe UI Emoji\",y=20,x=v.Virgil,w=\"left\",k=\"top\",S=20,E={excalidraw:\"application\/vnd.excalidraw+json\",excalidrawlib:\"application\/vnd.excalidrawlib+json\"},j={excalidraw:\"excalidraw\",excalidrawClipboard:\"excalidraw\/clipboard\",excalidrawLibrary:\"excalidrawlib\"},C=window.location.origin,O=300,M=500,I=5e3,P=100,T=.1,A={VIEW:\"viewMode\",ZEN:\"zenMode\",GRID:\"gridMode\"},L=a().themeFilter,_={addLibrary:\"addLibrary\"},D={addLibrary:\"addLibrary\"},z={canvasActions:{changeViewBackgroundColor:!0,clearCanvas:!0,export:{saveFileToDisk:!0},loadScene:!0,saveToActiveFile:!0,theme:!0,saveAsImage:!0}},B=730,H=1e3,N=500,R=2,F=[1,2,3],V=10},21:function(e,t,n){\"use strict\";n.r(t),n.d(t,{FONT_FAMILY:function(){return c.ut},default:function(){return zh},defaultLang:function(){return j},exportToBlob:function(){return Ch},exportToCanvas:function(){return jh},exportToSvg:function(){return Oh},getElementMap:function(){return Yi},getFreeDrawSvgPath:function(){return Yr},getSceneVersion:function(){return Xi},isInvisiblySmallElement:function(){return so},languages:function(){return C},loadFromBlob:function(){return Su},loadLibraryFromBlob:function(){return Eu},restore:function(){return vu},restoreAppState:function(){return gu},restoreElements:function(){return mu},serializeAsJSON:function(){return Cu}});var r=n(6479),o=n.n(r),a=n(9713),i=n.n(a),l=n(4698),s=n.n(l),c=n(8288),u=JSON.parse('{\"u2\":\"@excalidraw\/excalidraw\",\"i8\":\"0.10.0\"}');\"production\"!==c.Vi.TEST&&(n.p=window.EXCALIDRAW_ASSET_PATH||\"https:\/\/unpkg.com\/\".concat(u.u2,\"@\").concat(u.i8,\"\/dist\/\"));var d=n(8950);function p(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function h(e,t,n){return t&&f(e.prototype,t),n&&f(e,n),e}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function\");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}function v(e){return(v=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e})(e)}function b(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}function y(e,t){return!t||\"object\"!==v(t)&&\"function\"!=typeof t?b(e):t}function x(e){return(x=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var w=n(7945),k=n.n(w),S=n(1463),E=n(4451),j={code:\"en\",label:\"English\"},C=[{code:\"ar-SA\",label:\"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\",rtl:!0},{code:\"bg-BG\",label:\"\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\"},{code:\"ca-ES\",label:\"Catal\u00e0\"},{code:\"de-DE\",label:\"Deutsch\"},{code:\"el-GR\",label:\"\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\"},{code:\"es-ES\",label:\"Espa\u00f1ol\"},{code:\"fa-IR\",label:\"\u0641\u0627\u0631\u0633\u06cc\",rtl:!0},{code:\"fi-FI\",label:\"Suomi\"},{code:\"fr-FR\",label:\"Fran\u00e7ais\"},{code:\"he-IL\",label:\"\u05e2\u05d1\u05e8\u05d9\u05ea\",rtl:!0},{code:\"hi-IN\",label:\"\u0939\u093f\u0928\u094d\u0926\u0940\"},{code:\"hu-HU\",label:\"Magyar\"},{code:\"id-ID\",label:\"Bahasa Indonesia\"},{code:\"it-IT\",label:\"Italiano\"},{code:\"ja-JP\",label:\"\u65e5\u672c\u8a9e\"},{code:\"kab-KAB\",label:\"Taqbaylit\"},{code:\"ko-KR\",label:\"\ud55c\uad6d\uc5b4\"},{code:\"my-MM\",label:\"Burmese\"},{code:\"nb-NO\",label:\"Norsk bokm\u00e5l\"},{code:\"nl-NL\",label:\"Nederlands\"},{code:\"nn-NO\",label:\"Norsk nynorsk\"},{code:\"oc-FR\",label:\"Occitan\"},{code:\"pa-IN\",label:\"\u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40\"},{code:\"pl-PL\",label:\"Polski\"},{code:\"pt-BR\",label:\"Portugu\u00eas Brasileiro\"},{code:\"pt-PT\",label:\"Portugu\u00eas\"},{code:\"ro-RO\",label:\"Rom\u00e2n\u0103\"},{code:\"ru-RU\",label:\"\u0420\u0443\u0441\u0441\u043a\u0438\u0439\"},{code:\"sk-SK\",label:\"Sloven\u010dina\"},{code:\"sv-SE\",label:\"Svenska\"},{code:\"tr-TR\",label:\"T\u00fcrk\u00e7e\"},{code:\"uk-UA\",label:\"\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\"},{code:\"zh-CN\",label:\"\u7b80\u4f53\u4e2d\u6587\"},{code:\"zh-TW\",label:\"\u7e41\u9ad4\u4e2d\u6587\"},{code:\"lv-LV\",label:\"Latvie\u0161u\"},{code:\"cs-CZ\",label:\"\u010cesky\"},{code:\"kk-KZ\",label:\"\u049a\u0430\u0437\u0430\u049b \u0442\u0456\u043b\u0456\"}].concat([j]).sort((function(e,t){return e.label>t.label?1:-1})).filter((function(e){return E[e.code]>=85})),O=\"__test__\";\"production\"===c.Vi.DEVELOPMENT&&C.unshift({code:O,label:\"test language\"},{code:\"\".concat(O,\".rtl\"),label:\"\u202atest language (rtl)\u202c\",rtl:!0});var M=j,I={},P=function(){var e=(0,d.Z)(k().mark((function e(t){return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(M=t,document.documentElement.dir=M.rtl?\"rtl\":\"ltr\",document.documentElement.lang=M.code,!t.code.startsWith(O)){e.next=7;break}I={},e.next=10;break;case 7:return e.next=9,n(788)(\".\/\".concat(M.code,\".json\"));case 9:I=e.sent;case 10:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),T=function(){return M},A=function(e,t){for(var n=0;n<t.length;++n){var r=t[n];if(void 0===e[r])return;e=e[r]}if(\"string\"==typeof e)return e},L=function(e,t){if(M.code.startsWith(O)){var n=t?\"\".concat(e,\"(\").concat(JSON.stringify(t).slice(1,-1),\")\"):e;return\"\u202a[[\".concat(n,\"]]\u202c\")}var r=e.split(\".\"),o=A(I,r)||A(S,r);if(void 0===o)throw new Error(\"Can't find translation for \".concat(e));if(t)for(var a in t)o=o.replace(\"{{\".concat(a,\"}}\"),t[a]);return o},_=n(4512),D=function(){return(0,_.jsx)(\"div\",{className:\"LoadingMessage\",children:(0,_.jsx)(\"span\",{children:L(\"labels.loadingScene\")})})};function z(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=x(e);if(t){var o=x(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return y(this,n)}}var B=function(e){g(r,e);var t,n=z(r);function r(){var e,t;p(this,r);for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];return y(t,(e=t=n.call.apply(n,[this].concat(a)),t.state={isLoading:!0},e))}return h(r,[{key:\"componentDidMount\",value:(t=(0,d.Z)(k().mark((function e(){var t,n=this;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=C.find((function(e){return e.code===n.props.langCode}))||j,e.next=3,P(t);case 3:this.setState({isLoading:!1});case 4:case\"end\":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:\"render\",value:function(){return this.state.isLoading?(0,_.jsx)(D,{}):this.props.children}}]),r}(s().Component);function H(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function N(e,t){if(e){if(\"string\"==typeof e)return H(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return\"Object\"===n&&e.constructor&&(n=e.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(e):\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n)?H(e,t):void 0}}function R(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(\"undefined\"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}}(e,t)||N(e,t)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function F(e){return function(e){if(Array.isArray(e))return H(e)}(e)||function(e){if(\"undefined\"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||N(e)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function V(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function G(e,t,n){if(e&&e.length){const[r,o]=t,a=Math.PI\/180*n,i=Math.cos(a),l=Math.sin(a);e.forEach((e=>{const[t,n]=e;e[0]=(t-r)*i-(n-o)*l+r,e[1]=(t-r)*l+(n-o)*i+o}))}}function U(e){const t=e[0],n=e[1];return Math.sqrt(Math.pow(t[0]-n[0],2)+Math.pow(t[1]-n[1],2))}function K(e,t,n,r){const o=t[1]-e[1],a=e[0]-t[0],i=o*e[0]+a*e[1],l=r[1]-n[1],s=n[0]-r[0],c=l*n[0]+s*n[1],u=o*s-l*a;return u?[(s*i-a*c)\/u,(o*c-l*i)\/u]:null}function W(e,t,n){const r=e.length;if(r<3)return!1;const o=[Number.MAX_SAFE_INTEGER,n],a=[t,n];let i=0;for(let t=0;t<r;t++){const n=e[t],l=e[(t+1)%r];if(X(n,l,a,o)){if(0===Y(n,a,l))return Z(n,a,l);i++}}return i%2==1}function Z(e,t,n){return t[0]<=Math.max(e[0],n[0])&&t[0]>=Math.min(e[0],n[0])&&t[1]<=Math.max(e[1],n[1])&&t[1]>=Math.min(e[1],n[1])}function Y(e,t,n){const r=(t[1]-e[1])*(n[0]-t[0])-(t[0]-e[0])*(n[1]-t[1]);return 0===r?0:r>0?1:2}function X(e,t,n,r){const o=Y(e,t,n),a=Y(e,t,r),i=Y(n,r,e),l=Y(n,r,t);return o!==a&&i!==l||(!(0!==o||!Z(e,n,t))||(!(0!==a||!Z(e,r,t))||(!(0!==i||!Z(n,e,r))||!(0!==l||!Z(n,t,r)))))}function q(e,t){const n=[0,0],r=Math.round(t.hachureAngle+90);r&&G(e,n,r);const o=function(e,t){const n=[...e];n[0].join(\",\")!==n[n.length-1].join(\",\")&&n.push([n[0][0],n[0][1]]);const r=[];if(n&&n.length>2){let e=t.hachureGap;e<0&&(e=4*t.strokeWidth),e=Math.max(e,.1);const o=[];for(let e=0;e<n.length-1;e++){const t=n[e],r=n[e+1];if(t[1]!==r[1]){const e=Math.min(t[1],r[1]);o.push({ymin:e,ymax:Math.max(t[1],r[1]),x:e===t[1]?t[0]:r[0],islope:(r[0]-t[0])\/(r[1]-t[1])})}}if(o.sort(((e,t)=>e.ymin<t.ymin?-1:e.ymin>t.ymin?1:e.x<t.x?-1:e.x>t.x?1:e.ymax===t.ymax?0:(e.ymax-t.ymax)\/Math.abs(e.ymax-t.ymax))),!o.length)return r;let a=[],i=o[0].ymin;for(;a.length||o.length;){if(o.length){let e=-1;for(let t=0;t<o.length&&!(o[t].ymin>i);t++)e=t;o.splice(0,e+1).forEach((e=>{a.push({s:i,edge:e})}))}if(a=a.filter((e=>!(e.edge.ymax<=i))),a.sort(((e,t)=>e.edge.x===t.edge.x?0:(e.edge.x-t.edge.x)\/Math.abs(e.edge.x-t.edge.x))),a.length>1)for(let e=0;e<a.length;e+=2){const t=e+1;if(t>=a.length)break;const n=a[e].edge,o=a[t].edge;r.push([[Math.round(n.x),i],[Math.round(o.x),i]])}i+=e,a.forEach((t=>{t.edge.x=t.edge.x+e*t.edge.islope}))}}return r}(e,t);return r&&(G(e,n,-r),function(e,t,n){const r=[];e.forEach((e=>r.push(...e))),G(r,t,n)}(o,n,-r)),o}class ${constructor(e){this.helper=e}fillPolygon(e,t){return this._fillPolygon(e,t)}_fillPolygon(e,t,n=!1){let r=q(e,t);if(n){const t=this.connectingLines(e,r);r=r.concat(t)}return{type:\"fillSketch\",ops:this.renderLines(r,t)}}renderLines(e,t){const n=[];for(const r of e)n.push(...this.helper.doubleLineOps(r[0][0],r[0][1],r[1][0],r[1][1],t));return n}connectingLines(e,t){const n=[];if(t.length>1)for(let r=1;r<t.length;r++){const o=t[r-1];if(U(o)<3)continue;const a=[t[r][0],o[1]];if(U(a)>3){const t=this.splitOnIntersections(e,a);n.push(...t)}}return n}midPointInPolygon(e,t){return W(e,(t[0][0]+t[1][0])\/2,(t[0][1]+t[1][1])\/2)}splitOnIntersections(e,t){const n=Math.max(5,.1*U(t)),r=[];for(let o=0;o<e.length;o++){const a=e[o],i=e[(o+1)%e.length];if(X(a,i,...t)){const e=K(a,i,t[0],t[1]);if(e){const o=U([e,t[0]]),a=U([e,t[1]]);o>n&&a>n&&r.push({point:e,distance:o})}}}if(r.length>1){const n=r.sort(((e,t)=>e.distance-t.distance)).map((e=>e.point));if(W(e,...t[0])||n.shift(),W(e,...t[1])||n.pop(),n.length<=1)return this.midPointInPolygon(e,t)?[t]:[];const o=[t[0],...n,t[1]],a=[];for(let t=0;t<o.length-1;t+=2){const n=[o[t],o[t+1]];this.midPointInPolygon(e,n)&&a.push(n)}return a}return this.midPointInPolygon(e,t)?[t]:[]}}class Q extends ${fillPolygon(e,t){return this._fillPolygon(e,t,!0)}}class J extends ${fillPolygon(e,t){const n=this._fillPolygon(e,t),r=Object.assign({},t,{hachureAngle:t.hachureAngle+90}),o=this._fillPolygon(e,r);return n.ops=n.ops.concat(o.ops),n}}class ee{constructor(e){this.helper=e}fillPolygon(e,t){const n=q(e,t=Object.assign({},t,{curveStepCount:4,hachureAngle:0,roughness:1}));return this.dotsOnLines(n,t)}dotsOnLines(e,t){const n=[];let r=t.hachureGap;r<0&&(r=4*t.strokeWidth),r=Math.max(r,.1);let o=t.fillWeight;o<0&&(o=t.strokeWidth\/2);const a=r\/4;for(const i of e){const e=U(i),l=e\/r,s=Math.ceil(l)-1,c=e-s*r,u=(i[0][0]+i[1][0])\/2-r\/4,d=Math.min(i[0][1],i[1][1]);for(let e=0;e<s;e++){const i=d+c+e*r,l=this.helper.randOffsetWithRange(u-a,u+a,t),s=this.helper.randOffsetWithRange(i-a,i+a,t),p=this.helper.ellipse(l,s,o,o,t);n.push(...p.ops)}}return{type:\"fillSketch\",ops:n}}}class te{constructor(e){this.helper=e}fillPolygon(e,t){const n=q(e,t);return{type:\"fillSketch\",ops:this.dashedLine(n,t)}}dashedLine(e,t){const n=t.dashOffset<0?t.hachureGap<0?4*t.strokeWidth:t.hachureGap:t.dashOffset,r=t.dashGap<0?t.hachureGap<0?4*t.strokeWidth:t.hachureGap:t.dashGap,o=[];return e.forEach((e=>{const a=U(e),i=Math.floor(a\/(n+r)),l=(a+r-i*(n+r))\/2;let s=e[0],c=e[1];s[0]>c[0]&&(s=e[1],c=e[0]);const u=Math.atan((c[1]-s[1])\/(c[0]-s[0]));for(let e=0;e<i;e++){const a=e*(n+r),i=a+n,c=[s[0]+a*Math.cos(u)+l*Math.cos(u),s[1]+a*Math.sin(u)+l*Math.sin(u)],d=[s[0]+i*Math.cos(u)+l*Math.cos(u),s[1]+i*Math.sin(u)+l*Math.sin(u)];o.push(...this.helper.doubleLineOps(c[0],c[1],d[0],d[1],t))}})),o}}class ne{constructor(e){this.helper=e}fillPolygon(e,t){const n=t.hachureGap<0?4*t.strokeWidth:t.hachureGap,r=t.zigzagOffset<0?n:t.zigzagOffset,o=q(e,t=Object.assign({},t,{hachureGap:n+r}));return{type:\"fillSketch\",ops:this.zigzagLines(o,r,t)}}zigzagLines(e,t,n){const r=[];return e.forEach((e=>{const o=U(e),a=Math.round(o\/(2*t));let i=e[0],l=e[1];i[0]>l[0]&&(i=e[1],l=e[0]);const s=Math.atan((l[1]-i[1])\/(l[0]-i[0]));for(let e=0;e<a;e++){const o=2*e*t,a=2*(e+1)*t,l=Math.sqrt(2*Math.pow(t,2)),c=[i[0]+o*Math.cos(s),i[1]+o*Math.sin(s)],u=[i[0]+a*Math.cos(s),i[1]+a*Math.sin(s)],d=[c[0]+l*Math.cos(s+Math.PI\/4),c[1]+l*Math.sin(s+Math.PI\/4)];r.push(...this.helper.doubleLineOps(c[0],c[1],d[0],d[1],n),...this.helper.doubleLineOps(d[0],d[1],u[0],u[1],n))}})),r}}const re={};class oe{constructor(e){this.seed=e}next(){return this.seed?(2**31-1&(this.seed=Math.imul(48271,this.seed)))\/2**31:Math.random()}}const ae={A:7,a:7,C:6,c:6,H:1,h:1,L:2,l:2,M:2,m:2,Q:4,q:4,S:4,s:4,T:2,t:2,V:1,v:1,Z:0,z:0};function ie(e,t){return e.type===t}function le(e){const t=[],n=function(e){const t=new Array;for(;\"\"!==e;)if(e.match(\/^([ \\t\\r\\n,]+)\/))e=e.substr(RegExp.$1.length);else if(e.match(\/^([aAcChHlLmMqQsStTvVzZ])\/))t[t.length]={type:0,text:RegExp.$1},e=e.substr(RegExp.$1.length);else{if(!e.match(\/^(([-+]?[0-9]+(\\.[0-9]*)?|[-+]?\\.[0-9]+)([eE][-+]?[0-9]+)?)\/))return[];t[t.length]={type:1,text:`${parseFloat(RegExp.$1)}`},e=e.substr(RegExp.$1.length)}return t[t.length]={type:2,text:\"\"},t}(e);let r=\"BOD\",o=0,a=n[o];for(;!ie(a,2);){let i=0;const l=[];if(\"BOD\"===r){if(\"M\"!==a.text&&\"m\"!==a.text)return le(\"M0,0\"+e);o++,i=ae[a.text],r=a.text}else ie(a,1)?i=ae[r]:(o++,i=ae[a.text],r=a.text);if(!(o+i<n.length))throw new Error(\"Path data ended short\");for(let e=o;e<o+i;e++){const t=n[e];if(!ie(t,1))throw new Error(\"Param not a number: \"+r+\",\"+t.text);l[l.length]=+t.text}if(\"number\"!=typeof ae[r])throw new Error(\"Bad segment: \"+r);{const e={key:r,data:l};t.push(e),o+=i,a=n[o],\"M\"===r&&(r=\"L\"),\"m\"===r&&(r=\"l\")}}return t}function se(e){let t=0,n=0,r=0,o=0;const a=[];for(const{key:i,data:l}of e)switch(i){case\"M\":a.push({key:\"M\",data:[...l]}),[t,n]=l,[r,o]=l;break;case\"m\":t+=l[0],n+=l[1],a.push({key:\"M\",data:[t,n]}),r=t,o=n;break;case\"L\":a.push({key:\"L\",data:[...l]}),[t,n]=l;break;case\"l\":t+=l[0],n+=l[1],a.push({key:\"L\",data:[t,n]});break;case\"C\":a.push({key:\"C\",data:[...l]}),t=l[4],n=l[5];break;case\"c\":{const e=l.map(((e,r)=>r%2?e+n:e+t));a.push({key:\"C\",data:e}),t=e[4],n=e[5];break}case\"Q\":a.push({key:\"Q\",data:[...l]}),t=l[2],n=l[3];break;case\"q\":{const e=l.map(((e,r)=>r%2?e+n:e+t));a.push({key:\"Q\",data:e}),t=e[2],n=e[3];break}case\"A\":a.push({key:\"A\",data:[...l]}),t=l[5],n=l[6];break;case\"a\":t+=l[5],n+=l[6],a.push({key:\"A\",data:[l[0],l[1],l[2],l[3],l[4],t,n]});break;case\"H\":a.push({key:\"H\",data:[...l]}),t=l[0];break;case\"h\":t+=l[0],a.push({key:\"H\",data:[t]});break;case\"V\":a.push({key:\"V\",data:[...l]}),n=l[0];break;case\"v\":n+=l[0],a.push({key:\"V\",data:[n]});break;case\"S\":a.push({key:\"S\",data:[...l]}),t=l[2],n=l[3];break;case\"s\":{const e=l.map(((e,r)=>r%2?e+n:e+t));a.push({key:\"S\",data:e}),t=e[2],n=e[3];break}case\"T\":a.push({key:\"T\",data:[...l]}),t=l[0],n=l[1];break;case\"t\":t+=l[0],n+=l[1],a.push({key:\"T\",data:[t,n]});break;case\"Z\":case\"z\":a.push({key:\"Z\",data:[]}),t=r,n=o}return a}function ce(e){const t=[];let n=\"\",r=0,o=0,a=0,i=0,l=0,s=0;for(const{key:c,data:u}of e){switch(c){case\"M\":t.push({key:\"M\",data:[...u]}),[r,o]=u,[a,i]=u;break;case\"C\":t.push({key:\"C\",data:[...u]}),r=u[4],o=u[5],l=u[2],s=u[3];break;case\"L\":t.push({key:\"L\",data:[...u]}),[r,o]=u;break;case\"H\":r=u[0],t.push({key:\"L\",data:[r,o]});break;case\"V\":o=u[0],t.push({key:\"L\",data:[r,o]});break;case\"S\":{let e=0,a=0;\"C\"===n||\"S\"===n?(e=r+(r-l),a=o+(o-s)):(e=r,a=o),t.push({key:\"C\",data:[e,a,...u]}),l=u[0],s=u[1],r=u[2],o=u[3];break}case\"T\":{const[e,a]=u;let i=0,c=0;\"Q\"===n||\"T\"===n?(i=r+(r-l),c=o+(o-s)):(i=r,c=o);const d=r+2*(i-r)\/3,p=o+2*(c-o)\/3,f=e+2*(i-e)\/3,h=a+2*(c-a)\/3;t.push({key:\"C\",data:[d,p,f,h,e,a]}),l=i,s=c,r=e,o=a;break}case\"Q\":{const[e,n,a,i]=u,c=r+2*(e-r)\/3,d=o+2*(n-o)\/3,p=a+2*(e-a)\/3,f=i+2*(n-i)\/3;t.push({key:\"C\",data:[c,d,p,f,a,i]}),l=e,s=n,r=a,o=i;break}case\"A\":{const e=Math.abs(u[0]),n=Math.abs(u[1]),a=u[2],i=u[3],l=u[4],s=u[5],c=u[6];if(0===e||0===n)t.push({key:\"C\",data:[r,o,s,c,s,c]}),r=s,o=c;else if(r!==s||o!==c){de(r,o,s,c,e,n,a,i,l).forEach((function(e){t.push({key:\"C\",data:e})})),r=s,o=c}break}case\"Z\":t.push({key:\"Z\",data:[]}),r=a,o=i}n=c}return t}function ue(e,t,n){return[e*Math.cos(n)-t*Math.sin(n),e*Math.sin(n)+t*Math.cos(n)]}function de(e,t,n,r,o,a,i,l,s,c){const u=(d=i,Math.PI*d\/180);var d;let p=[],f=0,h=0,m=0,g=0;if(c)[f,h,m,g]=c;else{[e,t]=ue(e,t,-u),[n,r]=ue(n,r,-u);const i=(e-n)\/2,c=(t-r)\/2;let d=i*i\/(o*o)+c*c\/(a*a);d>1&&(d=Math.sqrt(d),o*=d,a*=d);const p=o*o,v=a*a,b=p*v-p*c*c-v*i*i,y=p*c*c+v*i*i,x=(l===s?-1:1)*Math.sqrt(Math.abs(b\/y));m=x*o*c\/a+(e+n)\/2,g=x*-a*i\/o+(t+r)\/2,f=Math.asin(parseFloat(((t-g)\/a).toFixed(9))),h=Math.asin(parseFloat(((r-g)\/a).toFixed(9))),e<m&&(f=Math.PI-f),n<m&&(h=Math.PI-h),f<0&&(f=2*Math.PI+f),h<0&&(h=2*Math.PI+h),s&&f>h&&(f-=2*Math.PI),!s&&h>f&&(h-=2*Math.PI)}let v=h-f;if(Math.abs(v)>120*Math.PI\/180){const e=h,t=n,l=r;h=s&&h>f?f+120*Math.PI\/180*1:f+120*Math.PI\/180*-1,p=de(n=m+o*Math.cos(h),r=g+a*Math.sin(h),t,l,o,a,i,0,s,[h,e,m,g])}v=h-f;const b=Math.cos(f),y=Math.sin(f),x=Math.cos(h),w=Math.sin(h),k=Math.tan(v\/4),S=4\/3*o*k,E=4\/3*a*k,j=[e,t],C=[e+S*y,t-E*b],O=[n+S*w,r-E*x],M=[n,r];if(C[0]=2*j[0]-C[0],C[1]=2*j[1]-C[1],c)return[C,O,M].concat(p);{p=[C,O,M].concat(p);const e=[];for(let t=0;t<p.length;t+=3){const n=ue(p[t][0],p[t][1],u),r=ue(p[t+1][0],p[t+1][1],u),o=ue(p[t+2][0],p[t+2][1],u);e.push([n[0],n[1],r[0],r[1],o[0],o[1]])}return e}}const pe={randOffset:function(e,t){return Ee(e,t)},randOffsetWithRange:function(e,t,n){return Se(e,t,n)},ellipse:function(e,t,n,r,o){const a=ve(n,r,o);return be(e,t,o,a).opset},doubleLineOps:function(e,t,n,r,o){return je(e,t,n,r,o,!0)}};function fe(e,t,n,r,o){return{type:\"path\",ops:je(e,t,n,r,o)}}function he(e,t,n){const r=(e||[]).length;if(r>2){const o=[];for(let t=0;t<r-1;t++)o.push(...je(e[t][0],e[t][1],e[t+1][0],e[t+1][1],n));return t&&o.push(...je(e[r-1][0],e[r-1][1],e[0][0],e[0][1],n)),{type:\"path\",ops:o}}return 2===r?fe(e[0][0],e[0][1],e[1][0],e[1][1],n):{type:\"path\",ops:[]}}function me(e,t,n,r,o){return function(e,t){return he(e,!0,t)}([[e,t],[e+n,t],[e+n,t+r],[e,t+r]],o)}function ge(e,t){let n=Oe(e,1*(1+.2*t.roughness),t);if(!t.disableMultiStroke){const r=Oe(e,1.5*(1+.22*t.roughness),function(e){const t=Object.assign({},e);t.randomizer=void 0,e.seed&&(t.seed=e.seed+1);return t}(t));n=n.concat(r)}return{type:\"path\",ops:n}}function ve(e,t,n){const r=Math.sqrt(2*Math.PI*Math.sqrt((Math.pow(e\/2,2)+Math.pow(t\/2,2))\/2)),o=Math.max(n.curveStepCount,n.curveStepCount\/Math.sqrt(200)*r),a=2*Math.PI\/o;let i=Math.abs(e\/2),l=Math.abs(t\/2);const s=1-n.curveFitting;return i+=Ee(i*s,n),l+=Ee(l*s,n),{increment:a,rx:i,ry:l}}function be(e,t,n,r){const[o,a]=Ie(r.increment,e,t,r.rx,r.ry,1,r.increment*Se(.1,Se(.4,1,n),n),n);let i=Me(o,null,n);if(!n.disableMultiStroke){const[o]=Ie(r.increment,e,t,r.rx,r.ry,1.5,0,n),a=Me(o,null,n);i=i.concat(a)}return{estimatedPoints:a,opset:{type:\"path\",ops:i}}}function ye(e,t,n,r,o,a,i,l,s){const c=e,u=t;let d=Math.abs(n\/2),p=Math.abs(r\/2);d+=Ee(.01*d,s),p+=Ee(.01*p,s);let f=o,h=a;for(;f<0;)f+=2*Math.PI,h+=2*Math.PI;h-f>2*Math.PI&&(f=0,h=2*Math.PI);const m=2*Math.PI\/s.curveStepCount,g=Math.min(m\/2,(h-f)\/2),v=Pe(g,c,u,d,p,f,h,1,s);if(!s.disableMultiStroke){const e=Pe(g,c,u,d,p,f,h,1.5,s);v.push(...e)}return i&&(l?v.push(...je(c,u,c+d*Math.cos(f),u+p*Math.sin(f),s),...je(c,u,c+d*Math.cos(h),u+p*Math.sin(h),s)):v.push({op:\"lineTo\",data:[c,u]},{op:\"lineTo\",data:[c+d*Math.cos(f),u+p*Math.sin(f)]})),{type:\"path\",ops:v}}function xe(e,t){const n=[];if(e.length){const r=t.maxRandomnessOffset||0,o=e.length;if(o>2){n.push({op:\"move\",data:[e[0][0]+Ee(r,t),e[0][1]+Ee(r,t)]});for(let a=1;a<o;a++)n.push({op:\"lineTo\",data:[e[a][0]+Ee(r,t),e[a][1]+Ee(r,t)]})}}return{type:\"fillPath\",ops:n}}function we(e,t){return function(e,t){let n=e.fillStyle||\"hachure\";if(!re[n])switch(n){case\"zigzag\":re[n]||(re[n]=new Q(t));break;case\"cross-hatch\":re[n]||(re[n]=new J(t));break;case\"dots\":re[n]||(re[n]=new ee(t));break;case\"dashed\":re[n]||(re[n]=new te(t));break;case\"zigzag-line\":re[n]||(re[n]=new ne(t));break;case\"hachure\":default:n=\"hachure\",re[n]||(re[n]=new $(t))}return re[n]}(t,pe).fillPolygon(e,t)}function ke(e){return e.randomizer||(e.randomizer=new oe(e.seed||0)),e.randomizer.next()}function Se(e,t,n,r=1){return n.roughness*r*(ke(n)*(t-e)+e)}function Ee(e,t,n=1){return Se(-e,e,t,n)}function je(e,t,n,r,o,a=!1){const i=a?o.disableMultiStrokeFill:o.disableMultiStroke,l=Ce(e,t,n,r,o,!0,!1);if(i)return l;const s=Ce(e,t,n,r,o,!0,!0);return l.concat(s)}function Ce(e,t,n,r,o,a,i){const l=Math.pow(e-n,2)+Math.pow(t-r,2),s=Math.sqrt(l);let c=1;c=s<200?1:s>500?.4:-.0016668*s+1.233334;let u=o.maxRandomnessOffset||0;u*u*100>l&&(u=s\/10);const d=u\/2,p=.2+.2*ke(o);let f=o.bowing*o.maxRandomnessOffset*(r-t)\/200,h=o.bowing*o.maxRandomnessOffset*(e-n)\/200;f=Ee(f,o,c),h=Ee(h,o,c);const m=[],g=()=>Ee(d,o,c),v=()=>Ee(u,o,c),b=o.preserveVertices;return a&&(i?m.push({op:\"move\",data:[e+(b?0:g()),t+(b?0:g())]}):m.push({op:\"move\",data:[e+(b?0:Ee(u,o,c)),t+(b?0:Ee(u,o,c))]})),i?m.push({op:\"bcurveTo\",data:[f+e+(n-e)*p+g(),h+t+(r-t)*p+g(),f+e+2*(n-e)*p+g(),h+t+2*(r-t)*p+g(),n+(b?0:g()),r+(b?0:g())]}):m.push({op:\"bcurveTo\",data:[f+e+(n-e)*p+v(),h+t+(r-t)*p+v(),f+e+2*(n-e)*p+v(),h+t+2*(r-t)*p+v(),n+(b?0:v()),r+(b?0:v())]}),m}function Oe(e,t,n){const r=[];r.push([e[0][0]+Ee(t,n),e[0][1]+Ee(t,n)]),r.push([e[0][0]+Ee(t,n),e[0][1]+Ee(t,n)]);for(let o=1;o<e.length;o++)r.push([e[o][0]+Ee(t,n),e[o][1]+Ee(t,n)]),o===e.length-1&&r.push([e[o][0]+Ee(t,n),e[o][1]+Ee(t,n)]);return Me(r,null,n)}function Me(e,t,n){const r=e.length,o=[];if(r>3){const a=[],i=1-n.curveTightness;o.push({op:\"move\",data:[e[1][0],e[1][1]]});for(let t=1;t+2<r;t++){const n=e[t];a[0]=[n[0],n[1]],a[1]=[n[0]+(i*e[t+1][0]-i*e[t-1][0])\/6,n[1]+(i*e[t+1][1]-i*e[t-1][1])\/6],a[2]=[e[t+1][0]+(i*e[t][0]-i*e[t+2][0])\/6,e[t+1][1]+(i*e[t][1]-i*e[t+2][1])\/6],a[3]=[e[t+1][0],e[t+1][1]],o.push({op:\"bcurveTo\",data:[a[1][0],a[1][1],a[2][0],a[2][1],a[3][0],a[3][1]]})}if(t&&2===t.length){const e=n.maxRandomnessOffset;o.push({op:\"lineTo\",data:[t[0]+Ee(e,n),t[1]+Ee(e,n)]})}}else 3===r?(o.push({op:\"move\",data:[e[1][0],e[1][1]]}),o.push({op:\"bcurveTo\",data:[e[1][0],e[1][1],e[2][0],e[2][1],e[2][0],e[2][1]]})):2===r&&o.push(...je(e[0][0],e[0][1],e[1][0],e[1][1],n));return o}function Ie(e,t,n,r,o,a,i,l){const s=[],c=[],u=Ee(.5,l)-Math.PI\/2;c.push([Ee(a,l)+t+.9*r*Math.cos(u-e),Ee(a,l)+n+.9*o*Math.sin(u-e)]);for(let i=u;i<2*Math.PI+u-.01;i+=e){const e=[Ee(a,l)+t+r*Math.cos(i),Ee(a,l)+n+o*Math.sin(i)];s.push(e),c.push(e)}return c.push([Ee(a,l)+t+r*Math.cos(u+2*Math.PI+.5*i),Ee(a,l)+n+o*Math.sin(u+2*Math.PI+.5*i)]),c.push([Ee(a,l)+t+.98*r*Math.cos(u+i),Ee(a,l)+n+.98*o*Math.sin(u+i)]),c.push([Ee(a,l)+t+.9*r*Math.cos(u+.5*i),Ee(a,l)+n+.9*o*Math.sin(u+.5*i)]),[c,s]}function Pe(e,t,n,r,o,a,i,l,s){const c=a+Ee(.1,s),u=[];u.push([Ee(l,s)+t+.9*r*Math.cos(c-e),Ee(l,s)+n+.9*o*Math.sin(c-e)]);for(let a=c;a<=i;a+=e)u.push([Ee(l,s)+t+r*Math.cos(a),Ee(l,s)+n+o*Math.sin(a)]);return u.push([t+r*Math.cos(i),n+o*Math.sin(i)]),u.push([t+r*Math.cos(i),n+o*Math.sin(i)]),Me(u,null,s)}function Te(e,t,n,r,o,a,i,l){const s=[],c=[l.maxRandomnessOffset||1,(l.maxRandomnessOffset||1)+.3];let u=[0,0];const d=l.disableMultiStroke?1:2,p=l.preserveVertices;for(let f=0;f<d;f++)0===f?s.push({op:\"move\",data:[i[0],i[1]]}):s.push({op:\"move\",data:[i[0]+(p?0:Ee(c[0],l)),i[1]+(p?0:Ee(c[0],l))]}),u=p?[o,a]:[o+Ee(c[f],l),a+Ee(c[f],l)],s.push({op:\"bcurveTo\",data:[e+Ee(c[f],l),t+Ee(c[f],l),n+Ee(c[f],l),r+Ee(c[f],l),u[0],u[1]]});return s}function Ae(e){return[...e]}function Le(e,t){return Math.pow(e[0]-t[0],2)+Math.pow(e[1]-t[1],2)}function _e(e,t,n){const r=Le(t,n);if(0===r)return Le(e,t);let o=((e[0]-t[0])*(n[0]-t[0])+(e[1]-t[1])*(n[1]-t[1]))\/r;return o=Math.max(0,Math.min(1,o)),Le(e,De(t,n,o))}function De(e,t,n){return[e[0]+(t[0]-e[0])*n,e[1]+(t[1]-e[1])*n]}function ze(e,t,n,r){const o=r||[];if(function(e,t){const n=e[t+0],r=e[t+1],o=e[t+2],a=e[t+3];let i=3*r[0]-2*n[0]-a[0];i*=i;let l=3*r[1]-2*n[1]-a[1];l*=l;let s=3*o[0]-2*a[0]-n[0];s*=s;let c=3*o[1]-2*a[1]-n[1];return c*=c,i<s&&(i=s),l<c&&(l=c),i+l}(e,t)<n){const n=e[t+0];if(o.length){(a=o[o.length-1],i=n,Math.sqrt(Le(a,i)))>1&&o.push(n)}else o.push(n);o.push(e[t+3])}else{const r=.5,a=e[t+0],i=e[t+1],l=e[t+2],s=e[t+3],c=De(a,i,r),u=De(i,l,r),d=De(l,s,r),p=De(c,u,r),f=De(u,d,r),h=De(p,f,r);ze([a,c,p,h],0,n,o),ze([h,f,d,s],0,n,o)}var a,i;return o}function Be(e,t){return He(e,0,e.length,t)}function He(e,t,n,r,o){const a=o||[],i=e[t],l=e[n-1];let s=0,c=1;for(let r=t+1;r<n-1;++r){const t=_e(e[r],i,l);t>s&&(s=t,c=r)}return Math.sqrt(s)>r?(He(e,t,c+1,r,a),He(e,c,n,r,a)):(a.length||a.push(i),a.push(l)),a}function Ne(e,t=.15,n){const r=[],o=(e.length-1)\/3;for(let n=0;n<o;n++){ze(e,3*n,t,r)}return n&&n>0?He(r,0,r.length,n):r}const Re=\"none\";class Fe{constructor(e){this.defaultOptions={maxRandomnessOffset:2,roughness:1,bowing:1,stroke:\"#000\",strokeWidth:1,curveTightness:0,curveFitting:.95,curveStepCount:9,fillStyle:\"hachure\",fillWeight:-1,hachureAngle:-41,hachureGap:-1,dashOffset:-1,dashGap:-1,zigzagOffset:-1,seed:0,combineNestedSvgPaths:!1,disableMultiStroke:!1,disableMultiStrokeFill:!1,preserveVertices:!1},this.config=e||{},this.config.options&&(this.defaultOptions=this._o(this.config.options))}static newSeed(){return Math.floor(Math.random()*2**31)}_o(e){return e?Object.assign({},this.defaultOptions,e):this.defaultOptions}_d(e,t,n){return{shape:e,sets:t||[],options:n||this.defaultOptions}}line(e,t,n,r,o){const a=this._o(o);return this._d(\"line\",[fe(e,t,n,r,a)],a)}rectangle(e,t,n,r,o){const a=this._o(o),i=[],l=me(e,t,n,r,a);if(a.fill){const o=[[e,t],[e+n,t],[e+n,t+r],[e,t+r]];\"solid\"===a.fillStyle?i.push(xe(o,a)):i.push(we(o,a))}return a.stroke!==Re&&i.push(l),this._d(\"rectangle\",i,a)}ellipse(e,t,n,r,o){const a=this._o(o),i=[],l=ve(n,r,a),s=be(e,t,a,l);if(a.fill)if(\"solid\"===a.fillStyle){const n=be(e,t,a,l).opset;n.type=\"fillPath\",i.push(n)}else i.push(we(s.estimatedPoints,a));return a.stroke!==Re&&i.push(s.opset),this._d(\"ellipse\",i,a)}circle(e,t,n,r){const o=this.ellipse(e,t,n,n,r);return o.shape=\"circle\",o}linearPath(e,t){const n=this._o(t);return this._d(\"linearPath\",[he(e,!1,n)],n)}arc(e,t,n,r,o,a,i=!1,l){const s=this._o(l),c=[],u=ye(e,t,n,r,o,a,i,!0,s);if(i&&s.fill)if(\"solid\"===s.fillStyle){const i=ye(e,t,n,r,o,a,!0,!1,s);i.type=\"fillPath\",c.push(i)}else c.push(function(e,t,n,r,o,a,i){const l=e,s=t;let c=Math.abs(n\/2),u=Math.abs(r\/2);c+=Ee(.01*c,i),u+=Ee(.01*u,i);let d=o,p=a;for(;d<0;)d+=2*Math.PI,p+=2*Math.PI;p-d>2*Math.PI&&(d=0,p=2*Math.PI);const f=(p-d)\/i.curveStepCount,h=[];for(let e=d;e<=p;e+=f)h.push([l+c*Math.cos(e),s+u*Math.sin(e)]);return h.push([l+c*Math.cos(p),s+u*Math.sin(p)]),h.push([l,s]),we(h,i)}(e,t,n,r,o,a,s));return s.stroke!==Re&&c.push(u),this._d(\"arc\",c,s)}curve(e,t){const n=this._o(t),r=[],o=ge(e,n);if(n.fill&&n.fill!==Re&&e.length>=3){const t=Ne(function(e,t=0){const n=e.length;if(n<3)throw new Error(\"A curve must have at least three points.\");const r=[];if(3===n)r.push(Ae(e[0]),Ae(e[1]),Ae(e[2]),Ae(e[2]));else{const n=[];n.push(e[0],e[0]);for(let t=1;t<e.length;t++)n.push(e[t]),t===e.length-1&&n.push(e[t]);const o=[],a=1-t;r.push(Ae(n[0]));for(let e=1;e+2<n.length;e++){const t=n[e];o[0]=[t[0],t[1]],o[1]=[t[0]+(a*n[e+1][0]-a*n[e-1][0])\/6,t[1]+(a*n[e+1][1]-a*n[e-1][1])\/6],o[2]=[n[e+1][0]+(a*n[e][0]-a*n[e+2][0])\/6,n[e+1][1]+(a*n[e][1]-a*n[e+2][1])\/6],o[3]=[n[e+1][0],n[e+1][1]],r.push(o[1],o[2],o[3])}}return r}(e),10,(1+n.roughness)\/2);\"solid\"===n.fillStyle?r.push(xe(t,n)):r.push(we(t,n))}return n.stroke!==Re&&r.push(o),this._d(\"curve\",r,n)}polygon(e,t){const n=this._o(t),r=[],o=he(e,!0,n);return n.fill&&(\"solid\"===n.fillStyle?r.push(xe(e,n)):r.push(we(e,n))),n.stroke!==Re&&r.push(o),this._d(\"polygon\",r,n)}path(e,t){const n=this._o(t),r=[];if(!e)return this._d(\"path\",r,n);e=(e||\"\").replace(\/\\n\/g,\" \").replace(\/(-\\s)\/g,\"-\").replace(\"\/(ss)\/g\",\" \");const o=n.fill&&\"transparent\"!==n.fill&&n.fill!==Re,a=n.stroke!==Re,i=!!(n.simplification&&n.simplification<1),l=function(e,t,n){const r=ce(se(le(e))),o=[];let a=[],i=[0,0],l=[];const s=()=>{l.length>=4&&a.push(...Ne(l,t)),l=[]},c=()=>{s(),a.length&&(o.push(a),a=[])};for(const{key:e,data:t}of r)switch(e){case\"M\":c(),i=[t[0],t[1]],a.push(i);break;case\"L\":s(),a.push([t[0],t[1]]);break;case\"C\":if(!l.length){const e=a.length?a[a.length-1]:i;l.push([e[0],e[1]])}l.push([t[0],t[1]]),l.push([t[2],t[3]]),l.push([t[4],t[5]]);break;case\"Z\":s(),a.push([i[0],i[1]])}if(c(),!n)return o;const u=[];for(const e of o){const t=Be(e,n);t.length&&u.push(t)}return u}(e,1,i?4-4*n.simplification:(1+n.roughness)\/2);if(o)if(n.combineNestedSvgPaths){const e=[];l.forEach((t=>e.push(...t))),\"solid\"===n.fillStyle?r.push(xe(e,n)):r.push(we(e,n))}else l.forEach((e=>{\"solid\"===n.fillStyle?r.push(xe(e,n)):r.push(we(e,n))}));return a&&(i?l.forEach((e=>{r.push(he(e,!1,n))})):r.push(function(e,t){const n=ce(se(le(e))),r=[];let o=[0,0],a=[0,0];for(const{key:e,data:i}of n)switch(e){case\"M\":{const e=1*(t.maxRandomnessOffset||0),n=t.preserveVertices;r.push({op:\"move\",data:i.map((r=>r+(n?0:Ee(e,t))))}),a=[i[0],i[1]],o=[i[0],i[1]];break}case\"L\":r.push(...je(a[0],a[1],i[0],i[1],t)),a=[i[0],i[1]];break;case\"C\":{const[e,n,o,l,s,c]=i;r.push(...Te(e,n,o,l,s,c,a,t)),a=[s,c];break}case\"Z\":r.push(...je(a[0],a[1],o[0],o[1],t)),a=[o[0],o[1]]}return{type:\"path\",ops:r}}(e,n))),this._d(\"path\",r,n)}opsToPath(e,t){let n=\"\";for(const r of e.ops){const e=\"number\"==typeof t&&t>=0?r.data.map((e=>+e.toFixed(t))):r.data;switch(r.op){case\"move\":n+=`M${e[0]} ${e[1]} `;break;case\"bcurveTo\":n+=`C${e[0]} ${e[1]}, ${e[2]} ${e[3]}, ${e[4]} ${e[5]} `;break;case\"lineTo\":n+=`L${e[0]} ${e[1]} `}}return n.trim()}toPaths(e){const t=e.sets||[],n=e.options||this.defaultOptions,r=[];for(const e of t){let t=null;switch(e.type){case\"path\":t={d:this.opsToPath(e),stroke:n.stroke,strokeWidth:n.strokeWidth,fill:Re};break;case\"fillPath\":t={d:this.opsToPath(e),stroke:Re,strokeWidth:0,fill:n.fill||Re};break;case\"fillSketch\":t=this.fillSketch(e,n)}t&&r.push(t)}return r}fillSketch(e,t){let n=t.fillWeight;return n<0&&(n=t.strokeWidth\/2),{d:this.opsToPath(e),stroke:t.fill||Re,strokeWidth:n,fill:Re}}}class Ve{constructor(e,t){this.canvas=e,this.ctx=this.canvas.getContext(\"2d\"),this.gen=new Fe(t)}draw(e){const t=e.sets||[],n=e.options||this.getDefaultOptions(),r=this.ctx;for(const o of t)switch(o.type){case\"path\":r.save(),r.strokeStyle=\"none\"===n.stroke?\"transparent\":n.stroke,r.lineWidth=n.strokeWidth,n.strokeLineDash&&r.setLineDash(n.strokeLineDash),n.strokeLineDashOffset&&(r.lineDashOffset=n.strokeLineDashOffset),this._drawToContext(r,o),r.restore();break;case\"fillPath\":r.save(),r.fillStyle=n.fill||\"\";const t=\"curve\"===e.shape||\"polygon\"===e.shape?\"evenodd\":\"nonzero\";this._drawToContext(r,o,t),r.restore();break;case\"fillSketch\":this.fillSketch(r,o,n)}}fillSketch(e,t,n){let r=n.fillWeight;r<0&&(r=n.strokeWidth\/2),e.save(),n.fillLineDash&&e.setLineDash(n.fillLineDash),n.fillLineDashOffset&&(e.lineDashOffset=n.fillLineDashOffset),e.strokeStyle=n.fill||\"\",e.lineWidth=r,this._drawToContext(e,t),e.restore()}_drawToContext(e,t,n=\"nonzero\"){e.beginPath();for(const n of t.ops){const t=n.data;switch(n.op){case\"move\":e.moveTo(t[0],t[1]);break;case\"bcurveTo\":e.bezierCurveTo(t[0],t[1],t[2],t[3],t[4],t[5]);break;case\"lineTo\":e.lineTo(t[0],t[1])}}\"fillPath\"===t.type?e.fill(n):e.stroke()}get generator(){return this.gen}getDefaultOptions(){return this.gen.defaultOptions}line(e,t,n,r,o){const a=this.gen.line(e,t,n,r,o);return this.draw(a),a}rectangle(e,t,n,r,o){const a=this.gen.rectangle(e,t,n,r,o);return this.draw(a),a}ellipse(e,t,n,r,o){const a=this.gen.ellipse(e,t,n,r,o);return this.draw(a),a}circle(e,t,n,r){const o=this.gen.circle(e,t,n,r);return this.draw(o),o}linearPath(e,t){const n=this.gen.linearPath(e,t);return this.draw(n),n}polygon(e,t){const n=this.gen.polygon(e,t);return this.draw(n),n}arc(e,t,n,r,o,a,i=!1,l){const s=this.gen.arc(e,t,n,r,o,a,i,l);return this.draw(s),s}curve(e,t){const n=this.gen.curve(e,t);return this.draw(n),n}path(e,t){const n=this.gen.path(e,t);return this.draw(n),n}}const Ge=\"http:\/\/www.w3.org\/2000\/svg\";class Ue{constructor(e,t){this.svg=e,this.gen=new Fe(t)}draw(e){const t=e.sets||[],n=e.options||this.getDefaultOptions(),r=this.svg.ownerDocument||window.document,o=r.createElementNS(Ge,\"g\"),a=e.options.fixedDecimalPlaceDigits;for(const i of t){let t=null;switch(i.type){case\"path\":t=r.createElementNS(Ge,\"path\"),t.setAttribute(\"d\",this.opsToPath(i,a)),t.setAttribute(\"stroke\",n.stroke),t.setAttribute(\"stroke-width\",n.strokeWidth+\"\"),t.setAttribute(\"fill\",\"none\"),n.strokeLineDash&&t.setAttribute(\"stroke-dasharray\",n.strokeLineDash.join(\" \").trim()),n.strokeLineDashOffset&&t.setAttribute(\"stroke-dashoffset\",`${n.strokeLineDashOffset}`);break;case\"fillPath\":t=r.createElementNS(Ge,\"path\"),t.setAttribute(\"d\",this.opsToPath(i,a)),t.setAttribute(\"stroke\",\"none\"),t.setAttribute(\"stroke-width\",\"0\"),t.setAttribute(\"fill\",n.fill||\"\"),\"curve\"!==e.shape&&\"polygon\"!==e.shape||t.setAttribute(\"fill-rule\",\"evenodd\");break;case\"fillSketch\":t=this.fillSketch(r,i,n)}t&&o.appendChild(t)}return o}fillSketch(e,t,n){let r=n.fillWeight;r<0&&(r=n.strokeWidth\/2);const o=e.createElementNS(Ge,\"path\");return o.setAttribute(\"d\",this.opsToPath(t,n.fixedDecimalPlaceDigits)),o.setAttribute(\"stroke\",n.fill||\"\"),o.setAttribute(\"stroke-width\",r+\"\"),o.setAttribute(\"fill\",\"none\"),n.fillLineDash&&o.setAttribute(\"stroke-dasharray\",n.fillLineDash.join(\" \").trim()),n.fillLineDashOffset&&o.setAttribute(\"stroke-dashoffset\",`${n.fillLineDashOffset}`),o}get generator(){return this.gen}getDefaultOptions(){return this.gen.defaultOptions}opsToPath(e,t){return this.gen.opsToPath(e,t)}line(e,t,n,r,o){const a=this.gen.line(e,t,n,r,o);return this.draw(a)}rectangle(e,t,n,r,o){const a=this.gen.rectangle(e,t,n,r,o);return this.draw(a)}ellipse(e,t,n,r,o){const a=this.gen.ellipse(e,t,n,r,o);return this.draw(a)}circle(e,t,n,r){const o=this.gen.circle(e,t,n,r);return this.draw(o)}linearPath(e,t){const n=this.gen.linearPath(e,t);return this.draw(n)}polygon(e,t){const n=this.gen.polygon(e,t);return this.draw(n)}arc(e,t,n,r,o,a,i=!1,l){const s=this.gen.arc(e,t,n,r,o,a,i,l);return this.draw(s)}curve(e,t){const n=this.gen.curve(e,t);return this.draw(n)}path(e,t){const n=this.gen.path(e,t);return this.draw(n)}}var Ke={canvas:(e,t)=>new Ve(e,t),svg:(e,t)=>new Ue(e,t),generator:e=>new Fe(e),newSeed:()=>Fe.newSeed()};function We(e){var t,n,r=\"\";if(\"string\"==typeof e||\"number\"==typeof e)r+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=We(e[t]))&&(r&&(r+=\" \"),r+=n);else for(t in e)e[t]&&(r&&(r+=\" \"),r+=t);return r}function Ze(){for(var e,t,n=0,r=\"\";n<arguments.length;)(e=arguments[n++])&&(t=We(e))&&(r&&(r+=\" \"),r+=t);return r}let Ye=(e=21)=>{let t=\"\",n=crypto.getRandomValues(new Uint8Array(e));for(;e--;){let r=63&n[e];t+=r<36?r.toString(36):r<62?(r-26).toString(36).toUpperCase():r<63?\"_\":\"-\"}return t};var Xe=function(e){return null!=e&&\"text\"===e.type},qe=function(e){return null!=e&&$e(e.type)},$e=function(e){return\"freedraw\"===e},Qe=function(e){return null!=e&&Je(e.type)},Je=function(e){return\"arrow\"===e||\"line\"===e},et=function(e){return null!=e&&tt(e.type)},tt=function(e){return\"arrow\"===e},nt=function(e){return null!=e&&(\"rectangle\"===e.type||\"diamond\"===e.type||\"ellipse\"===e.type||\"text\"===e.type)},rt=function(e,t,n,r,o){return[(e-n)*Math.cos(o)-(t-r)*Math.sin(o)+n,(e-n)*Math.sin(o)+(t-r)*Math.cos(o)+r]},ot=function(e,t,n){return rt(e[0],e[1],t[0],t[1],n)},at=function(e,t,n,r,o,a,i,l){var s=Math.cos(r),c=Math.sin(r);return e.e&&e.w?t+=o+i:e.e?(t+=o*(1+s),n+=o*c,t+=i*(1-s),n+=i*-c):e.w&&(t+=o*(1-s),n+=o*-c,t+=i*(1+s),n+=i*c),e.n&&e.s?n+=a+l:e.n?(t+=a*c,n+=a*(1-s),t+=l*-c,n+=l*(1+s)):e.s&&(t+=a*-c,n+=a*(1+s),t+=l*c,n+=l*(1-s)),[t,n]},it=function(e,t,n,r){var o=n-e,a=r-t;return Math.hypot(o,a)},lt=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;if(e.length>=3){var n=[e[0],e[e.length-1]],r=n[0],o=n[1],a=it(r[0],r[1],o[0],o[1]);return a<=c.qx\/t}return!1},st=function(e,t,n){var r=e.length;if(r<3)return!1;for(var o=[Number.MAX_SAFE_INTEGER,n],a=[t,n],i=0,l=0;l<r;l++){var s=e[l],c=e[(l+1)%r];if(dt(s,c,a,o)){if(0===ut(s,a,c))return ct(s,a,c);i++}}return i%2==1},ct=function(e,t,n){return t[0]<=Math.max(e[0],n[0])&&t[0]>=Math.min(e[0],n[0])&&t[1]<=Math.max(e[1],n[1])&&t[1]>=Math.min(e[1],n[1])},ut=function(e,t,n){var r=(t[1]-e[1])*(n[0]-t[0])-(t[0]-e[0])*(n[1]-t[1]);return 0===r?0:r>0?1:2},dt=function(e,t,n,r){var o=ut(e,t,n),a=ut(e,t,r),i=ut(n,r,e),l=ut(n,r,t);return o!==a&&i!==l||(!(0!==o||!ct(e,n,t))||(!(0!==a||!ct(e,r,t))||(!(0!==i||!ct(n,e,r))||!(0!==l||!ct(n,t,r)))))},pt=function(e,t,n){return n?[Math.round(e\/n)*n,Math.round(t\/n)*n]:[e,t]},ft=function(e,t,n){var r=n.map((function(t){return t[e]})),o=Math.max.apply(Math,F(r)),a=Math.min.apply(Math,F(r)),i=o-a,l=0===i?1:t\/i,s=1\/0,c=n.map((function(t){return t.map((function(t,n){if(n!==e)return t;var r=t*l;return s=Math.min(r,s),r}))}));if(2===c.length)return c;var u=a-s;return c.map((function(t){return t.map((function(t,n){return n===e?t+u:t}))}))};function ht(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return mt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return mt(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function mt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var gt=function(e){return qe(e)?xt(e):Qe(e)?wt(e):[e.x,e.y,e.x+e.width,e.y+e.height]},vt=function(e){var t,n=ht(e.sets);try{for(n.s();!(t=n.n()).done;){var r=t.value;if(\"path\"===r.type)return r.ops}}catch(e){n.e(e)}finally{n.f()}return e.sets[0].ops},bt=function(e,t){var n=[0,0],r=e.reduce((function(e,r){var o=r.op,a=r.data;if(\"move\"===o)n=a;else if(\"bcurveTo\"===o){var i=[a[0],a[1]],l=[a[2],a[3]],s=[a[4],a[5]],c=n;n=s;for(var u=function(e,t){return Math.pow(1-e,3)*s[t]+3*e*Math.pow(1-e,2)*l[t]+3*Math.pow(e,2)*(1-e)*i[t]+c[t]*Math.pow(e,3)},d=0;d<=1;){var p=u(d,0),f=u(d,1);if(t){var h=R(t(p,f),2);p=h[0],f=h[1]}e.minY=Math.min(e.minY,f),e.minX=Math.min(e.minX,p),e.maxX=Math.max(e.maxX,p),e.maxY=Math.max(e.maxY,f),d+=.1}}return e}),{minX:1\/0,minY:1\/0,maxX:-1\/0,maxY:-1\/0});return[r.minX,r.minY,r.maxX,r.maxY]},yt=function(e){var t,n=1\/0,r=1\/0,o=-1\/0,a=-1\/0,i=ht(e);try{for(i.s();!(t=i.n()).done;){var l=R(t.value,2),s=l[0],c=l[1];n=Math.min(n,s),r=Math.min(r,c),o=Math.max(o,s),a=Math.max(a,c)}}catch(e){i.e(e)}finally{i.f()}return[n,r,o,a]},xt=function(e){var t=R(yt(e.points),4),n=t[0],r=t[1],o=t[2],a=t[3];return[n+e.x,r+e.y,o+e.x,a+e.y]},wt=function(e){var t;if(e.points.length<2||!Br(e)){var n=e.points.reduce((function(e,t){var n=R(t,2),r=n[0],o=n[1];return e.minY=Math.min(e.minY,o),e.minX=Math.min(e.minX,r),e.maxX=Math.max(e.maxX,r),e.maxY=Math.max(e.maxY,o),e}),{minX:1\/0,minY:1\/0,maxX:-1\/0,maxY:-1\/0}),r=n.minX,o=n.minY,a=n.maxX,i=n.maxY;t=[r+e.x,o+e.y,a+e.x,i+e.y]}else{var l=Br(e),s=vt(l[0]),c=R(bt(s),4),u=c[0],d=c[1],p=c[2],f=c[3];t=[u+e.x,d+e.y,p+e.x,f+e.y]}return t},kt=function(e){var t,n=R(gt(e),4),r=n[0],o=n[1],a=n[2],i=n[3],l=(r+a)\/2,s=(o+i)\/2;if(qe(e)){var c=yt(e.points.map((function(t){var n=R(t,2),r=n[0],o=n[1];return rt(r,o,l-e.x,s-e.y,e.angle)}))),u=R(c,4),d=u[0],p=u[1],f=u[2],h=u[3];return[d+e.x,p+e.y,f+e.x,h+e.y]}if(Qe(e))t=function(e,t,n){if(e.points.length<2||!Br(e)){var r=e.points.reduce((function(r,o){var a=R(o,2),i=a[0],l=a[1],s=R(rt(e.x+i,e.y+l,t,n,e.angle),2);return i=s[0],l=s[1],r.minY=Math.min(r.minY,l),r.minX=Math.min(r.minX,i),r.maxX=Math.max(r.maxX,i),r.maxY=Math.max(r.maxY,l),r}),{minX:1\/0,minY:1\/0,maxX:-1\/0,maxY:-1\/0});return[r.minX,r.minY,r.maxX,r.maxY]}var o=Br(e),a=vt(o[0]);return bt(a,(function(r,o){return rt(e.x+r,e.y+o,t,n,e.angle)}))}(e,l,s);else if(\"diamond\"===e.type){var m=R(rt(l,o,l,s,e.angle),2),g=m[0],v=m[1],b=R(rt(l,i,l,s,e.angle),2),y=b[0],x=b[1],w=R(rt(r,s,l,s,e.angle),2),k=w[0],S=w[1],E=R(rt(a,s,l,s,e.angle),2),j=E[0],C=E[1];t=[Math.min(g,y,k,j),Math.min(v,x,S,C),Math.max(g,y,k,j),Math.max(v,x,S,C)]}else if(\"ellipse\"===e.type){var O=(a-r)\/2,M=(i-o)\/2,I=Math.cos(e.angle),P=Math.sin(e.angle),T=Math.hypot(O*I,M*P),A=Math.hypot(M*I,O*P);t=[l-T,s-A,l+T,s+A]}else{var L=R(rt(r,o,l,s,e.angle),2),_=L[0],D=L[1],z=R(rt(r,i,l,s,e.angle),2),B=z[0],H=z[1],N=R(rt(a,i,l,s,e.angle),2),F=N[0],V=N[1],G=R(rt(a,o,l,s,e.angle),2),U=G[0],K=G[1];t=[Math.min(_,B,F,U),Math.min(D,H,V,K),Math.max(_,B,F,U),Math.max(D,H,V,K)]}return t},St=function(e){if(!e.length)return[0,0,0,0];var t=1\/0,n=-1\/0,r=1\/0,o=-1\/0;return e.forEach((function(e){var a=R(kt(e),4),i=a[0],l=a[1],s=a[2],c=a[3];t=Math.min(t,i),r=Math.min(r,l),n=Math.max(n,s),o=Math.max(o,c)})),[t,r,n,o]},Et=function(e,t,n){if(!Qe(e)&&!qe(e))return[e.x,e.y,e.x+t,e.y+n];var r,o=ft(0,t,ft(1,n,e.points));if(qe(e))r=yt(o);else{var a=Ke.generator(),i=\"sharp\"===e.strokeSharpness?a.linearPath(o,Nr(e)):a.curve(o,Nr(e)),l=vt(i);r=bt(l)}var s=R(r,4),c=s[0],u=s[1],d=s[2],p=s[3];return[c+e.x,u+e.y,d+e.x,p+e.y]},jt=function(e,t,n){var r=Ke.generator(),o=\"sharp\"===n?r.linearPath(t,Nr(e)):r.curve(t,Nr(e)),a=vt(o),i=R(bt(a),4),l=i[0],s=i[1],c=i[2],u=i[3];return[l+e.x,s+e.y,c+e.x,u+e.y]},Ct=JSON.parse('{\"white\":\"#ffffff\",\"black\":\"#000000\",\"gray\":[\"#f8f9fa\",\"#f1f3f5\",\"#e9ecef\",\"#dee2e6\",\"#ced4da\",\"#adb5bd\",\"#868e96\",\"#495057\",\"#343a40\",\"#212529\"],\"red\":[\"#fff5f5\",\"#ffe3e3\",\"#ffc9c9\",\"#ffa8a8\",\"#ff8787\",\"#ff6b6b\",\"#fa5252\",\"#f03e3e\",\"#e03131\",\"#c92a2a\"],\"pink\":[\"#fff0f6\",\"#ffdeeb\",\"#fcc2d7\",\"#faa2c1\",\"#f783ac\",\"#f06595\",\"#e64980\",\"#d6336c\",\"#c2255c\",\"#a61e4d\"],\"grape\":[\"#f8f0fc\",\"#f3d9fa\",\"#eebefa\",\"#e599f7\",\"#da77f2\",\"#cc5de8\",\"#be4bdb\",\"#ae3ec9\",\"#9c36b5\",\"#862e9c\"],\"violet\":[\"#f3f0ff\",\"#e5dbff\",\"#d0bfff\",\"#b197fc\",\"#9775fa\",\"#845ef7\",\"#7950f2\",\"#7048e8\",\"#6741d9\",\"#5f3dc4\"],\"indigo\":[\"#edf2ff\",\"#dbe4ff\",\"#bac8ff\",\"#91a7ff\",\"#748ffc\",\"#5c7cfa\",\"#4c6ef5\",\"#4263eb\",\"#3b5bdb\",\"#364fc7\"],\"blue\":[\"#e7f5ff\",\"#d0ebff\",\"#a5d8ff\",\"#74c0fc\",\"#4dabf7\",\"#339af0\",\"#228be6\",\"#1c7ed6\",\"#1971c2\",\"#1864ab\"],\"cyan\":[\"#e3fafc\",\"#c5f6fa\",\"#99e9f2\",\"#66d9e8\",\"#3bc9db\",\"#22b8cf\",\"#15aabf\",\"#1098ad\",\"#0c8599\",\"#0b7285\"],\"teal\":[\"#e6fcf5\",\"#c3fae8\",\"#96f2d7\",\"#63e6be\",\"#38d9a9\",\"#20c997\",\"#12b886\",\"#0ca678\",\"#099268\",\"#087f5b\"],\"green\":[\"#ebfbee\",\"#d3f9d8\",\"#b2f2bb\",\"#8ce99a\",\"#69db7c\",\"#51cf66\",\"#40c057\",\"#37b24d\",\"#2f9e44\",\"#2b8a3e\"],\"lime\":[\"#f4fce3\",\"#e9fac8\",\"#d8f5a2\",\"#c0eb75\",\"#a9e34b\",\"#94d82d\",\"#82c91e\",\"#74b816\",\"#66a80f\",\"#5c940d\"],\"yellow\":[\"#fff9db\",\"#fff3bf\",\"#ffec99\",\"#ffe066\",\"#ffd43b\",\"#fcc419\",\"#fab005\",\"#f59f00\",\"#f08c00\",\"#e67700\"],\"orange\":[\"#fff4e6\",\"#ffe8cc\",\"#ffd8a8\",\"#ffc078\",\"#ffa94d\",\"#ff922b\",\"#fd7e14\",\"#f76707\",\"#e8590c\",\"#d9480f\"]}'),Ot=function(e){return[Ct.red[e],Ct.pink[e],Ct.grape[e],Ct.violet[e],Ct.indigo[e],Ct.blue[e],Ct.cyan[e],Ct.teal[e],Ct.green[e],Ct.lime[e],Ct.yellow[e],Ct.orange[e]]},Mt={canvasBackground:[Ct.white,Ct.gray[0],Ct.gray[1]].concat(F(Ot(0))),elementBackground:[\"transparent\",Ct.gray[4],Ct.gray[6]].concat(F(Ot(6))),elementStroke:[Ct.black,Ct.gray[8],Ct.gray[7]].concat(F(Ot(9)))},It=n(6207),Pt=\/Mac|iPod|iPhone|iPad\/.test(window.navigator.platform),Tt=\/^Win\/.test(window.navigator.platform),At=\"Equal\",Lt=\"Minus\",_t=\"NumpadAdd\",Dt=\"NumpadSubtract\",zt=\"Numpad0\",Bt=\"BracketRight\",Ht=\"BracketLeft\",Nt=\"Digit1\",Rt=\"Digit2\",Ft=\"Digit9\",Vt=\"Quote\",Gt=\"Digit0\",Ut=\"Slash\",Kt=\"KeyC\",Wt=\"KeyD\",Zt=\"KeyG\",Yt=\"KeyF\",Xt=\"KeyH\",qt=\"KeyV\",$t=\"KeyX\",Qt=\"KeyZ\",Jt=\"KeyR\",en=\"ArrowDown\",tn=\"ArrowLeft\",nn=\"ArrowRight\",rn=\"ArrowUp\",on=\"Backspace\",an=\"Alt\",ln=Pt?\"metaKey\":\"ctrlKey\",sn=\"Delete\",cn=\"Enter\",un=\"Escape\",dn=\"?\",pn=\" \",fn=\"Tab\",hn=\"a\",mn=\"d\",gn=\"e\",vn=\"g\",bn=\"l\",yn=\"o\",xn=\"p\",wn=\"q\",kn=\"r\",Sn=\"s\",En=\"t\",jn=\"v\",Cn=\"x\",On=\"y\",Mn=\"z\",In=function(e){return e===tn||e===nn||e===en||e===rn},Pn=function(e){return e.altKey},Tn=function(e){return e.shiftKey},An=function(e){return e.shiftKey},Ln=\"http:\/\/www.w3.org\/2000\/svg\",_n=null,Dn=function(){if(_n)return _n;var e=new Date,t=e.getFullYear(),n=\"\".concat(e.getMonth()+1).padStart(2,\"0\"),r=\"\".concat(e.getDate()).padStart(2,\"0\"),o=\"\".concat(e.getHours()).padStart(2,\"0\"),a=\"\".concat(e.getMinutes()).padStart(2,\"0\");return\"\".concat(t,\"-\").concat(n,\"-\").concat(r,\"-\").concat(o).concat(a)},zn=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},Bn=function(e){return e instanceof HTMLElement&&\"wysiwyg\"===e.dataset.type||e instanceof HTMLBRElement||e instanceof HTMLTextAreaElement||e instanceof HTMLInputElement&&(\"text\"===e.type||\"number\"===e.type)},Hn=function(e){for(var t=e.fontFamily,n=0,r=Object.entries(c.ut);n<r.length;n++){var o=R(r[n],2),a=o[0];if(o[1]===t)return\"\".concat(a,\", \").concat(c._D)}return c._D},Nn=function(e){var t=e.fontSize,n=e.fontFamily;return\"\".concat(t,\"px \").concat(Hn({fontFamily:n}))},Rn=function(e,t){var n=document.createElement(\"div\"),r=document.body;n.style.position=\"absolute\",n.style.whiteSpace=\"pre\",n.style.font=t,r.appendChild(n),n.innerText=e.split(\"\\n\").map((function(e){return e||\" \"})).join(\"\\n\");var o=n.offsetWidth,a=n.offsetHeight,i=document.createElement(\"span\");i.style.display=\"inline-block\",i.style.overflow=\"hidden\",i.style.width=\"1px\",i.style.height=\"1px\",n.appendChild(i);var l=i.offsetTop+i.offsetHeight;return document.body.removeChild(n),{width:o,height:a,baseline:l}},Fn=function(e,t){var n=0,r=null,o=function(){for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];r=a,clearTimeout(n),n=window.setTimeout((function(){r=null,e.apply(void 0,a)}),t)};return o.flush=function(){if(clearTimeout(n),r){var t=r;r=null,e.apply(void 0,F(t))}},o.cancel=function(){r=null,clearTimeout(n)},o},Vn=function(e,t){return Math.abs(e-t)},Gn=function(e){e&&(e.style.cursor=\"\")},Un=function(e,t){e&&(e.style.cursor=t)},Kn=function(e,t){e&&(\"selection\"===t?Gn(e):e.style.cursor=c.oc.CROSSHAIR)},Wn=function(){var e;return\"HTML\"===(null===(e=document.fullscreenElement)||void 0===e?void 0:e.nodeName)},Zn=function(e){return e=e.replace(\/\\bAlt\\b\/i,\"Alt\").replace(\/\\bShift\\b\/i,\"Shift\").replace(\/\\b(Enter|Return)\\b\/i,\"Enter\").replace(\/\\bDel\\b\/i,\"Delete\"),Pt?e.replace(\/\\bCtrlOrCmd\\b\/i,\"Cmd\").replace(\/\\bAlt\\b\/i,\"Option\"):e.replace(\/\\bCtrlOrCmd\\b\/i,\"Ctrl\")},Yn=function(e,t){var n=e.clientX,r=e.clientY,o=t.zoom,a=t.offsetLeft,i=t.offsetTop,l=t.scrollX,s=t.scrollY,c=1\/o.value;return{x:(n-o.translation.x-a)*c-l,y:(r-o.translation.y-i)*c-s}},Xn=function(e,t){var n=e.sceneX,r=e.sceneY,o=t.zoom,a=t.offsetLeft,i=t.offsetTop,l=t.scrollX,s=t.scrollY;return{x:(n+l+a)*o.value+o.translation.x,y:(r+s+i)*o.value+o.translation.y}},qn=function(e){return getComputedStyle(document.documentElement).getPropertyValue(\"--\".concat(e))},$n=new RegExp(\"^[^\".concat(\"A-Za-z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u0300-\u0590\u0800-\u1fff\u2c00-\ufb1c\ufdfe-\ufe6f\ufefd-\uffff\",\"]*[\").concat(\"\u0591-\u07ff\ufb1d-\ufdfd\ufe70-\ufefc\",\"]\")),Qn=function(e){return $n.test(e)},Jn=function(e){var t=R(e,2);return{x:t[0],y:t[1]}},er=function(e){if(\"AbortError\"!==(null==e?void 0:e.name))throw e},tr=function(e){var t=5===e.length&&\"0\"===e.substr(4,1),n=9===e.length&&\"00\"===e.substr(7,2);return t||n||e===Mt.elementBackground[0]},nr=function(e){return function(t){(0,It.unstable_batchedUpdates)(e,t)}};function rr(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return or(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return or(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function or(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ar=c.ZB.includes(devicePixelRatio)?devicePixelRatio:1,ir=function(){return{theme:\"light\",collaborators:new Map,currentChartType:\"bar\",currentItemBackgroundColor:\"transparent\",currentItemEndArrowhead:\"arrow\",currentItemFillStyle:\"hachure\",currentItemFontFamily:c.rk,currentItemFontSize:c.n5,currentItemLinearStrokeSharpness:\"round\",currentItemOpacity:100,currentItemRoughness:1,currentItemStartArrowhead:null,currentItemStrokeColor:Ct.black,currentItemStrokeSharpness:\"sharp\",currentItemStrokeStyle:\"solid\",currentItemStrokeWidth:1,currentItemTextAlign:c.Hg,cursorButton:\"up\",draggingElement:null,editingElement:null,editingGroupId:null,editingLinearElement:null,elementLocked:!1,elementType:\"selection\",errorMessage:null,exportBackground:!0,exportScale:ar,exportEmbedScene:!1,exportWithDarkMode:!1,fileHandle:null,gridSize:null,isBindingEnabled:!0,isLibraryOpen:!1,isLoading:!1,isResizing:!1,isRotating:!1,lastPointerDownWith:\"mouse\",multiElement:null,name:\"\".concat(L(\"labels.untitled\"),\"-\").concat(Dn()),openMenu:null,openPopup:null,pasteDialog:{shown:!1,data:null},previousSelectedElementIds:{},resizingElement:null,scrolledOutside:!1,scrollX:0,scrollY:0,selectedElementIds:{},selectedGroupIds:{},selectionElement:null,shouldCacheIgnoreZoom:!1,showHelpDialog:!1,showStats:!1,startBoundElement:null,suggestedBindings:[],toastMessage:null,viewBackgroundColor:Ct.white,zenModeEnabled:!1,zoom:{value:1,translation:{x:0,y:0}},viewModeEnabled:!1}},lr={theme:{browser:!0,export:!1},collaborators:{browser:!1,export:!1},currentChartType:{browser:!0,export:!1},currentItemBackgroundColor:{browser:!0,export:!1},currentItemEndArrowhead:{browser:!0,export:!1},currentItemFillStyle:{browser:!0,export:!1},currentItemFontFamily:{browser:!0,export:!1},currentItemFontSize:{browser:!0,export:!1},currentItemLinearStrokeSharpness:{browser:!0,export:!1},currentItemOpacity:{browser:!0,export:!1},currentItemRoughness:{browser:!0,export:!1},currentItemStartArrowhead:{browser:!0,export:!1},currentItemStrokeColor:{browser:!0,export:!1},currentItemStrokeSharpness:{browser:!0,export:!1},currentItemStrokeStyle:{browser:!0,export:!1},currentItemStrokeWidth:{browser:!0,export:!1},currentItemTextAlign:{browser:!0,export:!1},cursorButton:{browser:!0,export:!1},draggingElement:{browser:!1,export:!1},editingElement:{browser:!1,export:!1},editingGroupId:{browser:!0,export:!1},editingLinearElement:{browser:!1,export:!1},elementLocked:{browser:!0,export:!1},elementType:{browser:!0,export:!1},errorMessage:{browser:!1,export:!1},exportBackground:{browser:!0,export:!1},exportEmbedScene:{browser:!0,export:!1},exportScale:{browser:!0,export:!1},exportWithDarkMode:{browser:!0,export:!1},fileHandle:{browser:!1,export:!1},gridSize:{browser:!0,export:!0},height:{browser:!1,export:!1},isBindingEnabled:{browser:!1,export:!1},isLibraryOpen:{browser:!1,export:!1},isLoading:{browser:!1,export:!1},isResizing:{browser:!1,export:!1},isRotating:{browser:!1,export:!1},lastPointerDownWith:{browser:!0,export:!1},multiElement:{browser:!1,export:!1},name:{browser:!0,export:!1},offsetLeft:{browser:!1,export:!1},offsetTop:{browser:!1,export:!1},openMenu:{browser:!0,export:!1},openPopup:{browser:!1,export:!1},pasteDialog:{browser:!1,export:!1},previousSelectedElementIds:{browser:!0,export:!1},resizingElement:{browser:!1,export:!1},scrolledOutside:{browser:!0,export:!1},scrollX:{browser:!0,export:!1},scrollY:{browser:!0,export:!1},selectedElementIds:{browser:!0,export:!1},selectedGroupIds:{browser:!0,export:!1},selectionElement:{browser:!1,export:!1},shouldCacheIgnoreZoom:{browser:!0,export:!1},showHelpDialog:{browser:!1,export:!1},showStats:{browser:!0,export:!1},startBoundElement:{browser:!1,export:!1},suggestedBindings:{browser:!1,export:!1},toastMessage:{browser:!1,export:!1},viewBackgroundColor:{browser:!0,export:!0},width:{browser:!1,export:!1},zenModeEnabled:{browser:!0,export:!1},zoom:{browser:!0,export:!1},viewModeEnabled:{browser:!1,export:!1}},sr=function(e,t){var n,r={},o=rr(Object.keys(e));try{for(o.s();!(n=o.n()).done;){var a=n.value,i=lr[a];null!=i&&i[t]&&(r[a]=e[a])}}catch(e){o.e(e)}finally{o.f()}return r},cr=function(e){return sr(e,\"export\")};function ur(e,t,n,r=(e=>e)){return e*r(.5-t*(.5-n))}function dr(e,t){return[e[0]+t[0],e[1]+t[1]]}function pr(e,t){return[e[0]-t[0],e[1]-t[1]]}function fr(e,t){return[e[0]*t,e[1]*t]}function hr(e){return[e[1],-e[0]]}function mr(e,t){return e[0]*t[0]+e[1]*t[1]}function gr(e,t){return e[0]===t[0]&&e[1]===t[1]}function vr(e,t){return function(e){return e[0]*e[0]+e[1]*e[1]}(pr(e,t))}function br(e){return function(e,t){return[e[0]\/t,e[1]\/t]}(e,function(e){return Math.hypot(e[0],e[1])}(e))}function yr(e,t){return Math.hypot(e[1]-t[1],e[0]-t[0])}function xr(e,t,n){let r=Math.sin(n),o=Math.cos(n),a=e[0]-t[0],i=e[1]-t[1],l=a*r+i*o;return[a*o-i*r+t[0],l+t[1]]}function wr(e,t,n){return dr(e,fr(pr(t,e),n))}function kr(e,t,n){return dr(e,fr(t,n))}var{min:Sr,PI:Er}=Math,jr=Er+1e-4;function Cr(e,t={}){var n;let{size:r=16,smoothing:o=.5,thinning:a=.5,simulatePressure:i=!0,easing:l=(e=>e),start:s={},end:c={},last:u=!1}=t,{cap:d=!0,taper:p=0,easing:f=(e=>e*(2-e))}=s,{cap:h=!0,taper:m=0,easing:g=(e=>--e*e*e+1)}=c;if(0===e.length)return[];let v,b=e[e.length-1].runningLength,y=Math.pow(r*o,2),x=[],w=[],k=e.slice(0,10).reduce(((e,t)=>{let n=t.pressure;if(i){let o=Sr(1,t.distance\/r),a=Sr(1,1-o);n=Sr(1,e+.275*o*(a-e))}return(e+n)\/2}),e[0].pressure),S=ur(r,a,e[e.length-1].pressure,l),E=e[0].vector,j=e[0].point,C=j,O=j,M=C,I=!0;for(let t=0;t<e.length-1;t++){let{pressure:o}=e[t],{point:s,vector:c,distance:u,runningLength:d}=e[t];if(t>0&&I&&d<r\/2)continue;if(I&&(I=!1),a){if(i){let e=Sr(1,u\/r),t=Sr(1,1-e);o=Sr(1,k+.275*e*(t-k))}S=ur(r,a,o,l)}else S=r\/2;void 0===v&&(v=S);let h=d<p?f(d\/p):1,P=b-d<m?g((b-d)\/m):1;S=Math.max(.01,S*Math.min(h,P));let T=(null==(n=e[t+1])?void 0:n.vector)||c,A=mr(c,T);if(A<0){let e=fr(hr(E),S);for(let t=1\/13,n=0;n<=1;n+=t)M=xr(dr(s,e),s,jr*-n),O=xr(pr(s,e),s,jr*n),w.push(M),x.push(O);j=O,C=M;continue}let L=fr(hr(wr(T,c,A)),S);O=pr(s,L),M=dr(s,L);let _=t<2||A<.25;(_||vr(j,O)>y)&&(x.push(O),j=O),(_||vr(C,M)>y)&&(w.push(M),C=M),k=o,E=c}let P=e[0],T=e[e.length-1],A=I||w.length<2||x.length<2;if(A&&(!p&&!m||u)){let t=0,n=gr(P.point,T.point)?dr(P.point,[1,1]):T.point;for(let n=0;n<e.length;n++){let{pressure:o,runningLength:i}=e[n];if(i>r){t=ur(r,a,o,l);break}}let o=kr(P.point,hr(br(pr(P.point,n))),-(t||S)),i=[];for(let e=1\/13,t=e;t<=1;t+=e)i.push(xr(o,P.point,2*jr*t));return i}let L=[],_=[];if(x.length>1&&w.length>1){M=w[1];for(let e=1;e<x.length;e++)if(!gr(M,x[e])){O=x[e];break}if(d||p){if(p||m&&A)L.push(P.point.slice(0,2));else if(!gr(M,O)){let e=kr(P.point,br(pr(O,M)),-yr(M,O)\/2);for(let t=1\/13,n=t;n<=1;n+=t){let t=xr(e,P.point,jr*n);if(yr(t,O)<1)break;L.push(t)}x.shift(),w.shift()}}else if(!gr(M,O)){let e=br(pr(O,M)),t=yr(M,O)\/2;L.push(kr(P.point,e,-t),kr(P.point,e,.95*-t),kr(P.point,e,.95*t),kr(P.point,e,t)),x.shift(),w.shift()}let e=function(e,t){return fr(dr(e,t),.5)}(x[x.length-1],w[w.length-1]),t=T.point,n=hr(br(pr(t,e)));if(h||m)if(m||p&&A)_.push(t.slice(0,2));else{let e=kr(t,n,S);for(let n=1\/29,r=0;r<=1;r+=n){let n=xr(e,t,3*jr*r);_.push(n)}}else{let r=wr(e,t,.95),o=.95*S;_.push(kr(r,n,o),kr(t,n,o),kr(t,n,-o),kr(r,n,-o))}}return x.concat(_,w.reverse(),L)}function Or(e,t={}){return Cr(function(e,t={}){var n;let{streamline:r=.5,size:o=16,last:a=!1}=t;if(0===e.length)return[];let i=.15+.85*(1-r),l=Array.isArray(e[0])?e:e.map((({x:e,y:t,pressure:n=.5})=>[e,t,n]));1===l.length&&l.push([...dr(l[0],[1,1]),l[0][2]||.5]);let s=[{point:[l[0][0],l[0][1]],pressure:l[0][2]||.25,vector:[1,1],distance:0,runningLength:0}],c=!1,u=0,d=s[0],p=l.length-1;for(let e=1;e<l.length;e++){let t=a&&e===p?l[e]:wr(d.point,l[e],i);if(gr(d.point,t))continue;let n=yr(t,d.point);if(u+=n,e<p&&!c){if(u<o)continue;c=!0}d={point:t,pressure:l[e][2]||.5,vector:br(pr(d.point,t)),distance:n,runningLength:u},s.push(d)}return s[0].vector=(null==(n=s[1])?void 0:n.vector)||[0,0],s}(e,t),t)}function Mr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ir(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Mr(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Mr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Pr=ir(),Tr=function(e){return[8,8+e]},Ar=function(e){return[1.5,6+e]},Lr=function(e){return\"freedraw\"===e.type?12*e.strokeWidth:20},_r=function(e,t,n){switch(n.globalAlpha=e.opacity\/100,e.type){case\"rectangle\":case\"diamond\":case\"ellipse\":n.lineJoin=\"round\",n.lineCap=\"round\",t.draw(Br(e));break;case\"arrow\":case\"line\":n.lineJoin=\"round\",n.lineCap=\"round\",Br(e).forEach((function(e){t.draw(e)}));break;case\"freedraw\":n.save(),n.fillStyle=e.strokeColor;var r=function(e){return Wr.get(e)}(e);n.fillStyle=e.strokeColor,n.fill(r),n.restore();break;default:if(!Xe(e))throw new Error(\"Unimplemented type \".concat(e.type));var o=Qn(e.text),a=o&&!n.canvas.isConnected;a&&document.body.appendChild(n.canvas),n.canvas.setAttribute(\"dir\",o?\"rtl\":\"ltr\"),n.save(),n.font=Nn(e),n.fillStyle=e.strokeColor,n.textAlign=e.textAlign;for(var i=e.text.replace(\/\\r\\n?\/g,\"\\n\").split(\"\\n\"),l=e.height\/i.length,s=e.height-e.baseline,c=\"center\"===e.textAlign?e.width\/2:\"right\"===e.textAlign?e.width:0,u=0;u<i.length;u++)n.fillText(i[u],c,(u+1)*l-s);n.restore(),a&&n.canvas.remove()}n.globalAlpha=1},Dr=new WeakMap,zr=new WeakMap,Br=function(e){return zr.get(e)},Hr=function(e){return zr.delete(e)},Nr=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n={seed:e.seed,strokeLineDash:\"dashed\"===e.strokeStyle?Tr(e.strokeWidth):\"dotted\"===e.strokeStyle?Ar(e.strokeWidth):void 0,disableMultiStroke:\"solid\"!==e.strokeStyle,strokeWidth:\"solid\"!==e.strokeStyle?e.strokeWidth+.5:e.strokeWidth,fillWeight:e.strokeWidth\/2,hachureGap:4*e.strokeWidth,roughness:e.roughness,stroke:e.strokeColor,preserveVertices:t};switch(e.type){case\"rectangle\":case\"diamond\":case\"ellipse\":return n.fillStyle=e.fillStyle,n.fill=\"transparent\"===e.backgroundColor?void 0:e.backgroundColor,\"ellipse\"===e.type&&(n.curveFitting=1),n;case\"line\":return lt(e.points)&&(n.fillStyle=e.fillStyle,n.fill=\"transparent\"===e.backgroundColor?void 0:e.backgroundColor),n;case\"freedraw\":case\"arrow\":return n;default:throw new Error(\"Unimplemented type \".concat(e.type))}},Rr=function(e,t){var n=zr.get(e)||null;if(!n){switch(Dr.delete(e),e.type){case\"rectangle\":if(\"round\"===e.strokeSharpness){var r=e.width,o=e.height,a=.25*Math.min(r,o);n=t.path(\"M \".concat(a,\" 0 L \").concat(r-a,\" 0 Q \").concat(r,\" 0, \").concat(r,\" \").concat(a,\" L \").concat(r,\" \").concat(o-a,\" Q \").concat(r,\" \").concat(o,\", \").concat(r-a,\" \").concat(o,\" L \").concat(a,\" \").concat(o,\" Q 0 \").concat(o,\", 0 \").concat(o-a,\" L 0 \").concat(a,\" Q 0 0, \").concat(a,\" 0\"),Nr(e,!0))}else n=t.rectangle(0,0,e.width,e.height,Nr(e));break;case\"diamond\":var i=R(function(e){var t=Math.floor(e.width\/2)+1,n=e.width,r=Math.floor(e.height\/2)+1;return[t,0,n,r,t,e.height,0,r]}(e),8),l=i[0],s=i[1],c=i[2],u=i[3],d=i[4],p=i[5],f=i[6],h=i[7];n=t.polygon([[l,s],[c,u],[d,p],[f,h]],Nr(e));break;case\"ellipse\":n=t.ellipse(e.width\/2,e.height\/2,e.width,e.height,Nr(e));break;case\"line\":case\"arrow\":var m=Nr(e),g=e.points.length?e.points:[[0,0]];if(n=\"sharp\"===e.strokeSharpness?m.fill?[t.polygon(g,m)]:[t.linearPath(g,m)]:[t.curve(g,m)],\"arrow\"===e.type){var v=e.startArrowhead,b=void 0===v?null:v,y=e.endArrowhead,x=void 0===y?\"arrow\":y,w=function(e,n,r,o){var a=function(e,t,n,r){var o=vt(t[0]);if(o.length<1)return null;var a=\"start\"===n?1:o.length-1,i=o[a].data,l=[i[4],i[5]],s=[i[2],i[3]],c=[i[0],i[1]],u=o[a-1],d=[0,0];\"move\"===u.op?d=u.data:\"bcurveTo\"===u.op&&(d=[u.data[4],u.data[5]]);var p=function(e,t){return Math.pow(1-e,3)*l[t]+3*e*Math.pow(1-e,2)*s[t]+3*Math.pow(e,2)*(1-e)*c[t]+d[t]*Math.pow(e,3)},f=R(\"start\"===n?d:l,2),h=f[0],m=f[1],g=[p(.3,0),p(.3,1)],v=g[0],b=g[1],y=Math.hypot(h-v,m-b),x=(h-v)\/y,w=(m-b)\/y,k={arrow:30,bar:15,dot:15}[r],S=0;if(\"arrow\"===r){var E=R(e.points[e.points.length-1],2),j=E[0],C=E[1],O=R(e.points.length>1?e.points[e.points.length-2]:[0,0],2),M=O[0],I=O[1];S=Math.hypot(j-M,C-I)}else for(var P=0;P<e.points.length;P++){var T=R(e.points[P-1]||[0,0],2),A=T[0],L=T[1],_=R(e.points[P],2),D=_[0],z=_[1];S+=Math.hypot(D-A,z-L)}var B=Math.min(k,S\/2),H=h-x*B,N=m-w*B;if(\"dot\"===r)return[h,m,Math.hypot(N-m,H-h)+e.strokeWidth];var F={arrow:20,bar:90}[r],V=R(rt(H,N,h,m,-F*Math.PI\/180),2),G=V[0],U=V[1],K=R(rt(H,N,h,m,F*Math.PI\/180),2);return[h,m,G,U,K[0],K[1]]}(e,n,r,o);if(null===a)return[];if(\"dot\"===o){var i=R(a,3),l=i[0],s=i[1],c=i[2];return[t.circle(l,s,c,Ir(Ir({},m),{},{fill:e.strokeColor,fillStyle:\"solid\",stroke:\"none\"}))]}var u=R(a,6),d=u[0],p=u[1],f=u[2],h=u[3],g=u[4],v=u[5];if(\"dotted\"===e.strokeStyle){var b=Ar(e.strokeWidth-1);m.strokeLineDash=[b[0],b[1]-1]}else delete m.strokeLineDash;return[t.line(f,h,d,p,m),t.line(g,v,d,p,m)]};if(null!==b){var k,S=w(e,n,\"start\",b);(k=n).push.apply(k,F(S))}if(null!==x){var E,j=w(e,n,\"end\",x);(E=n).push.apply(E,F(j))}}break;case\"freedraw\":Zr(e),n=[];break;case\"text\":n=[]}zr.set(e,n)}},Fr=function(e,t){var n=t?t.zoom:Pr.zoom,r=Dr.get(e),o=r&&r.canvasZoom!==n.value&&!(null!=t&&t.shouldCacheIgnoreZoom);if(!r||o){var a=function(e,t){var n=document.createElement(\"canvas\"),r=n.getContext(\"2d\"),o=Lr(e),a=0,i=0;if(Qe(e)||qe(e)){var l=R(gt(e),4),s=l[0],c=l[1],u=l[2],d=l[3];s=Math.floor(s),u=Math.ceil(u),c=Math.floor(c),d=Math.ceil(d),n.width=Vn(s,u)*window.devicePixelRatio*t.value+o*t.value*2,n.height=Vn(c,d)*window.devicePixelRatio*t.value+o*t.value*2,a=e.x>s?Math.floor(Vn(e.x,s))*window.devicePixelRatio*t.value:0,i=e.y>c?Math.floor(Vn(e.y,c))*window.devicePixelRatio*t.value:0,r.translate(a,i)}else n.width=e.width*window.devicePixelRatio*t.value+o*t.value*2,n.height=e.height*window.devicePixelRatio*t.value+o*t.value*2;r.save(),r.translate(o*t.value,o*t.value),r.scale(window.devicePixelRatio*t.value,window.devicePixelRatio*t.value);var p=Ke.canvas(n);return _r(e,p,r),r.restore(),{element:e,canvas:n,canvasZoom:t.value,canvasOffsetX:a,canvasOffsetY:i}}(e,n);return Dr.set(e,a),a}return r},Vr=function(e,t,n,r){var o=e.element,a=Lr(o),i=R(gt(o),4),l=i[0],s=i[1],c=i[2],u=i[3];qe(o)&&(l=Math.floor(l),c=Math.ceil(c),s=Math.floor(s),u=Math.ceil(u));var d=((l+c)\/2+r.scrollX)*window.devicePixelRatio,p=((s+u)\/2+r.scrollY)*window.devicePixelRatio;n.save(),n.scale(1\/window.devicePixelRatio,1\/window.devicePixelRatio),n.translate(d,p),n.rotate(o.angle),n.drawImage(e.canvas,-(c-l)\/2*window.devicePixelRatio-a*e.canvasZoom\/e.canvasZoom,-(u-s)\/2*window.devicePixelRatio-a*e.canvasZoom\/e.canvasZoom,e.canvas.width\/e.canvasZoom,e.canvas.height\/e.canvasZoom),n.restore()},Gr=function(e,t,n,r,o){var a=t.generator;switch(e.type){case\"selection\":n.save(),n.translate(e.x+o.scrollX,e.y+o.scrollY),n.fillStyle=\"rgba(0, 0, 255, 0.10)\",n.fillRect(0,0,e.width,e.height),n.restore();break;case\"freedraw\":if(Rr(e,a),r){var i=Fr(e,o);Vr(i,0,n,o)}else{var l=R(gt(e),4),s=l[0],c=l[1],u=l[2],d=l[3],p=(s+u)\/2+o.scrollX,f=(c+d)\/2+o.scrollY,h=(u-s)\/2-(e.x-s),m=(d-c)\/2-(e.y-c);n.save(),n.translate(p,f),n.rotate(e.angle),n.translate(-h,-m),_r(e,t,n),n.restore()}break;case\"rectangle\":case\"diamond\":case\"ellipse\":case\"line\":case\"arrow\":case\"text\":if(Rr(e,a),r){var g=Fr(e,o);Vr(g,0,n,o)}else{var v=R(gt(e),4),b=v[0],y=v[1],x=v[2],w=v[3],k=(b+x)\/2+o.scrollX,S=(y+w)\/2+o.scrollY,E=(x-b)\/2-(e.x-b),j=(w-y)\/2-(e.y-y);n.save(),n.translate(k,S),n.rotate(e.angle),n.translate(-E,-j),_r(e,t,n),n.restore()}break;default:throw new Error(\"Unimplemented type \".concat(e.type))}},Ur=function(e,t,n){if(void 0===n)return e.draw(t);var r={sets:t.sets,shape:t.shape,options:Ir(Ir({},t.options),{},{fixedDecimalPlaceDigits:n})};return e.draw(r)},Kr=function(e,t,n,r,o){var a=R(gt(e),4),i=a[0],l=a[1],s=a[2],u=a[3],d=(s-i)\/2-(e.x-i),p=(u-l)\/2-(e.y-l),f=180*e.angle\/Math.PI,h=t.generator;switch(e.type){case\"selection\":throw new Error(\"Selection rendering is not supported for SVG\");case\"rectangle\":case\"diamond\":case\"ellipse\":Rr(e,h);var m=Ur(t,Br(e),c.zK),g=e.opacity\/100;1!==g&&(m.setAttribute(\"stroke-opacity\",\"\".concat(g)),m.setAttribute(\"fill-opacity\",\"\".concat(g))),m.setAttribute(\"stroke-linecap\",\"round\"),m.setAttribute(\"transform\",\"translate(\".concat(r||0,\" \").concat(o||0,\") rotate(\").concat(f,\" \").concat(d,\" \").concat(p,\")\")),n.appendChild(m);break;case\"line\":case\"arrow\":Rr(e,h);var v=n.ownerDocument.createElementNS(Ln,\"g\"),b=e.opacity\/100;v.setAttribute(\"stroke-linecap\",\"round\"),Br(e).forEach((function(n){var a=Ur(t,n,c.zK);1!==b&&(a.setAttribute(\"stroke-opacity\",\"\".concat(b)),a.setAttribute(\"fill-opacity\",\"\".concat(b))),a.setAttribute(\"transform\",\"translate(\".concat(r||0,\" \").concat(o||0,\") rotate(\").concat(f,\" \").concat(d,\" \").concat(p,\")\")),\"line\"===e.type&&lt(e.points)&&\"transparent\"!==e.backgroundColor&&a.setAttribute(\"fill-rule\",\"evenodd\"),v.appendChild(a)})),n.appendChild(v);break;case\"freedraw\":Zr(e);var y=e.opacity\/100,x=n.ownerDocument.createElementNS(Ln,\"g\");1!==y&&(x.setAttribute(\"stroke-opacity\",\"\".concat(y)),x.setAttribute(\"fill-opacity\",\"\".concat(y))),x.setAttribute(\"transform\",\"translate(\".concat(r||0,\" \").concat(o||0,\") rotate(\").concat(f,\" \").concat(d,\" \").concat(p,\")\"));var w=n.ownerDocument.createElementNS(Ln,\"path\");x.setAttribute(\"stroke\",\"none\"),x.setAttribute(\"fill\",e.strokeColor),w.setAttribute(\"d\",Yr(e)),x.appendChild(w),n.appendChild(x);break;default:if(!Xe(e))throw new Error(\"Unimplemented type \".concat(e.type));var k=e.opacity\/100,S=n.ownerDocument.createElementNS(Ln,\"g\");1!==k&&(S.setAttribute(\"stroke-opacity\",\"\".concat(k)),S.setAttribute(\"fill-opacity\",\"\".concat(k))),S.setAttribute(\"transform\",\"translate(\".concat(r||0,\" \").concat(o||0,\") rotate(\").concat(f,\" \").concat(d,\" \").concat(p,\")\"));for(var E=e.text.replace(\/\\r\\n?\/g,\"\\n\").split(\"\\n\"),j=e.height\/E.length,C=e.height-e.baseline,O=\"center\"===e.textAlign?e.width\/2:\"right\"===e.textAlign?e.width:0,M=Qn(e.text)?\"rtl\":\"ltr\",I=\"center\"===e.textAlign?\"middle\":\"right\"===e.textAlign||\"rtl\"===M?\"end\":\"start\",P=0;P<E.length;P++){var T=n.ownerDocument.createElementNS(Ln,\"text\");T.textContent=E[P],T.setAttribute(\"x\",\"\".concat(O)),T.setAttribute(\"y\",\"\".concat((P+1)*j-C)),T.setAttribute(\"font-family\",Hn(e)),T.setAttribute(\"font-size\",\"\".concat(e.fontSize,\"px\")),T.setAttribute(\"fill\",e.strokeColor),T.setAttribute(\"text-anchor\",I),T.setAttribute(\"style\",\"white-space: pre;\"),T.setAttribute(\"direction\",M),S.appendChild(T)}n.appendChild(S)}},Wr=new WeakMap([]);function Zr(e){var t=Yr(e),n=new Path2D(t);return Wr.set(e,n),n}function Yr(e){return function(e){if(!e.length)return\"\";var t=e.length-1;return e.reduce((function(e,n,r,o){return r===t?e.push(n,Xr(n,o[0]),\"L\",o[0],\"Z\"):e.push(n,Xr(n,o[r+1])),e}),[\"M\",e[0],\"Q\"]).join(\" \").replaceAll(qr,\"$1\")}(Or(e.simulatePressure?e.points:e.points.length?e.points.map((function(t,n){var r=R(t,2);return[r[0],r[1],e.pressures[n]]})):[[0,0,.5]],{simulatePressure:e.simulatePressure,size:4.25*e.strokeWidth,thinning:.6,smoothing:.5,streamline:.5,easing:function(e){return Math.sin(e*Math.PI\/2)},last:!1}))}function Xr(e,t){return[(e[0]+t[0])\/2,(e[1]+t[1])\/2]}var qr=\/(\\s?[A-Z]?,?-?[0-9]*\\.[0-9]{0,2})(([0-9]|e|-)*)\/g;var $r=function(e){return\"string\"==typeof e},Qr=function(){function e(){p(this,e),this.callbacks=new Set,this.nonDeletedElements=[],this.elements=[],this.elementsMap=new Map}return h(e,[{key:\"getElementsIncludingDeleted\",value:function(){return this.elements}},{key:\"getElements\",value:function(){return this.nonDeletedElements}},{key:\"getElement\",value:function(e){return this.elementsMap.get(e)||null}},{key:\"getNonDeletedElement\",value:function(e){var t=this.getElement(e);return t&&$i(t)?t:null}},{key:\"getNonDeletedElements\",value:function(e){var t=this,n=[];return e.forEach((function(e){var r=t.getNonDeletedElement(e);null!=r&&n.push(r)})),n}},{key:\"replaceAllElements\",value:function(t){var n=this;this.elements=t,this.elementsMap.clear(),t.forEach((function(t){n.elementsMap.set(t.id,t),e.mapElementToScene(t,n)})),this.nonDeletedElements=qi(this.elements),this.informMutation()}},{key:\"informMutation\",value:function(){for(var e=0,t=Array.from(this.callbacks);e<t.length;e++){(0,t[e])()}}},{key:\"addCallback\",value:function(e){var t=this;if(this.callbacks.has(e))throw new Error;return this.callbacks.add(e),function(){if(!t.callbacks.has(e))throw new Error;t.callbacks.delete(e)}}},{key:\"destroy\",value:function(){var t=this;e.sceneMapById.forEach((function(n,r){n===t&&e.sceneMapById.delete(r)})),this.callbacks.clear()}}],[{key:\"mapElementToScene\",value:function(e,t){$r(e)?this.sceneMapById.set(e,t):this.sceneMapByElement.set(e,t)}},{key:\"getScene\",value:function(e){return $r(e)?this.sceneMapById.get(e)||null:this.sceneMapByElement.get(e)||null}}]),e}();Qr.sceneMapByElement=new WeakMap,Qr.sceneMapById=new Map;var Jr=Qr,eo=new oe(Date.now()),to=function(){return Math.floor(eo.next()*Math.pow(2,31))},no=function(){return Ye()};function ro(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function oo(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ro(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ro(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ao=function(e,t){var n,r=!1,o=t.points;for(var a in void 0!==o&&(t=oo(oo({},function(e){var t=e.map((function(e){return e[0]})),n=e.map((function(e){return e[1]}));return{width:Math.max.apply(Math,F(t))-Math.min.apply(Math,F(t)),height:Math.max.apply(Math,F(n))-Math.min.apply(Math,F(n))}}(o)),t)),t){var i=t[a];if(void 0!==i){if(e[a]===i&&(\"object\"!==v(i)||null===i||\"groupIds\"===a))continue;if(\"points\"===a){var l=e[a],s=i;if(l.length===s.length){for(var c=!1,u=l.length;--u;){var d=l[u],p=s[u];if(d[0]!==p[0]||d[1]!==p[1]){c=!0;break}}if(!c)continue}}e[a]=i,r=!0}}r&&(void 0===t.height&&void 0===t.width&&void 0===o||Hr(e),e.version++,e.versionNonce=to(),null===(n=Jr.getScene(e))||void 0===n||n.informMutation())},io=function(e,t){var n=!1;for(var r in t){var o=t[r];if(void 0!==o){if(e[r]===o&&(\"object\"!==v(o)||null===o||\"groupIds\"===r))continue;n=!0}}return n?oo(oo(oo({},e),t),{},{version:e.version+1,versionNonce:to()}):e},lo=function(e,t){return e.version=(null!=t?t:e.version)+1,e.versionNonce=to(),e},so=function(e){return Qe(e)||qe(e)?e.points.length<2:0===e.width&&0===e.height},co=function(e,t,n){var r=Math.abs(t),o=Math.abs(n);if(\"line\"===e||\"arrow\"===e||\"freedraw\"===e){var a=Math.round(Math.atan(o\/r)\/c.ay)*c.ay;0===a?n=0:a===Math.PI\/2?t=0:n=Math.round(r*Math.tan(a))*Math.sign(n)||n}else\"selection\"!==e&&(n=r*Math.sign(n));return{width:t,height:n}},uo=function(e){var t={width:e.width,height:e.height,x:e.x,y:e.y};if(e.width<0){var n=Math.abs(e.width);t.width=n,t.x=e.x-n}if(e.height<0){var r=Math.abs(e.height);t.height=r,t.y=e.y-r}return t};function po(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function fo(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return ho(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return ho(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function ho(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function mo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function go(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?mo(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):mo(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var vo=function(e,t,n){var r=n.filter((function(t){return t.groupIds.includes(e)}));return r.length<2?t.selectedGroupIds[e]||t.editingGroupId===e?go(go({},t),{},{selectedGroupIds:go(go({},t.selectedGroupIds),{},V({},e,!1)),editingGroupId:null}):t:go(go({},t),{},{selectedGroupIds:go(go({},t.selectedGroupIds),{},V({},e,!0)),selectedElementIds:go(go({},t.selectedElementIds),Object.fromEntries(r.map((function(e){return[e.id,!0]}))))})},bo=function(e,t){return null!=yo(e,t)},yo=function(e,t){return t.groupIds.filter((function(t){return t!==e.editingGroupId})).find((function(t){return e.selectedGroupIds[t]}))},xo=function(e){return Object.entries(e.selectedGroupIds).filter((function(e){var t=R(e,2);t[0];return t[1]})).map((function(e){var t=R(e,2),n=t[0];t[1];return n}))},wo=function(e,t){var n=go(go({},e),{},{selectedGroupIds:{}}),r=ol(t,e);if(!r.length)return go(go({},n),{},{editingGroupId:null});var o,a=fo(r);try{for(a.s();!(o=a.n()).done;){var i=o.value.groupIds;if(e.editingGroupId){var l=i.indexOf(e.editingGroupId);l>-1&&(i=i.slice(0,l))}if(i.length>0){var s=i[i.length-1];n=vo(s,n,t)}}}catch(e){a.e(e)}finally{a.f()}return n},ko=function(e,t){return e.groupIds.includes(t)},So=function(e,t){return e.filter((function(e){return ko(e,t)}))},Eo=function(e,t,n){var r=F(e),o=n?r.indexOf(n):-1,a=o>-1?o:r.length;return r.splice(a,0,t),r},jo=[\"x\",\"y\",\"strokeColor\",\"backgroundColor\",\"fillStyle\",\"strokeWidth\",\"strokeStyle\",\"roughness\",\"opacity\",\"width\",\"height\",\"angle\",\"groupIds\",\"strokeSharpness\",\"boundElementIds\"];function Co(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Oo(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Co(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Co(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Mo=function(e,t){var n,r,o=t.x,a=t.y,i=t.strokeColor,l=t.backgroundColor,s=t.fillStyle,c=t.strokeWidth,u=t.strokeStyle,d=t.roughness,p=t.opacity,f=t.width,h=void 0===f?0:f,m=t.height,g=void 0===m?0:m,v=t.angle,b=void 0===v?0:v,y=t.groupIds,x=void 0===y?[]:y,w=t.strokeSharpness,k=t.boundElementIds,S=void 0===k?null:k,E=po(t,jo);return{id:E.id||no(),type:e,x:o,y:a,width:h,height:g,angle:b,strokeColor:i,backgroundColor:l,fillStyle:s,strokeWidth:c,strokeStyle:u,roughness:d,opacity:p,groupIds:x,strokeSharpness:w,seed:null!==(n=E.seed)&&void 0!==n?n:to(),version:E.version||1,versionNonce:null!==(r=E.versionNonce)&&void 0!==r?r:0,isDeleted:!1,boundElementIds:S}},Io=function(e){return Mo(e.type,e)},Po=function(e,t){return{x:\"center\"===e.textAlign?t.width\/2:\"right\"===e.textAlign?t.width:0,y:\"middle\"===e.verticalAlign?t.height\/2:0}},To=function(e){var t=Rn(e.text,Nn(e)),n=Po(e,t);return io(Oo(Oo({},Mo(\"text\",e)),{},{text:e.text,fontSize:e.fontSize,fontFamily:e.fontFamily,textAlign:e.textAlign,verticalAlign:e.verticalAlign,x:e.x-n.x,y:e.y-n.y,width:t.width,height:t.height,baseline:t.baseline}),{})},Ao=function(e,t){var n=t.text,r=t.isDeleted;return io(e,Oo({text:n,isDeleted:null!=r?r:e.isDeleted},function(e,t){var n,r,o=Rn(t,Nn(e)),a=o.width,i=o.height,l=o.baseline,s=e.textAlign,c=e.verticalAlign;if(\"center\"===s&&\"middle\"===c){var u=Rn(e.text,Nn(e)),d=Po(e,{width:a-u.width,height:i-u.height});n=e.x-d.x,r=e.y-d.y}else{var p=R(gt(e),4),f=p[0],h=p[1],m=p[2],g=p[3],v=R(Et(e,a,i),4),b=(f-v[0])\/2,y=(h-v[1])\/2,x=(m-v[2])\/2,w=(g-v[3])\/2,k=R(at({s:!0,e:\"center\"===s||\"left\"===s,w:\"center\"===s||\"right\"===s},e.x,e.y,e.angle,b,y,x,w),2);n=k[0],r=k[1]}return{width:a,height:i,x:Number.isFinite(n)?n:e.x,y:Number.isFinite(r)?r:e.y,baseline:l}}(e,n)))},Lo=function(e){return Oo(Oo({},Mo(e.type,e)),{},{points:e.points||[],lastCommittedPoint:null,startBinding:null,endBinding:null,startArrowhead:e.startArrowhead,endArrowhead:e.endArrowhead})},_o=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(null==t||\"object\"!==v(t))return t;if(\"[object Object]\"===Object.prototype.toString.call(t)){var r=\"function\"==typeof t.constructor?Object.create(Object.getPrototypeOf(t)):{};for(var o in t)if(t.hasOwnProperty(o)){if(0===n&&(\"shape\"===o||\"canvas\"===o))continue;r[o]=e(t[o],n+1)}return r}if(Array.isArray(t)){for(var a=t.length,i=new Array(a);a--;)i[a]=e(t[a],n+1);return i}return t},Do=function(e,t,n,r){var o=_o(n);return o.id=no(),o.seed=to(),o.groupIds=function(e,t,n){for(var r=F(e),o=t?e.indexOf(t):-1,a=o>-1?o:e.length,i=0;i<a;i++)r[i]=n(r[i]);return r}(o.groupIds,e,(function(e){return t.has(e)||t.set(e,no()),t.get(e)})),r&&(o=Object.assign(o,r)),o},zo={mouse:8,pen:16,touch:28},Bo={e:!0,s:!0,n:!0,w:!0},Ho={e:!0,s:!0,n:!0,w:!0},No={e:!0,s:!0,n:!0,w:!0,nw:!0,se:!0},Ro={e:!0,s:!0,n:!0,w:!0,ne:!0,sw:!0},Fo=function(e,t,n,r,o,a,i){var l=R(rt(e+n\/2,t+r\/2,o,a,i),2);return[l[0]-n\/2,l[1]-r\/2,n,r]},Vo=function(e,t,n,r){var o=R(e,4),a=o[0],i=o[1],l=o[2],s=o[3],c=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},u=zo[r],d=u\/n.value,p=u\/n.value,f=u\/n.value,h=u\/n.value,m=l-a,g=s-i,v=(a+l)\/2,b=(i+s)\/2,y=4\/n.value,x=(u-8)\/(2*n.value),w={nw:c.nw?void 0:Fo(a-y-f+x,i-y-h+x,d,p,v,b,t),ne:c.ne?void 0:Fo(l+y-x,i-y-h+x,d,p,v,b,t),sw:c.sw?void 0:Fo(a-y-f+x,s+y-x,d,p,v,b,t),se:c.se?void 0:Fo(l+y-x,s+y-x,d,p,v,b,t),rotation:c.rotation?void 0:Fo(a+m\/2-d\/2,i-y-h+x-16\/n.value,d,p,v,b,t)},k=5*zo.mouse\/n.value;return Math.abs(m)>k&&(c.n||(w.n=Fo(a+m\/2-d\/2,i-y-h+x,d,p,v,b,t)),c.s||(w.s=Fo(a+m\/2-d\/2,s+y-x,d,p,v,b,t))),Math.abs(g)>k&&(c.w||(w.w=Fo(a-y-f+x,i+g\/2-p\/2,d,p,v,b,t)),c.e||(w.e=Fo(l+y-x,i+g\/2-p\/2,d,p,v,b,t))),w},Go=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"mouse\",r={};if(\"arrow\"===e.type||\"line\"===e.type||\"freedraw\"===e.type){if(2===e.points.length){var o=R(e.points,2),a=o[1];0===a[0]||0===a[1]?r=Ro:a[0]>0&&a[1]<0?r=No:a[0]>0&&a[1]>0?r=Ro:a[0]<0&&a[1]>0?r=No:a[0]<0&&a[1]<0&&(r=Ro)}}else\"text\"===e.type&&(r=Ho);return Vo(gt(e),e.angle,t,n,r)},Uo=function(e,t){return[0,0,0,0,t,e,1,0]},Ko=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=[0,0,0,0,0,0,0,0];if(t<0||t>7)throw new Error(\"Expected `index` betwen 0 and 7, got `\".concat(t,\"`\"));return 0!==e&&(n[t]=e),n},Wo=function(e){return[e[0],e[1],e[2],e[3],-e[4],-e[5],-e[6],-e[7]]},Zo=function(e,t){return ta(t)?[e[0]-t,e[1],e[2],e[3],e[4],e[5],e[6],e[7]]:[e[0]-t[0],e[1]-t[1],e[2]-t[2],e[3]-t[3],e[4]-t[4],e[5]-t[5],e[6]-t[6],e[7]-t[7]]},Yo=function(e,t){return ta(t)?[e[0]*t,e[1]*t,e[2]*t,e[3]*t,e[4]*t,e[5]*t,e[6]*t,e[7]*t]:[Xo(e,t),t[1]*e[0]+t[0]*e[1]-t[4]*e[2]+t[5]*e[3]+t[2]*e[4]-t[3]*e[5]-t[7]*e[6]-t[6]*e[7],t[2]*e[0]+t[0]*e[2]-t[6]*e[3]+t[3]*e[6],t[3]*e[0]+t[6]*e[2]+t[0]*e[3]-t[2]*e[6],t[4]*e[0]+t[2]*e[1]-t[1]*e[2]+t[7]*e[3]+t[0]*e[4]+t[6]*e[5]-t[5]*e[6]+t[3]*e[7],t[5]*e[0]-t[3]*e[1]+t[7]*e[2]+t[1]*e[3]-t[6]*e[4]+t[0]*e[5]+t[4]*e[6]+t[2]*e[7],t[6]*e[0]+t[3]*e[2]-t[2]*e[3]+t[0]*e[6],t[7]*e[0]+t[6]*e[1]+t[5]*e[2]+t[4]*e[3]+t[3]*e[4]+t[2]*e[5]+t[1]*e[6]+t[0]*e[7]]},Xo=function(e,t){return t[0]*e[0]+t[2]*e[2]+t[3]*e[3]-t[6]*e[6]},qo=function(e,t){return[$o(e,t),e[1]*t[7]+e[4]*t[5]-e[5]*t[4]+e[7]*t[1],e[2]*t[7]-e[4]*t[6]+e[6]*t[4]+e[7]*t[2],e[3]*t[7]+e[5]*t[6]-e[6]*t[5]+e[7]*t[3],e[4]*t[7]+e[7]*t[4],e[5]*t[7]+e[7]*t[5],e[6]*t[7]+e[7]*t[6],e[7]*t[7]]},$o=function(e,t){return e[0]*t[7]+e[1]*t[6]+e[2]*t[5]+e[3]*t[4]+e[4]*t[3]+e[5]*t[2]+e[6]*t[1]+e[7]*t[0]},Qo=function(e){return Math.sqrt(Math.abs(e[0]*e[0]-e[2]*e[2]-e[3]*e[3]+e[6]*e[6]))},Jo=function(e){var t=Qo(e);if(0===t||1===t)return e;var n=e[6]<0?-1:1;return Yo(e,n\/t)},ea=function(e){var t=function(e){return Math.sqrt(Math.abs(e[7]*e[7]-e[5]*e[5]-e[4]*e[4]+e[1]*e[1]))}(e);return 0===t||1===t?e:Yo(e,1\/t)},ta=function(e){return\"number\"==typeof e},na=(Ko(1,1),Ko(1,2),Ko(1,3),Ko(1,4),Ko(1,5),Ko(1,6),Ko(1,7),function(e,t,n){return Jo([0,n,e,t,0,0,0,0])}),ra=function(e,t){return Jo(qo(t,e))},oa=function(e,t){return n=e,[(r=t)[0]*n[0]+r[2]*n[2]+r[3]*n[3]-r[6]*n[6],r[1]*n[0]+r[0]*n[1]-r[4]*n[2]+r[5]*n[3]+r[2]*n[4]-r[3]*n[5]-r[7]*n[6]-r[6]*n[7],r[2]*n[0]+r[0]*n[2]-r[6]*n[3]+r[3]*n[6],r[3]*n[0]+r[6]*n[2]+r[0]*n[3]-r[2]*n[6],r[4]*n[0]+r[7]*n[3]+r[0]*n[4]+r[3]*n[7],r[5]*n[0]+r[7]*n[2]+r[0]*n[5]+r[2]*n[7],r[6]*n[0]+r[0]*n[6],r[7]*n[0]+r[0]*n[7]];var n,r},aa=function(e){var t=R(e,2),n=t[0];return[0,0,0,0,t[1],n,1,0]},ia=function(e){return[e[5],e[4]]},la=function(e,t){return Jo((n=e,[(r=t)[0]*n[0],r[1]*n[0]+r[0]*n[1],r[2]*n[0]+r[0]*n[2],r[3]*n[0]+r[0]*n[3],r[4]*n[0]+r[2]*n[1]-r[1]*n[2]+r[0]*n[4],r[5]*n[0]-r[3]*n[1]+r[1]*n[3]+r[0]*n[5],r[6]*n[0]+r[3]*n[2]-r[2]*n[3]+r[0]*n[6],r[7]*n[0]+r[6]*n[1]+r[5]*n[2]+r[4]*n[3]+r[3]*n[4]+r[2]*n[5]+r[1]*n[6]]));var n,r},sa=function(e,t){return Qo(qo(e,t))},ca=function(e,t){return $o(e,t)},ua=function(e){return[0,0,0,0,e[4],e[5],0,0]},da=function(e,t){return n=Yo(e,Math.sin(t\/2)),r=Math.cos(t\/2),ta(r)?[n[0]+r,n[1],n[2],n[3],n[4],n[5],n[6],n[7]]:[n[0]+r[0],n[1]+r[1],n[2]+r[2],n[3]+r[3],n[4]+r[4],n[5]+r[5],n[6]+r[6],n[7]+r[7]];var n,r},pa=function(e,t){return Jo(Yo(Yo(e,t),Wo(e)))};function fa(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return ha(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return ha(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function ha(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ma=function(e,t,n,r){var o=10\/t.zoom.value;return!ga(e,t,[n,r])&&ba(e,[n,r],o)},ga=function(e,t,n){var r=10\/t.zoom.value,o=\"text\"===e.type?Sa:function(e){if(\"arrow\"===e.type)return!1;if(\"freedraw\"===e.type)return!0;var t=\"transparent\"!==e.backgroundColor;return\"line\"===e.type?t&&lt(e.points):t}(e)?Ea:ja;return wa({element:e,point:n,threshold:r,check:o})},va=function(e,t){return e.selectedElementIds[t.id]},ba=function(e,t,n){var r=R(t,2),o=r[0],a=r[1],i=R(gt(e),4),l=i[0],s=i[1],c=i[2],u=i[3],d=R(rt(o,a,(l+c)\/2,(s+u)\/2,-e.angle),2),p=d[0],f=d[1];return p>l-n&&p<c+n&&f>s-n&&f<u+n},ya=function(e,t){var n=t.x,r=t.y,o=xa(e,e.width,e.height);return wa({element:e,point:[n,r],threshold:o,check:Ca})},xa=function(e,t,n){var r=(\"diamond\"===e.type?1\/Math.sqrt(2):1)*Math.min(t,n);return Math.max(16,Math.min(.25*r,32))},wa=function(e){switch(e.element.type){case\"rectangle\":case\"text\":case\"diamond\":case\"ellipse\":var t=ka(e.element,e.point);return e.check(t,e.threshold);case\"freedraw\":return!!e.check(Oa(e.element,e.point),e.threshold)&&Ta(e.element,e.point,e.threshold);case\"arrow\":case\"line\":return Aa(e);case\"selection\":return console.warn(\"This should not happen, we need to investigate why it does.\"),!1}},ka=function(e,t){switch(e.type){case\"rectangle\":case\"text\":return Oa(e,t);case\"diamond\":return Ma(e,t);case\"ellipse\":return Ia(e,t)}},Sa=function(e,t){return e<0},Ea=function(e,t){return e<t},ja=function(e,t){return Math.abs(e)<t},Ca=function(e,t){return 0<=e&&e<t},Oa=function(e,t){var n=R(La(e,t),4),r=n[1],o=n[2],a=n[3];return Math.max(ca(r,na(0,1,-a)),ca(r,na(1,0,-o)))},Ma=function(e,t){var n=R(La(e,t),4),r=n[1],o=n[2],a=n[3],i=na(a,o,-a*o);return ca(r,i)},Ia=function(e,t){var n=R(Pa(e,t),2),r=n[0],o=n[1];return-function(e){return Math.sign(e[1])}(o)*ca(r,o)},Pa=function(e,t){var n=R(La(e,t),4),r=n[1],o=n[2],a=n[3],i=R(ia(r),2),l=i[0],s=i[1],c=.707,u=.707,d=o,p=a;[0,1,2,3].forEach((function(e){var t=d*c,n=p*u,r=(d*d-p*p)*Math.pow(c,3)\/d,o=(p*p-d*d)*Math.pow(u,3)\/p,a=t-r,i=n-o,f=l-r,h=s-o,m=Math.hypot(i,a),g=Math.hypot(h,f);c=Math.min(1,Math.max(0,(f*m\/g+r)\/d)),u=Math.min(1,Math.max(0,(h*m\/g+o)\/p));var v=Math.hypot(u,c);c\/=v,u\/=v}));var f,h=Uo(d*c,p*u);return[r,oa(ra(r,f=h),f)]},Ta=function(e,t,n){var r,o;if(0===e.angle)r=t[0]-e.x,o=t[1]-e.y;else{var a=R(gt(e),4),i=a[0],l=a[1],s=a[2],c=a[3],u=ot(t,[i+(s-i)\/2,l+(c-l)\/2],-e.angle);r=u[0]-e.x,o=u[1]-e.y}var d,p=R(e.points,2),f=p[0],h=p[1];if(2===e.points.length)return it(f[0],f[1],r,o)<n||it(h[0],h[1],r,o)<n;for(var m=1;m<e.points.length-1;m++){var g=[h[0]-f[0],h[1]-f[1]],v=Math.hypot(g[1],g[0]),b=[g[0]\/v,g[1]\/v],y=[r-f[0],o-f[1]],x=(y[0]*b[0]+y[1]*b[1])\/Math.hypot(b[1],b[0]);d=[f[0]+b[0]*x,f[1]+b[1]*x];var w=it(d[0],d[1],f[0],f[1]),k=it(d[0],d[1],h[0],h[1]);if(d=k<w&&w>v?h:w<k&&k>v?f:d,Math.hypot(o-d[1],r-d[0])<n)return!0;f=h,h=e.points[m+1]}return!1},Aa=function(e){var t=e.element,n=e.threshold;if(!Br(t))return!1;var r=R(La(e.element,e.point),4),o=r[0],a=r[1],i=r[2],l=r[3],s=na(0,1,-l),c=na(1,0,-i);if(!Ea(ca(a,s),n)||!Ea(ca(a,c),n))return!1;var u=R(ia(o),2),d=u[0],p=u[1],f=Br(t);if(e.check===Ea&&f.some((function(e){return Ka(e,d,p,t.strokeSharpness)})))return!0;return f.some((function(e){return Wa(e,d,p,n)}))},La=function(e,t){var n=aa(t),r=gt(e),o=Da(r),a=da(o,e.angle),i=pa(a,n),l=function(e){return[0,0,0,0,Math.abs(e[4]),Math.abs(e[5]),1,0]}(Zo(i,ua(o))),s=function(e,t){return[0,0,0,0,t,e,0,0]}(e.x,e.y),c=Zo(i,s),u=R(r,4),d=u[0],p=u[1];return[c,l,(u[2]-d)\/2,(u[3]-p)\/2]},_a=function(e){var t=gt(e),n=Da(t),r=da(n,e.angle),o=Wo(function(e){return[1,0,0,0,-.5*e[5],.5*e[4],0,0]}(ua(n)));return Yo(o,r)},Da=function(e){var t=R(e,4),n=t[0],r=t[1],o=t[2],a=t[3];return Uo((n+o)\/2,(r+a)\/2)},za=function(e,t,n){var r=_a(e),o=pa(r,aa(t)),a=pa(r,aa(n)),i=ra(o,a),l=e.height\/e.width,s=e.width\/2,c=e.height\/2,u=i[2],d=i[3],p=i[1],f=Math.abs(d),h=Math.abs(u);switch(e.type){case\"rectangle\":case\"text\":return p\/(s*(h+l*f));case\"diamond\":return f<h?p\/(h*s):p\/(f*c);case\"ellipse\":return p\/(s*Math.sqrt(Math.pow(u,2)+Math.pow(l,2)*Math.pow(d,2)))}},Ba=function(e,t,n){var r,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;switch(e.type){case\"rectangle\":case\"text\":case\"diamond\":var a=Ha(e);r=a.flatMap((function(e,n){var r=[e,a[(n+1)%4]];return Na(t,Ra(r,o))})).concat(a.flatMap((function(e){return Va(e,o,t)})));break;case\"ellipse\":r=Fa(e,o,t)}if(r.length<2)return[];var i=r.sort((function(e,t){return sa(e,n)-sa(t,n)}));return[i[0],i[i.length-1]]},Ha=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=t*e.width\/2,r=t*e.height\/2;switch(e.type){case\"rectangle\":case\"text\":return[Uo(n,r),Uo(n,-r),Uo(-n,-r),Uo(-n,r)];case\"diamond\":return[Uo(0,r),Uo(n,0),Uo(0,-r),Uo(-n,0)]}},Na=function(e,t){var n=R(t,2),r=n[0],o=n[1];return ca(r,e)*ca(o,e)>=0?[]:[la(e,ra(r,o))]},Ra=function(e,t){var n=R(e,2),r=n[0],o=n[1],a=function(e,t){var n=.5*t;return[1,0,0,0,n*e[4],n*e[5],0,0]}(function(e,t){return ea([0,0,0,0,t[4]-e[4],t[5]-e[5],0,0])}(r,o),t);return[pa(a,r),pa(a,o)]},Fa=function(e,t,n){var r=e.width\/2+t,o=e.height\/2+t,a=n[2],i=n[3],l=n[1],s=r*r*a*a+o*o*i*i,c=s-l*l;if(0===s||c<=0)return[];var u=Math.sqrt(c),d=-r*r*a*l,p=-o*o*i*l;return[Uo((d+r*o*i*u)\/s,(p-r*o*a*u)\/s),Uo((d-r*o*i*u)\/s,(p+r*o*a*u)\/s)]},Va=function(e,t,n){if(0===t)return 0===ca(n,e)?[e]:[];var r=n[2],o=n[3],a=n[1],i=R(ia(e),2),l=i[0],s=i[1],c=r*r+o*o,u=t*t*c-Math.pow(r*l+o*s+a,2);if(0===c||u<=0)return[];var d=Math.sqrt(u),p=l*o*o-s*r*o-r*a,f=s*r*r-l*r*o-o*a;return[Uo((p+o*d)\/c,(f-r*d)\/c),Uo((p-o*d)\/c,(f+r*d)\/c)]},Ga=function(e,t,n){var r=Math.abs(t),o=e.width*r\/2,a=e.height*r\/2,i=Math.sign(t),l=R(ia(n),2),s=l[0],c=l[1],u=0===c?1e-4:c,d=Math.pow(s,2)*Math.pow(a,2)+Math.pow(u,2)*Math.pow(o,2),p=(-s*Math.pow(a,2)+i*u*Math.sqrt(Math.max(0,d-Math.pow(o,2)*Math.pow(a,2))))\/d,f=(-p*s-1)\/u,h=-Math.pow(o,2)*p\/(Math.pow(f,2)*Math.pow(a,2)+Math.pow(p,2)*Math.pow(o,2));return Uo(h,(-p*h-1)\/f)},Ua=function(e,t,n){var r=Math.abs(t),o=Math.sign(t),a=Ha(e,r),i=0,l=null;return a.forEach((function(e){var t=o*ra(n,e)[1];t>i&&(i=t,l=e)})),l},Ka=function(e,t,n,r){var o,a=[],i=!1,l=fa(vt(e));try{for(l.s();!(o=l.n()).done;){var s=o.value;\"move\"===s.op?(i=!i)&&a.push([s.data[0],s.data[1]]):\"bcurveTo\"===s.op&&i&&(a.push([s.data[0],s.data[1]]),a.push([s.data[2],s.data[3]]),a.push([s.data[4],s.data[5]]))}}catch(e){l.e(e)}finally{l.f()}if(a.length>=4){if(\"sharp\"===r)return st(a,t,n);var c=Ne(a,10,5);return st(c,t,n)}return!1},Wa=function(e,t,n,r){var o=vt(e),a=[0,0];return o.some((function(e,o){var i=e.op,l=e.data;if(\"move\"===i)a=l;else if(\"bcurveTo\"===i){var s=[l[0],l[1]],c=[l[2],l[3]],u=[l[4],l[5]],d=a;return a=u,function(e,t,n,r,o,a){for(var i=R(o,2),l=i[0],s=i[1],c=function(o,a){return Math.pow(1-o,3)*r[a]+3*o*Math.pow(1-o,2)*n[a]+3*Math.pow(o,2)*(1-o)*t[a]+e[a]*Math.pow(o,3)},u=0;u<=1;){var d=c(u,0),p=c(u,1);if(Math.sqrt(Math.pow(d-l,2)+Math.pow(p-s,2))<a)return!0;u+=.01}return!1}(d,s,c,u,[t,n],r)}return!1}))},Za=[\"rotation\"],Ya=function(e,t,n){return t>=e[0]&&t<=e[0]+e[2]&&n>=e[1]&&n<=e[1]+e[3]},Xa=function(e,t,n,r,o,a){return e.reduce((function(e,i){if(e)return e;var l=function(e,t,n,r,o,a){if(!t.selectedElementIds[e.id])return!1;var i=Go(e,o,a),l=i.rotation,s=po(i,Za);if(l&&Ya(l,n,r))return\"rotation\";var c=Object.keys(s).filter((function(e){var t=s[e];return!!t&&Ya(t,n,r)}));return c.length>0&&c[0]}(i,t,n,r,o,a);return l?{element:i,transformHandleType:l}:null}),null)},qa=function(e,t,n,r,o){var a=R(e,4),i=a[0],l=a[1],s=a[2],c=a[3],u=Vo([i,l,s,c],0,r,o,Bo);return Object.keys(u).find((function(e){var r=u[e];return r&&Ya(r,t,n)}))||!1},$a=[\"ns\",\"nesw\",\"ew\",\"nwse\"],Qa=function(e){var t=e.element,n=e.transformHandleType,r=t&&Math.sign(t.height)*Math.sign(t.width)==-1,o=null;switch(n){case\"n\":case\"s\":o=\"ns\";break;case\"w\":case\"e\":o=\"ew\";break;case\"nw\":case\"se\":o=r?\"nesw\":\"nwse\";break;case\"ne\":case\"sw\":o=r?\"nwse\":\"nesw\";break;case\"rotation\":return\"grab\"}return o&&t&&(o=function(e,t){var n=$a.indexOf(e);if(n>=0){var r=Math.round(t\/(Math.PI\/4));e=$a[(n+r)%$a.length]}return e}(o,t.angle)),o?\"\".concat(o,\"-resize\"):\"\"};function Ja(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ei(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ja(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ja(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ti=function(){function e(t,n){p(this,e),this.elementId=t.id,Jr.mapElementToScene(this.elementId,n),e.normalizePoints(t),this.activePointIndex=null,this.lastUncommittedPoint=null,this.isDragging=!1,this.pointerOffset={x:0,y:0},this.startBindingElement=\"keep\",this.endBindingElement=\"keep\"}return h(e,null,[{key:\"getElement\",value:function(e){var t,n=null===(t=Jr.getScene(e))||void 0===t?void 0:t.getNonDeletedElement(e);return n||null}},{key:\"handlePointDragging\",value:function(t,n,r,o,a){if(!t.editingLinearElement)return!1;var i=t.editingLinearElement,l=i.activePointIndex,s=i.elementId,c=i.isDragging,u=e.getElement(s);if(!u)return!1;if(null!=l&&l>-1){!1===c&&n({editingLinearElement:ei(ei({},i),{},{isDragging:!0})});var d=e.createPointAt(u,r-i.pointerOffset.x,o-i.pointerOffset.y,t.gridSize);return e.movePoint(u,l,d),et(u)&&a(u,0===l?\"start\":\"end\"),!0}return!1}},{key:\"handlePointerUp\",value:function(t,n,r){var o=n.elementId,a=n.activePointIndex,i=n.isDragging,l=e.getElement(o);if(!l)return n;var s={};!i||0!==a&&a!==l.points.length-1||(lt(l.points,r.zoom.value)&&e.movePoint(l,a,0===a?l.points[l.points.length-1]:l.points[0]),s=V({},0===a?\"startBindingElement\":\"endBindingElement\",ri(r)?hi(Jn(e.getPointAtIndexGlobalCoordinates(l,a)),Jr.getScene(l)):null));return ei(ei(ei({},n),s),{},{isDragging:!1,pointerOffset:{x:0,y:0}})}},{key:\"handlePointerDown\",value:function(t,n,r,o,a){var i={didAddPoint:!1,hitElement:null};if(!n.editingLinearElement)return i;var l=n.editingLinearElement.elementId,s=e.getElement(l);if(!s)return i;if(t.altKey)return null==n.editingLinearElement.lastUncommittedPoint&&ao(s,{points:[].concat(F(s.points),[e.createPointAt(s,a.x,a.y,n.gridSize)])}),o.resumeRecording(),r({editingLinearElement:ei(ei({},n.editingLinearElement),{},{activePointIndex:s.points.length-1,lastUncommittedPoint:null,endBindingElement:hi(a,Jr.getScene(s))})}),i.didAddPoint=!0,i;var c=e.getPointIndexUnderCursor(s,n.zoom,a.x,a.y);if(c>-1)i.hitElement=s;else{var u=n.editingLinearElement,d=u.startBindingElement,p=u.endBindingElement;ri(n)&&et(s)&&oi(s,d,p)}var f=R(gt(s),4),h=f[0],m=f[1],g=(h+f[2])\/2,v=(m+f[3])\/2,b=c>-1&&rt(s.x+s.points[c][0],s.y+s.points[c][1],g,v,s.angle);return r({editingLinearElement:ei(ei({},n.editingLinearElement),{},{activePointIndex:c>-1?c:null,pointerOffset:b?{x:a.x-b[0],y:a.y-b[1]}:{x:0,y:0}})}),i}},{key:\"handlePointerMove\",value:function(t,n,r,o,a){var i=o.elementId,l=o.lastUncommittedPoint,s=e.getElement(i);if(!s)return o;var c=s.points,u=c[c.length-1];if(!t.altKey)return u===l&&e.movePoint(s,c.length-1,\"delete\"),ei(ei({},o),{},{lastUncommittedPoint:null});var d=e.createPointAt(s,n-o.pointerOffset.x,r-o.pointerOffset.y,a);return u===l?e.movePoint(s,s.points.length-1,d):e.movePoint(s,\"new\",d),ei(ei({},o),{},{lastUncommittedPoint:s.points[s.points.length-1]})}},{key:\"getPointsGlobalCoordinates\",value:function(e){var t=R(gt(e),4),n=t[0],r=t[1],o=t[2],a=t[3],i=(n+o)\/2,l=(r+a)\/2;return e.points.map((function(t){var n=e.x,r=e.y,o=R(rt(n+t[0],r+t[1],i,l,e.angle),2);return[n=o[0],r=o[1]]}))}},{key:\"getPointAtIndexGlobalCoordinates\",value:function(e,t){var n=t<0?e.points.length+t:t,r=R(gt(e),4),o=r[0],a=r[1],i=(o+r[2])\/2,l=(a+r[3])\/2,s=e.points[n],c=e.x,u=e.y;return rt(c+s[0],u+s[1],i,l,e.angle)}},{key:\"pointFromAbsoluteCoords\",value:function(e,t){var n=R(gt(e),4),r=n[0],o=n[1],a=(r+n[2])\/2,i=(o+n[3])\/2,l=R(rt(t[0],t[1],a,i,-e.angle),2),s=l[0],c=l[1];return[s-e.x,c-e.y]}},{key:\"getPointIndexUnderCursor\",value:function(e,t,n,r){for(var o=this.getPointsGlobalCoordinates(e),a=o.length;--a>-1;){var i=o[a];if(it(n,r,i[0],i[1])*t.value<this.POINT_HANDLE_SIZE\/2+1)return a}return-1}},{key:\"createPointAt\",value:function(e,t,n,r){var o=pt(t,n,r),a=R(gt(e),4),i=a[0],l=a[1],s=(i+a[2])\/2,c=(l+a[3])\/2,u=R(rt(o[0],o[1],s,c,-e.angle),2),d=u[0],p=u[1];return[d-e.x,p-e.y]}},{key:\"getNormalizedPoints\",value:function(e){var t=e.points,n=t[0][0],r=t[0][1];return{points:t.map((function(e,t){return[e[0]-n,e[1]-r]})),x:e.x+n,y:e.y+r}}},{key:\"normalizePoints\",value:function(t){ao(t,e.getNormalizedPoints(t))}},{key:\"movePointByOffset\",value:function(t,n,r){var o=R(t.points[n],2),a=o[0],i=o[1];e.movePoint(t,n,[a+r.x,i+r.y])}},{key:\"movePoint\",value:function(e,t,n,r){var o,a=e.points,i=0,l=0;if(\"delete\"===n){if(\"new\"===t)throw new Error(\"invalid args in movePoint\");(o=a.slice()).splice(t,1),0===t&&(i=o[0][0],l=o[0][1],o=o.map((function(e,t){return 0===t?[0,0]:[e[0]-i,e[1]-l]})))}else if(\"new\"===t)o=[].concat(F(a),[n]);else{var s=n[0]-a[t][0],c=n[1]-a[t][1];o=a.map((function(e,n){return n===t?0===n?(i=s,l=c,e):(i=0,l=0,[e[0]+s,e[1]+c]):i||l?[e[0]-i,e[1]-l]:e}))}var u=jt(e,o,e.strokeSharpness||\"round\"),d=jt(e,a,e.strokeSharpness||\"round\"),p=(u[0]+u[2])\/2,f=(u[1]+u[3])\/2,h=(d[0]+d[2])\/2,m=(d[1]+d[3])\/2,g=rt(i,l,h-p,m-f,e.angle);ao(e,ei(ei({},r),{},{points:o,x:e.x+g[0],y:e.y+g[1]}))}}]),e}();function ni(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}ti.POINT_HANDLE_SIZE=20;var ri=function(e){return e.isBindingEnabled},oi=function(e,t,n){var r=new Set,o=new Set;ai(e,t,n,\"start\",r,o),ai(e,n,t,\"end\",r,o);var a=Array.from(o).filter((function(e){return!r.has(e)}));Jr.getScene(e).getNonDeletedElements(a).forEach((function(t){var n;ao(t,{boundElementIds:null===(n=t.boundElementIds)||void 0===n?void 0:n.filter((function(t){return t!==e.id}))})}))},ai=function(e,t,n,r,o,a){if(\"keep\"!==t)if(null!=t)null!=n&&(\"keep\"===n?ui(e,t,r):\"start\"!==r&&n.id===t.id)||(ci(e,t,r),o.add(t.id));else{var i=fi(e,r);null!=i&&a.add(i)}},ii=function(e){e.forEach((function(e){et(e)?oi(e,ki(e,\"start\"),ki(e,\"end\")):nt(e)&&li(e)}))},li=function(e){Ei(e).forEach((function(t){var n=R(t,2),r=n[0],o=n[1];return oi(r,\"end\"===o?\"keep\":e,\"start\"===o?\"keep\":e)}))},si=function(e,t,n,r){null!=t.startBoundElement&&ci(e,t.startBoundElement,\"start\");var o=hi(r,n);null==o||ui(e,o,\"end\")||ci(e,o,\"end\")},ci=function(e,t,n){var r;ao(e,V({},\"start\"===n?\"startBinding\":\"endBinding\",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ni(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ni(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({elementId:t.id},mi(e,t,n)))),ao(t,{boundElementIds:Array.from(new Set([].concat(F(null!==(r=t.boundElementIds)&&void 0!==r?r:[]),[e.id])))})},ui=function(e,t,n){var r=e[\"start\"===n?\"endBinding\":\"startBinding\"];return di(e,null==r?void 0:r.elementId,t)},di=function(e,t,n){return t===n.id&&e.points.length<3},pi=function(e){e.forEach((function(e){et(e)&&oi(e,null,null)}))},fi=function(e,t){var n=\"start\"===t?\"startBinding\":\"endBinding\",r=e[n];return null==r?null:(ao(e,V({},n,null)),r.elementId)},hi=function(e,t){return hl(t.getElements(),(function(t){return nt(t)&&ya(t,e)}))},mi=function(e,t,n){var r=\"start\"===n?-1:1,o=-1===r?0:e.points.length-1,a=o-r,i=ti.getPointAtIndexGlobalCoordinates(e,o),l=ti.getPointAtIndexGlobalCoordinates(e,a);return{focus:za(t,l,i),gap:Math.max(1,ka(t,i))}},gi=function(e,t){var n,r=null!==(n=e.boundElementIds)&&void 0!==n?n:[];if(0!==r.length){var o=null!=t?t:{},a=o.newSize,i=o.simultaneouslyUpdated,l=bi(i);Jr.getScene(e).getNonDeletedElements(r).forEach((function(t){var n=e;if(vi(t,n)){var r=xi(n,t.startBinding,a),o=xi(n,t.endBinding,a);l.has(t.id)?ao(t,{startBinding:r,endBinding:o}):(yi(t,\"start\",r,e),yi(t,\"end\",o,e))}}))}},vi=function(e,t){var n,r;return(null===(n=e.startBinding)||void 0===n?void 0:n.elementId)===t.id||(null===(r=e.endBinding)||void 0===r?void 0:r.elementId)===t.id},bi=function(e){return new Set((e||[]).map((function(e){return e.id})))},yi=function(e,t,n,r){if(!(null==n||n.elementId!==r.id&&e.points.length>2)){var o=Jr.getScene(e).getElement(n.elementId);if(null!=o){var a,i=\"start\"===t?-1:1,l=-1===i?0:e.points.length-1,s=l-i,c=ti.getPointAtIndexGlobalCoordinates(e,s),u=function(e,t,n){if(0===t){var r=gt(e),o=Da(r);return ia(o)}var a,i=_a(e),l=pa(i,aa(n)),s=Wo(i);switch(e.type){case\"rectangle\":case\"text\":case\"diamond\":a=Ua(e,t,l);break;case\"ellipse\":a=Ga(e,t,l)}return ia(pa(s,a))}(o,n.focus,c);if(0===n.gap)a=u;else{var d=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=_a(e),a=pa(o,aa(t)),i=pa(o,aa(n)),l=ra(a,i),s=Wo(o);return Ba(e,l,a,r).map((function(e){return ia(pa(s,e))}))}(o,c,u,n.gap);a=0===d.length?u:d[0]}ti.movePoint(e,l,ti.pointFromAbsoluteCoords(e,a),V({},\"start\"===t?\"startBinding\":\"endBinding\",n))}}},xi=function(e,t,n){if(null==t||null==n)return t;var r=t.gap,o=t.focus,a=t.elementId,i=n.width,l=n.height,s=e.width,c=e.height;return{elementId:a,gap:Math.max(1,Math.min(xa(e,i,l),r*(i<l?i\/s:l\/c))),focus:o}},wi=function(e){return[ki(e,\"start\"),ki(e,\"end\")].filter((function(e){return null!=e}))},ki=function(e,t){return hi(Si(e,t),Jr.getScene(e))},Si=function(e,t){var n=\"start\"===t?0:-1;return Jn(ti.getPointAtIndexGlobalCoordinates(e,n))},Ei=function(e){return Jr.getScene(e).getElements().map((function(t){if(!et(t))return null;var n=ji(t,\"start\",e),r=ji(t,\"end\",e);return n||r?[t,n&&r?\"both\":n?\"start\":\"end\",e]:null})).filter((function(e){return null!=e}))},ji=function(e,t,n){return null==e[\"start\"===t?\"startBinding\":\"endBinding\"]&&!ui(e,n,t)&&ya(n,Si(e,t))},Ci=function(e,t,n,r){var o=new Set,a=new Set,i=\"duplicatesServeAsOld\"===r;t.forEach((function(e){var t=e.boundElementIds;if(null!=t&&t.length>0&&(t.forEach((function(e){i&&!n.has(e)&&o.add(e)})),a.add(n.get(e.id))),et(e)){if(null!=e.startBinding){var r=e.startBinding.elementId;i&&!n.has(r)&&a.add(r)}if(null!=e.endBinding){var l=e.endBinding.elementId;i&&!n.has(l)&&a.add(l)}null==e.startBinding&&null==e.endBinding||o.add(n.get(e.id))}})),e.filter((function(e){var t=e.id;return o.has(t)})).forEach((function(e){var t=e.startBinding,r=e.endBinding;ao(e,{startBinding:Oi(t,n),endBinding:Oi(r,n)})})),e.filter((function(e){var t=e.id;return a.has(t)})).forEach((function(e){var t=e.boundElementIds;null!=t&&t.length>0&&ao(e,{boundElementIds:t.map((function(e){var t;return null!==(t=n.get(e))&&void 0!==t?t:e}))})}))},Oi=function(e,t){var n;if(null==e)return null;var r=e.elementId;return{focus:e.focus,gap:e.gap,elementId:null!==(n=t.get(r))&&void 0!==n?n:r}},Mi=function(e,t){var n=new Set(t.map((function(e){return e.id}))),r=new Set;t.forEach((function(e){var t;nt(e)&&(null===(t=e.boundElementIds)||void 0===t||t.forEach((function(e){n.has(e)||r.add(e)})))})),e.filter((function(e){var t=e.id;return r.has(t)})).forEach((function(e){var t=e.startBinding,r=e.endBinding;ao(e,{startBinding:Ii(t,n),endBinding:Ii(r,n)})}))},Ii=function(e,t){return null==e||t.has(e.elementId)?null:e};function Pi(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ti(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Pi(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Pi(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ai=function(e){return e>=2*Math.PI?e-2*Math.PI:e},Li=function(e,t,n,r){var o=R(gt(e),4),a=o[0],i=o[1],l=(a+o[2])\/2,s=(i+o[3])\/2,u=5*Math.PI\/2+Math.atan2(n-s,t-l);r&&(u+=c.ay\/2,u-=u%c.ay),u=Ai(u),ao(e,{angle:u})},_i=function(e,t,n,r,o){var a=R(gt(e),4),i=a[0],l=a[1],s=a[2],c=a[3],u=R(rt(r,o,(i+s)\/2,(l+c)\/2,-e.angle),2),d=u[0],p=u[1],f=R(\"end\"===t?[d-e.x,p-e.y]:[e.x+e.points[1][0]-d,e.y+e.points[1][1]-p],2),h=f[0],m=f[1];if(n){var g=R(function(e,t,n,r){var o=co.apply(void 0,[e].concat(F(rt(t,n,0,0,r))));return rt(o.width,o.height,0,0,-r)}(e.type,h,m,e.angle),2);h=g[0],m=g[1]}var v=R(at(\"end\"===t?{s:!0,e:!0}:{n:!0,w:!0},e.x,e.y,e.angle,0,0,(e.points[1][0]-h)\/2,(e.points[1][1]-m)\/2),2),b=v[0],y=v[1];ao(e,{x:b,y:y,points:[[0,0],[h,m]]})},Di=function(e,t,n){return Qe(e)||qe(e)?{points:ft(0,t,ft(1,n,e.points))}:{}},zi=function(e,t,n){var r=e.fontSize*(t\/e.width);if(r<1)return null;var o=Rn(e.text,Nn({fontSize:r,fontFamily:e.fontFamily}));return{size:r,baseline:o.baseline+(n-o.height)}},Bi=function(e,t,n,r,o){var a,i=R(gt(e),4),l=i[0],s=i[1],c=i[2],u=i[3],d=R(rt(r,o,(l+c)\/2,(s+u)\/2,-e.angle),2),p=d[0],f=d[1];switch(t){case\"se\":a=Math.max((p-l)\/(c-l),(f-s)\/(u-s));break;case\"nw\":a=Math.max((c-p)\/(c-l),(u-f)\/(u-s));break;case\"ne\":a=Math.max((p-l)\/(c-l),(u-f)\/(u-s));break;case\"sw\":a=Math.max((c-p)\/(c-l),(f-s)\/(u-s))}if(a>0){var h=e.width*a,m=e.height*a,g=zi(e,h,m);if(null===g)return;var v=R(Et(e,h,m),4),b=(l-v[0])\/2,y=(s-v[1])\/2,x=(c-v[2])\/2,w=(u-v[3])\/2,k=R(at(function(e,t){return{n:\/^(n|ne|nw)$\/.test(e)||t&&\/^(s|se|sw)$\/.test(e),s:\/^(s|se|sw)$\/.test(e)||t&&\/^(n|ne|nw)$\/.test(e),w:\/^(w|nw|sw)$\/.test(e)||t&&\/^(e|ne|se)$\/.test(e),e:\/^(e|ne|se)$\/.test(e)||t&&\/^(w|nw|sw)$\/.test(e)}}(t,n),e.x,e.y,e.angle,b,y,x,w),2),S=k[0],E=k[1];ao(e,{fontSize:g.size,width:h,height:m,baseline:g.baseline,x:S,y:E})}},Hi=function(e,t,n,r,o,a,i){var l,s,c=R(Et(e,e.width,e.height),4),u=[c[0],c[1]],d=[c[2],c[3]],p=[((l=u)[0]+(s=d)[0])\/2,(l[1]+s[1])\/2],f=ot([a,i],p,-e.angle),h=R(Et(n,n.width,n.height),4),m=h[0],g=h[1],v=h[2]-m,b=h[3]-g,y=(d[0]-u[0])\/v,x=(d[1]-u[1])\/b;r.includes(\"e\")&&(y=(f[0]-u[0])\/v),r.includes(\"s\")&&(x=(f[1]-u[1])\/b),r.includes(\"w\")&&(y=(d[0]-f[0])\/v),r.includes(\"n\")&&(x=(d[1]-f[1])\/b);var w=e.width,k=e.height,S=n.width*y,E=n.height*x;if(o&&(S=2*S-w,E=2*E-k),t){var j=Math.abs(S)\/w,C=Math.abs(E)\/k;if(1===r.length&&(E*=j,S*=C),2===r.length){var O=Math.max(j,C);S=w*O*Math.sign(S),E=k*O*Math.sign(E)}}var M=R(Et(e,S,E),4),I=M[0],P=M[1],T=M[2]-I,A=M[3]-P,L=[].concat(u);if([\"n\",\"w\",\"nw\"].includes(r)&&(L=[d[0]-Math.abs(T),d[1]-Math.abs(A)]),\"ne\"===r){var _=[u[0],d[1]];L=[_[0],_[1]-Math.abs(A)]}if(\"sw\"===r){var D=[d[0],u[1]];L=[D[0]-Math.abs(T),D[1]]}t&&([\"s\",\"n\"].includes(r)&&(L[0]=p[0]-T\/2),[\"e\",\"w\"].includes(r)&&(L[1]=p[1]-A\/2)),S<0&&(r.includes(\"e\")&&(L[0]-=Math.abs(T)),r.includes(\"w\")&&(L[0]+=Math.abs(T))),E<0&&(r.includes(\"s\")&&(L[1]-=Math.abs(A)),r.includes(\"n\")&&(L[1]+=Math.abs(A))),o&&(L[0]=p[0]-Math.abs(T)\/2,L[1]=p[1]-Math.abs(A)\/2);var z=e.angle,B=ot(L,p,z),H=[L[0]+Math.abs(T)\/2,L[1]+Math.abs(A)\/2],N=ot(H,p,z);L=ot(B,N,-z);var V=Di(e,S,E),G=F(L);G[0]+=e.x-I,G[1]+=e.y-P;var U=Ti({width:Math.abs(S),height:Math.abs(E),x:G[0],y:G[1]},V);0!==U.width&&0!==U.height&&Number.isFinite(U.x)&&Number.isFinite(U.y)&&(gi(n,{newSize:{width:U.width,height:U.height}}),ao(n,U))},Ni=function(e,t,n,r){var o,a,i=R(St(e),4),l=i[0],s=i[1],c=i[2],u=i[3];switch(t){case\"se\":o=Math.max((n-l)\/(c-l),(r-s)\/(u-s)),a=function(e,t,n){var r=R(t,2),a=r[0],i=r[1],c=R(n,2),u=c[0],d=c[1];return{x:e.x+(a-l)*(o-1)+a-u,y:e.y+(i-s)*(o-1)+i-d}};break;case\"nw\":o=Math.max((c-n)\/(c-l),(u-r)\/(u-s)),a=function(e,t,n){var r=R(t,4),a=r[2],i=r[3],l=R(n,4),s=l[2],d=l[3];return{x:e.x-(c-a)*(o-1)+a-s,y:e.y-(u-i)*(o-1)+i-d}};break;case\"ne\":o=Math.max((n-l)\/(c-l),(u-r)\/(u-s)),a=function(e,t,n){var r=R(t,4),a=r[0],i=r[3],s=R(n,4),c=s[0],d=s[3];return{x:e.x+(a-l)*(o-1)+a-c,y:e.y-(u-i)*(o-1)+i-d}};break;case\"sw\":o=Math.max((c-n)\/(c-l),(r-s)\/(u-s)),a=function(e,t,n){var r=R(t,3),a=r[1],i=r[2],l=R(n,3),u=l[1],d=l[2];return{x:e.x-(c-i)*(o-1)+i-d,y:e.y+(a-s)*(o-1)+a-u}}}if(o>0){var d=e.reduce((function(t,n){if(!t)return t;var r=n.width*o,i=n.height*o,l={};if(\"text\"===n.type){var s=zi(n,r,i);if(null===s)return null;l={fontSize:s.size,baseline:s.baseline}}var c=gt(n),u=Di(n,r,i);gi(n,{newSize:{width:r,height:i},simultaneouslyUpdated:e});var d=Et(Ti(Ti({},n),u),r,i),p=a(n,c,d),f=p.x,h=p.y;return[].concat(F(t),[Ti(Ti({width:r,height:i,x:f,y:h},u),l)])}),[]);d&&e.forEach((function(e,t){ao(e,d[t])}))}},Ri=function(e,t,n,r,o,a,i){var l=5*Math.PI\/2+Math.atan2(r-i,n-a);o&&(l+=c.ay\/2,l-=l%c.ay),t.forEach((function(t,n){var r,o,s=R(gt(t),4),c=s[0],u=s[1],d=(c+s[2])\/2,p=(u+s[3])\/2,f=null!==(r=null===(o=e.originalElements.get(t.id))||void 0===o?void 0:o.angle)&&void 0!==r?r:t.angle,h=R(rt(d,p,a,i,l+f-t.angle),2),m=h[0],g=h[1];ao(t,{x:t.x+(m-d),y:t.y+(g-p),angle:Ai(l+f)})}))},Fi=function(e,t,n,r,o,a,i,l,s,c){if(s){var u=co(t,i,a<r?-l:l);i=u.width,(l=u.height)<0&&(l=-l)}var d=o<n?n-i:n,p=a<r?r-l:r;c&&(d=n-(i+=i)\/2,p=r-(l+=l)\/2),0!==i&&0!==l&&ao(e,{x:d,y:p,width:i,height:l})},Vi=function(e){return e.replace(\/\\t\/g,\"        \").replace(\/\\r?\\n|\\r\/g,\"\\n\")},Gi=function(e,t,n,r,o){var a=r.zoom,i=r.offsetTop,l=r.offsetLeft,s=180*n\/Math.PI,c=(e-2*l)*(a.value-1)\/2,u=(t-2*i)*(a.value-1)\/2;return e>o&&1!==a.value&&(c=o\/2*(a.value-1)),\"translate(\".concat(c,\"px, \").concat(u,\"px) scale(\").concat(a.value,\") rotate(\").concat(s,\"deg)\")},Ui=function(e){var t=Rn(e.text,Nn(e));ao(e,{width:t.width,height:t.height,baseline:t.baseline})},Ki=function(e,t){return Boolean(!e.viewModeEnabled&&(e.editingElement||ol(t,e).length||\"selection\"!==e.elementType))};function Wi(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Zi(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Wi(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Wi(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Yi=function(e){return e.reduce((function(e,t){return e[t.id]=t,e}),{})},Xi=function(e){return e.reduce((function(e,t){return e+t.version}),0)},qi=function(e){return e.filter((function(e){return!e.isDeleted}))},$i=function(e){return!e.isDeleted},Qi=function(e){return qi(e).map((function(e){return Je(e.type)?Zi(Zi({},e),{},{lastCommittedPoint:null}):e}))},Ji=function(e){return Qi(e)},el=\"rgba(0,0,0,0.3)\",tl=function(e,t,n,r){var o=r.scrollX,a=r.scrollY,i=r.zoom;if(0===e.length)return{horizontal:null,vertical:null};var l=R(St(e),4),s=l[0],c=l[1],u=l[2],d=l[3],p=t\/i.value,f=n\/i.value,h=t-p,m=n-f,g={top:parseInt(qn(\"sat\")),bottom:parseInt(qn(\"sab\")),left:parseInt(qn(\"sal\")),right:parseInt(qn(\"sar\"))},v=T().rtl,b=h\/2-o+g.left,y=m\/2-a+g.top,x=b+p-g.right,w=y+f-g.bottom,k=Math.min(s,b),S=Math.min(c,y),E=Math.max(u,x),j=Math.max(d,w);return{horizontal:b===k&&x===E?null:{x:Math.max(g.left,4)+(b-k)\/(E-k)*t,y:n-6-Math.max(4,g.bottom),width:(x-b)\/(E-k)*t-Math.max(8,g.left+g.right),height:6},vertical:y===S&&w===j?null:{x:v?Math.max(g.left,4):t-6-Math.max(g.right,4),y:(y-S)\/(j-S)*n+Math.max(g.top,4),width:6,height:(w-y)\/(j-S)*n-Math.max(8,g.top+g.bottom)}}},nl=function(e,t,n){var r=R([e.horizontal,e.vertical].map((function(e){return null!=e&&e.x<=t&&t<=e.x+e.width&&e.y<=n&&n<=e.y+e.height})),2),o=r[0],a=r[1];return{isOverEither:o||a,isOverHorizontal:o,isOverVertical:a}},rl=function(e,t){return e.some((function(e){return t.selectedElementIds[e.id]}))},ol=function(e,t){return e.filter((function(e){return t.selectedElementIds[e.id]}))},al=function(e,t){return t.editingElement?[t.editingElement]:ol(e,t)},il=function(e){var t=e.scenePoint,n=e.viewportDimensions,r=e.zoom;return{scrollX:n.width\/2*(1\/r.value)-t.x-r.translation.x*(1\/r.value),scrollY:n.height\/2*(1\/r.value)-t.y-r.translation.y*(1\/r.value)}},ll=function(e,t,n){if(!(e=function(e){return e.filter((function(e){return!e.isDeleted&&!so(e)}))}(e)).length)return{scrollX:0,scrollY:0};var r=R(St(e),4),o=r[0],a=r[1],i=r[2],l=r[3];if(function(e,t,n){var r=R(n,4),o=r[0],a=r[1],i=r[2],l=r[3],s=Xn({sceneX:o,sceneY:a},e),c=s.x,u=s.y,d=Xn({sceneX:i,sceneY:l},e),p=d.x,f=d.y;return p-c>e.width||f-u>e.height}(t,0,[o,a,i,l])){var s=function(e,t){if(!e.length)return[0,0,0,0];var n=1\/0,r=e[0];return e.forEach((function(e){var o=R(kt(e),4),a=o[0],i=o[1],l=o[2],s=o[3],c=it((a+l)\/2,(i+s)\/2,t.x,t.y);c<n&&(n=c,r=e)})),kt(r)}(e,Yn({clientX:t.scrollX,clientY:t.scrollY},t)),c=R(s,4);o=c[0],a=c[1],i=c[2],l=c[3]}return il({scenePoint:{x:(o+i)\/2,y:(a+l)\/2},viewportDimensions:{width:t.width,height:t.height},zoom:t.zoom})},sl=function(e){return\"rectangle\"===e||\"ellipse\"===e||\"diamond\"===e||\"line\"===e},cl=function(e){return\"rectangle\"===e||\"ellipse\"===e||\"diamond\"===e||\"freedraw\"===e||\"arrow\"===e||\"line\"===e},ul=function(e){return\"rectangle\"===e||\"ellipse\"===e||\"diamond\"===e||\"arrow\"===e||\"line\"===e},dl=function(e){return\"rectangle\"===e||\"arrow\"===e||\"line\"===e},pl=function(e){return\"text\"===e},fl=function(e){return\"arrow\"===e},hl=function(e,t){for(var n=null,r=e.length-1;r>=0;--r){var o=e[r];if(!o.isDeleted&&t(o)){n=o;break}}return n},ml=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{x:0,y:0};return{value:e,translation:{x:r.x-n.left-(r.x-n.left-t.translation.x)*(e\/t.value),y:r.y-n.top-(r.y-n.top-t.translation.y)*(e\/t.value)}}},gl=function(e){var t=parseFloat(e.toFixed(2));return Math.max(.1,Math.min(t,10))},vl=(n(5422),s().forwardRef((function(e,t){var n=lh().id,r=s().useRef(null);s().useImperativeHandle(t,(function(){return r.current}));var o=\"ToolIcon_size_\".concat(e.size);return\"button\"===e.type||\"icon\"===e.type?(0,_.jsxs)(\"button\",{className:Ze(\"ToolIcon_type_button\",o,e.className,e.visible&&!e.hidden?\"ToolIcon_type_button--show\":\"ToolIcon_type_button--hide\",{ToolIcon:!e.hidden,\"ToolIcon--selected\":e.selected,\"ToolIcon--plain\":\"icon\"===e.type}),\"data-testid\":e[\"data-testid\"],hidden:e.hidden,title:e.title,\"aria-label\":e[\"aria-label\"],type:\"button\",onClick:e.onClick,ref:r,children:[(e.icon||e.label)&&(0,_.jsxs)(\"div\",{className:\"ToolIcon__icon\",\"aria-hidden\":\"true\",children:[e.icon||e.label,e.keyBindingLabel&&(0,_.jsx)(\"span\",{className:\"ToolIcon__keybinding\",children:e.keyBindingLabel})]}),e.showAriaLabel&&(0,_.jsx)(\"div\",{className:\"ToolIcon__label\",children:e[\"aria-label\"]}),e.children]}):(0,_.jsxs)(\"label\",{className:Ze(\"ToolIcon\",e.className),title:e.title,children:[(0,_.jsx)(\"input\",{className:\"ToolIcon_type_radio \".concat(o),type:\"radio\",name:e.name,\"aria-label\":e[\"aria-label\"],\"aria-keyshortcuts\":e[\"aria-keyshortcuts\"],\"data-testid\":e[\"data-testid\"],id:\"\".concat(n,\"-\").concat(e.id),onChange:e.onChange,checked:e.checked,ref:r}),(0,_.jsxs)(\"div\",{className:\"ToolIcon__icon\",children:[e.icon,e.keyBindingLabel&&(0,_.jsx)(\"span\",{className:\"ToolIcon__keybinding\",children:e.keyBindingLabel})]})]})})));vl.defaultProps={visible:!0,className:\"\",size:\"medium\"};var bl=function(e){return\"light\"===e?Ct.orange[4]:Ct.orange[9]},yl=function(e){return\"light\"===e?Ct.black:Ct.gray[4]},xl=function(e){return\"light\"===e?Ct.white:\"#1e1e1e\"},wl=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:512,n=\"number\"==typeof t?{width:t}:t,r=n.width,o=void 0===r?512:r,a=n.height,i=void 0===a?o:a,l=n.mirror,s=n.style;return(0,_.jsx)(\"svg\",{\"aria-hidden\":\"true\",focusable:\"false\",role:\"img\",viewBox:\"0 0 \".concat(o,\" \").concat(i),className:Ze({\"rtl-mirror\":l}),style:s,children:\"string\"==typeof e?(0,_.jsx)(\"path\",{fill:\"currentColor\",d:e}):e})},kl=wl((0,_.jsx)(\"polyline\",{fill:\"none\",stroke:\"currentColor\",points:\"20 6 9 17 4 12\"}),{width:24,height:24}),Sl=wl(\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\",{mirror:!0}),El=wl(\"M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z\",{width:448,height:512}),jl=wl(\"M252 54L203 8a28 27 0 00-20-8H28C12 0 0 12 0 27v195c0 15 12 26 28 26h204c15 0 28-11 28-26V73a28 27 0 00-8-19zM130 213c-21 0-37-16-37-36 0-19 16-35 37-35 20 0 37 16 37 35 0 20-17 36-37 36zm56-169v56c0 4-4 6-7 6H44c-4 0-7-2-7-6V42c0-4 3-7 7-7h133l4 2 3 2a7 7 0 012 5z M296 201l87 95-188 205-78 9c-10 1-19-8-18-20l9-84zm141-14l-41-44a31 31 0 00-46 0l-38 41 87 95 38-42c13-14 13-36 0-50z\",{width:448,height:512}),Cl=wl(\"M572.694 292.093L500.27 416.248A63.997 63.997 0 0 1 444.989 448H45.025c-18.523 0-30.064-20.093-20.731-36.093l72.424-124.155A64 64 0 0 1 152 256h399.964c18.523 0 30.064 20.093 20.73 36.093zM152 224h328v-48c0-26.51-21.49-48-48-48H272l-64-64H48C21.49 64 0 85.49 0 112v278.046l69.077-118.418C86.214 242.25 117.989 224 152 224z\",{width:576,height:512,mirror:!0}),Ol=wl(\"M384 112v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h80c0-35.29 28.71-64 64-64s64 28.71 64 64h80c26.51 0 48 21.49 48 48zM192 40c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24m96 114v-20a6 6 0 0 0-6-6H102a6 6 0 0 0-6 6v20a6 6 0 0 0 6 6h180a6 6 0 0 0 6-6z\",{width:384,height:512}),Ml=wl(\"M32 464a48 48 0 0 0 48 48h288a48 48 0 0 0 48-48V128H32zm272-256a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zM432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z\",{width:448,height:512}),Il=wl(\"M204.3 5C104.9 24.4 24.8 104.3 5.2 203.4c-37 187 131.7 326.4 258.8 306.7 41.2-6.4 61.4-54.6 42.5-91.7-23.1-45.4 9.9-98.4 60.9-98.4h79.7c35.8 0 64.8-29.6 64.9-65.3C511.5 97.1 368.1-26.9 204.3 5zM96 320c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm32-128c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128-64c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128 64c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z\"),Pl=wl(\"M384 121.9c0-6.3-2.5-12.4-7-16.9L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128zM571 308l-95.7-96.4c-10.1-10.1-27.4-3-27.4 11.3V288h-64v64h64v65.2c0 14.3 17.3 21.4 27.4 11.3L571 332c6.6-6.6 6.6-17.4 0-24zm-379 28v-32c0-8.8 7.2-16 16-16h176V160H248c-13.2 0-24-10.8-24-24V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V352H208c-8.8 0-16-7.2-16-16z\",{width:576,height:512,mirror:!0}),Tl=wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M571 308l-95.7-96.4c-10.1-10.1-27.4-3-27.4 11.3V288h-64v64h64v65.2c0 14.3 17.3 21.4 27.4 11.3L571 332c6.6-6.6 6.6-17.4 0-24zm-187 44v-64 64z\"}),(0,_.jsx)(\"path\",{d:\"M384 121.941V128H256V0h6.059c6.362 0 12.471 2.53 16.97 7.029l97.941 97.941a24.01 24.01 0 017.03 16.971zM248 160c-13.2 0-24-10.8-24-24V0H24C10.745 0 0 10.745 0 24v464c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24V160H248zm-135.455 16c26.51 0 48 21.49 48 48s-21.49 48-48 48-48-21.49-48-48 21.491-48 48-48zm208 240h-256l.485-48.485L104.545 328c4.686-4.686 11.799-4.201 16.485.485L160.545 368 264.06 264.485c4.686-4.686 12.284-4.686 16.971 0L320.545 304v112z\"})]}),{width:576,height:512,mirror:!0}),Al=wl(\"M216 0h80c13.3 0 24 10.7 24 24v168h87.7c17.8 0 26.7 21.5 14.1 34.1L269.7 378.3c-7.5 7.5-19.8 7.5-27.3 0L90.1 226.1c-12.6-12.6-3.7-34.1 14.1-34.1H192V24c0-13.3 10.7-24 24-24zm296 376v112c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24V376c0-13.3 10.7-24 24-24h146.7l49 49c20.1 20.1 52.5 20.1 72.6 0l49-49H488c13.3 0 24 10.7 24 24zm-124 88c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20zm64 0c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20z\",{width:512,height:512}),Ll=wl(\"M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z\",{width:448,height:512}),_l=wl(\"M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z\",{width:448,height:512}),Dl=wl(\"M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z\"),zl=wl(\"M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z\"),Bl=wl(\"M255.545 8c-66.269.119-126.438 26.233-170.86 68.685L48.971 40.971C33.851 25.851 8 36.559 8 57.941V192c0 13.255 10.745 24 24 24h134.059c21.382 0 32.09-25.851 16.971-40.971l-41.75-41.75c30.864-28.899 70.801-44.907 113.23-45.273 92.398-.798 170.283 73.977 169.484 169.442C423.236 348.009 349.816 424 256 424c-41.127 0-79.997-14.678-110.63-41.556-4.743-4.161-11.906-3.908-16.368.553L89.34 422.659c-4.872 4.872-4.631 12.815.482 17.433C133.798 479.813 192.074 504 256 504c136.966 0 247.999-111.033 248-247.998C504.001 119.193 392.354 7.755 255.545 8z\",{mirror:!0}),Hl=wl(\"M256.455 8c66.269.119 126.437 26.233 170.859 68.685l35.715-35.715C478.149 25.851 504 36.559 504 57.941V192c0 13.255-10.745 24-24 24H345.941c-21.382 0-32.09-25.851-16.971-40.971l41.75-41.75c-30.864-28.899-70.801-44.907-113.23-45.273-92.398-.798-170.283 73.977-169.484 169.442C88.764 348.009 162.184 424 256 424c41.127 0 79.997-14.678 110.629-41.556 4.743-4.161 11.906-3.908 16.368.553l39.662 39.662c4.872 4.872 4.631 12.815-.482 17.433C378.202 479.813 319.926 504 256 504 119.034 504 8.001 392.967 8 256.002 7.999 119.193 119.646 7.755 256.455 8z\",{mirror:!0}),Nl=wl(\"M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zM262.655 90c-54.497 0-89.255 22.957-116.549 63.758-3.536 5.286-2.353 12.415 2.715 16.258l34.699 26.31c5.205 3.947 12.621 3.008 16.665-2.122 17.864-22.658 30.113-35.797 57.303-35.797 20.429 0 45.698 13.148 45.698 32.958 0 14.976-12.363 22.667-32.534 33.976C247.128 238.528 216 254.941 216 296v4c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12v-1.333c0-28.462 83.186-29.647 83.186-106.667 0-58.002-60.165-102-116.531-102zM256 338c-25.365 0-46 20.635-46 46 0 25.364 20.635 46 46 46s46-20.636 46-46c0-25.365-20.635-46-46-46z\",{mirror:!0}),Rl=(wl(\"M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z\",{width:24,height:24}),wl(\"M16 5l-1.42 1.42-1.59-1.59V16h-1.98V4.83L9.42 6.42 8 5l4-4 4 4zm4 5v11c0 1.1-.9 2-2 2H6c-1.11 0-2-.9-2-2V10c0-1.11.89-2 2-2h3v2H6v11h12V10h-3V8h3c1.1 0 2 .89 2 2z\",{width:24,height:24}),wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{stroke:\"currentColor\",fill:\"currentColor\",d:\"M40 5.6v6.1l-4.1.7c-8.9 1.4-16.5 6.9-20.6 15C13 32 10.9 43 12.4 43c.4 0 2.4-1.3 4.4-3 5-3.9 12.1-7 18.2-7.7l5-.6v12.8l11.2-11.3L62.5 22 51.2 10.8 40-.5v6.1zm10.2 22.6L44 34.5v-6.8l-6.9.6c-3.9.3-9.8 1.7-13.2 3.1-3.5 1.4-6.5 2.4-6.7 2.2-.9-1 3-7.5 6.4-10.8C28 18.6 34.4 16 40.1 16c3.7 0 3.9-.1 3.9-3.2V9.5l6.2 6.3 6.3 6.2-6.3 6.2z\"}),(0,_.jsx)(\"path\",{stroke:\"currentColor\",fill:\"currentColor\",d:\"M0 36v20h48v-6.2c0-6 0-6.1-2-4.3-1.1 1-2 2.9-2 4.2V52H4V34c0-17.3-.1-18-2-18s-2 .7-2 20z\"})]}),{width:64,height:64}),wl((0,_.jsx)(\"path\",{stroke:\"currentColor\",strokeWidth:\"40\",fill:\"currentColor\",d:\"M148 560a318 318 0 0 0 522 110 316 316 0 0 0 0-450 316 316 0 0 0-450 0c-11 11-21 22-30 34v4h47c25 0 46 21 46 46s-21 45-46 45H90c-13 0-25-6-33-14-9-9-14-20-14-33V156c0-25 20-45 45-45s45 20 45 45v32l1 1a401 401 0 0 1 623 509l212 212a42 42 0 0 1-59 59L698 757A401 401 0 0 1 65 570a42 42 0 0 1 83-10z\"}),{width:1024}),s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M22 9.556C22 8.696 21.303 8 20.444 8H16v8H8v4.444C8 21.304 8.697 22 9.556 22h10.888c.86 0 1.556-.697 1.556-1.556V9.556z\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\"}),(0,_.jsx)(\"path\",{d:\"M16 3.556C16 2.696 15.303 2 14.444 2H3.556C2.696 2 2 2.697 2 3.556v10.888C2 15.304 2.697 16 3.556 16h10.888c.86 0 1.556-.697 1.556-1.556V3.556z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"})]}),{width:24,mirror:!0})}))),Fl=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M16 3.556C16 2.696 15.303 2 14.444 2H3.556C2.696 2 2 2.697 2 3.556v10.888C2 15.304 2.697 16 3.556 16h10.888c.86 0 1.556-.697 1.556-1.556V3.556z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"}),(0,_.jsx)(\"path\",{d:\"M22 9.556C22 8.696 21.303 8 20.444 8H9.556C8.696 8 8 8.697 8 9.556v10.888C8 21.304 8.697 22 9.556 22h10.888c.86 0 1.556-.697 1.556-1.556V9.556z\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\"})]}),{width:24,mirror:!0})})),Vl=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M13 21a1 1 0 001 1h7a1 1 0 001-1v-7a1 1 0 00-1-1h-3v5h-5v3zM11 3a1 1 0 00-1-1H3a1 1 0 00-1 1v7a1 1 0 001 1h3V6h5V3z\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\"}),(0,_.jsx)(\"path\",{d:\"M18 7.333C18 6.597 17.403 6 16.667 6H7.333C6.597 6 6 6.597 6 7.333v9.334C6 17.403 6.597 18 7.333 18h9.334c.736 0 1.333-.597 1.333-1.333V7.333z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"})]}),{width:24,mirror:!0})})),Gl=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M18 7.333C18 6.597 17.403 6 16.667 6H7.333C6.597 6 6 6.597 6 7.333v9.334C6 17.403 6.597 18 7.333 18h9.334c.736 0 1.333-.597 1.333-1.333V7.333z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"}),(0,_.jsx)(\"path\",{d:\"M11 3a1 1 0 00-1-1H3a1 1 0 00-1 1v7a1 1 0 001 1h8V3zM22 14a1 1 0 00-1-1h-7a1 1 0 00-1 1v7a1 1 0 001 1h8v-8z\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\"})]}),{width:24,mirror:!0})})),Ul=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M 2,5 H 22\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),(0,_.jsx)(\"path\",{d:\"M 6,7 C 5.446,7 5,7.446 5,8 v 9.999992 c 0,0.554 0.446,1 1,1 h 3.0000001 c 0.554,0 0.9999999,-0.446 0.9999999,-1 V 8 C 10,7.446 9.5540001,7 9.0000001,7 Z m 9,0 c -0.554,0 -1,0.446 -1,1 v 5.999992 c 0,0.554 0.446,1 1,1 h 3 c 0.554,0 1,-0.446 1,-1 V 8 C 19,7.446 18.554,7 18,7 Z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"})]}),{width:24,mirror:!0})})),Kl=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M 2,19 H 22\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),(0,_.jsx)(\"path\",{d:\"m 6,16.999992 c -0.554,0 -1,-0.446 -1,-1 V 6 C 5,5.446 5.446,5 6,5 H 9.0000001 C 9.5540001,5 10,5.446 10,6 v 9.999992 c 0,0.554 -0.4459999,1 -0.9999999,1 z m 9,0 c -0.554,0 -1,-0.446 -1,-1 V 10 c 0,-0.554 0.446,-1 1,-1 h 3 c 0.554,0 1,0.446 1,1 v 5.999992 c 0,0.554 -0.446,1 -1,1 z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"})]}),{width:24,mirror:!0})})),Wl=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M 5,2 V 22\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),(0,_.jsx)(\"path\",{d:\"m 7.000004,5.999996 c 0,-0.554 0.446,-1 1,-1 h 9.999992 c 0.554,0 1,0.446 1,1 v 3.0000001 c 0,0.554 -0.446,0.9999999 -1,0.9999999 H 8.000004 c -0.554,0 -1,-0.4459999 -1,-0.9999999 z m 0,9 c 0,-0.554 0.446,-1 1,-1 h 5.999992 c 0.554,0 1,0.446 1,1 v 3 c 0,0.554 -0.446,1 -1,1 H 8.000004 c -0.554,0 -1,-0.446 -1,-1 z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"})]}),{width:24})})),Zl=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M 19,2 V 22\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),(0,_.jsx)(\"path\",{d:\"m 16.999996,5.999996 c 0,-0.554 -0.446,-1 -1,-1 H 6.000004 c -0.554,0 -1,0.446 -1,1 v 3.0000001 c 0,0.554 0.446,0.9999999 1,0.9999999 h 9.999992 c 0.554,0 1,-0.4459999 1,-0.9999999 z m 0,9 c 0,-0.554 -0.446,-1 -1,-1 h -5.999992 c -0.554,0 -1,0.446 -1,1 v 3 c 0,0.554 0.446,1 1,1 h 5.999992 c 0.554,0 1,-0.446 1,-1 z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"})]}),{width:24})})),Yl=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M19 5V19M5 5V19\",stroke:yl(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),(0,_.jsx)(\"path\",{d:\"M15 9C15.554 9 16 9.446 16 10V14C16 14.554 15.554 15 15 15H9C8.446 15 8 14.554 8 14V10C8 9.446 8.446 9 9 9H15Z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"})]}),{width:24})})),Xl=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M5 5L19 5M5 19H19\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),(0,_.jsx)(\"path\",{d:\"M15 9C15.554 9 16 9.446 16 10V14C16 14.554 15.554 15 15 15H9C8.446 15 8 14.554 8 14V10C8 9.446 8.446 9 9 9H15Z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"})]}),{width:24})})),ql=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"m 5.000004,16.999996 c 0,0.554 0.446,1 1,1 h 3 c 0.554,0 1,-0.446 1,-1 v -10 c 0,-0.554 -0.446,-1 -1,-1 h -3 c -0.554,0 -1,0.446 -1,1 z m 9,-2 c 0,0.554 0.446,1 1,1 h 3 c 0.554,0 1,-0.446 1,-1 v -6 c 0,-0.554 -0.446,-1 -1,-1 h -3 c -0.554,0 -1,0.446 -1,1 z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"}),(0,_.jsx)(\"path\",{d:\"M 2,12 H 22\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\",strokeDasharray:\"1, 2.8\",strokeLinecap:\"round\"})]}),{width:24,mirror:!0})})),$l=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M 7 5 C 6.446 5 6 5.446 6 6 L 6 9 C 6 9.554 6.446 10 7 10 L 17 10 C 17.554 10 18 9.554 18 9 L 18 6 C 18 5.446 17.554 5 17 5 L 7 5 z M 9 14 C 8.446 14 8 14.446 8 15 L 8 18 C 8 18.554 8.446 19 9 19 L 15 19 C 15.554 19 16 18.554 16 18 L 16 15 C 16 14.446 15.554 14 15 14 L 9 14 z \",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"}),(0,_.jsx)(\"path\",{d:\"M 12,2 V 22\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\",strokeDasharray:\"1, 2.8\",strokeLinecap:\"round\"})]}),{width:24})})),Ql=wl(\"M192 256c61.9 0 112-50.1 112-112S253.9 32 192 32 80 82.1 80 144s50.1 112 112 112zm76.8 32h-8.3c-20.8 10-43.9 16-68.5 16s-47.6-6-68.5-16h-8.3C51.6 288 0 339.6 0 403.2V432c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48v-28.8c0-63.6-51.6-115.2-115.2-115.2zM480 256c53 0 96-43 96-96s-43-96-96-96-96 43-96 96 43 96 96 96zm48 32h-3.8c-13.9 4.8-28.6 8-44.2 8s-30.3-3.2-44.2-8H432c-20.4 0-39.2 5.9-55.7 15.4 24.4 26.3 39.7 61.2 39.7 99.8v38.4c0 2.2-.5 4.3-.6 6.4H592c26.5 0 48-21.5 48-48 0-61.9-50.1-112-112-112z\",{width:640,height:512,mirror:!0}),Jl=(wl(\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm115.7 272l-176 101c-15.8 8.8-35.7-2.5-35.7-21V152c0-18.4 19.8-29.8 35.7-21l176 107c16.4 9.2 16.4 32.9 0 42z\"),wl(\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm96 328c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V176c0-8.8 7.2-16 16-16h160c8.8 0 16 7.2 16 16v160z\"),wl(\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\",{width:352,height:512})),es=wl(\"M34.52 239.03L228.87 44.69c9.37-9.37 24.57-9.37 33.94 0l22.67 22.67c9.36 9.36 9.37 24.52.04 33.9L131.49 256l154.02 154.75c9.34 9.38 9.32 24.54-.04 33.9l-22.67 22.67c-9.37 9.37-24.57 9.37-33.94 0L34.52 272.97c-9.37-9.37-9.37-24.57 0-33.94z\",{width:320,height:512,style:{marginLeft:\"-0.2rem\"},mirror:!0}),ts=wl(\"M464 0c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48H176c-26.51 0-48-21.49-48-48V48c0-26.51 21.49-48 48-48h288M176 416c-44.112 0-80-35.888-80-80V128H48c-26.51 0-48 21.49-48 48v288c0 26.51 21.49 48 48 48h288c26.51 0 48-21.49 48-48v-48H176z\",{mirror:!0}),ns=(wl(\"M11.553 22.894a.998.998 0 00.894 0s3.037-1.516 5.465-4.097C19.616 16.987 21 14.663 21 12V5a1 1 0 00-.649-.936l-8-3a.998.998 0 00-.702 0l-8 3A1 1 0 003 5v7c0 2.663 1.384 4.987 3.088 6.797 2.428 2.581 5.465 4.097 5.465 4.097zm-1.303-8.481l6.644-6.644a.856.856 0 111.212 1.212l-7.25 7.25a.856.856 0 01-1.212 0l-3.75-3.75a.856.856 0 111.212-1.212l3.144 3.144z\",{width:24}),wl(\"M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm32-48h224V288l-23.5-23.5c-4.7-4.7-12.3-4.7-17 0L176 352l-39.5-39.5c-4.7-4.7-12.3-4.7-17 0L80 352v64zm48-240c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z\",{width:384,height:512})),rs=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M25 26H111V111H25\",fill:yl(t)}),(0,_.jsx)(\"path\",{d:\"M25 111C25 80.2068 25 49.4135 25 26M25 26C48.6174 26 72.2348 26 111 26H25ZM25 26C53.3671 26 81.7343 26 111 26H25ZM111 26C111 52.303 111 78.606 111 111V26ZM111 26C111 51.2947 111 76.5893 111 111V26ZM111 111C87.0792 111 63.1585 111 25 111H111ZM111 111C87.4646 111 63.9293 111 25 111H111ZM25 111C25 81.1514 25 51.3028 25 26V111Z\",stroke:yl(t),strokeWidth:\"2\"}),(0,_.jsx)(\"path\",{d:\"M100 100H160V160H100\",fill:yl(t)}),(0,_.jsx)(\"path\",{d:\"M100 160C100 144.106 100 128.211 100 100M100 100C117.706 100 135.412 100 160 100H100ZM100 100C114.214 100 128.428 100 160 100H100ZM160 100C160 120.184 160 140.369 160 160V100ZM160 100C160 113.219 160 126.437 160 160V100ZM160 160C145.534 160 131.068 160 100 160H160ZM160 160C143.467 160 126.934 160 100 160H160ZM100 160C100 143.661 100 127.321 100 100V160Z\",stroke:yl(t),strokeWidth:\"2\"}),(0,_.jsxs)(\"g\",{fill:xl(t),stroke:yl(t),strokeWidth:\"6\",children:[(0,_.jsx)(\"rect\",{x:\"2.5\",y:\"2.5\",width:\"30\",height:\"30\"}),(0,_.jsx)(\"rect\",{x:\"2.5\",y:\"149.5\",width:\"30\",height:\"30\"}),(0,_.jsx)(\"rect\",{x:\"147.5\",y:\"149.5\",width:\"30\",height:\"30\"}),(0,_.jsx)(\"rect\",{x:\"147.5\",y:\"2.5\",width:\"30\",height:\"30\"})]})]}),{width:182,height:182,mirror:!0})})),os=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M25 26H111V111H25\",fill:yl(t)}),(0,_.jsx)(\"path\",{d:\"M25 111C25 80.2068 25 49.4135 25 26M25 26C48.6174 26 72.2348 26 111 26H25ZM25 26C53.3671 26 81.7343 26 111 26H25ZM111 26C111 52.303 111 78.606 111 111V26ZM111 26C111 51.2947 111 76.5893 111 111V26ZM111 111C87.0792 111 63.1585 111 25 111H111ZM111 111C87.4646 111 63.9293 111 25 111H111ZM25 111C25 81.1514 25 51.3028 25 26V111Z\",stroke:yl(t),strokeWidth:\"2\"}),(0,_.jsx)(\"path\",{d:\"M100 100H160V160H100\",fill:yl(t)}),(0,_.jsx)(\"path\",{d:\"M100 160C100 144.106 100 128.211 100 100M100 100C117.706 100 135.412 100 160 100H100ZM100 100C114.214 100 128.428 100 160 100H100ZM160 100C160 120.184 160 140.369 160 160V100ZM160 100C160 113.219 160 126.437 160 160V100ZM160 160C145.534 160 131.068 160 100 160H160ZM160 160C143.467 160 126.934 160 100 160H160ZM100 160C100 143.661 100 127.321 100 100V160Z\",stroke:yl(t),strokeWidth:\"2\"}),(0,_.jsxs)(\"g\",{fill:xl(t),stroke:yl(t),strokeWidth:\"6\",children:[(0,_.jsx)(\"rect\",{x:\"2.5\",y:\"2.5\",width:\"30\",height:\"30\"}),(0,_.jsx)(\"rect\",{x:\"78.5\",y:\"149.5\",width:\"30\",height:\"30\"}),(0,_.jsx)(\"rect\",{x:\"147.5\",y:\"149.5\",width:\"30\",height:\"30\"}),(0,_.jsx)(\"rect\",{x:\"147.5\",y:\"78.5\",width:\"30\",height:\"30\"}),(0,_.jsx)(\"rect\",{x:\"105.5\",y:\"2.5\",width:\"30\",height:\"30\"}),(0,_.jsx)(\"rect\",{x:\"2.5\",y:\"102.5\",width:\"30\",height:\"30\"})]})]}),{width:182,height:182,mirror:!0})})),as=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{fillRule:\"evenodd\",clipRule:\"evenodd\",d:\"M20.101 16H28.0934L36 8.95989V4H33.5779L20.101 16ZM30.5704 4L17.0935 16H9.10101L22.5779 4H30.5704ZM19.5704 4L6.09349 16H4V10.7475L11.5779 4H19.5704ZM8.57036 4H4V8.06952L8.57036 4ZM36 11.6378L31.101 16H36V11.6378ZM2 2V18H38V2H2Z\",fill:yl(t)}),{width:40,height:20})})),is=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(\"g\",{fill:yl(t),fillRule:\"evenodd\",clipRule:\"evenodd\",children:[(0,_.jsx)(\"path\",{d:\"M20.101 16H28.0934L36 8.95989V4H33.5779L20.101 16ZM30.5704 4L17.0935 16H9.10101L22.5779 4H30.5704ZM19.5704 4L6.09349 16H4V10.7475L11.5779 4H19.5704ZM8.57036 4H4V8.06952L8.57036 4ZM36 11.6378L31.101 16H36V11.6378ZM2 2V18H38V2H2Z\"}),(0,_.jsx)(\"path\",{d:\"M14.0001 18L3.00006 4.00002L4.5727 2.76438L15.5727 16.7644L14.0001 18ZM25.0001 18L14.0001 4.00002L15.5727 2.76438L26.5727 16.7644L25.0001 18ZM36.0001 18L25.0001 4.00002L26.5727 2.76438L37.5727 16.7644L36.0001 18Z\"})]}),{width:40,height:20})})),ls=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M2 2H38V18H2V2Z\",fill:yl(t)}),{width:40,height:20})})),ss=s().memo((function(e){var t=e.theme,n=e.strokeWidth;return wl((0,_.jsx)(\"path\",{d:\"M6 10H32\",stroke:yl(t),strokeWidth:n,strokeLinecap:\"round\",fill:\"none\"}),{width:40,height:20})})),cs=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M6 10H34\",stroke:yl(t),strokeWidth:2,fill:\"none\",strokeLinecap:\"round\"}),{width:40,height:20})})),us=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M6 10H34\",stroke:yl(t),strokeWidth:2.5,strokeDasharray:\"10, 8\",fill:\"none\",strokeLinecap:\"round\"}),{width:40,height:20})})),ds=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M6 10H36\",stroke:yl(t),strokeWidth:2.5,strokeDasharray:\"2, 4.5\",fill:\"none\",strokeLinecap:\"round\"}),{width:40,height:20})})),ps=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M3.00098 16.1691C6.28774 13.9744 19.6399 2.8905 22.7215 3.00082C25.8041 3.11113 19.1158 15.5488 21.4962 16.8309C23.8757 18.1131 34.4155 11.7148 37.0001 10.6919\",stroke:yl(t),strokeWidth:2,strokeLinecap:\"round\",fill:\"none\"}),{width:40,height:20,mirror:!0})})),fs=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M3 17C6.68158 14.8752 16.1296 9.09849 22.0648 6.54922C28 3.99995 22.2896 13.3209 25 14C27.7104 14.6791 36.3757 9.6471 36.3757 9.6471M6.40706 15C13 11.1918 20.0468 1.51045 23.0234 3.0052C26 4.49995 20.457 12.8659 22.7285 16.4329C25 20 36.3757 13 36.3757 13\",stroke:yl(t),strokeWidth:2,strokeLinecap:\"round\",fill:\"none\"}),{width:40,height:20,mirror:!0})})),hs=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M3 15.6468C6.93692 13.5378 22.5544 2.81528 26.6206 3.00242C30.6877 3.18956 25.6708 15.3346 27.4009 16.7705C29.1309 18.2055 35.4001 12.4762 37 11.6177M3.97143 10.4917C6.61158 9.24563 16.3706 2.61886 19.8104 3.01724C23.2522 3.41472 22.0773 12.2013 24.6181 12.8783C27.1598 13.5536 33.3179 8.04068 35.0571 7.07244\",stroke:yl(t),strokeWidth:2,strokeLinecap:\"round\",fill:\"none\"}),{width:40,height:20,mirror:!0})})),ms=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M10 17L10 5L35 5\",stroke:yl(t),strokeWidth:2,strokeLinecap:\"round\",fill:\"none\"}),{width:40,height:20,mirror:!0})})),gs=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M10 17V15C10 8 13 5 21 5L33.5 5\",stroke:yl(t),strokeWidth:2,strokeLinecap:\"round\",fill:\"none\"}),{width:40,height:20,mirror:!0})})),vs=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M6 10H34\",stroke:yl(t),strokeWidth:2,fill:\"none\"}),{width:40,height:20})})),bs=s().memo((function(e){var t=e.theme,n=e.flip,r=void 0!==n&&n;return wl((0,_.jsxs)(\"g\",{transform:r?\"translate(40, 0) scale(-1, 1)\":\"\",stroke:yl(t),strokeWidth:2,fill:\"none\",children:[(0,_.jsx)(\"path\",{d:\"M34 10H6M34 10L27 5M34 10L27 15\"}),(0,_.jsx)(\"path\",{d:\"M27.5 5L34.5 10L27.5 15\"})]}),{width:40,height:20})})),ys=s().memo((function(e){var t=e.theme,n=e.flip,r=void 0!==n&&n;return wl((0,_.jsxs)(\"g\",{stroke:yl(t),fill:yl(t),transform:r?\"translate(40, 0) scale(-1, 1)\":\"\",children:[(0,_.jsx)(\"path\",{d:\"M32 10L6 10\",strokeWidth:2}),(0,_.jsx)(\"circle\",{r:\"4\",transform:\"matrix(-1 0 0 1 30 10)\"})]}),{width:40,height:20})})),xs=s().memo((function(e){var t=e.theme,n=e.flip,r=void 0!==n&&n;return wl((0,_.jsx)(\"g\",{transform:r?\"translate(40, 0) scale(-1, 1)\":\"\",children:(0,_.jsx)(\"path\",{d:\"M34 10H5.99996M34 10L34 5M34 10L34 15\",stroke:yl(t),strokeWidth:2,fill:\"none\"})}),{width:40,height:20})})),ws=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{fill:yl(t),d:\"M 0 69.092 L 0 55.03 A 124.24 124.24 0 0 0 4.706 57.02 Q 6.826 57.863 8.708 58.5 A 53.466 53.466 0 0 0 12.231 59.571 Q 17.236 60.889 21.387 60.889 A 20.909 20.909 0 0 0 24.265 60.704 Q 25.719 60.502 26.903 60.077 A 8.649 8.649 0 0 0 29.028 58.985 Q 31.689 57.08 31.689 53.321 Q 31.689 51.221 30.518 49.585 A 10.126 10.126 0 0 0 29.282 48.177 Q 28.352 47.287 27.075 46.436 A 23.719 23.719 0 0 0 25.752 45.627 Q 23.774 44.492 20.176 42.735 A 254.44 254.44 0 0 0 17.822 41.602 Q 11.503 38.631 8.236 35.888 A 19.742 19.742 0 0 1 8.008 35.694 A 22.18 22.18 0 0 1 2.783 29.102 Q 0.83 25.342 0.83 20.313 A 22.471 22.471 0 0 1 1.733 13.778 A 17.283 17.283 0 0 1 7.251 5.42 A 21.486 21.486 0 0 1 15.177 1.272 Q 18.361 0.338 22.166 0.09 A 43.573 43.573 0 0 1 25 0 A 42.399 42.399 0 0 1 34.349 1.01 A 39.075 39.075 0 0 1 35.62 1.319 A 67.407 67.407 0 0 1 42.108 3.382 A 83.357 83.357 0 0 1 46.191 5.03 L 41.309 16.797 Q 35.596 14.453 31.86 13.526 A 30.762 30.762 0 0 0 25.417 12.612 A 28.337 28.337 0 0 0 24.512 12.598 A 14.846 14.846 0 0 0 22.022 12.793 Q 19.498 13.224 17.92 14.6 Q 15.625 16.602 15.625 19.824 Q 15.625 21.826 16.553 23.316 Q 17.48 24.805 19.507 26.197 A 18.343 18.343 0 0 0 20.659 26.912 Q 22.596 28.035 26.516 29.953 A 299.99 299.99 0 0 0 29.102 31.201 Q 37.91 35.412 41.841 39.642 A 16.553 16.553 0 0 1 42.822 40.796 A 17.675 17.675 0 0 1 46.301 49.233 A 23.517 23.517 0 0 1 46.533 52.588 A 21.581 21.581 0 0 1 45.471 59.515 A 17.733 17.733 0 0 1 39.575 67.823 Q 33.745 72.486 24.094 73.243 A 49.683 49.683 0 0 1 20.215 73.389 A 51.712 51.712 0 0 1 9.448 72.315 A 40.672 40.672 0 0 1 0 69.092 Z\"}),{width:47,height:77})})),ks=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{fill:yl(t),d:\"M 44.092 71.387 L 30.225 71.387 L 13.037 15.381 L 12.598 15.381 A 1505.093 1505.093 0 0 1 12.959 22.313 Q 13.426 31.715 13.508 36.4 A 102.991 102.991 0 0 1 13.525 38.184 L 13.525 71.387 L 0 71.387 L 0 0 L 20.605 0 L 37.5 54.59 L 37.793 54.59 L 55.713 0 L 76.318 0 L 76.318 71.387 L 62.207 71.387 L 62.207 37.598 Q 62.207 35.205 62.28 32.08 A 160.703 160.703 0 0 1 62.326 30.544 Q 62.452 26.754 62.866 17.168 A 5390.536 5390.536 0 0 1 62.939 15.479 L 62.5 15.479 L 44.092 71.387 Z\"}),{width:77,height:75})})),Ss=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{fill:yl(t),d:\"M 44.092 71.387 L 0 71.387 L 0 0 L 15.137 0 L 15.137 58.887 L 44.092 58.887 L 44.092 71.387 Z\"}),{width:45,height:75})})),Es=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{fill:yl(t),d:\"M 42.578 35.4 L 66.699 71.387 L 49.414 71.387 L 32.813 44.385 L 16.211 71.387 L 0 71.387 L 23.682 34.57 L 1.514 0 L 18.213 0 L 33.594 25.684 L 48.682 0 L 64.99 0 L 42.578 35.4 Z M 119.775 71.387 L 75.684 71.387 L 75.684 0 L 90.82 0 L 90.82 58.887 L 119.775 58.887 L 119.775 71.387 Z\"}),{width:120,height:75})})),js=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{fill:yl(t),d:\"M290.74 93.24l128.02 128.02-277.99 277.99-114.14 12.6C11.35 513.54-1.56 500.62.14 485.34l12.7-114.22 277.9-277.88zm207.2-19.06l-60.11-60.11c-18.75-18.75-49.16-18.75-67.91 0l-56.55 56.55 128.02 128.02 56.55-56.55c18.75-18.76 18.75-49.16 0-67.91z\"}),{width:448,height:512})})),Cs=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{fill:yl(t),d:\"M 63.818 71.68 L 54.492 71.68 L 45.898 49.561 L 17.578 49.561 L 9.082 71.68 L 0 71.68 L 27.881 0 L 35.986 0 L 63.818 71.68 Z M 20.605 41.602 L 43.213 41.602 L 35.205 19.971 L 31.787 9.277 Q 30.322 15.137 28.711 19.971 L 20.605 41.602 Z\"}),(0,_.jsx)(\"path\",{fill:yl(t),d:\"M 68.994 71.68 L 52.686 71.68 L 47.51 54.688 L 21.484 54.688 L 16.309 71.68 L 0 71.68 L 25.195 0 L 43.701 0 L 68.994 71.68 Z M 25.293 41.992 L 43.896 41.992 A 27590.463 27590.463 0 0 1 42.2 36.532 Q 36.965 19.676 35.937 16.273 A 120.932 120.932 0 0 1 35.815 15.869 A 131.65 131.65 0 0 1 35.396 14.435 Q 34.951 12.879 34.675 11.741 A 34.866 34.866 0 0 1 34.521 11.084 A 141.762 141.762 0 0 1 33.706 14.075 Q 31.482 21.957 25.293 41.992 Z\"})]}),{width:70,height:78})})),Os=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(_.Fragment,{children:(0,_.jsx)(\"path\",{fill:yl(t),d:\"M278.9 511.5l-61-17.7c-6.4-1.8-10-8.5-8.2-14.9L346.2 8.7c1.8-6.4 8.5-10 14.9-8.2l61 17.7c6.4 1.8 10 8.5 8.2 14.9L293.8 503.3c-1.9 6.4-8.5 10.1-14.9 8.2zm-114-112.2l43.5-46.4c4.6-4.9 4.3-12.7-.8-17.2L117 256l90.6-79.7c5.1-4.5 5.5-12.3.8-17.2l-43.5-46.4c-4.5-4.8-12.1-5.1-17-.5L3.8 247.2c-5.1 4.7-5.1 12.8 0 17.5l144.1 135.1c4.9 4.6 12.5 4.4 17-.5zm327.2.6l144.1-135.1c5.1-4.7 5.1-12.8 0-17.5L492.1 112.1c-4.8-4.5-12.4-4.3-17 .5L431.6 159c-4.6 4.9-4.3 12.7.8 17.2L523 256l-90.6 79.7c-5.1 4.5-5.5 12.3-.8 17.2l43.5 46.4c4.5 4.9 12.1 5.1 17 .6z\"})}),{width:640,height:512})})),Ms=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M12.83 352h262.34A12.82 12.82 0 00288 339.17v-38.34A12.82 12.82 0 00275.17 288H12.83A12.82 12.82 0 000 300.83v38.34A12.82 12.82 0 0012.83 352zm0-256h262.34A12.82 12.82 0 00288 83.17V44.83A12.82 12.82 0 00275.17 32H12.83A12.82 12.82 0 000 44.83v38.34A12.82 12.82 0 0012.83 96zM432 160H16a16 16 0 00-16 16v32a16 16 0 0016 16h416a16 16 0 0016-16v-32a16 16 0 00-16-16zm0 256H16a16 16 0 00-16 16v32a16 16 0 0016 16h416a16 16 0 0016-16v-32a16 16 0 00-16-16z\",fill:yl(t),strokeLinecap:\"round\"}),{width:448,height:512})})),Is=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M432 160H16a16 16 0 00-16 16v32a16 16 0 0016 16h416a16 16 0 0016-16v-32a16 16 0 00-16-16zm0 256H16a16 16 0 00-16 16v32a16 16 0 0016 16h416a16 16 0 0016-16v-32a16 16 0 00-16-16zM108.1 96h231.81A12.09 12.09 0 00352 83.9V44.09A12.09 12.09 0 00339.91 32H108.1A12.09 12.09 0 0096 44.09V83.9A12.1 12.1 0 00108.1 96zm231.81 256A12.09 12.09 0 00352 339.9v-39.81A12.09 12.09 0 00339.91 288H108.1A12.09 12.09 0 0096 300.09v39.81a12.1 12.1 0 0012.1 12.1z\",fill:yl(t)}),{width:448,height:512})})),Ps=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M16 224h416a16 16 0 0016-16v-32a16 16 0 00-16-16H16a16 16 0 00-16 16v32a16 16 0 0016 16zm416 192H16a16 16 0 00-16 16v32a16 16 0 0016 16h416a16 16 0 0016-16v-32a16 16 0 00-16-16zm3.17-384H172.83A12.82 12.82 0 00160 44.83v38.34A12.82 12.82 0 00172.83 96h262.34A12.82 12.82 0 00448 83.17V44.83A12.82 12.82 0 00435.17 32zm0 256H172.83A12.82 12.82 0 00160 300.83v38.34A12.82 12.82 0 00172.83 352h262.34A12.82 12.82 0 00448 339.17v-38.34A12.82 12.82 0 00435.17 288z\",fill:yl(t),strokeLinecap:\"round\"}),{width:448,height:512})})),Ts=[],As=function(e){return Ts=Ts.concat(e),e};function Ls(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ls(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ls(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ds=function(e,t){if(e.editingGroupId){var n=So(qi(t),e.editingGroupId);if(n.length)return _s(_s({},e),{},{selectedElementIds:V({},n[0].id,!0)})}return e},zs=As({name:\"deleteSelectedElements\",perform:function(e,t){if(t.editingLinearElement){var n=t.editingLinearElement,r=n.elementId,o=n.activePointIndex,a=n.startBindingElement,i=n.endBindingElement,l=ti.getElement(r);if(!l)return!1;if(null==o||-1===o||l.points.length<2){var s=e.filter((function(e){return e.id!==l.id}));return{elements:s,appState:_s(_s({},Ds(t,s)),{},{editingLinearElement:null}),commitToHistory:!1}}var c={startBindingElement:0===o?null:a,endBindingElement:o===l.points.length-1?null:i};return ti.movePoint(l,o,\"delete\"),{elements:e,appState:_s(_s({},t),{},{editingLinearElement:_s(_s(_s({},t.editingLinearElement),c),{},{activePointIndex:o>0?o-1:0})}),commitToHistory:!0}}var u=function(e,t){return{elements:e.map((function(e){return t.selectedElementIds[e.id]?io(e,{isDeleted:!0}):e})),appState:_s(_s({},t),{},{selectedElementIds:{}})}}(e,t),d=u.elements,p=u.appState;return Mi(d,e.filter((function(e){var n=e.id;return t.selectedElementIds[n]}))),{elements:d,appState:_s(_s({},p=Ds(p,d)),{},{elementType:\"selection\",multiElement:null}),commitToHistory:rl(qi(e),t)}},contextItemLabel:\"labels.delete\",keyTest:function(e){return e.key===on||e.key===sn},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{type:\"button\",icon:Ml,title:L(\"labels.delete\"),\"aria-label\":L(\"labels.delete\"),onClick:function(){return r(null)},visible:rl(qi(t),n)})}}),Bs=function(e,t){for(var n=[],r=[],o=null,a=-1;++a<e.length;)t.selectedElementIds[e[a].id]?(r.length&&(n=n.concat(r),r=[]),n.push(a),o=a+1):e[a].isDeleted&&o===a?(o=a+1,r.push(a)):r=[];return n},Hs=function(e,t,n,r){var o=t[n],a=function(t){return!t.isDeleted&&(!e.editingGroupId||t.groupIds.includes(e.editingGroupId))},i=\"left\"===r?function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.length-1;n<0&&(n=e.length+n);for(var r=(n=Math.min(e.length-1,Math.max(n,0)))+1;--r>-1;)if(t(e[r],r,e))return r;return-1}(t,a,Math.max(0,n-1)):function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;n<0&&(n=e.length+n);for(var r=(n=Math.min(e.length,Math.max(n,0)))-1;++r<e.length;)if(t(e[r],r,e))return r;return-1}(t,a,n+1),l=t[i];if(!l)return-1;if(e.editingGroupId){if((null==o?void 0:o.groupIds.join(\"\"))===(null==l?void 0:l.groupIds.join(\"\")))return i;if(null==l||!l.groupIds.includes(e.editingGroupId))return-1}if(!l.groupIds.length)return i;var s=e.editingGroupId?l.groupIds[l.groupIds.indexOf(e.editingGroupId)-1]:l.groupIds[l.groupIds.length-1],c=So(t,s);return c.length?\"left\"===r?t.indexOf(c[0]):t.indexOf(c[c.length-1]):i},Ns=function(e,t){return t.reduce((function(t,n){var r=e[n];return t[r.id]=r,t}),{})},Rs=function(e,t,n){var r,o,a=Bs(t,e),i=Ns(t,a),l=(o=0,(r=a).reduce((function(e,t,n){return n>0&&r[n-1]!==t-1&&(o=++o),(e[o]||(e[o]=[])).push(t),e}),[]));return\"right\"===n&&(l=l.reverse()),l.forEach((function(r,o){var a=r[0],i=r[r.length-1],l=\"left\"===n?a:i,s=Hs(e,t,l,n);if(-1!==s&&l!==s){var c=\"left\"===n?t.slice(0,s):t.slice(0,a),u=t.slice(a,i+1),d=\"left\"===n?t.slice(s,a):t.slice(i+1,s+1),p=\"left\"===n?t.slice(i+1):t.slice(s+1);t=\"left\"===n?[].concat(F(c),F(u),F(d),F(p)):[].concat(F(c),F(d),F(u),F(p))}})),t.map((function(e){return i[e.id]?lo(e):e}))},Fs=function(e,t,n){var r,o,a=Bs(e,t),i=Ns(e,a),l=[];if(\"left\"===n){if(t.editingGroupId){var s=So(e,t.editingGroupId);if(!s.length)return e;r=e.indexOf(s[0])}else r=0;o=a[a.length-1]}else{if(t.editingGroupId){var c=So(e,t.editingGroupId);if(!c.length)return e;o=e.indexOf(c[c.length-1])}else o=e.length-1;r=a[0]}for(var u=r;u<o+1;u++)a.includes(u)||l.push(e[u]);var d=Object.values(i).map((function(e){return lo(e)})),p=e.slice(0,r),f=e.slice(o+1);return\"left\"===n?[].concat(F(p),F(d),l,F(f)):[].concat(F(p),l,F(d),F(f))},Vs=function(e,t){return Rs(t,e,\"left\")},Gs=function(e,t){return Rs(t,e,\"right\")},Us=function(e,t){return Fs(e,t,\"left\")},Ks=function(e,t){return Fs(e,t,\"right\")},Ws=As({name:\"sendBackward\",perform:function(e,t){return{elements:Vs(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.sendBackward\",keyPriority:40,keyTest:function(e){return e[ln]&&!e.shiftKey&&e.code===Ht},PanelComponent:function(e){var t=e.updateData,n=e.appState;return(0,_.jsx)(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(){return t(null)},title:\"\".concat(L(\"labels.sendBackward\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd+[\")),children:(0,_.jsx)(Fl,{theme:n.theme})})}}),Zs=As({name:\"bringForward\",perform:function(e,t){return{elements:Gs(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.bringForward\",keyPriority:40,keyTest:function(e){return e[ln]&&!e.shiftKey&&e.code===Bt},PanelComponent:function(e){var t=e.updateData,n=e.appState;return(0,_.jsx)(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(){return t(null)},title:\"\".concat(L(\"labels.bringForward\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd+]\")),children:(0,_.jsx)(Rl,{theme:n.theme})})}}),Ys=As({name:\"sendToBack\",perform:function(e,t){return{elements:Us(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.sendToBack\",keyTest:function(e){return Pt?e[ln]&&e.altKey&&e.code===Ht:e[ln]&&e.shiftKey&&e.code===Ht},PanelComponent:function(e){var t=e.updateData,n=e.appState;return(0,_.jsx)(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(){return t(null)},title:\"\".concat(L(\"labels.sendToBack\"),\" \u2014 \").concat(Zn(Pt?\"CtrlOrCmd+Alt+[\":\"CtrlOrCmd+Shift+[\")),children:(0,_.jsx)(Gl,{theme:n.theme})})}}),Xs=As({name:\"bringToFront\",perform:function(e,t){return{elements:Ks(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.bringToFront\",keyTest:function(e){return Pt?e[ln]&&e.altKey&&e.code===Bt:e[ln]&&e.shiftKey&&e.code===Bt},PanelComponent:function(e){var t=e.updateData,n=e.appState;return(0,_.jsx)(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(e){return t(null)},title:\"\".concat(L(\"labels.bringToFront\"),\" \u2014 \").concat(Zn(Pt?\"CtrlOrCmd+Alt+]\":\"CtrlOrCmd+Shift+]\")),children:(0,_.jsx)(Vl,{theme:n.theme})})}});function qs(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function $s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?qs(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):qs(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Qs=As({name:\"selectAll\",perform:function(e,t){return!t.editingLinearElement&&{appState:wo($s($s({},t),{},{editingGroupId:null,selectedElementIds:e.reduce((function(e,t){return t.isDeleted||(e[t.id]=!0),e}),{})}),qi(e)),commitToHistory:!0}},contextItemLabel:\"labels.selectAll\",keyTest:function(e){return e[ln]&&e.key===hn}});function Js(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ec(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Js(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Js(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var tc=As({name:\"duplicateSelection\",perform:function(e,t){if(t.editingLinearElement){var n=t.editingLinearElement,r=n.activePointIndex,o=n.elementId,a=ti.getElement(o);if(!a||null===r)return!1;var i=a.points,l=i[r],s=i[r+1];return ao(a,{points:[].concat(F(i.slice(0,r+1)),[s?[(l[0]+s[0])\/2,(l[1]+s[1])\/2]:[l[0]+30,l[1]+30]],F(i.slice(r+1)))}),{appState:ec(ec({},t),{},{editingLinearElement:ec(ec({},t.editingLinearElement),{},{activePointIndex:r+1})}),elements:e,commitToHistory:!0}}return ec(ec({},nc(e,t)),{},{commitToHistory:!0})},contextItemLabel:\"labels.duplicateSelection\",keyTest:function(e){return e[ln]&&e.key===mn},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{type:\"button\",icon:ts,title:\"\".concat(L(\"labels.duplicateSelection\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd+D\")),\"aria-label\":L(\"labels.duplicateSelection\"),onClick:function(){return r(null)},visible:rl(qi(t),n)})}}),nc=function(e,t){for(var n=new Map,r=[],o=[],a=new Map,i=function(e){var i=Do(t.editingGroupId,n,e,{x:e.x+c.k\/2,y:e.y+c.k\/2});return a.set(e.id,i.id),o.push(e),r.push(i),i},l=[],s=0;s<e.length;){var u=e[s];if(t.selectedElementIds[u.id]){if(u.groupIds.length){var d=yo(t,u);if(d){var p=So(e,d);l.push.apply(l,F(p).concat(F(p.map((function(e){return i(e)}))))),s+=p.length;continue}}l.push(u,i(u))}else l.push(u);s++}return Ci(l,o,a),{elements:l,appState:wo(ec(ec({},t),{},{selectedGroupIds:{},selectedElementIds:r.reduce((function(e,t){return e[t.id]=!0,e}),{})}),qi(l))}},rc=function(e){var t=e.options,n=e.value,r=e.onChange,o=e.group;return(0,_.jsx)(\"div\",{className:\"buttonList buttonListIcon\",children:t.map((function(e){return(0,_.jsxs)(\"label\",{className:Ze({active:n===e.value}),title:e.text,children:[(0,_.jsx)(\"input\",{type:\"radio\",name:o,onChange:function(){return r(e.value)},checked:n===e.value}),e.icon]},e.text)}))})},oc=(n(4301),function(e){var t=e.children,n=e.left,r=e.top,o=e.onCloseRequest,a=e.fitInViewport,i=void 0!==a&&a,s=(0,l.useRef)(null);return(0,l.useLayoutEffect)((function(){if(i&&s.current){var e=s.current,t=e.getBoundingClientRect(),n=t.x,r=t.y,o=t.width,a=t.height,l=window.innerWidth;n+o>l&&(e.style.left=\"\".concat(l-o,\"px\"));var c=window.innerHeight;r+a>c&&(e.style.top=\"\".concat(c-a,\"px\"))}}),[i]),(0,l.useEffect)((function(){if(o){var e=function(e){var t;null!==(t=s.current)&&void 0!==t&&t.contains(e.target)||(0,It.unstable_batchedUpdates)((function(){return o(e)}))};return document.addEventListener(\"pointerdown\",e,!1),function(){return document.removeEventListener(\"pointerdown\",e,!1)}}}),[o]),(0,_.jsx)(\"div\",{className:\"popover\",style:{top:r,left:n},ref:s,children:t})}),ac=(n(4220),function(e){var t=(new Option).style;return t.color=e,!!t.color}),ic=[[\"1\",\"2\",\"3\",\"4\",\"5\"],[\"q\",\"w\",\"e\",\"r\",\"t\"],[\"a\",\"s\",\"d\",\"f\",\"g\"]].flat(),lc=function(e){var t=e.colors,n=e.color,r=e.onChange,o=e.onClose,a=e.label,i=e.showInput,l=void 0===i||i,c=e.type,u=s().useRef(),d=s().useRef(),p=s().useRef(),f=s().useRef();s().useEffect((function(){d.current?d.current.focus():f.current?f.current.focus():p.current&&p.current.focus()}),[]);return(0,_.jsxs)(\"div\",{className:\"color-picker color-picker-type-\".concat(c),role:\"dialog\",\"aria-modal\":\"true\",\"aria-label\":L(\"labels.colorPicker\"),onKeyDown:function(e){if(e.key===fn){var t,n=document.activeElement;if(e.shiftKey){if(n===u.current)null===(t=f.current)||void 0===t||t.focus(),e.preventDefault()}else if(n===f.current){var r;null===(r=u.current)||void 0===r||r.focus(),e.preventDefault()}}else if(In(e.key)){var a=document.activeElement,i=T().rtl,s=Array.prototype.indexOf.call(p.current.children,a);if(-1!==s){var c=p.current.children.length-(l?1:0),d=e.key===(i?tn:nn)?(s+1)%c:e.key===(i?nn:tn)?(c+s-1)%c:e.key===en?(s+5)%c:e.key===rn?(c+s-5)%c:s;p.current.children[d].focus()}e.preventDefault()}else if(ic.includes(e.key.toLowerCase())&&!Bn(e.target)){var h=ic.indexOf(e.key.toLowerCase());p.current.children[h].focus(),e.preventDefault()}else e.key!==un&&e.key!==cn||(e.preventDefault(),o());e.nativeEvent.stopImmediatePropagation(),e.stopPropagation()},children:[(0,_.jsx)(\"div\",{className:\"color-picker-triangle color-picker-triangle-shadow\"}),(0,_.jsx)(\"div\",{className:\"color-picker-triangle\"}),(0,_.jsxs)(\"div\",{className:\"color-picker-content\",ref:function(e){e&&(p.current=e)},tabIndex:0,children:[t.map((function(e,t){var o=e.replace(\"#\",\"\");return(0,_.jsxs)(\"button\",{className:\"color-picker-swatch\",onClick:function(t){t.currentTarget.focus(),r(e)},title:\"\".concat(L(\"colors.\".concat(o))).concat(tr(e)?\"\":\" (\".concat(e,\")\"),\" \u2014 \").concat(ic[t].toUpperCase()),\"aria-label\":L(\"colors.\".concat(o)),\"aria-keyshortcuts\":ic[t],style:{color:e},ref:function(r){r&&0===t&&(u.current=r),r&&e===n&&(d.current=r)},onFocus:function(){r(e)},children:[tr(e)?(0,_.jsx)(\"div\",{className:\"color-picker-transparent\"}):void 0,(0,_.jsx)(\"span\",{className:\"color-picker-keybinding\",children:ic[t]})]},e)})),l&&(0,_.jsx)(sc,{color:n,label:a,onChange:function(e){r(e)},ref:f})]})]})},sc=s().forwardRef((function(e,t){var n=e.color,r=e.onChange,o=e.label,a=R(s().useState(n),2),i=a[0],l=a[1],c=s().useRef(null);s().useEffect((function(){l(n)}),[n]),s().useImperativeHandle(t,(function(){return c.current}));var u=s().useCallback((function(e){var t=e.toLowerCase(),n=function(e){return tr(e)||ac(e)?e:ac(\"#\".concat(e))?\"#\".concat(e):null}(t);n&&r(n),l(t)}),[r]);return(0,_.jsxs)(\"label\",{className:\"color-input-container\",children:[(0,_.jsx)(\"div\",{className:\"color-picker-hash\",children:\"#\"}),(0,_.jsx)(\"input\",{spellCheck:!1,className:\"color-picker-input\",\"aria-label\":o,onChange:function(e){return u(e.target.value)},value:(i||\"\").replace(\/^#\/,\"\"),onBlur:function(){return l(n)},ref:c})]})})),cc=function(e){var t=e.type,n=e.color,r=e.onChange,o=e.label,a=e.isActive,i=e.setActive,l=s().useRef(null);return(0,_.jsxs)(\"div\",{children:[(0,_.jsxs)(\"div\",{className:\"color-picker-control-container\",children:[(0,_.jsx)(\"button\",{className:\"color-picker-label-swatch\",\"aria-label\":o,style:n?{\"--swatch-color\":n}:void 0,onClick:function(){return i(!a)},ref:l}),(0,_.jsx)(sc,{color:n,label:o,onChange:function(e){r(e)}})]}),(0,_.jsx)(s().Suspense,{fallback:\"\",children:a?(0,_.jsx)(oc,{onCloseRequest:function(e){return e.target!==l.current&&i(!1)},children:(0,_.jsx)(lc,{colors:Mt[t],color:n||null,onChange:function(e){r(e)},onClose:function(){var e;i(!1),null===(e=l.current)||void 0===e||e.focus()},label:o,showInput:!1,type:t})}):null})]})};n(7117);function uc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function dc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?uc(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):uc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function pc(e){var t=e.options,n=e.value,r=e.label,o=e.onChange,a=e.onClose,i=s().useRef(),l=s().useRef(),c=s().useRef(null);s().useEffect((function(){l.current?l.current.focus():c.current&&c.current.focus()}),[]);return(0,_.jsx)(\"div\",{className:\"picker\",role:\"dialog\",\"aria-modal\":\"true\",\"aria-label\":r,onKeyDown:function(e){var n=t.find((function(t){return t.keyBinding===e.key.toLowerCase()}));if(e.metaKey||e.altKey||e.ctrlKey||!n)if(e.key===fn)setTimeout((function(){l.current!==document.activeElement&&a()}),0);else if(In(e.key)){var r=document.activeElement,o=T().rtl,i=Array.prototype.indexOf.call(c.current.children,r);if(-1!==i){var s=t.length,u=i;switch(e.key){case o?tn:nn:case en:u=(i+1)%s;break;case o?nn:tn:case rn:u=(s+i-1)%s}c.current.children[u].focus()}e.preventDefault()}else e.key!==un&&e.key!==cn||(e.preventDefault(),a());else{var d=t.indexOf(n);c.current.children[d].focus(),e.preventDefault()}e.nativeEvent.stopImmediatePropagation(),e.stopPropagation()},children:(0,_.jsx)(\"div\",{className:\"picker-content\",ref:c,children:t.map((function(e,t){return(0,_.jsxs)(\"button\",{className:\"picker-option\",onClick:function(t){t.currentTarget.focus(),o(e.value)},title:\"\".concat(e.text,\" \u2014 \").concat(e.keyBinding.toUpperCase()),\"aria-label\":e.text||\"none\",\"aria-keyshortcuts\":e.keyBinding,ref:function(r){r&&0===t&&(i.current=r),r&&e.value===n&&(l.current=r)},onFocus:function(){o(e.value)},children:[e.icon,(0,_.jsx)(\"span\",{className:\"picker-keybinding\",children:e.keyBinding})]},e.text)}))})})}function fc(e){var t,n=e.value,r=e.label,o=e.options,a=e.onChange,i=e.group,l=void 0===i?\"\":i,c=R(s().useState(!1),2),u=c[0],d=c[1],p=s().useRef(null),f=T().rtl;return(0,_.jsxs)(\"label\",{className:\"picker-container\",children:[(0,_.jsx)(\"button\",{name:l,className:u?\"active\":\"\",\"aria-label\":r,onClick:function(){return d(!u)},ref:p,children:null===(t=o.find((function(e){return e.value===n})))||void 0===t?void 0:t.icon}),(0,_.jsx)(s().Suspense,{fallback:\"\",children:u?(0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(oc,dc(dc({onCloseRequest:function(e){return e.target!==p.current&&d(!1)}},f?{right:5.5}:{left:-5.5}),{},{children:(0,_.jsx)(pc,{options:o,value:n,label:r,onChange:a,onClose:function(){var e;d(!1),null===(e=p.current)||void 0===e||e.focus()}})})),(0,_.jsx)(\"div\",{className:\"picker-triangle\"})]}):null})]})}function hc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function mc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?hc(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):hc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var gc=function(e,t,n){return e.map((function(e){var r;return t.selectedElementIds[e.id]||e.id===(null===(r=t.editingElement)||void 0===r?void 0:r.id)?n(e):e}))},vc=function(e,t,n,r){var o,a,i=t.editingElement,l=qi(e);return null!==(o=null!==(a=i&&n(i))&&void 0!==a?a:rl(l,t)?function(e,t,n){var r=Array.from(new Set(ol(e,t).map((function(e){return n(e)}))));return 1===r.length?r[0]:null}(l,t,n):r)&&void 0!==o?o:null},bc=(As({name:\"changeStrokeColor\",perform:function(e,t,n){return mc(mc({},n.currentItemStrokeColor&&{elements:gc(e,t,(function(e){return io(e,{strokeColor:n.currentItemStrokeColor})}))}),{},{appState:mc(mc({},t),n),commitToHistory:!!n.currentItemStrokeColor})},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"h3\",{\"aria-hidden\":\"true\",children:L(\"labels.stroke\")}),(0,_.jsx)(cc,{type:\"elementStroke\",label:L(\"labels.stroke\"),color:vc(t,n,(function(e){return e.strokeColor}),n.currentItemStrokeColor),onChange:function(e){return r({currentItemStrokeColor:e})},isActive:\"strokeColorPicker\"===n.openPopup,setActive:function(e){return r({openPopup:e?\"strokeColorPicker\":null})}})]})}}),As({name:\"changeBackgroundColor\",perform:function(e,t,n){return mc(mc({},n.currentItemBackgroundColor&&{elements:gc(e,t,(function(e){return io(e,{backgroundColor:n.currentItemBackgroundColor})}))}),{},{appState:mc(mc({},t),n),commitToHistory:!!n.currentItemBackgroundColor})},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"h3\",{\"aria-hidden\":\"true\",children:L(\"labels.background\")}),(0,_.jsx)(cc,{type:\"elementBackground\",label:L(\"labels.background\"),color:vc(t,n,(function(e){return e.backgroundColor}),n.currentItemBackgroundColor),onChange:function(e){return r({currentItemBackgroundColor:e})},isActive:\"backgroundColorPicker\"===n.openPopup,setActive:function(e){return r({openPopup:e?\"backgroundColorPicker\":null})}})]})}}),As({name:\"changeFillStyle\",perform:function(e,t,n){return{elements:gc(e,t,(function(e){return io(e,{fillStyle:n})})),appState:mc(mc({},t),{},{currentItemFillStyle:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.fill\")}),(0,_.jsx)(rc,{options:[{value:\"hachure\",text:L(\"labels.hachure\"),icon:(0,_.jsx)(as,{theme:n.theme})},{value:\"cross-hatch\",text:L(\"labels.crossHatch\"),icon:(0,_.jsx)(is,{theme:n.theme})},{value:\"solid\",text:L(\"labels.solid\"),icon:(0,_.jsx)(ls,{theme:n.theme})}],group:\"fill\",value:vc(t,n,(function(e){return e.fillStyle}),n.currentItemFillStyle),onChange:function(e){r(e)}})]})}}),As({name:\"changeStrokeWidth\",perform:function(e,t,n){return{elements:gc(e,t,(function(e){return io(e,{strokeWidth:n})})),appState:mc(mc({},t),{},{currentItemStrokeWidth:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.strokeWidth\")}),(0,_.jsx)(rc,{group:\"stroke-width\",options:[{value:1,text:L(\"labels.thin\"),icon:(0,_.jsx)(ss,{theme:n.theme,strokeWidth:2})},{value:2,text:L(\"labels.bold\"),icon:(0,_.jsx)(ss,{theme:n.theme,strokeWidth:6})},{value:4,text:L(\"labels.extraBold\"),icon:(0,_.jsx)(ss,{theme:n.theme,strokeWidth:10})}],value:vc(t,n,(function(e){return e.strokeWidth}),n.currentItemStrokeWidth),onChange:function(e){return r(e)}})]})}}),As({name:\"changeSloppiness\",perform:function(e,t,n){return{elements:gc(e,t,(function(e){return io(e,{seed:to(),roughness:n})})),appState:mc(mc({},t),{},{currentItemRoughness:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.sloppiness\")}),(0,_.jsx)(rc,{group:\"sloppiness\",options:[{value:0,text:L(\"labels.architect\"),icon:(0,_.jsx)(ps,{theme:n.theme})},{value:1,text:L(\"labels.artist\"),icon:(0,_.jsx)(fs,{theme:n.theme})},{value:2,text:L(\"labels.cartoonist\"),icon:(0,_.jsx)(hs,{theme:n.theme})}],value:vc(t,n,(function(e){return e.roughness}),n.currentItemRoughness),onChange:function(e){return r(e)}})]})}}),As({name:\"changeStrokeStyle\",perform:function(e,t,n){return{elements:gc(e,t,(function(e){return io(e,{strokeStyle:n})})),appState:mc(mc({},t),{},{currentItemStrokeStyle:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.strokeStyle\")}),(0,_.jsx)(rc,{group:\"strokeStyle\",options:[{value:\"solid\",text:L(\"labels.strokeStyle_solid\"),icon:(0,_.jsx)(cs,{theme:n.theme})},{value:\"dashed\",text:L(\"labels.strokeStyle_dashed\"),icon:(0,_.jsx)(us,{theme:n.theme})},{value:\"dotted\",text:L(\"labels.strokeStyle_dotted\"),icon:(0,_.jsx)(ds,{theme:n.theme})}],value:vc(t,n,(function(e){return e.strokeStyle}),n.currentItemStrokeStyle),onChange:function(e){return r(e)}})]})}}),As({name:\"changeOpacity\",perform:function(e,t,n){return{elements:gc(e,t,(function(e){return io(e,{opacity:n})})),appState:mc(mc({},t),{},{currentItemOpacity:n}),commitToHistory:!0}},PanelComponent:function(e){var t,n=e.elements,r=e.appState,o=e.updateData;return(0,_.jsxs)(\"label\",{className:\"control-label\",children:[L(\"labels.opacity\"),(0,_.jsx)(\"input\",{type:\"range\",min:\"0\",max:\"100\",step:\"10\",onChange:function(e){return o(+e.target.value)},onWheel:function(e){e.stopPropagation();var t=+e.target.value;e.deltaY<0&&t<100?o(t+10):e.deltaY>0&&t>0&&o(t-10)},value:null!==(t=vc(n,r,(function(e){return e.opacity}),r.currentItemOpacity))&&void 0!==t?t:void 0})]})}}),As({name:\"changeFontSize\",perform:function(e,t,n){return{elements:gc(e,t,(function(e){if(Xe(e)){var t=io(e,{fontSize:n});return Ui(t),t}return e})),appState:mc(mc({},t),{},{currentItemFontSize:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.fontSize\")}),(0,_.jsx)(rc,{group:\"font-size\",options:[{value:16,text:L(\"labels.small\"),icon:(0,_.jsx)(ws,{theme:n.theme})},{value:20,text:L(\"labels.medium\"),icon:(0,_.jsx)(ks,{theme:n.theme})},{value:28,text:L(\"labels.large\"),icon:(0,_.jsx)(Ss,{theme:n.theme})},{value:36,text:L(\"labels.veryLarge\"),icon:(0,_.jsx)(Es,{theme:n.theme})}],value:vc(t,n,(function(e){return Xe(e)&&e.fontSize}),n.currentItemFontSize||c.n5),onChange:function(e){return r(e)}})]})}}),As({name:\"changeFontFamily\",perform:function(e,t,n){return{elements:gc(e,t,(function(e){if(Xe(e)){var t=io(e,{fontFamily:n});return Ui(t),t}return e})),appState:mc(mc({},t),{},{currentItemFontFamily:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,o=[{value:c.ut.Virgil,text:L(\"labels.handDrawn\"),icon:(0,_.jsx)(js,{theme:n.theme})},{value:c.ut.Helvetica,text:L(\"labels.normal\"),icon:(0,_.jsx)(Cs,{theme:n.theme})},{value:c.ut.Cascadia,text:L(\"labels.code\"),icon:(0,_.jsx)(Os,{theme:n.theme})}];return(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.fontFamily\")}),(0,_.jsx)(rc,{group:\"font-family\",options:o,value:vc(t,n,(function(e){return Xe(e)&&e.fontFamily}),n.currentItemFontFamily||c.rk),onChange:function(e){return r(e)}})]})}}),As({name:\"changeTextAlign\",perform:function(e,t,n){return{elements:gc(e,t,(function(e){if(Xe(e)){var t=io(e,{textAlign:n});return Ui(t),t}return e})),appState:mc(mc({},t),{},{currentItemTextAlign:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.textAlign\")}),(0,_.jsx)(rc,{group:\"text-align\",options:[{value:\"left\",text:L(\"labels.left\"),icon:(0,_.jsx)(Ms,{theme:n.theme})},{value:\"center\",text:L(\"labels.center\"),icon:(0,_.jsx)(Is,{theme:n.theme})},{value:\"right\",text:L(\"labels.right\"),icon:(0,_.jsx)(Ps,{theme:n.theme})}],value:vc(t,n,(function(e){return Xe(e)&&e.textAlign}),n.currentItemTextAlign),onChange:function(e){return r(e)}})]})}}),As({name:\"changeSharpness\",perform:function(e,t,n){var r=al(qi(e),t),o=r.length?r.every((function(e){return!Qe(e)})):!Je(t.elementType),a=r.length?r.every(Qe):Je(t.elementType);return{elements:gc(e,t,(function(e){return io(e,{strokeSharpness:n})})),appState:mc(mc({},t),{},{currentItemStrokeSharpness:o?n:t.currentItemStrokeSharpness,currentItemLinearStrokeSharpness:a?n:t.currentItemLinearStrokeSharpness}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.edges\")}),(0,_.jsx)(rc,{group:\"edges\",options:[{value:\"sharp\",text:L(\"labels.sharp\"),icon:(0,_.jsx)(ms,{theme:n.theme})},{value:\"round\",text:L(\"labels.round\"),icon:(0,_.jsx)(gs,{theme:n.theme})}],value:vc(t,n,(function(e){return e.strokeSharpness}),dl(n.elementType)&&(Je(n.elementType)?n.currentItemLinearStrokeSharpness:n.currentItemStrokeSharpness)||null),onChange:function(e){return r(e)}})]})}}),As({name:\"changeArrowhead\",perform:function(e,t,n){return{elements:gc(e,t,(function(e){if(Qe(e)){var t=n.position,r=n.type;if(\"start\"===t)return io(e,{startArrowhead:r});if(\"end\"===t)return io(e,{endArrowhead:r})}return e})),appState:mc(mc({},t),{},V({},\"start\"===n.position?\"currentItemStartArrowhead\":\"currentItemEndArrowhead\",n.type)),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,o=T().rtl;return(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.arrowheads\")}),(0,_.jsxs)(\"div\",{className:\"iconSelectList\",children:[(0,_.jsx)(fc,{label:\"arrowhead_start\",options:[{value:null,text:L(\"labels.arrowhead_none\"),icon:(0,_.jsx)(vs,{theme:n.theme}),keyBinding:\"q\"},{value:\"arrow\",text:L(\"labels.arrowhead_arrow\"),icon:(0,_.jsx)(bs,{theme:n.theme,flip:!o}),keyBinding:\"w\"},{value:\"bar\",text:L(\"labels.arrowhead_bar\"),icon:(0,_.jsx)(xs,{theme:n.theme,flip:!o}),keyBinding:\"e\"},{value:\"dot\",text:L(\"labels.arrowhead_dot\"),icon:(0,_.jsx)(ys,{theme:n.theme,flip:!o}),keyBinding:\"r\"}],value:vc(t,n,(function(e){return Qe(e)&&fl(e.type)?e.startArrowhead:n.currentItemStartArrowhead}),n.currentItemStartArrowhead),onChange:function(e){return r({position:\"start\",type:e})}}),(0,_.jsx)(fc,{label:\"arrowhead_end\",group:\"arrowheads\",options:[{value:null,text:L(\"labels.arrowhead_none\"),keyBinding:\"q\",icon:(0,_.jsx)(vs,{theme:n.theme})},{value:\"arrow\",text:L(\"labels.arrowhead_arrow\"),keyBinding:\"w\",icon:(0,_.jsx)(bs,{theme:n.theme,flip:o})},{value:\"bar\",text:L(\"labels.arrowhead_bar\"),keyBinding:\"e\",icon:(0,_.jsx)(xs,{theme:n.theme,flip:o})},{value:\"dot\",text:L(\"labels.arrowhead_dot\"),keyBinding:\"r\",icon:(0,_.jsx)(ys,{theme:n.theme,flip:o})}],value:vc(t,n,(function(e){return Qe(e)&&fl(e.type)?e.endArrowhead:n.currentItemEndArrowhead}),n.currentItemEndArrowhead),onChange:function(e){return r({position:\"end\",type:e})}})]})]})}}),function(e){var t=e.title||(\"dark\"===e.value?L(\"buttons.lightMode\"):L(\"buttons.darkMode\"));return(0,_.jsx)(vl,{type:\"icon\",icon:\"light\"===e.value?yc.MOON:yc.SUN,title:t,\"aria-label\":t,onClick:function(){return e.onChange(\"dark\"===e.value?\"light\":\"dark\")},\"data-testid\":\"toggle-dark-mode\"})}),yc={SUN:(0,_.jsx)(\"svg\",{width:\"512\",height:\"512\",className:\"rtl-mirror\",viewBox:\"0 0 512 512\",children:(0,_.jsx)(\"path\",{fill:\"currentColor\",d:\"M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z\"})}),MOON:(0,_.jsx)(\"svg\",{width:\"512\",height:\"512\",className:\"rtl-mirror\",viewBox:\"0 0 512 512\",children:(0,_.jsx)(\"path\",{fill:\"currentColor\",d:\"M283.211 512c78.962 0 151.079-35.925 198.857-94.792 7.068-8.708-.639-21.43-11.562-19.35-124.203 23.654-238.262-71.576-238.262-196.954 0-72.222 38.662-138.635 101.498-174.394 9.686-5.512 7.25-20.197-3.756-22.23A258.156 258.156 0 0 0 283.211 0c-141.309 0-256 114.511-256 256 0 141.309 114.511 256 256 256z\"})})},xc=(n(6781),function(){var e=document.querySelector(\".excalidraw-tooltip\");if(e)return e;var t=document.createElement(\"div\");return document.body.appendChild(t),t.classList.add(\"excalidraw-tooltip\"),t}),wc=function(e){var t=e.children,n=e.label,r=e.long,o=void 0!==r&&r;return(0,l.useEffect)((function(){return function(){return xc().classList.remove(\"excalidraw-tooltip--visible\")}}),[]),(0,_.jsx)(\"div\",{className:\"excalidraw-tooltip-wrapper\",onPointerEnter:function(e){return function(e,t,n,r){t.classList.add(\"excalidraw-tooltip--visible\"),t.style.minWidth=r?\"50ch\":\"10ch\",t.style.maxWidth=r?\"50ch\":\"15ch\",t.textContent=n;var o=e.getBoundingClientRect(),a=o.x,i=o.bottom,l=o.top,s=o.width,c=t.getBoundingClientRect(),u=c.width,d=c.height,p=window.innerWidth,f=a+s\/2-u\/2,h=f+u>=p?f+u-p:0,m=i+5,g=m+d>=window.innerHeight?i-l+d+10:0;Object.assign(t.style,{top:\"\".concat(m-g,\"px\"),left:\"\".concat(f-h,\"px\")})}(e.currentTarget,xc(),n,o)},onPointerLeave:function(){return xc().classList.remove(\"excalidraw-tooltip--visible\")},children:t})};function kc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Sc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?kc(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):kc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}As({name:\"changeViewBackgroundColor\",perform:function(e,t,n){return{appState:Sc(Sc({},t),n),commitToHistory:!!n.viewBackgroundColor}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,_.jsx)(\"div\",{style:{position:\"relative\"},children:(0,_.jsx)(cc,{label:L(\"labels.canvasBackground\"),type:\"canvasBackground\",color:t.viewBackgroundColor,onChange:function(e){return n({viewBackgroundColor:e})},isActive:\"canvasColorPicker\"===t.openPopup,setActive:function(e){return n({openPopup:e?\"canvasColorPicker\":null})},\"data-testid\":\"canvas-background-picker\"})})}}),As({name:\"clearCanvas\",perform:function(e,t){return{elements:e.map((function(e){return io(e,{isDeleted:!0})})),appState:Sc(Sc({},ir()),{},{theme:t.theme,elementLocked:t.elementLocked,exportBackground:t.exportBackground,exportEmbedScene:t.exportEmbedScene,gridSize:t.gridSize,showStats:t.showStats,pasteDialog:t.pasteDialog}),commitToHistory:!0}},PanelComponent:function(e){var t=e.updateData;return(0,_.jsx)(vl,{type:\"button\",icon:Ml,title:L(\"buttons.clearReset\"),\"aria-label\":L(\"buttons.clearReset\"),showAriaLabel:ah(),onClick:function(){window.confirm(L(\"alerts.clearReset\"))&&t(null)},\"data-testid\":\"clear-canvas-button\"})}}),As({name:\"zoomIn\",perform:function(e,t){var n=ml(gl(t.zoom.value+c.V4),t.zoom,{left:t.offsetLeft,top:t.offsetTop},{x:t.width\/2,y:t.height\/2});return{appState:Sc(Sc({},t),{},{zoom:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData;return(0,_.jsx)(vl,{type:\"button\",icon:Ll,title:\"\".concat(L(\"buttons.zoomIn\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd++\")),\"aria-label\":L(\"buttons.zoomIn\"),onClick:function(){t(null)},size:\"small\"})},keyTest:function(e){return(e.code===At||e.code===_t)&&(e[ln]||e.shiftKey)}}),As({name:\"zoomOut\",perform:function(e,t){var n=ml(gl(t.zoom.value-c.V4),t.zoom,{left:t.offsetLeft,top:t.offsetTop},{x:t.width\/2,y:t.height\/2});return{appState:Sc(Sc({},t),{},{zoom:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData;return(0,_.jsx)(vl,{type:\"button\",icon:_l,title:\"\".concat(L(\"buttons.zoomOut\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd+-\")),\"aria-label\":L(\"buttons.zoomOut\"),onClick:function(){t(null)},size:\"small\"})},keyTest:function(e){return(e.code===Lt||e.code===Dt)&&(e[ln]||e.shiftKey)}}),As({name:\"resetZoom\",perform:function(e,t){return{appState:Sc(Sc({},t),{},{zoom:ml(1,t.zoom,{left:t.offsetLeft,top:t.offsetTop},{x:t.width\/2,y:t.height\/2})}),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData,n=e.appState;return(0,_.jsx)(wc,{label:L(\"buttons.resetZoom\"),children:(0,_.jsxs)(vl,{type:\"button\",className:\"reset-zoom-button\",title:L(\"buttons.resetZoom\"),\"aria-label\":L(\"buttons.resetZoom\"),onClick:function(){t(null)},size:\"small\",children:[(100*n.zoom.value).toFixed(0),\"%\"]})})},keyTest:function(e){return(e.code===Gt||e.code===zt)&&(e[ln]||e.shiftKey)}});var Ec=function(e,t,n){var r=qi(e),o=ol(r,t),a=n&&o.length>0?St(o):St(r),i=function(e,t){var n=R(e,4),r=n[0],o=n[1],a=n[2],i=n[3],l=a-r,s=t.width\/l,u=i-o,d=t.height\/u,p=Math.min(s,d),f=Math.floor(p\/c.V4)*c.V4;return Math.min(Math.max(f,c.V4),1)}(a,{width:t.width,height:t.height}),l=ml(i,t.zoom,{left:t.offsetLeft,top:t.offsetTop}),s=R(a,4),u=s[0],d=s[1],p=(u+s[2])\/2,f=(d+s[3])\/2;return{appState:Sc(Sc(Sc({},t),il({scenePoint:{x:p,y:f},viewportDimensions:{width:t.width,height:t.height},zoom:l})),{},{zoom:l}),commitToHistory:!1}};As({name:\"zoomToSelection\",perform:function(e,t){return Ec(e,t,!0)},keyTest:function(e){return e.code===Rt&&e.shiftKey&&!e.altKey&&!e[ln]}}),As({name:\"zoomToFit\",perform:function(e,t){return Ec(e,t,!1)},keyTest:function(e){return e.code===Nt&&e.shiftKey&&!e.altKey&&!e[ln]}}),As({name:\"toggleTheme\",perform:function(e,t,n){return{appState:Sc(Sc({},t),{},{theme:n||(\"light\"===t.theme?\"dark\":\"light\")}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,_.jsx)(\"div\",{style:{marginInlineStart:\"0.25rem\"},children:(0,_.jsx)(bc,{value:t.theme,onChange:function(e){n(e)}})})},keyTest:function(e){return e.altKey&&e.shiftKey&&e.code===Wt}});function jc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Cc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?jc(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):jc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Oc,Mc,Ic,Pc=As({name:\"finalize\",perform:function(e,t,n,r){var o,a=r.canvas,i=r.focusContainer;if(t.editingLinearElement){var l=t.editingLinearElement,s=l.elementId,c=l.startBindingElement,u=l.endBindingElement,d=ti.getElement(s);if(d)return et(d)&&oi(d,c,u),{elements:d.points.length<2||so(d)?e.filter((function(e){return e.id!==d.id})):void 0,appState:Cc(Cc({},t),{},{editingLinearElement:null}),commitToHistory:!0}}var p=e;window.document.activeElement instanceof HTMLElement&&i();var f=t.multiElement?t.multiElement:\"freedraw\"===(null===(o=t.editingElement)||void 0===o?void 0:o.type)?t.editingElement:null;if(f){if(\"freedraw\"!==f.type&&\"touch\"!==t.lastPointerDownWith){var h=f.points,m=f.lastCommittedPoint;m&&h[h.length-1]===m||ao(f,{points:f.points.slice(0,-1)})}so(f)&&(p=p.slice(0,-1));var g=lt(f.points,t.zoom.value);if((\"line\"===f.type||\"freedraw\"===f.type)&&g){var v=f.points,b=v[0];ao(f,{points:v.map((function(e,t){return t===v.length-1?[b[0],b[1]]:e}))})}if(et(f)&&!g&&f.points.length>1){var y=R(ti.getPointAtIndexGlobalCoordinates(f,-1),2),x=y[0],w=y[1];si(f,t,Jr.getScene(f),{x:x,y:w})}t.elementLocked||\"freedraw\"===t.elementType||(t.selectedElementIds[f.id]=!0)}return(t.elementLocked||\"freedraw\"===t.elementType)&&f||Gn(a),{elements:p,appState:Cc(Cc({},t),{},{elementType:(t.elementLocked||\"freedraw\"===t.elementType)&&f?t.elementType:\"selection\",draggingElement:null,multiElement:null,editingElement:null,startBoundElement:null,suggestedBindings:[],selectedElementIds:f&&!t.elementLocked&&\"freedraw\"!==t.elementType?Cc(Cc({},t.selectedElementIds),{},V({},f.id,!0)):t.selectedElementIds}),commitToHistory:\"freedraw\"===t.elementType}},keyTest:function(e,t){return e.key===un&&(null!==t.editingLinearElement||!t.draggingElement&&null===t.multiElement)||(e.key===un||e.key===cn)&&null!==t.multiElement},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,_.jsx)(vl,{type:\"button\",icon:Dl,title:L(\"buttons.done\"),\"aria-label\":L(\"buttons.done\"),onClick:n,visible:null!=t.multiElement})}}),Tc=\"undefined\"!=typeof process&&null!==(Oc=process.env)&&void 0!==Oc&&Oc.REACT_APP_GOOGLE_ANALYTICS_ID&&\"undefined\"!=typeof window&&window.gtag?function(e,t,n,r){window.gtag(\"event\",t,{event_category:e,event_label:n,value:r})}:(\"undefined\"!=typeof process&&null!==(Mc=process.env)&&void 0!==Mc&&Mc.JEST_WORKER_ID,function(e,t,n,r){}),Ac=(n(518),n(9966),function(e){var t=lh().id,n=R((0,l.useState)(e.value),2),r=n[0],o=n[1];return(0,_.jsxs)(\"div\",{className:\"ProjectName\",children:[(0,_.jsx)(\"label\",{className:\"ProjectName-label\",htmlFor:\"filename\",children:\"\".concat(e.label).concat(e.isNameEditable?\"\":\":\")}),e.isNameEditable?(0,_.jsx)(\"input\",{className:\"TextInput\",onBlur:function(t){!function(e){for(var t=e.parentElement;t;){if(t.tabIndex>-1)return void t.focus();t=t.parentElement}}(t.target);var n=t.target.value;n!==e.value&&e.onChange(n)},onKeyDown:function(e){if(\"Enter\"===e.key){if(e.preventDefault(),e.nativeEvent.isComposing||229===e.keyCode)return;e.currentTarget.blur()}},id:\"\".concat(t,\"-filename\"),value:r,onChange:function(e){return o(e.target.value)}}):(0,_.jsx)(\"span\",{className:\"TextInput TextInput--readonly\",id:\"\".concat(t,\"-filename\"),children:e.value})]})}),Lc=function(e,t,n,r,o,a){e.beginPath(),e.moveTo(t+a,n),e.lineTo(t+r-a,n),e.quadraticCurveTo(t+r,n,t+r,n+a),e.lineTo(t+r,n+o-a),e.quadraticCurveTo(t+r,n+o,t+r-a,n+o),e.lineTo(t+a,n+o),e.quadraticCurveTo(t,n+o,t,n+o-a),e.lineTo(t,n+a),e.quadraticCurveTo(t,n,t+a,n),e.closePath(),e.fill(),e.stroke()},_c=function(e,t){if(null!=t&&t.collaborators){var n=t.collaborators.get(e);if(null!=n&&n.color)return n.color}var r=e.split(\"\").reduce((function(e,t){return e+t.charCodeAt(0)}),0),o=Mt.elementBackground.slice(1),a=Mt.elementStroke.slice(1);return{background:o[r%o.length],stroke:a[r%a.length]}};function Dc(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return zc(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return zc(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function zc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}!function(e){e.ACTIVE=\"active\",e.AWAY=\"away\",e.IDLE=\"idle\"}(Ic||(Ic={}));var Bc=function(){var e=document.createElement(\"canvas\").getContext(\"2d\");if(!e)return!1;return e.fillStyle=\"#f00\",e.textBaseline=\"top\",e.font=\"32px Arial\",e.fillText(\"\ud83d\ude00\",0,0),0!==e.getImageData(12,12,1,1).data[0]}(),Hc=function(e,t,n,r,o,a,i,l){var s=arguments.length>8&&void 0!==arguments[8]&&arguments[8];e.save(),e.translate(a,i),e.rotate(l),s&&e.fillRect(t-a,n-i,r,o),e.strokeRect(t-a,n-i,r,o),e.restore()},Nc=function(e,t,n,r){e.beginPath(),e.arc(t,n,r,0,2*Math.PI),e.fill(),e.stroke()},Rc=function(e,t,n,r,o,a){e.save(),e.strokeStyle=\"rgba(0,0,0,0.1)\",e.beginPath();for(var i=n;i<n+o+2*t;i+=t)e.moveTo(i,r-t),e.lineTo(i,r+a+2*t);for(var l=r;l<r+a+2*t;l+=t)e.moveTo(n-t,l),e.lineTo(n+o+2*t,l);e.stroke(),e.restore()},Fc=function(e,t,n,r){e.save(),e.translate(n.scrollX,n.scrollY),e.lineWidth=1\/n.zoom.value,ti.getPointsGlobalCoordinates(r).forEach((function(r,o){var a;e.strokeStyle=\"red\",e.setLineDash([]),e.fillStyle=(null===(a=t.editingLinearElement)||void 0===a?void 0:a.activePointIndex)===o?\"rgba(255, 127, 127, 0.9)\":\"rgba(255, 255, 255, 0.9)\";var i=ti.POINT_HANDLE_SIZE;Nc(e,r[0],r[1],i\/2\/n.zoom.value)})),e.restore()},Vc=function(e,t,n,r,o,a,i){var l=arguments.length>7&&void 0!==arguments[7]?arguments[7]:{},s=l.renderScrollbars,u=void 0===s||s,d=l.renderSelection,p=void 0===d||d,f=l.renderOptimizations,h=void 0!==f&&f,m=l.renderGrid,g=void 0===m||m;if(null===a)return{atLeastOneVisibleElement:!1};var v=a.getContext(\"2d\");v.setTransform(1,0,0,1,0,0),v.save(),v.scale(r,r);var b=a.width\/r,y=a.height\/r;if(i.exportWithDarkMode&&(v.filter=c.ZF),\"string\"==typeof i.viewBackgroundColor){var x=\"transparent\"===i.viewBackgroundColor||5===i.viewBackgroundColor.length||9===i.viewBackgroundColor.length||\/(hsla|rgba)\\(\/.test(i.viewBackgroundColor);x&&v.clearRect(0,0,b,y),v.save(),v.fillStyle=i.viewBackgroundColor,v.fillRect(0,0,b,y),v.restore()}else v.clearRect(0,0,b,y);var w=i.zoom.translation.x,k=i.zoom.translation.y;v.save(),v.translate(w,k),v.scale(i.zoom.value,i.zoom.value),g&&t.gridSize&&Rc(v,t.gridSize,-Math.ceil(w\/i.zoom.value\/t.gridSize)*t.gridSize+i.scrollX%t.gridSize,-Math.ceil(k\/i.zoom.value\/t.gridSize)*t.gridSize+i.scrollY%t.gridSize,b\/i.zoom.value,y\/i.zoom.value);var S,E=e.filter((function(e){return Yc(e,b,y,{zoom:i.zoom,offsetLeft:t.offsetLeft,offsetTop:t.offsetTop,scrollX:i.scrollX,scrollY:i.scrollY})}));if(E.forEach((function(e){try{Gr(e,o,v,h,i)}catch(e){console.error(e)}})),t.editingLinearElement){var j=ti.getElement(t.editingLinearElement.elementId);j&&Fc(v,t,i,j)}if(n)try{Gr(n,o,v,h,i)}catch(e){console.error(e)}if(ri(t)&&t.suggestedBindings.filter((function(e){return null!=e})).forEach((function(e){Kc(v,i,e)})),p&&!t.multiElement&&!t.editingLinearElement){var C,O=e.reduce((function(e,n){var r=[];if(t.selectedElementIds[n.id]&&!bo(t,n)&&r.push(Ct.black),i.remoteSelectedElementIds[n.id]&&r.push.apply(r,F(i.remoteSelectedElementIds[n.id].map((function(e){return _c(e,t).background})))),r.length){var o=R(gt(n),4),a=o[0],l=o[1],s=o[2],c=o[3];e.push({angle:n.angle,elementX1:a,elementY1:l,elementX2:s,elementY2:c,selectionColors:r})}return e}),[]),M=function(t){var n=So(e,t),r=R(St(n),4),o=r[0],a=r[1],i=r[2],l=r[3];O.push({angle:0,elementX1:o,elementX2:i,elementY1:a,elementY2:l,selectionColors:[Ct.black]})},I=Dc(xo(t));try{for(I.s();!(C=I.n()).done;){var P=C.value;M(P)}}catch(e){I.e(e)}finally{I.f()}t.editingGroupId&&M(t.editingGroupId),O.forEach((function(e){return Uc(v,i,e)}));var T=ol(e,t);if(v.save(),v.translate(i.scrollX,i.scrollY),1===T.length){v.fillStyle=Ct.white;var A=Go(T[0],i.zoom,\"mouse\");t.viewModeEnabled||Gc(v,i,A,T[0].angle)}else if(T.length>1&&!t.isRotating){var L=4\/i.zoom.value;v.fillStyle=Ct.white;var _=St(T),D=R(_,4),z=D[0],B=D[1],H=D[2],N=D[3],V=v.getLineDash();v.setLineDash([2\/i.zoom.value]);var G=v.lineWidth;v.lineWidth=1\/i.zoom.value,Hc(v,z-L,B-L,H-z+2*L,N-B+2*L,(z+H)\/2,(B+N)\/2,0),v.lineWidth=G,v.setLineDash(V);var U=Vo([z,B,H,N],0,i.zoom,\"mouse\",Bo);Gc(v,i,U,0)}v.restore()}for(var K in v.restore(),i.remotePointerViewportCoords){var W=i.remotePointerViewportCoords[K],Z=W.x,Y=W.y;Z-=t.offsetLeft,Y-=t.offsetTop;var X=9,q=14,$=Z<0||Z>b-X||Y<0||Y>y-q;Z=Math.max(Z,0),Z=Math.min(Z,b-X),Y=Math.max(Y,0),Y=Math.min(Y,y-q);var Q=_c(K,t),J=Q.background,ee=Q.stroke;v.save(),v.strokeStyle=ee,v.fillStyle=J;var te=i.remotePointerUserStates[K];($||te===Ic.AWAY)&&(v.globalAlpha=.48),i.remotePointerButton&&\"down\"===i.remotePointerButton[K]&&(v.beginPath(),v.arc(Z,Y,15,0,2*Math.PI,!1),v.lineWidth=3,v.strokeStyle=\"#ffffff88\",v.stroke(),v.closePath(),v.beginPath(),v.arc(Z,Y,15,0,2*Math.PI,!1),v.lineWidth=1,v.strokeStyle=ee,v.stroke(),v.closePath()),v.beginPath(),v.moveTo(Z,Y),v.lineTo(Z+1,Y+14),v.lineTo(Z+4,Y+9),v.lineTo(Z+9,Y+10),v.lineTo(Z,Y),v.fill(),v.stroke();var ne=i.remotePointerUsernames[K],re=\"\";te===Ic.AWAY?re=Bc?\"\u26ab\ufe0f\":\" (\".concat(Ic.AWAY,\")\"):te===Ic.IDLE?re=Bc?\"\ud83d\udca4\":\" (\".concat(Ic.IDLE,\")\"):te===Ic.ACTIVE&&(re=Bc?\"\ud83d\udfe2\":\"\");var oe=\"\".concat(ne?\"\".concat(ne,\" \"):\"\").concat(re);if(!$&&oe){var ae=Z+X,ie=Y+q,le=4,se=4,ce=v.measureText(oe),ue=ce.actualBoundingBoxDescent+ce.actualBoundingBoxAscent;v.fillStyle=ee,v.fillRect(ae-1,ie-1,ce.width+2*le+2,ue+2*se+2),v.fillStyle=J,v.fillRect(ae,ie,ce.width+2*le,ue+2*se),v.fillStyle=Ct.white,v.fillText(oe,ae+le,ie+se+ce.actualBoundingBoxAscent)}v.restore(),v.closePath()}return u&&(S=tl(e,b,y,i),v.save(),v.fillStyle=el,v.strokeStyle=\"rgba(255,255,255,0.8)\",[S.horizontal,S.vertical].forEach((function(e){e&&Lc(v,e.x,e.y,e.width,e.height,3)})),v.restore()),v.restore(),{atLeastOneVisibleElement:E.length>0,scrollBars:S}},Gc=function(e,t,n,r){Object.keys(n).forEach((function(o){var a=n[o];void 0!==a&&(e.save(),e.lineWidth=1\/t.zoom.value,\"rotation\"===o?Nc(e,a[0]+a[2]\/2,a[1]+a[3]\/2,a[2]\/2):Hc(e,a[0],a[1],a[2],a[3],a[0]+a[2]\/2,a[1]+a[3]\/2,r,!0),e.restore())}))},Uc=function(e,t,n){var r=n.angle,o=n.elementX1,a=n.elementY1,i=n.elementX2,l=n.elementY2,s=n.selectionColors,c=i-o,u=l-a,d=4\/t.zoom.value,p=8\/t.zoom.value,f=4\/t.zoom.value;e.save(),e.translate(t.scrollX,t.scrollY),e.lineWidth=1\/t.zoom.value;for(var h=s.length,m=0;m<h;++m)e.strokeStyle=s[m],e.setLineDash([p,f+(p+f)*(h-1)]),e.lineDashOffset=(p+f)*m,Hc(e,o-d,a-d,c+2*d,u+2*d,o+c\/2,a+u\/2,r);e.restore()},Kc=function(e,t,n){var r=Array.isArray(n)?Zc:Wc;e.save(),e.translate(t.scrollX,t.scrollY),r(e,n),e.restore()},Wc=function(e,t){var n=R(gt(t),4),r=n[0],o=n[1],a=n[2]-r,i=n[3]-o,l=xa(t,a,i);e.strokeStyle=\"rgba(0,0,0,.05)\",e.lineWidth=l-4;var s=2+l\/2;switch(t.type){case\"rectangle\":case\"text\":Hc(e,r-s,o-s,a+2*s,i+2*s,r+a\/2,o+i\/2,t.angle);break;case\"diamond\":var c=Math.hypot(a,i);!function(e,t,n,r,o,a){e.save(),e.translate(r,o),e.rotate(a),e.beginPath(),e.moveTo(0,n\/2),e.lineTo(t\/2,0),e.lineTo(0,-n\/2),e.lineTo(-t\/2,0),e.closePath(),e.stroke(),e.restore()}(e,a+2*(s*c\/i),i+2*(s*c\/a),r+a\/2,o+i\/2,t.angle);break;case\"ellipse\":!function(e,t,n,r,o,a){e.beginPath(),e.ellipse(r,o,t\/2,n\/2,a,0,2*Math.PI),e.stroke()}(e,a+2*s,i+2*s,r+a\/2,o+i\/2,t.angle)}},Zc=function(e,t){var n=R(t,3),r=n[0],o=n[1],a=n[2],i=xa(a,a.width,a.height);e.strokeStyle=\"rgba(0,0,0,0)\",e.fillStyle=\"rgba(0,0,0,.05)\",(\"both\"===o?[0,-1]:\"start\"===o?[0]:[-1]).forEach((function(t){var n=R(ti.getPointAtIndexGlobalCoordinates(r,t),2),o=n[0],a=n[1];Nc(e,o,a,i)}))},Yc=function(e,t,n,r){var o=R(kt(e),4),a=o[0],i=o[1],l=o[2],s=o[3],c=Yn({clientX:r.offsetLeft,clientY:r.offsetTop},r),u=Yn({clientX:r.offsetLeft+t,clientY:r.offsetTop+n},r);return c.x<=l&&c.y<=s&&u.x>=a&&u.y>=i},Xc=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=r.offsetX,a=void 0===o?0:o,i=r.offsetY,l=void 0===i?0:i;n&&e.forEach((function(e){if(!e.isDeleted)try{Kr(e,t,n,e.x+a,e.y+l)}catch(e){console.error(e)}}))};var qc=(()=>{if(\"undefined\"==typeof self)return!1;if(\"top\"in self&&self!==top)try{top.location}catch{return!1}else if(\"showOpenFilePicker\"in self)return\"showOpenFilePicker\";return!1})();const $c=qc?n.e(736).then(n.bind(n,6629)):n.e(736).then(n.bind(n,3112));qc?n.e(736).then(n.bind(n,5756)):n.e(736).then(n.bind(n,8396));const Qc=qc?n.e(736).then(n.bind(n,4868)):n.e(736).then(n.bind(n,6882));function Jc(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function eu(e,t,n){return(eu=Jc()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&m(o,n.prototype),o}).apply(null,arguments)}function tu(e){var t=\"function\"==typeof Map?new Map:void 0;return(tu=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf(\"[native code]\")))return e;var n;if(\"function\"!=typeof e)throw new TypeError(\"Super expression must either be null or a function\");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return eu(e,arguments,x(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),m(r,e)})(e)}function nu(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=x(e);if(t){var o=x(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return y(this,n)}}var ru=function(e){g(n,e);var t=nu(n);function n(){var e,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"Couldn't export canvas.\",o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"CANVAS_ERROR\";return p(this,n),(e=t.call(this)).name=o,e.message=r,e}return n}(tu(Error)),ou=function(e){g(n,e);var t=nu(n);function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"Request Aborted\";return p(this,n),t.call(this,e,\"AbortError\")}return n}(tu(DOMException)),au={jpg:\"image\/jpeg\",png:\"image\/png\",svg:\"image\/svg+xml\",json:\"application\/json\",excalidraw:c.LO.excalidraw,excalidrawlib:c.LO.excalidrawlib},iu=function(e){var t,n,r,o=null===(t=e.extensions)||void 0===t?void 0:t.reduce((function(e,t){return e.push(au[t]),e}),[]),a=null===(n=e.extensions)||void 0===n?void 0:n.reduce((function(e,t){return\"jpg\"===t?e.concat(\".jpg\",\".jpeg\"):e.concat(\".\".concat(t))}),[]);return async function(...e){return(await $c).default(...e)}({description:e.description,extensions:a,mimeTypes:o,multiple:null!==(r=e.multiple)&&void 0!==r&&r,legacySetup:function(t,n,r){var o=Fn(n,500),a=function(){i(),document.addEventListener(c.Ks.KEYUP,o),document.addEventListener(c.Ks.POINTER_UP,o),o()},i=function(){var n;if(null!==(n=r.files)&&void 0!==n&&n.length){var o=e.multiple?F(r.files):r.files[0];t(o)}};requestAnimationFrame((function(){window.addEventListener(c.Ks.FOCUS,a)}));var l=window.setInterval((function(){i()}),500);return function(e){clearInterval(l),o.cancel(),window.removeEventListener(c.Ks.FOCUS,a),document.removeEventListener(c.Ks.KEYUP,o),document.removeEventListener(c.Ks.POINTER_UP,o),e&&(console.warn(\"Opening the file was canceled (legacy-fs).\"),e(new ou))}}})},lu=function(e,t){return async function(...e){return(await Qc).default(...e)}(e,{fileName:\"\".concat(t.name,\".\").concat(t.extension),description:t.description,extensions:[\".\".concat(t.extension)]},t.fileHandle)};function su(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return cu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return cu(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function cu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function uu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function du(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?uu(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):uu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var pu={selection:!0,text:!0,rectangle:!0,diamond:!0,ellipse:!0,line:!0,arrow:!0,freedraw:!0},fu=function(e,t){var n,r,o,a,i,l,s,c,u,d,p,f,h={type:t.type||e.type,version:e.version||1,versionNonce:null!==(n=e.versionNonce)&&void 0!==n?n:0,isDeleted:null!==(r=e.isDeleted)&&void 0!==r&&r,id:e.id||no(),fillStyle:e.fillStyle||\"hachure\",strokeWidth:e.strokeWidth||1,strokeStyle:null!==(o=e.strokeStyle)&&void 0!==o?o:\"solid\",roughness:null!==(a=e.roughness)&&void 0!==a?a:1,opacity:null==e.opacity?100:e.opacity,angle:e.angle||0,x:null!==(i=null!==(l=t.x)&&void 0!==l?l:e.x)&&void 0!==i?i:0,y:null!==(s=null!==(c=t.y)&&void 0!==c?c:e.y)&&void 0!==s?s:0,strokeColor:e.strokeColor,backgroundColor:e.backgroundColor,width:e.width||0,height:e.height||0,seed:null!==(u=e.seed)&&void 0!==u?u:1,groupIds:null!==(d=e.groupIds)&&void 0!==d?d:[],strokeSharpness:null!==(p=e.strokeSharpness)&&void 0!==p?p:Je(e.type)?\"round\":\"sharp\",boundElementIds:null!==(f=e.boundElementIds)&&void 0!==f?f:[]};return du(du(du({},h),uo(h)),t)},hu=function(e){var t,n;switch(e.type){case\"text\":var r=e.fontSize,o=e.fontFamily;if(\"font\"in e){var a=R(e.font.split(\" \"),2),i=a[0],l=a[1];r=parseInt(i,10),n=l,o=Object.keys(c.ut).includes(n)?c.ut[n]:c.rk}return fu(e,{fontSize:r,fontFamily:o,text:null!==(t=e.text)&&void 0!==t?t:\"\",baseline:e.baseline,textAlign:e.textAlign||c.Hg,verticalAlign:e.verticalAlign||c.hs});case\"freedraw\":return fu(e,{points:e.points,lastCommittedPoint:null,simulatePressure:e.simulatePressure,pressures:e.pressures});case\"line\":case\"draw\":case\"arrow\":var s=e.startArrowhead,u=void 0===s?null:s,d=e.endArrowhead,p=void 0===d?\"arrow\"===e.type?\"arrow\":null:d,f=e.x,h=e.y,m=!Array.isArray(e.points)||e.points.length<2?[[0,0],[e.width,e.height]]:e.points;if(0!==m[0][0]||0!==m[0][1]){var g=ti.getNormalizedPoints(e);m=g.points,f=g.x,h=g.y}return fu(e,{type:\"draw\"===e.type?\"line\":e.type,startBinding:e.startBinding,endBinding:e.endBinding,lastCommittedPoint:null,startArrowhead:u,endArrowhead:p,points:m,x:f,y:h});case\"ellipse\":case\"rectangle\":case\"diamond\":return fu(e,{})}},mu=function(e,t){var n=t?Yi(t):null;return(e||[]).reduce((function(e,t){if(\"selection\"!==t.type&&!so(t)){var r=hu(t);if(r){var o=null==n?void 0:n[t.id];o&&o.version>r.version&&(r=lo(r,o.version)),e.push(r)}}return e}),[])},gu=function(e,t){e=e||{};var n,r=ir(),o={},a=su(Object.entries(r));try{for(a.s();!(n=a.n()).done;){var i=R(n.value,2),l=i[0],s=i[1],c=e[l],u=t?t[l]:void 0;o[l]=void 0!==c?c:void 0!==u?u:s}}catch(e){a.e(e)}finally{a.f()}return du(du({},o),{},{elementType:pu[o.elementType]?o.elementType:\"selection\",zoom:\"number\"==typeof e.zoom?{value:e.zoom,translation:r.zoom.translation}:e.zoom||r.zoom})},vu=function(e,t,n){return{elements:mu(null==e?void 0:e.elements,n),appState:gu(null==e?void 0:e.appState,t||null)}};function bu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function yu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?bu(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):bu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var xu=function(){var e=(0,d.Z)(k().mark((function e(t){var r;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(\"image\/png\"!==t.type){e.next=18;break}return e.prev=1,e.next=4,Promise.all([n.e(736),n.e(9)]).then(n.bind(n,8527));case 4:return e.next=6,e.sent.decodePngMetadata(t);case 6:return e.abrupt(\"return\",e.sent);case 9:if(e.prev=9,e.t0=e.catch(1),\"INVALID\"!==e.t0.message){e.next=15;break}throw new Error(L(\"alerts.imageDoesNotContainScene\"));case 15:throw new Error(L(\"alerts.cannotRestoreFromImage\"));case 16:e.next=43;break;case 18:if(!(\"text\"in Blob)){e.next=24;break}return e.next=21,t.text();case 21:r=e.sent,e.next=27;break;case 24:return e.next=26,new Promise((function(e){var n=new FileReader;n.readAsText(t,\"utf8\"),n.onloadend=function(){n.readyState===FileReader.DONE&&e(n.result)}}));case 26:r=e.sent;case 27:if(\"image\/svg+xml\"!==t.type){e.next=43;break}return e.prev=28,e.next=31,Promise.all([n.e(736),n.e(9)]).then(n.bind(n,8527));case 31:return e.next=33,e.sent.decodeSvgMetadata({svg:r});case 33:return e.abrupt(\"return\",e.sent);case 36:if(e.prev=36,e.t1=e.catch(28),\"INVALID\"!==e.t1.message){e.next=42;break}throw new Error(L(\"alerts.imageDoesNotContainScene\"));case 42:throw new Error(L(\"alerts.cannotRestoreFromImage\"));case 43:return e.abrupt(\"return\",r);case 44:case\"end\":return e.stop()}}),e,null,[[1,9],[28,36]])})));return function(t){return e.apply(this,arguments)}}(),wu=function(e){var t;return e&&(null===(t=e.name.match(\/\\.(json|excalidraw|png|svg)$\/))||void 0===t?void 0:t[1])||null},ku=function(e){var t=wu(e);return\"png\"===t||\"svg\"===t},Su=function(){var e=(0,d.Z)(k().mark((function e(t,n,r){var o,a,i;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,xu(t);case 2:if(o=e.sent,e.prev=3,a=JSON.parse(o),Iu(a)){e.next=7;break}throw new Error(L(\"alerts.couldNotLoadInvalidFile\"));case 7:return i=vu({elements:Ji(a.elements||[]),appState:yu(yu({theme:null==n?void 0:n.theme,fileHandle:t.handle||null},cr(a.appState||{})),n?ll(a.elements||[],n):{})},n,r),e.abrupt(\"return\",i);case 11:throw e.prev=11,e.t0=e.catch(3),console.error(e.t0.message),new Error(L(\"alerts.couldNotLoadInvalidFile\"));case 15:case\"end\":return e.stop()}}),e,null,[[3,11]])})));return function(t,n,r){return e.apply(this,arguments)}}(),Eu=function(){var e=(0,d.Z)(k().mark((function e(t){var n,r;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,xu(t);case 2:if(n=e.sent,(r=JSON.parse(n)).type===c.r8.excalidrawLibrary){e.next=6;break}throw new Error(L(\"alerts.couldNotLoadInvalidFile\"));case 6:return e.abrupt(\"return\",r);case 7:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),ju=function(){var e=(0,d.Z)(k().mark((function e(t){return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",new Promise((function(e,n){try{t.toBlob((function(t){if(!t)return n(new ru(L(\"canvasError.canvasTooBig\"),\"CANVAS_POSSIBLY_TOO_BIG\"));e(t)}))}catch(e){n(e)}})));case 1:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),Cu=function(e,t){var n={type:c.r8.excalidraw,version:2,source:c.pb,elements:Ji(e),appState:cr(t)};return JSON.stringify(n,null,2)},Ou=function(){var e=(0,d.Z)(k().mark((function e(t,n){var r,o,a;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=Cu(t,n),o=new Blob([r],{type:c.LO.excalidraw}),e.next=4,lu(o,{name:n.name,extension:\"excalidraw\",description:\"Excalidraw file\",fileHandle:ku(n.fileHandle)?null:n.fileHandle});case 4:return a=e.sent,e.abrupt(\"return\",{fileHandle:a});case 6:case\"end\":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),Mu=function(){var e=(0,d.Z)(k().mark((function e(t,n){var r;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,iu({description:\"Excalidraw files\"});case 2:return r=e.sent,e.abrupt(\"return\",Su(r,t,n));case 4:case\"end\":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),Iu=function(e){return(null==e?void 0:e.type)===c.r8.excalidraw&&(!e.elements||Array.isArray(e.elements)&&(!e.appState||\"object\"===v(e.appState)))},Pu=function(e){return\"object\"===v(e)&&e&&e.type===c.r8.excalidrawLibrary&&1===e.version},Tu=function(){var e=(0,d.Z)(k().mark((function e(t){var n,r,o;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.loadLibrary();case 2:return n=e.sent,r={type:c.r8.excalidrawLibrary,version:1,source:c.pb,library:n},o=JSON.stringify(r,null,2),e.next=7,lu(new Blob([o],{type:c.LO.excalidrawlib}),{name:\"library\",extension:\"excalidrawlib\",description:\"Excalidraw library file\"});case 7:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),Au=function(){var e=(0,d.Z)(k().mark((function e(t){var n;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,iu({description:\"Excalidraw library files\"});case 2:return n=e.sent,e.next=5,t.importLibrary(n);case 5:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),Lu=\"\\x3c!-- svg-source:excalidraw --\\x3e\",_u=function(e,t,n){var r=n.exportBackground,o=n.exportPadding,a=void 0===o?c.qy:o,i=n.viewBackgroundColor,l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(e,n){var r=document.createElement(\"canvas\");return r.width=e*t.exportScale,r.height=n*t.exportScale,{canvas:r,scale:t.exportScale}},s=zu(e,a),u=R(s,4),d=u[0],p=u[1],f=u[2],h=u[3],m=l(f,h),g=m.canvas,v=m.scale,b=void 0===v?1:v;return Vc(e,t,null,b,Ke.canvas(g),g,{viewBackgroundColor:r?i:null,exportWithDarkMode:t.exportWithDarkMode,scrollX:-d+a,scrollY:-p+a,zoom:ir().zoom,remotePointerViewportCoords:{},remoteSelectedElementIds:{},shouldCacheIgnoreZoom:!1,remotePointerUsernames:{},remotePointerUserStates:{}},{renderScrollbars:!1,renderSelection:!1,renderOptimizations:!1,renderGrid:!1}),g},Du=function(){var e=(0,d.Z)(k().mark((function e(t,r){var o,a,i,l,s,u,d,p,f,h,m,g,v,b,y,x;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o=r.exportPadding,a=void 0===o?c.qy:o,i=r.viewBackgroundColor,l=r.exportScale,s=void 0===l?1:l,u=r.exportEmbedScene,d=\"\",!u){e.next=14;break}return e.prev=3,e.next=6,Promise.all([n.e(736),n.e(9)]).then(n.bind(n,8527));case 6:return e.next=8,e.sent.encodeSvgMetadata({text:Cu(t,r)});case 8:d=e.sent,e.next=14;break;case 11:e.prev=11,e.t0=e.catch(3),console.error(e.t0);case 14:return p=zu(t,a),f=R(p,4),h=f[0],m=f[1],g=f[2],v=f[3],(b=document.createElementNS(Ln,\"svg\")).setAttribute(\"version\",\"1.1\"),b.setAttribute(\"xmlns\",Ln),b.setAttribute(\"viewBox\",\"0 0 \".concat(g,\" \").concat(v)),b.setAttribute(\"width\",\"\".concat(g*s)),b.setAttribute(\"height\",\"\".concat(v*s)),r.exportWithDarkMode&&b.setAttribute(\"filter\",c.ZF),b.innerHTML=\"\\n  \".concat(Lu,\"\\n  \").concat(d,'\\n  <defs>\\n    <style>\\n      @font-face {\\n        font-family: \"Virgil\";\\n        src: url(\"https:\/\/excalidraw.com\/Virgil.woff2\");\\n      }\\n      @font-face {\\n        font-family: \"Cascadia\";\\n        src: url(\"https:\/\/excalidraw.com\/Cascadia.woff2\");\\n      }\\n    <\/style>\\n  <\/defs>\\n  '),r.exportBackground&&i&&((y=b.ownerDocument.createElementNS(Ln,\"rect\")).setAttribute(\"x\",\"0\"),y.setAttribute(\"y\",\"0\"),y.setAttribute(\"width\",\"\".concat(g)),y.setAttribute(\"height\",\"\".concat(v)),y.setAttribute(\"fill\",i),b.appendChild(y)),x=Ke.svg(b),Xc(t,x,b,{offsetX:-h+a,offsetY:-m+a}),e.abrupt(\"return\",b);case 27:case\"end\":return e.stop()}}),e,null,[[3,11]])})));return function(t,n){return e.apply(this,arguments)}}(),zu=function(e,t){var n=R(St(e),4),r=n[0],o=n[1],a=n[2],i=n[3];return[r,o,Vn(r,a)+2*t,Vn(o,i)+t+t]};function Bu(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return Hu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return Hu(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function Hu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Nu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ru(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Nu(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Nu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Fu=32,Vu=12,Gu=256,Uu=\"NOT_SPREADSHEET\",Ku=\"VALID_SPREADSHEET\",Wu=function(e){var t=\/^[$\u20ac\u00a3\u00a5\u20a9]?([0-9,]+(\\.[0-9]+)?)$\/.exec(e);return t?parseFloat(t[1].replace(\/,\/g,\"\")):null},Zu=function(e,t){return e.slice(1).every((function(e){return null!==Wu(e[t])}))},Yu=function(e){var t=e[0].length;if(t>2)return{type:Uu,reason:\"More than 2 columns\"};if(1===t){if(!Zu(e,0))return{type:Uu,reason:\"Value is not numeric\"};var n=null===Wu(e[0][0]),r=(n?e.slice(1):e).map((function(e){return Wu(e[0])}));return r.length<2?{type:Uu,reason:\"Less than two rows\"}:{type:Ku,spreadsheet:{title:n?e[0][0]:null,labels:null,values:r}}}var o=Zu(e,0)?0:1;if(!Zu(e,o))return{type:Uu,reason:\"Value is not numeric\"};var a=(o+1)%2,i=null===Wu(e[0][o]),l=i?e.slice(1):e;return l.length<2?{type:Uu,reason:\"Less than 2 rows\"}:{type:Ku,spreadsheet:{title:i?e[0][o]:null,labels:l.map((function(e){return e[a]})),values:l.map((function(e){return Wu(e[o])}))}}},Xu=Mt.elementBackground.slice(2,Mt.elementBackground.length),qu={fillStyle:\"hachure\",fontFamily:c.rk,fontSize:c.n5,opacity:100,roughness:1,strokeColor:Mt.elementStroke[0],strokeSharpness:\"sharp\",strokeStyle:\"solid\",strokeWidth:1,verticalAlign:\"middle\"},$u=function(e){return{chartWidth:44*e.values.length+Vu,chartHeight:280}},Qu=function(e,t,n,r,o,a){var i=$u(e),l=i.chartWidth,s=i.chartHeight,u=e.title?To(Ru(Ru({backgroundColor:o,groupIds:[r]},qu),{},{text:e.title,x:t+l\/2,y:n-Gu-24-c.n5,strokeSharpness:\"sharp\",strokeStyle:\"solid\",textAlign:\"center\"})):null,d=a?Io(Ru(Ru({backgroundColor:o,groupIds:[r]},qu),{},{type:\"rectangle\",x:t,y:n-s,width:l,height:s,strokeColor:Mt.elementStroke[0],fillStyle:\"solid\",opacity:6})):null;return[].concat(F(d?[d]:[]),F(u?[u]:[]),F(function(e,t,n,r,o){var a;return(null===(a=e.labels)||void 0===a?void 0:a.map((function(e,a){return To(Ru(Ru({groupIds:[r],backgroundColor:o},qu),{},{text:e.length>8?\"\".concat(e.slice(0,5),\"...\"):e,x:t+44*a+24,y:n+6,width:Fu,angle:5.87,fontSize:16,textAlign:\"center\",verticalAlign:\"top\"}))})))||[]}(e,t,n,r,o)),F(function(e,t,n,r,o){var a=To(Ru(Ru({groupIds:[r],backgroundColor:o},qu),{},{x:t-Vu,y:n-Vu,text:\"0\",textAlign:\"right\"}));return[a,To(Ru(Ru({groupIds:[r],backgroundColor:o},qu),{},{x:t-Vu,y:n-Gu-a.height\/2,text:Math.max.apply(Math,F(e.values)).toLocaleString(),textAlign:\"right\"}))]}(e,t,n,r,o)),F(function(e,t,n,r,o){var a=$u(e),i=a.chartWidth,l=a.chartHeight;return[Lo(Ru(Ru({backgroundColor:o,groupIds:[r]},qu),{},{type:\"line\",x:t,y:n,startArrowhead:null,endArrowhead:null,width:i,points:[[0,0],[i,0]]})),Lo(Ru(Ru({backgroundColor:o,groupIds:[r]},qu),{},{type:\"line\",x:t,y:n,startArrowhead:null,endArrowhead:null,height:l,points:[[0,0],[0,-l]]})),Lo(Ru(Ru({backgroundColor:o,groupIds:[r]},qu),{},{type:\"line\",x:t,y:n-Gu-Vu,startArrowhead:null,endArrowhead:null,strokeStyle:\"dotted\",width:i,opacity:50,points:[[0,0],[i,0]]}))]}(e,t,n,r,o)))},Ju=function(e,t,n,r){return\"line\"===e?function(e,t,n){var r,o=Math.max.apply(Math,F(e.values)),a=no(),i=Xu[Math.floor(Math.random()*Xu.length)],l=0,s=[],u=Bu(e.values);try{for(u.s();!(r=u.n()).done;){var d=r.value,p=44*l,f=-d\/o*Gu;s.push([p,f]),l++}}catch(e){u.e(e)}finally{u.f()}var h=Math.max.apply(Math,F(s.map((function(e){return e[0]})))),m=Math.max.apply(Math,F(s.map((function(e){return e[1]})))),g=Math.min.apply(Math,F(s.map((function(e){return e[0]})))),v=Math.min.apply(Math,F(s.map((function(e){return e[1]})))),b=Lo(Ru(Ru({backgroundColor:i,groupIds:[a]},qu),{},{type:\"line\",x:t+Vu+16,y:n-Vu,startArrowhead:null,endArrowhead:null,height:m-v,width:h-g,strokeWidth:2,points:s})),y=e.values.map((function(e,r){var l=44*r+6,s=-e\/o*Gu+6;return Io(Ru(Ru({backgroundColor:i,groupIds:[a]},qu),{},{fillStyle:\"solid\",strokeWidth:2,type:\"ellipse\",x:t+l+16,y:n+s-24,width:Vu,height:Vu}))})),x=e.values.map((function(e,r){var l=44*r+6,s=e\/o*Gu+6+Vu;return Lo(Ru(Ru({backgroundColor:i,groupIds:[a]},qu),{},{type:\"line\",x:t+l+16+6,y:n-s,startArrowhead:null,endArrowhead:null,height:s,strokeStyle:\"dotted\",opacity:50,points:[[0,0],[0,s]]}))}));return[].concat(F(Qu(e,t,n,a,i,\"production\"===c.Vi.DEVELOPMENT)),[b],F(x),F(y))}(t,n,r):function(e,t,n){var r=Math.max.apply(Math,F(e.values)),o=no(),a=Xu[Math.floor(Math.random()*Xu.length)],i=e.values.map((function(e,i){var l=e\/r*Gu;return Io(Ru(Ru({backgroundColor:a,groupIds:[o]},qu),{},{type:\"rectangle\",x:t+44*i+Vu,y:n-l-Vu,width:Fu,height:l}))}));return[].concat(F(i),F(Qu(e,t,n,o,a,\"production\"===c.Vi.DEVELOPMENT)))}(t,n,r)},ed=\"\",td=!1,nd=\"clipboard\"in navigator&&\"readText\"in navigator.clipboard,rd=\"clipboard\"in navigator&&\"writeText\"in navigator.clipboard,od=\"clipboard\"in navigator&&\"write\"in navigator.clipboard&&\"ClipboardItem\"in window&&\"toBlob\"in HTMLCanvasElement.prototype,ad=function(){var e=(0,d.Z)(k().mark((function e(t,n){var r,o;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r={type:c.r8.excalidrawClipboard,elements:ol(t,n)},o=JSON.stringify(r),ed=o,e.prev=3,td=!1,e.next=7,dd(o);case 7:e.next=13;break;case 9:e.prev=9,e.t0=e.catch(3),td=!0,console.error(e.t0);case 13:case\"end\":return e.stop()}}),e,null,[[3,9]])})));return function(t,n){return e.apply(this,arguments)}}(),id=function(){if(!ed)return{};try{return JSON.parse(ed)}catch(e){return console.error(e),{}}},ld=function(e){var t=function(e){var t=e.trim().split(\"\\n\").map((function(e){return e.trim().split(\"\\t\")}));if(t.length&&2!==t[0].length&&(t=e.trim().split(\"\\n\").map((function(e){return e.trim().split(\",\")}))),0===t.length)return{type:Uu,reason:\"No values\"};var n=t[0].length;if(!t.every((function(e){return e.length===n})))return{type:Uu,reason:\"All rows don't have same number of columns\"};var r=Yu(t);if(r.type!==Ku){var o=Yu(function(e){for(var t=[],n=0;n<e[0].length;n++){for(var r=[],o=0;o<e.length;o++)r.push(e[o][n]);t.push(r)}return t}(t));if(o.type===Ku)return o}return r}(e);return t.type===Ku?{spreadsheet:t.spreadsheet}:null},sd=function(){var e=(0,d.Z)(k().mark((function e(t){var n,r;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,!t){e.next=5;break}e.t0=null===(n=t.clipboardData)||void 0===n?void 0:n.getData(\"text\/plain\").trim(),e.next=11;break;case 5:if(e.t1=nd,!e.t1){e.next=10;break}return e.next=9,navigator.clipboard.readText();case 9:e.t1=e.sent;case 10:e.t0=e.t1;case 11:return r=e.t0,e.abrupt(\"return\",r||\"\");case 15:return e.prev=15,e.t2=e.catch(0),e.abrupt(\"return\",\"\");case 18:case\"end\":return e.stop()}}),e,null,[[0,15]])})));return function(t){return e.apply(this,arguments)}}(),cd=function(){var e=(0,d.Z)(k().mark((function e(t){var n,r,o,a;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,sd(t);case 2:if((n=e.sent)&&!n.includes(Lu)){e.next=5;break}return e.abrupt(\"return\",id());case 5:if(!(r=ld(n))){e.next=8;break}return e.abrupt(\"return\",r);case 8:if(o=id(),e.prev=9,a=JSON.parse(n),i=a,![c.r8.excalidraw,c.r8.excalidrawClipboard].includes(null==i?void 0:i.type)||!Array.isArray(i.elements)){e.next=13;break}return e.abrupt(\"return\",{elements:a.elements});case 13:return e.abrupt(\"return\",o);case 16:return e.prev=16,e.t0=e.catch(9),e.abrupt(\"return\",td&&o.elements?o:{text:n});case 19:case\"end\":return e.stop()}var i}),e,null,[[9,16]])})));return function(t){return e.apply(this,arguments)}}(),ud=function(){var e=(0,d.Z)(k().mark((function e(t){return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,navigator.clipboard.write([new window.ClipboardItem({\"image\/png\":t})]);case 2:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),dd=function(){var e=(0,d.Z)(k().mark((function e(t){var n;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=!1,!rd){e.next=11;break}return e.prev=2,e.next=5,navigator.clipboard.writeText(t||\"\");case 5:n=!0,e.next=11;break;case 8:e.prev=8,e.t0=e.catch(2),console.error(e.t0);case 11:if(n||pd(t||\" \")){e.next=13;break}throw new Error(\"couldn't copy\");case 13:case\"end\":return e.stop()}}),e,null,[[2,8]])})));return function(t){return e.apply(this,arguments)}}(),pd=function(e){var t=\"rtl\"===document.documentElement.getAttribute(\"dir\"),n=document.createElement(\"textarea\");n.style.border=\"0\",n.style.padding=\"0\",n.style.margin=\"0\",n.style.position=\"absolute\",n.style[t?\"right\":\"left\"]=\"-9999px\";var r=window.pageYOffset||document.documentElement.scrollTop;n.style.top=\"\".concat(r,\"px\"),n.style.fontSize=\"12pt\",n.setAttribute(\"readonly\",\"\"),n.value=e,document.body.appendChild(n);var o=!1;try{n.select(),n.setSelectionRange(0,n.value.length),o=document.execCommand(\"copy\")}catch(e){console.error(e)}return n.remove(),o},fd=function(){var e=(0,d.Z)(k().mark((function e(t,r,o,a){var i,l,s,u,d,p,f,h,m,g;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i=a.exportBackground,l=a.exportPadding,s=void 0===l?c.qy:l,u=a.viewBackgroundColor,d=a.name,p=a.fileHandle,f=void 0===p?null:p,0!==r.length){e.next=3;break}throw new Error(L(\"alerts.cannotExportEmptyCanvas\"));case 3:if(\"svg\"!==t&&\"clipboard-svg\"!==t){e.next=17;break}return e.next=6,Du(r,{exportBackground:i,exportWithDarkMode:o.exportWithDarkMode,viewBackgroundColor:u,exportPadding:s,exportScale:o.exportScale,exportEmbedScene:o.exportEmbedScene&&\"svg\"===t});case 6:if(h=e.sent,\"svg\"!==t){e.next=13;break}return e.next=10,lu(new Blob([h.outerHTML],{type:\"image\/svg+xml\"}),{name:d,extension:\"svg\",fileHandle:f});case 10:return e.abrupt(\"return\",e.sent);case 13:if(\"clipboard-svg\"!==t){e.next=17;break}return e.next=16,dd(h.outerHTML);case 16:return e.abrupt(\"return\");case 17:return(m=_u(r,o,{exportBackground:i,viewBackgroundColor:u,exportPadding:s})).style.display=\"none\",document.body.appendChild(m),e.next=22,ju(m);case 22:if(g=e.sent,m.remove(),\"png\"!==t){e.next=36;break}if(!o.exportEmbedScene){e.next=31;break}return e.next=28,Promise.all([n.e(736),n.e(9)]).then(n.bind(n,8527));case 28:return e.next=30,e.sent.encodePngMetadata({blob:g,metadata:Cu(r,o)});case 30:g=e.sent;case 31:return e.next=33,lu(g,{name:d,extension:\"png\",fileHandle:f});case 33:return e.abrupt(\"return\",e.sent);case 36:if(\"clipboard\"!==t){e.next=47;break}return e.prev=37,e.next=40,ud(g);case 40:e.next=47;break;case 42:if(e.prev=42,e.t0=e.catch(37),\"CANVAS_POSSIBLY_TOO_BIG\"!==e.t0.name){e.next=46;break}throw e.t0;case 46:throw new Error(L(\"alerts.couldNotCopyToClipboard\"));case 47:case\"end\":return e.stop()}}),e,null,[[37,42]])})));return function(t,n,r,o){return e.apply(this,arguments)}}();function hd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function md(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?hd(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):hd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var gd=function(){var e=(0,d.Z)(k().mark((function e(t,n){var r,o,a,i,l,s;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o=(r=n).exportBackground,a=r.viewBackgroundColor,i=r.name,l=r.fileHandle,s=wu(l),l&&(\"png\"===(c=s)||\"svg\"===c)){e.next=4;break}throw new Error(\"fileHandle should exist and should be of type svg or png when resaving\");case 4:return n=md(md({},n),{},{exportEmbedScene:!0}),e.next=7,fd(s,qi(t),n,{exportBackground:o,viewBackgroundColor:a,name:i,fileHandle:l});case 7:return e.abrupt(\"return\",{fileHandle:l});case 8:case\"end\":return e.stop()}var c}),e)})));return function(t,n){return e.apply(this,arguments)}}(),vd=(n(7225),function(e){var t=e.children,n=e.checked,r=e.onChange;return(0,_.jsxs)(\"div\",{className:Ze(\"Checkbox\",{\"is-checked\":n}),onClick:function(e){r(!n),e.currentTarget.querySelector(\".Checkbox-box\").focus()},children:[(0,_.jsx)(\"button\",{className:\"Checkbox-box\",role:\"checkbox\",\"aria-checked\":n,children:kl}),(0,_.jsx)(\"div\",{className:\"Checkbox-label\",children:t})]})});n(4623);function bd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function yd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?bd(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):bd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var xd=function(e){var t=e.children,n=e.gap,r=e.align,o=e.justifyContent,a=e.className,i=e.style;return(0,_.jsx)(\"div\",{className:Ze(\"Stack Stack_horizontal\",a),style:yd({\"--gap\":n,alignItems:r,justifyContent:o},i),children:t})},wd=function(e){var t=e.children,n=e.gap,r=e.align,o=e.justifyContent,a=e.className;return(0,_.jsx)(\"div\",{className:Ze(\"Stack Stack_vertical\",a),style:{\"--gap\":n,justifyItems:r,justifyContent:o},children:t})},kd=(n(554),function(e){var t=e.fileName,n=e.onSave;return(0,_.jsxs)(xd,{className:\"ActiveFile\",gap:1,align:\"center\",children:[(0,_.jsxs)(\"span\",{className:\"ActiveFile__fileName\",children:[ns,(0,_.jsx)(\"span\",{children:t})]}),(0,_.jsx)(vl,{type:\"icon\",icon:El,title:L(\"buttons.save\"),\"aria-label\":L(\"buttons.save\"),onClick:n,\"data-testid\":\"save-button\"})]})});function Sd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ed(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Sd(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Sd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}As({name:\"changeProjectName\",perform:function(e,t,n){return Tc(\"change\",\"title\"),{appState:Ed(Ed({},t),{},{name:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData,r=e.appProps;return(0,_.jsx)(Ac,{label:L(\"labels.fileTitle\"),value:t.name||\"Unnamed\",onChange:function(e){return n(e)},isNameEditable:void 0===r.name&&!t.viewModeEnabled})}}),As({name:\"changeExportScale\",perform:function(e,t,n){return{appState:Ed(Ed({},t),{},{exportScale:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,o=qi(t),a=rl(o,n)?ol(o,n):o;return(0,_.jsx)(_.Fragment,{children:c.ZB.map((function(e){var t=function(e,t,n){var r=R(zu(e,t).map((function(e){return Math.trunc(e*n)})),4);return[r[2],r[3]]}(a,c.qy,e),o=R(t,2),i=o[0],l=o[1],s=\"\".concat(L(\"buttons.scale\"),\" \").concat(e,\"x (\").concat(i,\"x\").concat(l,\")\");return(0,_.jsx)(vl,{size:\"small\",type:\"radio\",icon:\"\".concat(e,\"x\"),name:\"export-canvas-scale\",title:s,\"aria-label\":s,id:\"export-canvas-scale\",checked:e===n.exportScale,onChange:function(){return r(e)}},e)}))})}}),As({name:\"changeExportBackground\",perform:function(e,t,n){return{appState:Ed(Ed({},t),{},{exportBackground:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,_.jsx)(vd,{checked:t.exportBackground,onChange:function(e){return n(e)},children:L(\"labels.withBackground\")})}}),As({name:\"changeExportEmbedScene\",perform:function(e,t,n){return{appState:Ed(Ed({},t),{},{exportEmbedScene:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,_.jsxs)(vd,{checked:t.exportEmbedScene,onChange:function(e){return n(e)},children:[L(\"labels.exportEmbedScene\"),(0,_.jsx)(wc,{label:L(\"labels.exportEmbedScene_details\"),long:!0,children:(0,_.jsx)(\"div\",{className:\"excalidraw-tooltip-icon\",children:Nl})})]})}}),As({name:\"saveToActiveFile\",perform:(jd=(0,d.Z)(k().mark((function e(t,n,r){var o,a,i;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o=!!n.fileHandle,e.prev=1,!ku(n.fileHandle)){e.next=8;break}return e.next=5,gd(t,n);case 5:e.t0=e.sent,e.next=11;break;case 8:return e.next=10,Ou(t,n);case 10:e.t0=e.sent;case 11:return a=e.t0,i=a.fileHandle,e.abrupt(\"return\",{commitToHistory:!1,appState:Ed(Ed({},n),{},{fileHandle:i,toastMessage:o?null!=i&&i.name?L(\"toast.fileSavedToFilename\").replace(\"{filename}\",'\"'.concat(i.name,'\"')):L(\"toast.fileSaved\"):null})});case 16:return e.prev=16,e.t1=e.catch(1),\"AbortError\"!==(null===e.t1||void 0===e.t1?void 0:e.t1.name)&&console.error(e.t1),e.abrupt(\"return\",{commitToHistory:!1});case 20:case\"end\":return e.stop()}}),e,null,[[1,16]])}))),function(e,t,n){return jd.apply(this,arguments)}),keyTest:function(e){return e.key===Sn&&e[ln]&&!e.shiftKey},PanelComponent:function(e){var t,n=e.updateData,r=e.appState;return(0,_.jsx)(kd,{onSave:function(){return n(null)},fileName:null===(t=r.fileHandle)||void 0===t?void 0:t.name})}});var jd,Cd,Od,Md=As({name:\"saveFileToDisk\",perform:(Cd=(0,d.Z)(k().mark((function e(t,n,r){var o,a;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,Ou(t,Ed(Ed({},n),{},{fileHandle:null}));case 3:return o=e.sent,a=o.fileHandle,e.abrupt(\"return\",{commitToHistory:!1,appState:Ed(Ed({},n),{},{fileHandle:a})});case 8:return e.prev=8,e.t0=e.catch(0),\"AbortError\"!==(null===e.t0||void 0===e.t0?void 0:e.t0.name)&&console.error(e.t0),e.abrupt(\"return\",{commitToHistory:!1});case 12:case\"end\":return e.stop()}}),e,null,[[0,8]])}))),function(e,t,n){return Cd.apply(this,arguments)}),keyTest:function(e){return e.key===Sn&&e.shiftKey&&e[ln]},PanelComponent:function(e){var t=e.updateData;return(0,_.jsx)(vl,{type:\"button\",icon:jl,title:L(\"buttons.saveAs\"),\"aria-label\":L(\"buttons.saveAs\"),showAriaLabel:ah(),hidden:!qc,onClick:function(){return t(null)},\"data-testid\":\"save-as-button\"})}});As({name:\"loadScene\",perform:(Od=(0,d.Z)(k().mark((function e(t,n){var r,o,a;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,Mu(n,t);case 3:return r=e.sent,o=r.elements,a=r.appState,e.abrupt(\"return\",{elements:o,appState:a,commitToHistory:!0});case 9:if(e.prev=9,e.t0=e.catch(0),\"AbortError\"!==(null===e.t0||void 0===e.t0?void 0:e.t0.name)){e.next=13;break}return e.abrupt(\"return\",!1);case 13:return e.abrupt(\"return\",{elements:t,appState:Ed(Ed({},n),{},{errorMessage:e.t0.message}),commitToHistory:!1});case 14:case\"end\":return e.stop()}}),e,null,[[0,9]])}))),function(e,t){return Od.apply(this,arguments)}),keyTest:function(e){return e[ln]&&e.key===yn},PanelComponent:function(e){var t=e.updateData;e.appState;return(0,_.jsx)(vl,{type:\"button\",icon:Cl,title:L(\"buttons.load\"),\"aria-label\":L(\"buttons.load\"),showAriaLabel:ah(),onClick:t,\"data-testid\":\"load-button\"})}}),As({name:\"exportWithDarkMode\",perform:function(e,t,n){return{appState:Ed(Ed({},t),{},{exportWithDarkMode:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,_.jsx)(\"div\",{style:{display:\"flex\",justifyContent:\"flex-end\",marginTop:\"-45px\",marginBottom:\"10px\"},children:(0,_.jsx)(bc,{value:t.exportWithDarkMode?\"dark\":\"light\",onChange:function(e){n(\"dark\"===e)},title:L(\"labels.toggleExportColorScheme\")})})}});function Id(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Pd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Id(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Id(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Td=\"{}\",Ad=As({name:\"copyStyles\",perform:function(e,t){var n=e.find((function(e){return t.selectedElementIds[e.id]}));return n&&(Td=JSON.stringify(n)),{appState:Pd(Pd({},t),{},{toastMessage:L(\"toast.copyStyles\")}),commitToHistory:!1}},contextItemLabel:\"labels.copyStyles\",keyTest:function(e){return e[ln]&&e.altKey&&e.code===Kt}}),Ld=As({name:\"pasteStyles\",perform:function(e,t){var n,r=JSON.parse(Td);return\"text\"!==(null==(n=r)?void 0:n.type)&&\"diamond\"!==(null==n?void 0:n.type)&&\"rectangle\"!==(null==n?void 0:n.type)&&\"ellipse\"!==(null==n?void 0:n.type)&&\"arrow\"!==(null==n?void 0:n.type)&&\"freedraw\"!==(null==n?void 0:n.type)&&\"line\"!==(null==n?void 0:n.type)?{elements:e,commitToHistory:!1}:{elements:e.map((function(e){if(t.selectedElementIds[e.id]){var n=io(e,{backgroundColor:null==r?void 0:r.backgroundColor,strokeWidth:null==r?void 0:r.strokeWidth,strokeColor:null==r?void 0:r.strokeColor,strokeStyle:null==r?void 0:r.strokeStyle,fillStyle:null==r?void 0:r.fillStyle,opacity:null==r?void 0:r.opacity,roughness:null==r?void 0:r.roughness});return Xe(n)&&(ao(n,{fontSize:(null==r?void 0:r.fontSize)||c.n5,fontFamily:(null==r?void 0:r.fontFamily)||c.rk,textAlign:(null==r?void 0:r.textAlign)||c.Hg}),Ui(n)),n}return e})),commitToHistory:!0}},contextItemLabel:\"labels.pasteStyles\",keyTest:function(e){return e[ln]&&e.altKey&&e.code===qt}}),_d=function(e){return(0,_.jsx)(\"button\",{className:\"help-icon\",onClick:e.onClick,type:\"button\",title:\"\".concat(e.title,\" \u2014 ?\"),\"aria-label\":e.title,children:Nl})};function Dd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function zd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Dd(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Dd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}As({name:\"toggleCanvasMenu\",perform:function(e,t){return{appState:zd(zd({},t),{},{openMenu:\"canvas\"===t.openMenu?null:\"canvas\"}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,_.jsx)(vl,{type:\"button\",icon:zl,\"aria-label\":L(\"buttons.menu\"),onClick:n,selected:\"canvas\"===t.openMenu})}}),As({name:\"toggleEditMenu\",perform:function(e,t){return{appState:zd(zd({},t),{},{openMenu:\"shape\"===t.openMenu?null:\"shape\"}),commitToHistory:!1}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{visible:Ki(n,qi(t)),type:\"button\",icon:Il,\"aria-label\":L(\"buttons.edit\"),onClick:r,selected:\"shape\"===n.openMenu})}}),As({name:\"toggleFullScreen\",perform:function(){return Wn()||document.documentElement.requestFullscreen(),Wn()&&document.exitFullscreen(),{commitToHistory:!1}},keyTest:function(e){return e.code===Yt&&!e[ln]}}),As({name:\"toggleShortcuts\",perform:function(e,t,n,r){var o=r.focusContainer;return t.showHelpDialog&&o(),{appState:zd(zd({},t),{},{showHelpDialog:!t.showHelpDialog}),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData;return(0,_.jsx)(_d,{title:L(\"helpDialog.title\"),onClick:t})},keyTest:function(e){return e.key===dn}});function Bd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Hd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Bd(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Bd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Nd(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return Rd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return Rd(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function Rd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Fd=function(e,t){var n=ol(qi(e),t);return n.length>=2&&!function(e){if(e.length>=2){var t,n=Nd(e[0].groupIds);try{var r=function(){var n=t.value;if(e.reduce((function(e,t){return e&&ko(t,n)}),!0))return{v:!0}};for(n.s();!(t=n.n()).done;){var o=r();if(\"object\"===v(o))return o.v}}catch(e){n.e(e)}finally{n.f()}}return!1}(n)},Vd=As({name:\"group\",perform:function(e,t){var n=ol(qi(e),t);if(n.length<2)return{appState:t,elements:e,commitToHistory:!1};var r=xo(t);if(1===r.length){var o=r[0],a=new Set(So(e,o).map((function(e){return e.id}))),i=new Set(n.map((function(e){return e.id})));if(new Set([].concat(F(Array.from(a)),F(Array.from(i)))).size===a.size)return{appState:t,elements:e,commitToHistory:!1}}var l=no(),s=e.map((function(e){return t.selectedElementIds[e.id]?io(e,{groupIds:Eo(e.groupIds,l,t.editingGroupId)}):e})),c=So(s,l),u=c[c.length-1],d=s.lastIndexOf(u),p=s.slice(d+1),f=s.slice(0,d).filter((function(e){return!ko(e,l)})),h=[].concat(F(f),F(c),F(p));return{appState:vo(l,Hd(Hd({},t),{},{selectedGroupIds:{}}),qi(h)),elements:h,commitToHistory:!0}},contextItemLabel:\"labels.group\",contextItemPredicate:function(e,t){return Fd(e,t)},keyTest:function(e){return!e.shiftKey&&e[ln]&&e.code===Zt},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{hidden:!Fd(t,n),type:\"button\",icon:(0,_.jsx)(rs,{theme:n.theme}),onClick:function(){return r(null)},title:\"\".concat(L(\"labels.group\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd+G\")),\"aria-label\":L(\"labels.group\"),visible:rl(qi(t),n)})}}),Gd=As({name:\"ungroup\",perform:function(e,t){if(0===xo(t).length)return{appState:t,elements:e,commitToHistory:!1};var n=e.map((function(e){var n=function(e,t){return e.filter((function(e){return!t[e]}))}(e.groupIds,t.selectedGroupIds);return n.length===e.groupIds.length?e:io(e,{groupIds:n})}));return{appState:wo(Hd(Hd({},t),{},{selectedGroupIds:{}}),qi(n)),elements:n,commitToHistory:!0}},keyTest:function(e){return e.shiftKey&&e[ln]&&e.code===Zt},contextItemLabel:\"labels.ungroup\",contextItemPredicate:function(e,t){return xo(t).length>0},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{type:\"button\",hidden:0===xo(n).length,icon:(0,_.jsx)(os,{theme:n.theme}),onClick:function(){return r(null)},title:\"\".concat(L(\"labels.ungroup\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd+Shift+G\")),\"aria-label\":L(\"labels.ungroup\"),visible:rl(qi(t),n)})}}),Ud=(n(2789),function(e){var t=e.children,n=e.color,r=e.border,o=e.onClick;return(0,_.jsx)(\"div\",{className:\"Avatar\",style:{background:n,border:\"1px solid \".concat(r)},onClick:o,children:t})});function Kd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Wd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Kd(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Kd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}As({name:\"goToCollaborator\",perform:function(e,t,n){var r=n;return r?{appState:Wd(Wd(Wd({},t),il({scenePoint:r,viewportDimensions:{width:t.width,height:t.height},zoom:t.zoom})),{},{openMenu:\"canvas\"===t.openMenu?null:t.openMenu}),commitToHistory:!1}:{appState:t,commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData,r=e.data,o=null==r?void 0:r.id;if(!o)return null;var a=t.collaborators.get(o);if(!a)return null;var i=_c(o,t),l=i.background,s=i.stroke,c=function(e){if(!e)return\"?\";var t=e.trim().split(\" \");if(t.length<2)return t[0].substring(0,2).toUpperCase();var n=t[0],r=t[t.length-1];return(n[0]+r[0]).toUpperCase()}(a.username);return(0,_.jsx)(Ud,{color:l,border:s,onClick:function(){return n(a.pointer)},children:c})}});var Zd=As({name:\"addToLibrary\",perform:function(e,t,n,r){var o=ol(qi(e),t);return r.library.loadLibrary().then((function(e){r.library.saveLibrary([].concat(F(e),[o.map(_o)]))})),!1},contextItemLabel:\"labels.addToLibrary\"});function Yd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Xd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Yd(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Yd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var qd=function(e){var t=new Map;return e.forEach((function(e){var n=0===e.groupIds.length?e.id:e.groupIds[e.groupIds.length-1],r=t.get(n)||[];t.set(n,[].concat(F(r),[e]))})),Array.from(t.values())},$d=function(e,t,n){var r=n.axis,o=n.position,a=Qd(e),i=R(\"x\"===r?[\"minX\",\"maxX\"]:[\"minY\",\"maxY\"],2),l=i[0],s=i[1],c={x:0,y:0};return Xd(Xd({},c),{},V({},r,\"start\"===o?t[l]-a[l]:\"end\"===o?t[s]-a[s]:(t[l]+t[s])\/2-(a[l]+a[s])\/2))},Qd=function(e){var t=R(St(e),4);return{minX:t[0],minY:t[1],maxX:t[2],maxY:t[3]}},Jd=function(e,t){return ol(qi(e),t).length>1},ep=function(e,t,n){var r=function(e,t){var n=qd(e),r=Qd(e);return n.flatMap((function(e){var n=$d(e,r,t);return e.map((function(e){return io(e,{x:e.x+n.x,y:e.y+n.y})}))}))}(ol(qi(e),t),n),o=Yi(r);return e.map((function(e){return o[e.id]||e}))};As({name:\"alignTop\",perform:function(e,t){return{appState:t,elements:ep(e,t,{position:\"start\",axis:\"y\"}),commitToHistory:!0}},keyTest:function(e){return e[ln]&&e.shiftKey&&e.key===rn},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{hidden:!Jd(t,n),type:\"button\",icon:(0,_.jsx)(Ul,{theme:n.theme}),onClick:function(){return r(null)},title:\"\".concat(L(\"labels.alignTop\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd+Shift+Up\")),\"aria-label\":L(\"labels.alignTop\"),visible:rl(qi(t),n)})}}),As({name:\"alignBottom\",perform:function(e,t){return{appState:t,elements:ep(e,t,{position:\"end\",axis:\"y\"}),commitToHistory:!0}},keyTest:function(e){return e[ln]&&e.shiftKey&&e.key===en},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{hidden:!Jd(t,n),type:\"button\",icon:(0,_.jsx)(Kl,{theme:n.theme}),onClick:function(){return r(null)},title:\"\".concat(L(\"labels.alignBottom\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd+Shift+Down\")),\"aria-label\":L(\"labels.alignBottom\"),visible:rl(qi(t),n)})}}),As({name:\"alignLeft\",perform:function(e,t){return{appState:t,elements:ep(e,t,{position:\"start\",axis:\"x\"}),commitToHistory:!0}},keyTest:function(e){return e[ln]&&e.shiftKey&&e.key===tn},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{hidden:!Jd(t,n),type:\"button\",icon:(0,_.jsx)(Wl,{theme:n.theme}),onClick:function(){return r(null)},title:\"\".concat(L(\"labels.alignLeft\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd+Shift+Left\")),\"aria-label\":L(\"labels.alignLeft\"),visible:rl(qi(t),n)})}}),As({name:\"alignRight\",perform:function(e,t){return{appState:t,elements:ep(e,t,{position:\"end\",axis:\"x\"}),commitToHistory:!0}},keyTest:function(e){return e[ln]&&e.shiftKey&&e.key===nn},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{hidden:!Jd(t,n),type:\"button\",icon:(0,_.jsx)(Zl,{theme:n.theme}),onClick:function(){return r(null)},title:\"\".concat(L(\"labels.alignRight\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd+Shift+Right\")),\"aria-label\":L(\"labels.alignRight\"),visible:rl(qi(t),n)})}}),As({name:\"alignVerticallyCentered\",perform:function(e,t){return{appState:t,elements:ep(e,t,{position:\"center\",axis:\"y\"}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{hidden:!Jd(t,n),type:\"button\",icon:(0,_.jsx)(ql,{theme:n.theme}),onClick:function(){return r(null)},title:L(\"labels.centerVertically\"),\"aria-label\":L(\"labels.centerVertically\"),visible:rl(qi(t),n)})}}),As({name:\"alignHorizontallyCentered\",perform:function(e,t){return{appState:t,elements:ep(e,t,{position:\"center\",axis:\"x\"}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{hidden:!Jd(t,n),type:\"button\",icon:(0,_.jsx)($l,{theme:n.theme}),onClick:function(){return r(null)},title:L(\"labels.centerHorizontally\"),\"aria-label\":L(\"labels.centerHorizontally\"),visible:rl(qi(t),n)})}});function tp(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return np(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return np(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function np(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var rp=function(e){var t=new Map;return e.forEach((function(e){var n=0===e.groupIds.length?e.id:e.groupIds[e.groupIds.length-1],r=t.get(n)||[];t.set(n,[].concat(F(r),[e]))})),Array.from(t.values())},op=function(e){var t=R(St(e),4),n=t[0],r=t[1],o=t[2],a=t[3];return{minX:n,minY:r,maxX:o,maxY:a,width:o-n,height:a-r,midX:(n+o)\/2,midY:(r+a)\/2}},ap=function(e,t){return ol(qi(e),t).length>1},ip=function(e,t,n){var r=function(e,t){var n,r=R(\"x\"===t.axis?[\"minX\",\"midX\",\"maxX\",\"width\"]:[\"minY\",\"midY\",\"maxY\",\"height\"],4),o=r[0],a=r[1],i=r[2],l=r[3],s=op(e),c=rp(e).map((function(e){return[e,op(e)]})).sort((function(e,t){return e[1][a]-t[1][a]})),u=0,d=tp(c);try{for(d.s();!(n=d.n()).done;)u+=n.value[1][l]}catch(e){d.e(e)}finally{d.f()}var p=(s[l]-u)\/(c.length-1);if(p<0){var f=c.findIndex((function(e){return e[1][o]===s[o]})),h=c.findIndex((function(e){return e[1][i]===s[i]})),m=(c[h][1][a]-c[f][1][a])\/(c.length-1),g=c[f][1][a];return c.flatMap((function(e,n){var r=R(e,2),o=r[0],i=r[1],l={x:0,y:0};return n!==f&&n!==h&&(g+=m,l[t.axis]=g-i[a]),o.map((function(e){return io(e,{x:e.x+l.x,y:e.y+l.y})}))}))}var v=s[o];return c.flatMap((function(e){var n=R(e,2),r=n[0],a=n[1],i={x:0,y:0};return i[t.axis]=v-a[o],v+=p,v+=a[l],r.map((function(e){return io(e,{x:e.x+i.x,y:e.y+i.y})}))}))}(ol(qi(e),t),n),o=Yi(r);return e.map((function(e){return o[e.id]||e}))},lp=(As({name:\"distributeHorizontally\",perform:function(e,t){return{appState:t,elements:ip(e,t,{space:\"between\",axis:\"x\"}),commitToHistory:!0}},keyTest:function(e){return e.altKey&&e.code===Xt},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{hidden:!ap(t,n),type:\"button\",icon:(0,_.jsx)(Yl,{theme:n.theme}),onClick:function(){return r(null)},title:\"\".concat(L(\"labels.distributeHorizontally\"),\" \u2014 \").concat(Zn(\"Alt+H\")),\"aria-label\":L(\"labels.distributeHorizontally\"),visible:rl(qi(t),n)})}}),As({name:\"distributeVertically\",perform:function(e,t){return{appState:t,elements:ip(e,t,{space:\"between\",axis:\"y\"}),commitToHistory:!0}},keyTest:function(e){return e.altKey&&e.code===qt},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{hidden:!ap(t,n),type:\"button\",icon:(0,_.jsx)(Xl,{theme:n.theme}),onClick:function(){return r(null)},title:\"\".concat(L(\"labels.distributeVertically\"),\" \u2014 \").concat(Zn(\"Alt+V\")),\"aria-label\":L(\"labels.distributeVertically\"),visible:rl(qi(t),n)})}}),As({name:\"flipHorizontal\",perform:function(e,t){return{elements:cp(e,t,\"horizontal\"),appState:t,commitToHistory:!0}},keyTest:function(e){return e.shiftKey&&\"KeyH\"===e.code},contextItemLabel:\"labels.flipHorizontal\",contextItemPredicate:function(e,t){return function(e,t){var n=ol(qi(e),t);return 1===n.length&&\"text\"!==n[0].type}(e,t)}})),sp=As({name:\"flipVertical\",perform:function(e,t){return{elements:cp(e,t,\"vertical\"),appState:t,commitToHistory:!0}},keyTest:function(e){return e.shiftKey&&\"KeyV\"===e.code},contextItemLabel:\"labels.flipVertical\",contextItemPredicate:function(e,t){return function(e,t){return 1===ol(qi(e),t).length}(e,t)}}),cp=function(e,t,n){var r=ol(qi(e),t);if(r.length>1)return e;var o=up(r,t,n),a=Yi(o);return e.map((function(e){return a[e.id]||e}))},up=function(e,t,n){for(var r=0;r<e.length;r++)dp(e[r],t),\"vertical\"===n&&pp(e[r],Math.PI);return e},dp=function(e,t){var n=e.x,r=e.y,o=e.width,a=e.height,i=Ai(e.angle),l=0;(Qe(e)||qe(e))&&(l=2*e.points.reduce((function(e,t){return Math.max(e,t[0])}),0)-e.width),ao(e,{angle:Ai(0)});var s=Go(e,t.zoom),c=!0,u=0,d=s.nw;if(d||(c=!1,d=s.ne)){if(Qe(e)){for(var p=1;p<e.points.length;p++)ti.movePoint(e,p,[-e.points[p][0],e.points[p][1]]);ti.normalizePoints(e)}else u=c?e.x+2*o:e.x-2*o,Hi(e,!0,e,c?\"nw\":\"ne\",!1,u,d[1]),ao(e,{width:o,height:a});var f=Ai(2*Math.PI-i);f<0&&(f=Ai(f+2*Math.PI)),ao(e,{angle:f}),ao(e,{x:n+l,y:r}),gi(e)}else ao(e,{angle:i})},pp=function(e,t){var n=e.x,r=e.y,o=Ai(e.angle+t);o<0&&(o=Ai(2*Math.PI+o)),ao(e,{angle:o}),ao(e,{x:n,y:r})};function fp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function hp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?fp(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):fp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var mp=As({name:\"copy\",perform:function(e,t){return ad(qi(e),t),{commitToHistory:!1}},contextItemLabel:\"labels.copy\",keyTest:void 0}),gp=As({name:\"cut\",perform:function(e,t,n,r){return mp.perform(e,t,n,r),zs.perform(e,t,n,r)},contextItemLabel:\"labels.cut\",keyTest:function(e){return e[ln]&&e.code===$t}}),vp=As({name:\"copyAsSvg\",perform:function(){var e=(0,d.Z)(k().mark((function e(t,n,r,o){var a;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o.canvas){e.next=2;break}return e.abrupt(\"return\",{commitToHistory:!1});case 2:return a=ol(qi(t),n),e.prev=3,e.next=6,fd(\"clipboard-svg\",a.length?a:qi(t),n,n);case 6:return e.abrupt(\"return\",{commitToHistory:!1});case 9:return e.prev=9,e.t0=e.catch(3),console.error(e.t0),e.abrupt(\"return\",{appState:hp(hp({},n),{},{errorMessage:e.t0.message}),commitToHistory:!1});case 13:case\"end\":return e.stop()}}),e,null,[[3,9]])})));return function(t,n,r,o){return e.apply(this,arguments)}}(),contextItemLabel:\"labels.copyAsSvg\"}),bp=As({name:\"copyAsPng\",perform:function(){var e=(0,d.Z)(k().mark((function e(t,n,r,o){var a;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o.canvas){e.next=2;break}return e.abrupt(\"return\",{commitToHistory:!1});case 2:return a=ol(qi(t),n),e.prev=3,e.next=6,fd(\"clipboard\",a.length?a:qi(t),n,n);case 6:return e.abrupt(\"return\",{appState:hp(hp({},n),{},{toastMessage:L(\"toast.copyToClipboardAsPng\",{exportSelection:a.length?L(\"toast.selection\"):L(\"toast.canvas\"),exportColorScheme:n.exportWithDarkMode?L(\"buttons.darkMode\"):L(\"buttons.lightMode\")})}),commitToHistory:!1});case 9:return e.prev=9,e.t0=e.catch(3),console.error(e.t0),e.abrupt(\"return\",{appState:hp(hp({},n),{},{errorMessage:e.t0.message}),commitToHistory:!1});case 13:case\"end\":return e.stop()}}),e,null,[[3,9]])})));return function(t,n,r,o){return e.apply(this,arguments)}}(),contextItemLabel:\"labels.copyAsPng\",keyTest:function(e){return e.code===Kt&&e.altKey&&e.shiftKey}});function yp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function xp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?yp(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):yp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var wp=As({name:\"gridMode\",perform:function(e,t){return Tc(\"view\",\"mode\",\"grid\"),{appState:xp(xp({},t),{},{gridSize:this.checked(t)?null:c.k}),commitToHistory:!1}},checked:function(e){return null!==e.gridSize},contextItemLabel:\"labels.showGrid\",keyTest:function(e){return e[ln]&&e.code===Vt}});function kp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Sp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?kp(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):kp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ep=As({name:\"zenMode\",perform:function(e,t){return Tc(\"view\",\"mode\",\"zen\"),{appState:Sp(Sp({},t),{},{zenModeEnabled:!this.checked(t)}),commitToHistory:!1}},checked:function(e){return e.zenModeEnabled},contextItemLabel:\"buttons.zenMode\",keyTest:function(e){return!e[ln]&&e.altKey&&e.code===Qt}});function jp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Cp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?jp(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):jp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Op=As({name:\"stats\",perform:function(e,t){return{appState:Cp(Cp({},t),{},{showStats:!this.checked(t)}),commitToHistory:!1}},checked:function(e){return e.showStats},contextItemLabel:\"stats.title\",keyTest:function(e){return!e[ln]&&e.altKey&&e.code===Ut}});function Mp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ip(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Mp(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Mp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Pp=function(e,t,n){var r=!1;if(!(t.multiElement||t.resizingElement||t.editingElement||t.draggingElement)){var o=n();if(null===o)return{commitToHistory:r};var a=Yi(e),i=o.elements,l=Yi(i),s=e.filter((function(e){return!l.hasOwnProperty(e.id)})),c=i.map((function(e){return io(a[e.id]||e,e)})).concat(s.map((function(e){return io(e,{isDeleted:!0})})));return Mi(c,s),{elements:c,appState:Ip(Ip({},t),o.appState),commitToHistory:r,syncHistory:!0}}return{commitToHistory:r}},Tp=function(){function e(t,n,r,o){var a=this;p(this,e),this.actions={},this.renderAction=function(e,t){var n=a.app.props.UIOptions.canvasActions;if(a.actions[e]&&\"PanelComponent\"in a.actions[e]&&(!(e in n)||n[e])){var r=a.actions[e],o=r.PanelComponent;return(0,_.jsx)(o,{elements:a.getElementsIncludingDeleted(),appState:a.getAppState(),updateData:function(e){a.updater(r.perform(a.getElementsIncludingDeleted(),a.getAppState(),e,a.app))},appProps:a.app.props,data:t})}return null},this.updater=function(e){if(!e||!(\"then\"in e))return t(e);e.then((function(e){return t(e)}))},this.getAppState=n,this.getElementsIncludingDeleted=r,this.app=o}return h(e,[{key:\"registerAction\",value:function(e){this.actions[e.name]=e}},{key:\"registerAll\",value:function(e){var t=this;e.forEach((function(e){return t.registerAction(e)}))}},{key:\"handleKeyDown\",value:function(e){var t=this,n=this.app.props.UIOptions.canvasActions,r=Object.values(this.actions).sort((function(e,t){return(t.keyPriority||0)-(e.keyPriority||0)})).filter((function(r){return(!(r.name in n)||n[r.name])&&r.keyTest&&r.keyTest(e,t.getAppState(),t.getElementsIncludingDeleted())}));return 0!==r.length&&(!(this.getAppState().viewModeEnabled&&!Object.values(c.EH).includes(r[0].name))&&(e.preventDefault(),this.updater(r[0].perform(this.getElementsIncludingDeleted(),this.getAppState(),null,this.app)),!0))}},{key:\"executeAction\",value:function(e){this.updater(e.perform(this.getElementsIncludingDeleted(),this.getAppState(),null,this.app))}}]),e}(),Ap=function(){function e(t){var n=this;p(this,e),this.libraryCache=null,this.resetLibrary=(0,d.Z)(k().mark((function e(){var t,r;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,null===(t=(r=n.app.props).onLibraryChange)||void 0===t?void 0:t.call(r,[]);case 2:n.libraryCache=[];case 3:case\"end\":return e.stop()}}),e)}))),this.restoreLibraryItem=function(e){var t=qi(mu(e,null));return t.length?t:null},this.loadLibrary=function(){return new Promise(function(){var e=(0,d.Z)(k().mark((function e(t){var r,o;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!n.libraryCache){e.next=2;break}return e.abrupt(\"return\",t(JSON.parse(JSON.stringify(n.libraryCache))));case 2:if(e.prev=2,r=n.app.libraryItemsFromStorage){e.next=6;break}return e.abrupt(\"return\",t([]));case 6:o=r.reduce((function(e,t){return n.restoreLibraryItem(t)&&e.push(t),e}),[]),n.libraryCache=JSON.parse(JSON.stringify(o)),t(o),e.next=15;break;case 11:e.prev=11,e.t0=e.catch(2),console.error(e.t0),t([]);case 15:case\"end\":return e.stop()}}),e,null,[[2,11]])})));return function(t){return e.apply(this,arguments)}}())},this.saveLibrary=function(){var e=(0,d.Z)(k().mark((function e(t){var r,o,a,i;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.libraryCache,e.prev=1,i=JSON.stringify(t),n.libraryCache=JSON.parse(i),e.next=6,null===(o=(a=n.app.props).onLibraryChange)||void 0===o?void 0:o.call(a,t);case 6:e.next=12;break;case 8:throw e.prev=8,e.t0=e.catch(1),n.libraryCache=r,e.t0;case 12:case\"end\":return e.stop()}}),e,null,[[1,8]])})));return function(t){return e.apply(this,arguments)}}(),this.app=t}var t;return h(e,[{key:\"importLibrary\",value:(t=(0,d.Z)(k().mark((function e(t){var n,r,o,a,i=this;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Eu(t);case 2:if((n=e.sent)&&n.library){e.next=5;break}return e.abrupt(\"return\");case 5:return r=function(e,t){return!e.find((function(e){return e.length===t.length&&e.every((function(e,n){return e.id===t[n].id&&e.versionNonce===t[n].versionNonce}))}))},e.next=8,this.loadLibrary();case 8:return o=e.sent,a=n.library.reduce((function(e,t){var n=i.restoreLibraryItem(t);return n&&r(o,n)&&e.push(n),e}),[]),e.next=12,this.saveLibrary([].concat(F(o),F(a)));case 12:case\"end\":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})}]),e}(),Lp=function(e){var t=Array.from(e.values());return{x:Dp(t,(function(e){return e.x}))\/t.length,y:Dp(t,(function(e){return e.y}))\/t.length}},_p=function(e){var t=R(e,2),n=t[0],r=t[1];return Math.hypot(n.x-r.x,n.y-r.y)},Dp=function(e,t){return e.reduce((function(e,n){return e+t(n)}),0)};function zp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Bp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?zp(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):zp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Hp=function(e){return{selectedElementIds:e.selectedElementIds,selectedGroupIds:e.selectedGroupIds,viewBackgroundColor:e.viewBackgroundColor,editingLinearElement:e.editingLinearElement,editingGroupId:e.editingGroupId,name:e.name}},Np=function(){function e(){var t=this;p(this,e),this.elementCache=new Map,this.recording=!0,this.stateHistory=[],this.redoStack=[],this.lastEntry=null,this.generateEntry=function(e,n){return t.dehydrateHistoryEntry({appState:Hp(e),elements:n.reduce((function(t,n){if(Qe(n)&&e.multiElement&&e.multiElement.id===n.id){if(e.multiElement&&e.multiElement.id===n.id&&n.points.length<2)return t;t.push(Bp(Bp({},n),{},{points:n.lastCommittedPoint!==n.points[n.points.length-1]?n.points.slice(0,-1):n.points}))}else t.push(n);return t}),[])})}}return h(e,[{key:\"hydrateHistoryEntry\",value:function(e){var t=this,n=e.appState,r=e.elements;return{appState:JSON.parse(n),elements:r.map((function(e){var n,r=null===(n=t.elementCache.get(e.id))||void 0===n?void 0:n.get(e.versionNonce);if(!r)throw new Error(\"Element not found: \".concat(e.id,\":\").concat(e.versionNonce));return r}))}}},{key:\"dehydrateHistoryEntry\",value:function(e){var t=this,n=e.appState,r=e.elements;return{appState:JSON.stringify(n),elements:r.map((function(e){t.elementCache.has(e.id)||t.elementCache.set(e.id,new Map);var n=t.elementCache.get(e.id);return n.has(e.versionNonce)||n.set(e.versionNonce,_o(e)),{id:e.id,versionNonce:e.versionNonce}}))}}},{key:\"getSnapshotForTest\",value:function(){var e=this;return{recording:this.recording,stateHistory:this.stateHistory.map((function(t){return e.hydrateHistoryEntry(t)})),redoStack:this.redoStack.map((function(t){return e.hydrateHistoryEntry(t)}))}}},{key:\"clear\",value:function(){this.stateHistory.length=0,this.redoStack.length=0,this.lastEntry=null,this.elementCache.clear()}},{key:\"shouldCreateEntry\",value:function(e){var t,n=this.lastEntry;if(!n)return!0;if(e.elements.length!==n.elements.length)return!0;for(var r=e.elements.length-1;r>-1;r--){var o=e.elements[r],a=n.elements[r];if(!o||!a||o.id!==a.id||o.versionNonce!==a.versionNonce)return!0}for(t in e.appState){var i,l;if(\"editingLinearElement\"===t)if((null===(i=e.appState[t])||void 0===i?void 0:i.elementId)===(null===(l=n.appState[t])||void 0===l?void 0:l.elementId))continue;if(\"selectedElementIds\"!==t&&\"selectedGroupIds\"!==t&&e.appState[t]!==n.appState[t])return!0}return!1}},{key:\"pushEntry\",value:function(e,t){var n=this.generateEntry(e,t),r=this.hydrateHistoryEntry(n);if(r){if(!this.shouldCreateEntry(r))return;this.stateHistory.push(n),this.lastEntry=r,this.clearRedoStack()}}},{key:\"clearRedoStack\",value:function(){this.redoStack.splice(0,this.redoStack.length)}},{key:\"redoOnce\",value:function(){if(0===this.redoStack.length)return null;var e=this.redoStack.pop();return void 0!==e?(this.stateHistory.push(e),this.hydrateHistoryEntry(e)):null}},{key:\"undoOnce\",value:function(){if(1===this.stateHistory.length)return null;var e=this.stateHistory.pop(),t=this.stateHistory[this.stateHistory.length-1];return void 0!==e?(this.redoStack.push(e),this.hydrateHistoryEntry(t)):null}},{key:\"setCurrentState\",value:function(e,t){this.lastEntry=this.hydrateHistoryEntry(this.generateEntry(e,t))}},{key:\"resumeRecording\",value:function(){this.recording=!0}},{key:\"record\",value:function(e,t){this.recording&&(this.pushEntry(e,t),this.recording=!1)}}]),e}(),Rp=[{icon:(0,_.jsx)(\"svg\",{viewBox:\"0 0 320 512\",className:\"\",children:(0,_.jsx)(\"path\",{d:\"M302.189 329.126H196.105l55.831 135.993c3.889 9.428-.555 19.999-9.444 23.999l-49.165 21.427c-9.165 4-19.443-.571-23.332-9.714l-53.053-129.136-86.664 89.138C18.729 472.71 0 463.554 0 447.977V18.299C0 1.899 19.921-6.096 30.277 5.443l284.412 292.542c11.472 11.179 3.007 31.141-12.5 31.141z\"})}),value:\"selection\",key:jn},{icon:(0,_.jsx)(\"svg\",{viewBox:\"0 0 448 512\",children:(0,_.jsx)(\"path\",{d:\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z\"})}),value:\"rectangle\",key:kn},{icon:(0,_.jsx)(\"svg\",{viewBox:\"0 0 223.646 223.646\",children:(0,_.jsx)(\"path\",{d:\"M111.823 0L16.622 111.823 111.823 223.646 207.025 111.823z\"})}),value:\"diamond\",key:mn},{icon:(0,_.jsx)(\"svg\",{viewBox:\"0 0 512 512\",children:(0,_.jsx)(\"path\",{d:\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z\"})}),value:\"ellipse\",key:gn},{icon:(0,_.jsx)(\"svg\",{viewBox:\"0 0 448 512\",className:\"rtl-mirror\",children:(0,_.jsx)(\"path\",{d:\"M313.941 216H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h301.941v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.569 0-33.941l-86.059-86.059c-15.119-15.119-40.971-4.411-40.971 16.971V216z\"})}),value:\"arrow\",key:hn},{icon:(0,_.jsx)(\"svg\",{viewBox:\"0 0 6 6\",children:(0,_.jsx)(\"line\",{x1:\"0\",y1:\"3\",x2:\"6\",y2:\"3\",stroke:\"currentColor\",strokeLinecap:\"round\"})}),value:\"line\",key:[xn,bn]},{icon:(0,_.jsx)(\"svg\",{viewBox:\"0 0 512 512\",children:(0,_.jsx)(\"path\",{fill:\"currentColor\",d:\"M290.74 93.24l128.02 128.02-277.99 277.99-114.14 12.6C11.35 513.54-1.56 500.62.14 485.34l12.7-114.22 277.9-277.88zm207.2-19.06l-60.11-60.11c-18.75-18.75-49.16-18.75-67.91 0l-56.55 56.55 128.02 128.02 56.55-56.55c18.75-18.76 18.75-49.16 0-67.91z\"})}),value:\"freedraw\",key:Cn},{icon:(0,_.jsx)(\"svg\",{viewBox:\"0 0 448 512\",children:(0,_.jsx)(\"path\",{d:\"M432 416h-23.41L277.88 53.69A32 32 0 0 0 247.58 32h-47.16a32 32 0 0 0-30.3 21.69L39.41 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-19.58l23.3-64h152.56l23.3 64H304a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM176.85 272L224 142.51 271.15 272z\"})}),value:\"text\",key:En}],Fp=(n(1292),{cut:[Zn(\"CtrlOrCmd+X\")],copy:[Zn(\"CtrlOrCmd+C\")],paste:[Zn(\"CtrlOrCmd+V\")],copyStyles:[Zn(\"CtrlOrCmd+Alt+C\")],pasteStyles:[Zn(\"CtrlOrCmd+Alt+V\")],selectAll:[Zn(\"CtrlOrCmd+A\")],deleteSelectedElements:[Zn(\"Del\")],duplicateSelection:[Zn(\"CtrlOrCmd+D\"),Zn(\"Alt+\".concat(L(\"helpDialog.drag\")))],sendBackward:[Zn(\"CtrlOrCmd+[\")],bringForward:[Zn(\"CtrlOrCmd+]\")],sendToBack:[Zn(Pt?\"CtrlOrCmd+Alt+[\":\"CtrlOrCmd+Shift+[\")],bringToFront:[Zn(Pt?\"CtrlOrCmd+Alt+]\":\"CtrlOrCmd+Shift+]\")],copyAsPng:[Zn(\"Shift+Alt+C\")],copyAsSvg:[],group:[Zn(\"CtrlOrCmd+G\")],ungroup:[Zn(\"CtrlOrCmd+Shift+G\")],gridMode:[Zn(\"CtrlOrCmd+'\")],zenMode:[Zn(\"Alt+Z\")],stats:[Zn(\"Alt+\/\")],addToLibrary:[],flipHorizontal:[Zn(\"Shift+H\")],flipVertical:[Zn(\"Shift+V\")],viewMode:[Zn(\"Alt+R\")]}),Vp=function(e){var t=e.options,n=e.onCloseRequest,r=e.top,o=e.left,a=e.actionManager,i=e.appState;return(0,_.jsx)(oc,{onCloseRequest:n,top:r,left:o,fitInViewport:!0,children:(0,_.jsx)(\"ul\",{className:\"context-menu\",onContextMenu:function(e){return e.preventDefault()},children:t.map((function(e,t){var r;if(\"separator\"===e)return(0,_.jsx)(\"hr\",{className:\"context-menu-option-separator\"},t);var o,l,s=e.name,c=e.contextItemLabel?L(e.contextItemLabel):\"\";return(0,_.jsx)(\"li\",{\"data-testid\":s,onClick:n,children:(0,_.jsxs)(\"button\",{className:Ze(\"context-menu-option\",{dangerous:\"deleteSelectedElements\"===s,checkmark:null===(r=e.checked)||void 0===r?void 0:r.call(e,i)}),onClick:function(){return a.executeAction(e)},children:[(0,_.jsx)(\"div\",{className:\"context-menu-option__label\",children:c}),(0,_.jsx)(\"kbd\",{className:\"context-menu-option__shortcut\",children:s?(o=s,l=Fp[o],l&&l.length>0?l[0]:\"\"):\"\"})]})},t)}))})})},Gp=new WeakMap,Up=function(e){var t,n,r=Array.of();e.options.forEach((function(e){e&&r.push(e)})),r.length&&(0,It.render)((0,_.jsx)(Vp,{top:e.top,left:e.left,options:r,onCloseRequest:function(){return t=e.container,void((n=Gp.get(t))&&((0,It.unmountComponentAtNode)(n),n.remove(),Gp.delete(t)));var t,n},actionManager:e.actionManager,appState:e.appState}),(t=e.container,(n=Gp.get(t))||(n=document.createElement(\"div\"),t.querySelector(\".excalidraw-contextMenuContainer\").appendChild(n),Gp.set(t,n),n)))},Kp=function(e){var t=e.appState,n=e.elements,r=e.renderAction,o=e.elementType,a=al(qi(n),t),i=Boolean(t.editingElement),l=ah(),s=\"rtl\"===document.documentElement.getAttribute(\"dir\"),c=sl(o)||a.some((function(e){return sl(e.type)&&!tr(e.backgroundColor)})),u=sl(o)||a.some((function(e){return sl(e.type)}));return(0,_.jsxs)(\"div\",{className:\"panelColumn\",children:[r(\"changeStrokeColor\"),u&&r(\"changeBackgroundColor\"),c&&r(\"changeFillStyle\"),(cl(o)||a.some((function(e){return cl(e.type)})))&&r(\"changeStrokeWidth\"),(\"freedraw\"===o||a.some((function(e){return\"freedraw\"===e.type})))&&r(\"changeStrokeShape\"),(ul(o)||a.some((function(e){return ul(e.type)})))&&(0,_.jsxs)(_.Fragment,{children:[r(\"changeStrokeStyle\"),r(\"changeSloppiness\")]}),(dl(o)||a.some((function(e){return dl(e.type)})))&&(0,_.jsx)(_.Fragment,{children:r(\"changeSharpness\")}),(pl(o)||a.some((function(e){return pl(e.type)})))&&(0,_.jsxs)(_.Fragment,{children:[r(\"changeFontSize\"),r(\"changeFontFamily\"),r(\"changeTextAlign\")]}),(fl(o)||a.some((function(e){return fl(e.type)})))&&(0,_.jsx)(_.Fragment,{children:r(\"changeArrowhead\")}),r(\"changeOpacity\"),(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.layers\")}),(0,_.jsxs)(\"div\",{className:\"buttonList\",children:[r(\"sendToBack\"),r(\"sendBackward\"),r(\"bringToFront\"),r(\"bringForward\")]})]}),a.length>1&&(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.align\")}),(0,_.jsxs)(\"div\",{className:\"buttonList\",children:[s?(0,_.jsxs)(_.Fragment,{children:[r(\"alignRight\"),r(\"alignHorizontallyCentered\"),r(\"alignLeft\")]}):(0,_.jsxs)(_.Fragment,{children:[r(\"alignLeft\"),r(\"alignHorizontallyCentered\"),r(\"alignRight\")]}),a.length>2&&r(\"distributeHorizontally\"),(0,_.jsxs)(\"div\",{className:\"iconRow\",children:[r(\"alignTop\"),r(\"alignVerticallyCentered\"),r(\"alignBottom\"),a.length>2&&r(\"distributeVertically\")]})]})]}),!l&&!i&&a.length>0&&(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.actions\")}),(0,_.jsxs)(\"div\",{className:\"buttonList\",children:[r(\"duplicateSelection\"),r(\"deleteSelectedElements\"),r(\"group\"),r(\"ungroup\")]})]})]})},Wp=function(e){var t=e.canvas,n=e.elementType,r=e.setAppState;return(0,_.jsx)(_.Fragment,{children:Rp.map((function(e,o){var a=e.value,i=e.icon,l=e.key,s=L(\"toolBar.\".concat(a)),c=\"string\"==typeof l?l:l[0],u=\"\".concat(zn(c),\" \").concat(L(\"helpDialog.or\"),\" \").concat(o+1);return(0,_.jsx)(vl,{className:\"Shape\",type:\"radio\",icon:i,checked:n===a,name:\"editor-current-shape\",title:\"\".concat(zn(s),\" \u2014 \").concat(u),keyBindingLabel:\"\".concat(o+1),\"aria-label\":zn(s),\"aria-keyshortcuts\":u,\"data-testid\":a,onChange:function(){r({elementType:a,multiElement:null,selectedElementIds:{}}),Kn(t,a),r({})}},a)}))})},Zp=function(e){var t=e.renderAction;e.zoom;return(0,_.jsx)(wd,{gap:1,children:(0,_.jsxs)(xd,{gap:1,align:\"center\",children:[t(\"zoomOut\"),t(\"zoomIn\"),t(\"resetZoom\")]})})},Yp=function(e){e.appState,e.setAppState;var t=e.actionManager,n=e.showThemeBtn;return(0,_.jsxs)(\"div\",{style:{display:\"flex\"},children:[t.renderAction(\"changeViewBackgroundColor\"),n&&t.renderAction(\"toggleTheme\")]})},Xp=(n(778),function(e){var t=e.isCollaborating,n=e.collaboratorCount,r=e.onClick;return(0,_.jsx)(_.Fragment,{children:(0,_.jsx)(vl,{className:Ze(\"CollabButton\",{\"is-collaborating\":t}),onClick:r,icon:Ql,type:\"button\",title:L(\"labels.liveCollaboration\"),\"aria-label\":L(\"labels.liveCollaboration\"),showAriaLabel:ah(),children:n>0&&(0,_.jsx)(\"div\",{className:\"CollabButton-collaborators\",children:n})})})});n(196),n(1106);function qp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function $p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?qp(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):qp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Qp=s().forwardRef((function(e,t){var n=e.children,r=e.padding,o=e.className,a=e.style;return(0,_.jsx)(\"div\",{className:Ze(\"Island\",o),style:$p({\"--padding\":r},a),ref:t,children:n})})),Jp=(n(8328),function(e){var t=e.theme,n=ef(void 0===t?\"light\":t);if(!n)return null;return(0,It.createPortal)((0,_.jsxs)(\"div\",{className:Ze(\"Modal\",e.className),role:\"dialog\",\"aria-modal\":\"true\",onKeyDown:function(t){t.key===un&&(t.nativeEvent.stopImmediatePropagation(),t.stopPropagation(),e.onCloseRequest())},\"aria-labelledby\":e.labelledBy,children:[(0,_.jsx)(\"div\",{className:\"Modal__background\",onClick:e.onCloseRequest}),(0,_.jsx)(\"div\",{className:\"Modal__content\",style:{\"--max-width\":\"\".concat(e.maxWidth,\"px\")},tabIndex:0,children:e.children})]}),n)}),ef=function(e){var t=R((0,l.useState)(null),2),n=t[0],r=t[1],o=ah(),a=(0,l.useRef)(o);a.current=o;var i=lh().container;return(0,l.useLayoutEffect)((function(){n&&n.classList.toggle(\"excalidraw--mobile\",o)}),[n,o]),(0,l.useLayoutEffect)((function(){var t=!(null==i||!i.classList.contains(\"theme--dark\"))||\"dark\"===e,n=document.createElement(\"div\");return n.classList.add(\"excalidraw\",\"excalidraw-modal-container\"),n.classList.toggle(\"excalidraw--mobile\",a.current),t&&(n.classList.add(\"theme--dark\"),n.classList.add(\"theme--dark-background-none\")),document.body.appendChild(n),r(n),function(){document.body.removeChild(n)}}),[i,e]),n},tf=function(e){var t=function(){var e=R((0,l.useState)(null),2),t=e[0],n=e[1];return[t,(0,l.useCallback)((function(e){return n(e)}),[])]}(),n=R(t,2),r=n[0],o=n[1],a=R((0,l.useState)(document.activeElement),1)[0],i=lh().id;(0,l.useEffect)((function(){if(r){var t=s(r);t.length>0&&!1!==e.autofocus&&(t[1]||t[0]).focus();var n=function(e){if(e.key===fn){var t=s(r),n=document.activeElement,o=t.findIndex((function(e){return e===n}));0===o&&e.shiftKey?(t[t.length-1].focus(),e.preventDefault()):o!==t.length-1||e.shiftKey||(t[0].focus(),e.preventDefault())}};return r.addEventListener(\"keydown\",n),function(){return r.removeEventListener(\"keydown\",n)}}}),[r,e.autofocus]);var s=function(e){var t=e.querySelectorAll(\"button, a, input, select, textarea, div[tabindex]\");return t?Array.from(t):[]},c=function(){a.focus(),e.onCloseRequest()};return(0,_.jsx)(Jp,{className:Ze(\"Dialog\",e.className),labelledBy:\"dialog-title\",maxWidth:e.small?550:800,onCloseRequest:c,theme:e.theme,children:(0,_.jsxs)(Qp,{ref:o,children:[(0,_.jsxs)(\"h2\",{id:\"\".concat(i,\"-dialog-title\"),className:\"Dialog__title\",children:[(0,_.jsx)(\"span\",{className:\"Dialog__titleContent\",children:e.title}),(0,_.jsx)(\"button\",{className:\"Modal__close\",onClick:c,\"aria-label\":L(\"buttons.close\"),children:ah()?es:Jl})]}),(0,_.jsx)(\"div\",{className:\"Dialog__content\",children:e.children})]})})},nf=function(e){var t=e.message,n=e.onClose,r=R((0,l.useState)(!!t),2),o=r[0],a=r[1],i=lh().container,c=s().useCallback((function(){a(!1),n&&n(),null==i||i.focus()}),[n,i]);return(0,_.jsx)(_.Fragment,{children:o&&(0,_.jsx)(tf,{small:!0,onCloseRequest:c,title:L(\"errorDialog.title\"),children:(0,_.jsx)(\"div\",{style:{whiteSpace:\"pre-wrap\"},children:t})})})},rf=(n(2205),\"filter\"in document.createElement(\"canvas\").getContext(\"2d\")),of=function(){return(0,_.jsxs)(\"div\",{children:[(0,_.jsx)(\"h3\",{children:L(\"canvasError.cannotShowPreview\")}),(0,_.jsx)(\"p\",{children:(0,_.jsx)(\"span\",{children:L(\"canvasError.canvasTooBig\")})}),(0,_.jsxs)(\"em\",{children:[\"(\",L(\"canvasError.canvasTooBigTip\"),\")\"]})]})},af=function(e,t){(0,It.unmountComponentAtNode)(t),t.innerHTML=\"\",e instanceof HTMLCanvasElement?t.appendChild(e):(0,It.render)((0,_.jsx)(of,{}),t)},lf=function(e){var t,n=e.children,r=e.title,o=e.onClick,a=e.color,i=e.shade,l=void 0===i?6:i;return(0,_.jsx)(\"button\",{className:\"ExportDialog-imageExportButton\",style:(t={},V(t,\"--button-color\",Ct[a][l]),V(t,\"--button-color-darker\",Ct[a][l+1]),V(t,\"--button-color-darkest\",Ct[a][l+2]),t),title:r,\"aria-label\":r,onClick:o,children:n})},sf=function(e){var t=e.elements,n=e.appState,r=e.exportPadding,o=void 0===r?c.qy:r,a=e.actionManager,i=e.onExportToPng,s=e.onExportToSvg,u=e.onExportToClipboard,d=rl(t,n),p=R((0,l.useState)(d),2),f=p[0],h=p[1],m=(0,l.useRef)(null),g=n.exportBackground,v=n.viewBackgroundColor,b=f?ol(t,n):t;return(0,l.useEffect)((function(){h(d)}),[d]),(0,l.useEffect)((function(){var e=m.current;if(e)try{var t=_u(b,n,{exportBackground:g,viewBackgroundColor:v,exportPadding:o});ju(t).then((function(){af(t,e)})).catch((function(t){console.error(t),af(new ru,e)}))}catch(t){console.error(t),af(new ru,e)}}),[n,b,g,o,v]),(0,_.jsxs)(\"div\",{className:\"ExportDialog\",children:[(0,_.jsx)(\"div\",{className:\"ExportDialog__preview\",ref:m}),rf&&a.renderAction(\"exportWithDarkMode\"),(0,_.jsx)(\"div\",{style:{display:\"grid\",gridTemplateColumns:\"1fr\"},children:(0,_.jsxs)(\"div\",{style:{display:\"grid\",gridTemplateColumns:\"repeat(auto-fit, minmax(190px, 1fr))\",overflow:\"hidden\"},children:[a.renderAction(\"changeExportBackground\"),d&&(0,_.jsx)(vd,{checked:f,onChange:function(e){return h(e)},children:L(\"labels.onlySelected\")}),a.renderAction(\"changeExportEmbedScene\")]})}),(0,_.jsxs)(\"div\",{style:{display:\"flex\",alignItems:\"center\",marginTop:\".6em\"},children:[(0,_.jsx)(xd,{gap:2,children:a.renderAction(\"changeExportScale\")}),(0,_.jsx)(\"p\",{style:{marginLeft:\"1em\",userSelect:\"none\"},children:\"Scale\"})]}),(0,_.jsx)(\"div\",{style:{display:\"flex\",alignItems:\"center\",justifyContent:\"center\",margin:\".6em 0\"},children:!qc&&a.renderAction(\"changeProjectName\")}),(0,_.jsxs)(xd,{gap:2,justifyContent:\"center\",style:{margin:\"2em 0\"},children:[(0,_.jsx)(lf,{color:\"indigo\",title:L(\"buttons.exportToPng\"),\"aria-label\":L(\"buttons.exportToPng\"),onClick:function(){return i(b)},children:\"PNG\"}),(0,_.jsx)(lf,{color:\"red\",title:L(\"buttons.exportToSvg\"),\"aria-label\":L(\"buttons.exportToSvg\"),onClick:function(){return s(b)},children:\"SVG\"}),od&&(0,_.jsx)(lf,{title:L(\"buttons.copyPngToClipboard\"),onClick:function(){return u(b)},color:\"gray\",shade:7,children:Ol})]})]})},cf=function(e){var t=e.elements,n=e.appState,r=e.exportPadding,o=void 0===r?c.qy:r,a=e.actionManager,i=e.onExportToPng,u=e.onExportToSvg,d=e.onExportToClipboard,p=R((0,l.useState)(!1),2),f=p[0],h=p[1],m=s().useCallback((function(){h(!1)}),[]);return(0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(vl,{onClick:function(){h(!0)},\"data-testid\":\"image-export-button\",icon:Tl,type:\"button\",\"aria-label\":L(\"buttons.exportImage\"),showAriaLabel:ah(),title:L(\"buttons.exportImage\")}),f&&(0,_.jsx)(tf,{onCloseRequest:m,title:L(\"buttons.exportImage\"),children:(0,_.jsx)(sf,{elements:t,appState:n,exportPadding:o,actionManager:a,onExportToPng:i,onExportToSvg:u,onExportToClipboard:d,onCloseRequest:m})})]})},uf=(n(1310),function(e){var t=e.children,n=e.side,r=e.className;return(0,_.jsx)(\"div\",{className:Ze(\"FixedSideContainer\",\"FixedSideContainer_side_\".concat(n),r),children:t})}),df=(n(7096),function(e){var t=function(e){var t=e.appState,n=e.elements,r=t.elementType,o=t.isResizing,a=t.isRotating,i=t.lastPointerDownWith,l=null!==t.multiElement;if(\"arrow\"===r||\"line\"===r)return L(l?\"hints.linearElementMulti\":\"hints.linearElement\");if(\"freedraw\"===r)return L(\"hints.freeDraw\");if(\"text\"===r)return L(\"hints.text\");var s=ol(n,t);if(o&&\"mouse\"===i&&1===s.length){var c=s[0];return Qe(c)&&2===c.points.length?L(\"hints.lockAngle\"):L(\"hints.resize\")}return a&&\"mouse\"===i?L(\"hints.rotate\"):1===s.length&&Qe(s[0])?t.editingLinearElement?t.editingLinearElement.activePointIndex?L(\"hints.lineEditor_pointSelected\"):L(\"hints.lineEditor_nothingSelected\"):L(\"hints.lineEditor_info\"):1===s.length&&Xe(s[0])?L(\"hints.text_selected\"):t.editingElement&&Xe(t.editingElement)?L(\"hints.text_editing\"):null}({appState:e.appState,elements:e.elements});return t?(t=Zn(t),(0,_.jsx)(\"div\",{className:\"HintViewer\",children:(0,_.jsx)(\"span\",{children:t})})):null});n(3336),n(694);function pf(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return ff(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return ff(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function ff(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var hf=(0,_.jsx)(\"svg\",{viewBox:\"0 0 1792 1792\",children:(0,_.jsx)(\"path\",{fill:\"currentColor\",d:\"M1600 736v192q0 40-28 68t-68 28h-416v416q0 40-28 68t-68 28h-192q-40 0-68-28t-28-68v-416h-416q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h416v-416q0-40 28-68t68-28h192q40 0 68 28t28 68v416h416q40 0 68 28t28 68z\"})}),mf=function(e){var t=e.elements,n=e.pendingElements,r=e.onRemoveFromLibrary,o=e.onClick,a=(0,l.useRef)(null);(0,l.useEffect)((function(){var e=t||n;if(e){var r,o=a.current;return(0,d.Z)(k().mark((function t(){var n,i,l;return k().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Du(e,{exportBackground:!1,viewBackgroundColor:Ct.white});case 2:r=t.sent,n=pf(a.current.children),t.prev=4,n.s();case 6:if((i=n.n()).done){t.next=13;break}if(\"svg\"===(l=i.value).tagName){t.next=10;break}return t.abrupt(\"continue\",11);case 10:o.removeChild(l);case 11:t.next=6;break;case 13:t.next=18;break;case 15:t.prev=15,t.t0=t.catch(4),n.e(t.t0);case 18:return t.prev=18,n.f(),t.finish(18);case 21:o.appendChild(r);case 22:case\"end\":return t.stop()}}),t,null,[[4,15,18,21]])})))(),function(){r&&o.removeChild(r)}}}),[t,n]);var i=R((0,l.useState)(!1),2),s=i[0],u=i[1],p=ah(),f=(s||p)&&n&&(0,_.jsx)(\"div\",{className:\"library-unit__adder\",children:hf});return(0,_.jsxs)(\"div\",{className:Ze(\"library-unit\",{\"library-unit__active\":t||n}),onMouseEnter:function(){return u(!0)},onMouseLeave:function(){return u(!1)},children:[(0,_.jsx)(\"div\",{className:Ze(\"library-unit__dragger\",{\"library-unit__pulse\":!!n}),ref:a,draggable:!!t,onClick:t||n?o:void 0,onDragStart:function(e){u(!1),e.dataTransfer.setData(c.LO.excalidrawlib,JSON.stringify(t))}}),f,t&&(s||p)&&(0,_.jsx)(\"button\",{className:\"library-unit__removeFromLibrary\",\"aria-label\":L(\"labels.removeFromLibrary\"),onClick:r,children:Jl})]})},gf={CHECKED:(0,_.jsx)(\"svg\",{width:\"1792\",height:\"1792\",viewBox:\"0 0 1792 1792\",xmlns:\"http:\/\/www.w3.org\/2000\/svg\",children:(0,_.jsx)(\"path\",{d:\"M640 768h512v-192q0-106-75-181t-181-75-181 75-75 181v192zm832 96v576q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-576q0-40 28-68t68-28h32v-192q0-184 132-316t316-132 316 132 132 316v192h32q40 0 68 28t28 68z\"})}),UNCHECKED:(0,_.jsx)(\"svg\",{width:\"1792\",height:\"1792\",viewBox:\"0 0 1792 1792\",xmlns:\"http:\/\/www.w3.org\/2000\/svg\",className:\"unlocked-icon rtl-mirror\",children:(0,_.jsx)(\"path\",{d:\"M1728 576v256q0 26-19 45t-45 19h-64q-26 0-45-19t-19-45v-256q0-106-75-181t-181-75-181 75-75 181v192h96q40 0 68 28t28 68v576q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-576q0-40 28-68t68-28h672v-192q0-185 131.5-316.5t316.5-131.5 316.5 131.5 131.5 316.5z\"})})},vf=function(e){return(0,_.jsxs)(\"label\",{className:Ze(\"ToolIcon ToolIcon__lock ToolIcon_type_floating zen-mode-visibility\",\"ToolIcon_size_\".concat(\"medium\"),{\"zen-mode-visibility--hidden\":e.zenModeEnabled}),title:\"\".concat(e.title,\" \u2014 Q\"),children:[(0,_.jsx)(\"input\",{className:\"ToolIcon_type_checkbox\",type:\"checkbox\",name:e.name,onChange:e.onChange,checked:e.checked,\"aria-label\":e.title}),(0,_.jsx)(\"div\",{className:\"ToolIcon__icon\",children:e.checked?gf.CHECKED:gf.UNCHECKED})]})},bf=[\"heading\",\"children\"];function yf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function xf(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?yf(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):yf(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var wf=function(e){var t=e.heading,n=e.children,r=po(e,bf),o=lh().id,a=(0,_.jsx)(\"h2\",{className:\"visually-hidden\",id:\"\".concat(o,\"-\").concat(t,\"-title\"),children:L(\"headings.\".concat(t))});return(0,_.jsx)(\"section\",xf(xf({},r),{},{\"aria-labelledby\":\"\".concat(o,\"-\").concat(t,\"-title\"),children:\"function\"==typeof n?n(a):(0,_.jsxs)(_.Fragment,{children:[a,n]})}))},kf=(n(580),function(e){var t=e.children,n=e.className,r=e.mobile;return(0,_.jsx)(\"div\",{className:Ze(\"UserList\",n,{UserList_mobile:r}),children:t})}),Sf=(0,_.jsx)(\"svg\",{viewBox:\"0 0 576 512\",children:(0,_.jsx)(\"path\",{fill:\"currentColor\",d:\"M542.22 32.05c-54.8 3.11-163.72 14.43-230.96 55.59-4.64 2.84-7.27 7.89-7.27 13.17v363.87c0 11.55 12.63 18.85 23.28 13.49 69.18-34.82 169.23-44.32 218.7-46.92 16.89-.89 30.02-14.43 30.02-30.66V62.75c.01-17.71-15.35-31.74-33.77-30.7zM264.73 87.64C197.5 46.48 88.58 35.17 33.78 32.05 15.36 31.01 0 45.04 0 62.75V400.6c0 16.24 13.13 29.78 30.02 30.66 49.49 2.6 149.59 12.11 218.77 46.95 10.62 5.35 23.21-1.94 23.21-13.46V100.63c0-5.29-2.62-10.14-7.27-12.99z\"})}),Ef=function(e){var t=e.appState,n=e.setAppState;return(0,_.jsxs)(\"label\",{className:Ze(\"ToolIcon ToolIcon_type_floating ToolIcon__library zen-mode-visibility\",\"ToolIcon_size_medium\",{\"zen-mode-visibility--hidden\":t.zenModeEnabled}),title:\"\".concat(zn(L(\"toolBar.library\")),\" \u2014 9\"),style:{marginInlineStart:\"var(--space-factor)\"},children:[(0,_.jsx)(\"input\",{className:\"ToolIcon_type_checkbox\",type:\"checkbox\",name:\"editor-library\",onChange:function(e){n({isLibraryOpen:e.target.checked})},checked:t.isLibraryOpen,\"aria-label\":zn(L(\"toolBar.library\")),\"aria-keyshortcuts\":\"9\"}),(0,_.jsx)(\"div\",{className:\"ToolIcon__icon\",children:Sf})]})};function jf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Cf=function(e){var t=e.appState,n=e.elements,r=e.libraryMenu,o=e.actionManager,a=e.renderJSONExportDialog,i=e.renderImageExportDialog,l=e.setAppState,c=e.onCollabButtonClick,u=e.onLockToggle,d=e.canvas,p=e.isCollaborating,f=e.renderCustomFooter,h=e.viewModeEnabled,m=e.showThemeBtn;return(0,_.jsxs)(_.Fragment,{children:[!h&&(0,_.jsxs)(uf,{side:\"top\",className:\"App-top-bar\",children:[(0,_.jsx)(wf,{heading:\"shapes\",children:function(e){return(0,_.jsxs)(wd,{gap:4,align:\"center\",children:[(0,_.jsxs)(xd,{gap:1,children:[(0,_.jsxs)(Qp,{padding:1,children:[e,(0,_.jsx)(xd,{gap:1,children:(0,_.jsx)(Wp,{canvas:d,elementType:t.elementType,setAppState:l})})]}),(0,_.jsx)(vf,{checked:t.elementLocked,onChange:u,title:L(\"toolBar.lock\")}),(0,_.jsx)(Ef,{appState:t,setAppState:l})]}),r]})}}),(0,_.jsx)(df,{appState:t,elements:n})]}),(0,_.jsx)(\"div\",{className:\"App-bottom-bar\",style:{marginBottom:14,marginLeft:14,marginRight:14},children:(0,_.jsxs)(Qp,{padding:0,children:[\"canvas\"===t.openMenu?(0,_.jsx)(wf,{className:\"App-mobile-menu\",heading:\"canvasActions\",children:(0,_.jsx)(\"div\",{className:\"panelColumn\",children:(0,_.jsxs)(wd,{gap:4,children:[h?(0,_.jsxs)(_.Fragment,{children:[a(),i()]}):(0,_.jsxs)(_.Fragment,{children:[o.renderAction(\"clearCanvas\"),o.renderAction(\"loadScene\"),a(),i(),c&&(0,_.jsx)(Xp,{isCollaborating:p,collaboratorCount:t.collaborators.size,onClick:c}),(0,_.jsx)(Yp,{actionManager:o,appState:t,setAppState:l,showThemeBtn:m})]}),null==f?void 0:f(!0,t),t.collaborators.size>0&&(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.collaborators\")}),(0,_.jsx)(kf,{mobile:!0,children:Array.from(t.collaborators).filter((function(e){var t=R(e,2),n=(t[0],t[1]);return 0!==Object.keys(n).length})).map((function(e){var t=R(e,2),n=t[0];t[1];return(0,_.jsx)(s().Fragment,{children:o.renderAction(\"goToCollaborator\",{id:n})},n)}))})]})]})})}):\"shape\"===t.openMenu&&!h&&Ki(t,n)?(0,_.jsx)(wf,{className:\"App-mobile-menu\",heading:\"selectedShapeActions\",children:(0,_.jsx)(Kp,{appState:t,elements:n,renderAction:o.renderAction,elementType:t.elementType})}):null,(0,_.jsxs)(\"footer\",{className:\"App-toolbar\",children:[h?(0,_.jsx)(\"div\",{className:\"App-toolbar-content\",children:o.renderAction(\"toggleCanvasMenu\")}):(0,_.jsxs)(\"div\",{className:\"App-toolbar-content\",children:[o.renderAction(\"toggleCanvasMenu\"),o.renderAction(\"toggleEditMenu\"),o.renderAction(\"undo\"),o.renderAction(\"redo\"),o.renderAction(t.multiElement?\"finalize\":\"duplicateSelection\"),o.renderAction(\"deleteSelectedElements\")]}),t.scrolledOutside&&!t.openMenu&&(0,_.jsx)(\"button\",{className:\"scroll-back-to-content\",onClick:function(){l(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?jf(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):jf(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},ll(n,t)))},children:L(\"buttons.scrollBackToContent\")})]})]})})]})},Of=(n(8051),function(e){var t=(0,l.useRef)(null),n=R((0,l.useState)(null),2),r=n[0],o=n[1];return(0,l.useLayoutEffect)((function(){if(e.spreadsheet){var n,r=Ju(e.chartType,e.spreadsheet,0,0);o(r);var a=t.current;return(0,d.Z)(k().mark((function t(){return k().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Du(r,{exportBackground:!1,viewBackgroundColor:Ct.white});case 2:n=t.sent,a.appendChild(n),e.selected&&a.parentNode.focus();case 5:case\"end\":return t.stop()}}),t)})))(),function(){a.removeChild(n)}}}),[e.spreadsheet,e.chartType,e.selected]),(0,_.jsx)(\"button\",{className:\"ChartPreview\",onClick:function(){r&&e.onClick(e.chartType,r)},children:(0,_.jsx)(\"div\",{ref:t})})}),Mf=function(e){var t=e.setAppState,n=e.appState,r=e.onClose,o=e.onInsertChart,a=s().useCallback((function(){r&&r()}),[r]),i=function(e,n){o(n),Tc(\"magic\",\"chart\",e),t({currentChartType:e,pasteDialog:{shown:!1,data:null}})};return(0,_.jsx)(tf,{small:!0,onCloseRequest:a,title:L(\"labels.pasteCharts\"),className:\"PasteChartDialog\",autofocus:!1,children:(0,_.jsxs)(\"div\",{className:\"container\",children:[(0,_.jsx)(Of,{chartType:\"bar\",spreadsheet:n.pasteDialog.data,selected:\"bar\"===n.currentChartType,onClick:i}),(0,_.jsx)(Of,{chartType:\"line\",spreadsheet:n.pasteDialog.data,selected:\"line\"===n.currentChartType,onClick:i})]})})};n(3922);function If(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Pf=function(){return(0,_.jsxs)(\"div\",{className:\"HelpDialog--header\",children:[(0,_.jsx)(\"a\",{className:\"HelpDialog--btn\",href:\"https:\/\/github.com\/excalidraw\/excalidraw#documentation\",target:\"_blank\",rel:\"noopener noreferrer\",children:L(\"helpDialog.documentation\")}),(0,_.jsx)(\"a\",{className:\"HelpDialog--btn\",href:\"https:\/\/blog.excalidraw.com\",target:\"_blank\",rel:\"noopener noreferrer\",children:L(\"helpDialog.blog\")}),(0,_.jsx)(\"a\",{className:\"HelpDialog--btn\",href:\"https:\/\/github.com\/excalidraw\/excalidraw\/issues\",target:\"_blank\",rel:\"noopener noreferrer\",children:L(\"helpDialog.github\")})]})},Tf=function(e){return(0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"h3\",{children:e.title}),e.children]})},Af=function(e){return(0,_.jsx)(\"div\",{style:{display:\"flex\",flexDirection:\"row\",flexWrap:\"wrap\",justifyContent:\"space-between\"},children:e.children})},Lf=function(e){return(0,_.jsx)(\"div\",{style:{width:\"49%\"},children:e.children})},_f=function(e){return(0,_.jsxs)(\"div\",{className:\"HelpDialog--island\",children:[(0,_.jsx)(\"h3\",{className:\"HelpDialog--island-title\",children:e.caption}),e.children]})},Df=function(e){return(0,_.jsx)(\"div\",{className:\"HelpDialog--shortcut\",children:(0,_.jsxs)(\"div\",{style:{display:\"flex\",margin:\"0\",padding:\"4px 8px\",alignItems:\"center\"},children:[(0,_.jsx)(\"div\",{style:{lineHeight:1.4},children:e.label}),(0,_.jsx)(\"div\",{style:{display:\"flex\",flex:\"0 0 auto\",justifyContent:\"flex-end\",marginInlineStart:\"auto\",minWidth:\"30%\"},children:e.shortcuts.map((function(t,n){return(0,_.jsxs)(s().Fragment,{children:[(0,_.jsx)(zf,{children:t}),e.isOr&&n!==e.shortcuts.length-1&&L(\"helpDialog.or\")]},n)}))})]})})};Df.defaultProps={isOr:!0};var zf=function(e){return(0,_.jsx)(\"kbd\",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?If(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):If(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({className:\"HelpDialog--key\"},e))},Bf=function(e){var t=e.onClose,n=s().useCallback((function(){t&&t()}),[t]);return(0,_.jsx)(_.Fragment,{children:(0,_.jsxs)(tf,{onCloseRequest:n,title:L(\"helpDialog.title\"),className:\"HelpDialog\",children:[(0,_.jsx)(Pf,{}),(0,_.jsx)(Tf,{title:L(\"helpDialog.shortcuts\"),children:(0,_.jsxs)(Af,{children:[(0,_.jsxs)(Lf,{children:[(0,_.jsxs)(_f,{caption:L(\"helpDialog.shapes\"),children:[(0,_.jsx)(Df,{label:L(\"toolBar.selection\"),shortcuts:[\"V\",\"1\"]}),(0,_.jsx)(Df,{label:L(\"toolBar.rectangle\"),shortcuts:[\"R\",\"2\"]}),(0,_.jsx)(Df,{label:L(\"toolBar.diamond\"),shortcuts:[\"D\",\"3\"]}),(0,_.jsx)(Df,{label:L(\"toolBar.ellipse\"),shortcuts:[\"E\",\"4\"]}),(0,_.jsx)(Df,{label:L(\"toolBar.arrow\"),shortcuts:[\"A\",\"5\"]}),(0,_.jsx)(Df,{label:L(\"toolBar.line\"),shortcuts:[\"P\",\"6\"]}),(0,_.jsx)(Df,{label:L(\"toolBar.freedraw\"),shortcuts:[\"Shift+P\",\"7\"]}),(0,_.jsx)(Df,{label:L(\"toolBar.text\"),shortcuts:[\"T\",\"8\"]}),(0,_.jsx)(Df,{label:L(\"helpDialog.editSelectedShape\"),shortcuts:[Zn(\"Enter\"),L(\"helpDialog.doubleClick\")]}),(0,_.jsx)(Df,{label:L(\"helpDialog.textNewLine\"),shortcuts:[Zn(\"Enter\"),Zn(\"Shift+Enter\")]}),(0,_.jsx)(Df,{label:L(\"helpDialog.textFinish\"),shortcuts:[Zn(\"Esc\"),Zn(\"CtrlOrCmd+Enter\")]}),(0,_.jsx)(Df,{label:L(\"helpDialog.curvedArrow\"),shortcuts:[\"A\",L(\"helpDialog.click\"),L(\"helpDialog.click\"),L(\"helpDialog.click\")],isOr:!1}),(0,_.jsx)(Df,{label:L(\"helpDialog.curvedLine\"),shortcuts:[\"L\",L(\"helpDialog.click\"),L(\"helpDialog.click\"),L(\"helpDialog.click\")],isOr:!1}),(0,_.jsx)(Df,{label:L(\"toolBar.lock\"),shortcuts:[\"Q\"]}),(0,_.jsx)(Df,{label:L(\"helpDialog.preventBinding\"),shortcuts:[Zn(\"CtrlOrCmd\")]})]}),(0,_.jsxs)(_f,{caption:L(\"helpDialog.view\"),children:[(0,_.jsx)(Df,{label:L(\"buttons.zoomIn\"),shortcuts:[Zn(\"CtrlOrCmd++\")]}),(0,_.jsx)(Df,{label:L(\"buttons.zoomOut\"),shortcuts:[Zn(\"CtrlOrCmd+-\")]}),(0,_.jsx)(Df,{label:L(\"buttons.resetZoom\"),shortcuts:[Zn(\"CtrlOrCmd+0\")]}),(0,_.jsx)(Df,{label:L(\"helpDialog.zoomToFit\"),shortcuts:[\"Shift+1\"]}),(0,_.jsx)(Df,{label:L(\"helpDialog.zoomToSelection\"),shortcuts:[\"Shift+2\"]}),(0,_.jsx)(Df,{label:L(\"buttons.fullScreen\"),shortcuts:[\"F\"]}),(0,_.jsx)(Df,{label:L(\"buttons.zenMode\"),shortcuts:[Zn(\"Alt+Z\")]}),(0,_.jsx)(Df,{label:L(\"labels.showGrid\"),shortcuts:[Zn(\"CtrlOrCmd+'\")]}),(0,_.jsx)(Df,{label:L(\"labels.viewMode\"),shortcuts:[Zn(\"Alt+R\")]}),(0,_.jsx)(Df,{label:L(\"labels.toggleTheme\"),shortcuts:[Zn(\"Alt+Shift+D\")]}),(0,_.jsx)(Df,{label:L(\"stats.title\"),shortcuts:[Zn(\"Alt+\/\")]})]})]}),(0,_.jsx)(Lf,{children:(0,_.jsxs)(_f,{caption:L(\"helpDialog.editor\"),children:[(0,_.jsx)(Df,{label:L(\"labels.selectAll\"),shortcuts:[Zn(\"CtrlOrCmd+A\")]}),(0,_.jsx)(Df,{label:L(\"labels.multiSelect\"),shortcuts:[Zn(\"Shift+\".concat(L(\"helpDialog.click\")))]}),(0,_.jsx)(Df,{label:L(\"labels.moveCanvas\"),shortcuts:[Zn(\"Space+\".concat(L(\"helpDialog.drag\"))),Zn(\"Wheel+\".concat(L(\"helpDialog.drag\")))],isOr:!0}),(0,_.jsx)(Df,{label:L(\"labels.cut\"),shortcuts:[Zn(\"CtrlOrCmd+X\")]}),(0,_.jsx)(Df,{label:L(\"labels.copy\"),shortcuts:[Zn(\"CtrlOrCmd+C\")]}),(0,_.jsx)(Df,{label:L(\"labels.paste\"),shortcuts:[Zn(\"CtrlOrCmd+V\")]}),(0,_.jsx)(Df,{label:L(\"labels.copyAsPng\"),shortcuts:[Zn(\"Shift+Alt+C\")]}),(0,_.jsx)(Df,{label:L(\"labels.copyStyles\"),shortcuts:[Zn(\"CtrlOrCmd+Alt+C\")]}),(0,_.jsx)(Df,{label:L(\"labels.pasteStyles\"),shortcuts:[Zn(\"CtrlOrCmd+Alt+V\")]}),(0,_.jsx)(Df,{label:L(\"labels.delete\"),shortcuts:[Zn(\"Del\")]}),(0,_.jsx)(Df,{label:L(\"labels.sendToBack\"),shortcuts:[Zn(Pt?\"CtrlOrCmd+Alt+[\":\"CtrlOrCmd+Shift+[\")]}),(0,_.jsx)(Df,{label:L(\"labels.bringToFront\"),shortcuts:[Zn(Pt?\"CtrlOrCmd+Alt+]\":\"CtrlOrCmd+Shift+]\")]}),(0,_.jsx)(Df,{label:L(\"labels.sendBackward\"),shortcuts:[Zn(\"CtrlOrCmd+[\")]}),(0,_.jsx)(Df,{label:L(\"labels.bringForward\"),shortcuts:[Zn(\"CtrlOrCmd+]\")]}),(0,_.jsx)(Df,{label:L(\"labels.alignTop\"),shortcuts:[Zn(\"CtrlOrCmd+Shift+Up\")]}),(0,_.jsx)(Df,{label:L(\"labels.alignBottom\"),shortcuts:[Zn(\"CtrlOrCmd+Shift+Down\")]}),(0,_.jsx)(Df,{label:L(\"labels.alignLeft\"),shortcuts:[Zn(\"CtrlOrCmd+Shift+Left\")]}),(0,_.jsx)(Df,{label:L(\"labels.alignRight\"),shortcuts:[Zn(\"CtrlOrCmd+Shift+Right\")]}),(0,_.jsx)(Df,{label:L(\"labels.duplicateSelection\"),shortcuts:[Zn(\"CtrlOrCmd+D\"),Zn(\"Alt+\".concat(L(\"helpDialog.drag\")))]}),(0,_.jsx)(Df,{label:L(\"buttons.undo\"),shortcuts:[Zn(\"CtrlOrCmd+Z\")]}),(0,_.jsx)(Df,{label:L(\"buttons.redo\"),shortcuts:Tt?[Zn(\"CtrlOrCmd+Y\"),Zn(\"CtrlOrCmd+Shift+Z\")]:[Zn(\"CtrlOrCmd+Shift+Z\")]}),(0,_.jsx)(Df,{label:L(\"labels.group\"),shortcuts:[Zn(\"CtrlOrCmd+G\")]}),(0,_.jsx)(Df,{label:L(\"labels.ungroup\"),shortcuts:[Zn(\"CtrlOrCmd+Shift+G\")]}),(0,_.jsx)(Df,{label:L(\"labels.flipHorizontal\"),shortcuts:[Zn(\"Shift+H\")]}),(0,_.jsx)(Df,{label:L(\"labels.flipVertical\"),shortcuts:[Zn(\"Shift+V\")]}),(0,_.jsx)(Df,{label:L(\"labels.showStroke\"),shortcuts:[Zn(\"S\")]}),(0,_.jsx)(Df,{label:L(\"labels.showBackground\"),shortcuts:[Zn(\"G\")]})]})})]})})]})})},Hf=(n(5080),function(e){var t,n=e.children,r=e.color;return(0,_.jsx)(\"div\",{className:\"Card\",style:(t={},V(t,\"--card-color\",Ct[r][7]),V(t,\"--card-color-darker\",Ct[r][8]),V(t,\"--card-color-darkest\",Ct[r][9]),t),children:n})}),Nf=function(e){var t=e.elements,n=e.appState,r=e.actionManager,o=e.exportOpts,a=e.canvas,i=o.onExportToBackend;return(0,_.jsx)(\"div\",{className:\"ExportDialog ExportDialog--json\",children:(0,_.jsxs)(\"div\",{className:\"ExportDialog-cards\",children:[o.saveFileToDisk&&(0,_.jsxs)(Hf,{color:\"lime\",children:[(0,_.jsx)(\"div\",{className:\"Card-icon\",children:Al}),(0,_.jsx)(\"h2\",{children:L(\"exportDialog.disk_title\")}),(0,_.jsxs)(\"div\",{className:\"Card-details\",children:[L(\"exportDialog.disk_details\"),!qc&&r.renderAction(\"changeProjectName\")]}),(0,_.jsx)(vl,{className:\"Card-button\",type:\"button\",title:L(\"exportDialog.disk_button\"),\"aria-label\":L(\"exportDialog.disk_button\"),showAriaLabel:!0,onClick:function(){r.executeAction(Md)}})]}),i&&(0,_.jsxs)(Hf,{color:\"pink\",children:[(0,_.jsx)(\"div\",{className:\"Card-icon\",children:Sl}),(0,_.jsx)(\"h2\",{children:L(\"exportDialog.link_title\")}),(0,_.jsx)(\"div\",{className:\"Card-details\",children:L(\"exportDialog.link_details\")}),(0,_.jsx)(vl,{className:\"Card-button\",type:\"button\",title:L(\"exportDialog.link_button\"),\"aria-label\":L(\"exportDialog.link_button\"),showAriaLabel:!0,onClick:function(){return i(t,n,a)}})]}),o.renderCustomUI&&o.renderCustomUI(t,n,a)]})})},Rf=function(e){var t=e.elements,n=e.appState,r=e.actionManager,o=e.exportOpts,a=e.canvas,i=R((0,l.useState)(!1),2),c=i[0],u=i[1],d=s().useCallback((function(){u(!1)}),[]);return(0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(vl,{onClick:function(){u(!0)},\"data-testid\":\"json-export-button\",icon:Pl,type:\"button\",\"aria-label\":L(\"buttons.export\"),showAriaLabel:ah(),title:L(\"buttons.export\")}),c&&(0,_.jsx)(tf,{onCloseRequest:d,title:L(\"buttons.export\"),children:(0,_.jsx)(Nf,{elements:t,appState:n,actionManager:r,onCloseRequest:d,exportOpts:o,canvas:a})})]})},Ff=[\"suggestedBindings\",\"startBoundElement\"];function Vf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Gf=function(e){var t=e.libraryItems,n=e.onRemoveFromLibrary,r=e.onAddToLibrary,o=e.onInsertShape,a=e.pendingElements,i=e.theme,l=e.setAppState,s=e.setLibraryItems,c=e.libraryReturnUrl,u=e.focusContainer,d=e.library,p=e.id,f=ah(),h=t.length+(a.length>0?1:0),m=f?4:6,g=Math.max(1,Math.ceil(h\/m)),v=[],b=!1,y=c||window.location.origin+window.location.pathname;v.push((0,_.jsxs)(\"div\",{className:\"layer-ui__library-header\",children:[(0,_.jsx)(vl,{type:\"button\",title:L(\"buttons.load\"),\"aria-label\":L(\"buttons.load\"),icon:Cl,onClick:function(){Au(d).then((function(){l({isLibraryOpen:!1}),l({isLibraryOpen:!0})})).catch(er).catch((function(e){l({errorMessage:e.message})}))}},\"import\"),!!t.length&&(0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(vl,{type:\"button\",title:L(\"buttons.export\"),\"aria-label\":L(\"buttons.export\"),icon:Pl,onClick:function(){Tu(d).catch(er).catch((function(e){l({errorMessage:e.message})}))}},\"export\"),(0,_.jsx)(vl,{type:\"button\",title:L(\"buttons.resetLibrary\"),\"aria-label\":L(\"buttons.resetLibrary\"),icon:Ml,onClick:function(){window.confirm(L(\"alerts.resetLibrary\"))&&(d.resetLibrary(),s([]),u())}},\"reset\")]}),(0,_.jsx)(\"a\",{href:\"https:\/\/libraries.excalidraw.com?target=\".concat(window.name||\"_blank\",\"&referrer=\").concat(y,\"&useHash=true&token=\").concat(p,\"&theme=\").concat(i),target:\"_excalidraw_libraries\",children:L(\"labels.libraries\")})]},\"library-header\"));for(var x=0;x<g;x++){for(var w=m*x,k=[],S=0;S<m;S++){var E=a.length>0&&!b&&w+S>=t.length;b=b||E,k.push((0,_.jsx)(wd,{children:(0,_.jsx)(mf,{elements:t[w+S],pendingElements:E?a:void 0,onRemoveFromLibrary:n.bind(null,w+S),onClick:E?r.bind(null,a):o.bind(null,t[w+S])})},S))}v.push((0,_.jsx)(xd,{align:\"center\",gap:1,children:k},x))}return(0,_.jsx)(wd,{align:\"start\",gap:1,className:\"layer-ui__library-items\",children:v})},Uf=function(e){var t=e.onClickOutside,n=e.onInsertShape,r=e.pendingElements,o=e.onAddToLibrary,a=e.theme,i=e.setAppState,s=e.libraryReturnUrl,c=e.focusContainer,u=e.library,p=e.id,f=(0,l.useRef)(null);!function(e,t){(0,l.useEffect)((function(){var n=function(n){e.current&&(n.target instanceof Element&&(e.current.contains(n.target)||!document.body.contains(n.target))||t(n))};return document.addEventListener(\"pointerdown\",n,!1),function(){document.removeEventListener(\"pointerdown\",n)}}),[e,t])}(f,(function(e){e.target.closest(\".ToolIcon_type_button__library\")||t(e)}));var h=R((0,l.useState)([]),2),m=h[0],g=h[1],v=R((0,l.useState)(\"preloading\"),2),b=v[0],y=v[1],x=(0,l.useRef)(null);(0,l.useEffect)((function(){return Promise.race([new Promise((function(e){x.current=setTimeout((function(){e(\"loading\")}),100)})),u.loadLibrary().then((function(e){g(e),y(\"ready\")}))]).then((function(e){\"loading\"===e&&y(\"loading\")})),function(){clearTimeout(x.current)}}),[u]);var w=(0,l.useCallback)(function(){var e=(0,d.Z)(k().mark((function e(t){var n,r;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,u.loadLibrary();case 2:n=e.sent,r=n.filter((function(e,n){return n!==t})),u.saveLibrary(r).catch((function(e){g(n),i({errorMessage:L(\"alerts.errorRemovingFromLibrary\")})})),g(r);case 6:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),[u,i]),S=(0,l.useCallback)(function(){var e=(0,d.Z)(k().mark((function e(t){var n,r;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,u.loadLibrary();case 2:n=e.sent,r=[].concat(F(n),[t]),o(),u.saveLibrary(r).catch((function(e){g(n),i({errorMessage:L(\"alerts.errorAddingToLibrary\")})})),g(r);case 7:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),[o,u,i]);return\"preloading\"===b?null:(0,_.jsx)(Qp,{padding:1,ref:f,className:\"layer-ui__library\",children:\"loading\"===b?(0,_.jsx)(\"div\",{className:\"layer-ui__library-message\",children:L(\"labels.libraryLoadingMessage\")}):(0,_.jsx)(Gf,{libraryItems:m,onRemoveFromLibrary:w,onAddToLibrary:S,onInsertShape:n,pendingElements:r,setAppState:i,setLibraryItems:g,libraryReturnUrl:s,focusContainer:c,library:u,theme:a,id:p})})},Kf=function(e){var t,n=e.actionManager,r=e.appState,o=e.setAppState,a=e.canvas,i=e.elements,s=e.onCollabButtonClick,u=e.onLockToggle,p=e.onInsertElements,f=e.zenModeEnabled,h=e.showExitZenModeBtn,m=e.showThemeBtn,g=e.toggleZenMode,v=e.isCollaborating,b=e.renderTopRightUI,y=e.renderCustomFooter,x=e.viewModeEnabled,w=e.libraryReturnUrl,S=e.UIOptions,E=e.focusContainer,j=e.library,C=e.id,O=ah(),M=function(){return S.canvasActions.export?(0,_.jsx)(Rf,{elements:i,appState:r,actionManager:n,exportOpts:S.canvasActions.export,canvas:a}):null},I=function(){if(!S.canvasActions.saveAsImage)return null;var e=function(e){return function(){var t=(0,d.Z)(k().mark((function t(n){var a;return k().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fd(e,n,r,{exportBackground:r.exportBackground,name:r.name,viewBackgroundColor:r.viewBackgroundColor}).catch(er).catch((function(e){console.error(e),o({errorMessage:e.message})}));case 2:a=t.sent,r.exportEmbedScene&&a&&ku(a)&&o({fileHandle:a});case 4:case\"end\":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()};return(0,_.jsx)(cf,{elements:i,appState:r,actionManager:n,onExportToPng:e(\"png\"),onExportToSvg:e(\"svg\"),onExportToClipboard:e(\"clipboard\")})},P=function(){return(0,_.jsx)(\"div\",{style:{width:\".625em\"}})},T=(0,l.useCallback)((function(e){o({isLibraryOpen:!1})}),[o]),A=(0,l.useCallback)((function(){o({selectedElementIds:{},selectedGroupIds:{}})}),[o]),z=r.isLibraryOpen?(0,_.jsx)(Uf,{pendingElements:ol(i,r),onClickOutside:T,onInsertShape:p,onAddToLibrary:A,setAppState:o,libraryReturnUrl:w,focusContainer:E,library:j,theme:r.theme,id:C}):null,B=(0,_.jsxs)(_.Fragment,{children:[r.isLoading&&(0,_.jsx)(D,{}),r.errorMessage&&(0,_.jsx)(nf,{message:r.errorMessage,onClose:function(){return o({errorMessage:null})}}),r.showHelpDialog&&(0,_.jsx)(Bf,{onClose:function(){o({showHelpDialog:!1})}}),r.pasteDialog.shown&&(0,_.jsx)(Mf,{setAppState:o,appState:r,onInsertChart:p,onClose:function(){return o({pasteDialog:{shown:!1,data:null}})}})]});return O?(0,_.jsxs)(_.Fragment,{children:[B,(0,_.jsx)(Cf,{appState:r,elements:i,actionManager:n,libraryMenu:z,renderJSONExportDialog:M,renderImageExportDialog:I,setAppState:o,onCollabButtonClick:s,onLockToggle:u,canvas:a,isCollaborating:v,renderCustomFooter:y,viewModeEnabled:x,showThemeBtn:m})]}):(0,_.jsxs)(\"div\",{className:Ze(\"layer-ui__wrapper\",{\"disable-pointerEvents\":r.draggingElement||r.resizingElement||r.editingElement&&!Xe(r.editingElement)}),children:[B,(t=Ki(r,i),(0,_.jsx)(uf,{side:\"top\",children:(0,_.jsxs)(\"div\",{className:\"App-menu App-menu_top\",children:[(0,_.jsxs)(wd,{gap:4,className:Ze({\"disable-pointerEvents\":f}),children:[x?(0,_.jsx)(wf,{heading:\"canvasActions\",className:Ze(\"zen-mode-transition\",{\"transition-left\":f}),children:(0,_.jsx)(Qp,{padding:2,style:{zIndex:1},children:(0,_.jsx)(wd,{gap:4,children:(0,_.jsxs)(xd,{gap:1,justifyContent:\"space-between\",children:[M(),I()]})})})}):(0,_.jsx)(wf,{heading:\"canvasActions\",className:Ze(\"zen-mode-transition\",{\"transition-left\":f}),children:(0,_.jsx)(Qp,{padding:2,style:{zIndex:1},children:(0,_.jsxs)(wd,{gap:4,children:[(0,_.jsxs)(xd,{gap:1,justifyContent:\"space-between\",children:[n.renderAction(\"clearCanvas\"),(0,_.jsx)(P,{}),n.renderAction(\"loadScene\"),M(),I(),(0,_.jsx)(P,{}),s&&(0,_.jsx)(Xp,{isCollaborating:v,collaboratorCount:r.collaborators.size,onClick:s})]}),(0,_.jsx)(Yp,{actionManager:n,appState:r,setAppState:o,showThemeBtn:m}),r.fileHandle&&(0,_.jsx)(_.Fragment,{children:n.renderAction(\"saveToActiveFile\")})]})})}),t&&(0,_.jsx)(wf,{heading:\"selectedShapeActions\",className:Ze(\"zen-mode-transition\",{\"transition-left\":f}),children:(0,_.jsx)(Qp,{className:c.$C.SHAPE_ACTIONS_MENU,padding:2,style:{maxHeight:\"\".concat(r.height-(r.fileHandle?248:200),\"px\")},children:(0,_.jsx)(Kp,{appState:r,elements:i,renderAction:n.renderAction,elementType:r.elementType})})})]}),!x&&(0,_.jsx)(wf,{heading:\"shapes\",children:function(e){return(0,_.jsxs)(wd,{gap:4,align:\"start\",children:[(0,_.jsxs)(xd,{gap:1,children:[(0,_.jsx)(vf,{zenModeEnabled:f,checked:r.elementLocked,onChange:u,title:L(\"toolBar.lock\")}),(0,_.jsxs)(Qp,{padding:1,className:Ze({\"zen-mode\":f}),children:[(0,_.jsx)(df,{appState:r,elements:i}),e,(0,_.jsx)(xd,{gap:1,children:(0,_.jsx)(Wp,{canvas:a,elementType:r.elementType,setAppState:o})})]}),(0,_.jsx)(Ef,{appState:r,setAppState:o})]}),z]})}}),(0,_.jsxs)(\"div\",{className:Ze(\"layer-ui__wrapper__top-right zen-mode-transition\",{\"transition-right\":f}),children:[(0,_.jsx)(kf,{children:r.collaborators.size>0&&Array.from(r.collaborators).filter((function(e){var t=R(e,2),n=(t[0],t[1]);return 0!==Object.keys(n).length})).map((function(e){var t=R(e,2),r=t[0],o=t[1];return(0,_.jsx)(wc,{label:o.username||\"Unknown user\",children:n.renderAction(\"goToCollaborator\",{id:r})},r)}))}),null==b?void 0:b(O,r)]})]})})),(0,_.jsxs)(\"footer\",{role:\"contentinfo\",className:\"layer-ui__wrapper__footer App-menu App-menu_bottom\",children:[(0,_.jsx)(\"div\",{className:Ze(\"layer-ui__wrapper__footer-left zen-mode-transition\",{\"layer-ui__wrapper__footer-left--transition-left\":f}),children:(0,_.jsx)(wd,{gap:2,children:(0,_.jsxs)(wf,{heading:\"canvasActions\",children:[(0,_.jsx)(Qp,{padding:1,children:(0,_.jsx)(Zp,{renderAction:n.renderAction,zoom:r.zoom})}),!x&&(0,_.jsxs)(\"div\",{className:Ze(\"undo-redo-buttons zen-mode-transition\",{\"layer-ui__wrapper__footer-left--transition-bottom\":f}),children:[n.renderAction(\"undo\",{size:\"small\"}),n.renderAction(\"redo\",{size:\"small\"})]})]})})}),(0,_.jsx)(\"div\",{className:Ze(\"layer-ui__wrapper__footer-center zen-mode-transition\",{\"layer-ui__wrapper__footer-left--transition-bottom\":f}),children:null==y?void 0:y(!1,r)}),(0,_.jsx)(\"div\",{className:Ze(\"layer-ui__wrapper__footer-right zen-mode-transition\",{\"transition-right disable-pointerEvents\":f}),children:n.renderAction(\"toggleShortcuts\")}),(0,_.jsx)(\"button\",{className:Ze(\"disable-zen-mode\",{\"disable-zen-mode--visible\":h}),onClick:g,children:L(\"buttons.exitZenMode\")})]}),r.scrolledOutside&&(0,_.jsx)(\"button\",{className:\"scroll-back-to-content\",onClick:function(){o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Vf(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Vf(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},ll(i,r)))},children:L(\"buttons.scrollBackToContent\")})]})},Wf=function(e,t){var n=function(e){e.suggestedBindings,e.startBoundElement;return po(e,Ff)},r=n(e.appState),o=n(t.appState),a=Object.keys(r);return e.renderCustomFooter===t.renderCustomFooter&&e.langCode===t.langCode&&e.elements===t.elements&&a.every((function(e){return r[e]===o[e]}))},Zf=s().memo(Kf,Wf),Yf=(n(1528),function(e){var t,n=ah(),r=St(e.elements),o=al(e.elements,e.appState),a=St(o);return n&&e.appState.openMenu?null:(0,_.jsx)(\"div\",{className:\"Stats\",children:(0,_.jsxs)(Qp,{padding:2,children:[(0,_.jsx)(\"div\",{className:\"close\",onClick:e.onClose,children:Jl}),(0,_.jsx)(\"h3\",{children:L(\"stats.title\")}),(0,_.jsx)(\"table\",{children:(0,_.jsxs)(\"tbody\",{children:[(0,_.jsx)(\"tr\",{children:(0,_.jsx)(\"th\",{colSpan:2,children:L(\"stats.scene\")})}),(0,_.jsxs)(\"tr\",{children:[(0,_.jsx)(\"td\",{children:L(\"stats.elements\")}),(0,_.jsx)(\"td\",{children:e.elements.length})]}),(0,_.jsxs)(\"tr\",{children:[(0,_.jsx)(\"td\",{children:L(\"stats.width\")}),(0,_.jsx)(\"td\",{children:Math.round(r[2])-Math.round(r[0])})]}),(0,_.jsxs)(\"tr\",{children:[(0,_.jsx)(\"td\",{children:L(\"stats.height\")}),(0,_.jsx)(\"td\",{children:Math.round(r[3])-Math.round(r[1])})]}),1===o.length&&(0,_.jsx)(\"tr\",{children:(0,_.jsx)(\"th\",{colSpan:2,children:L(\"stats.element\")})}),o.length>1&&(0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"tr\",{children:(0,_.jsx)(\"th\",{colSpan:2,children:L(\"stats.selected\")})}),(0,_.jsxs)(\"tr\",{children:[(0,_.jsx)(\"td\",{children:L(\"stats.elements\")}),(0,_.jsx)(\"td\",{children:o.length})]})]}),o.length>0&&(0,_.jsxs)(_.Fragment,{children:[(0,_.jsxs)(\"tr\",{children:[(0,_.jsx)(\"td\",{children:\"x\"}),(0,_.jsx)(\"td\",{children:Math.round(a[0])})]}),(0,_.jsxs)(\"tr\",{children:[(0,_.jsx)(\"td\",{children:\"y\"}),(0,_.jsx)(\"td\",{children:Math.round(a[1])})]}),(0,_.jsxs)(\"tr\",{children:[(0,_.jsx)(\"td\",{children:L(\"stats.width\")}),(0,_.jsx)(\"td\",{children:Math.round(a[2]-a[0])})]}),(0,_.jsxs)(\"tr\",{children:[(0,_.jsx)(\"td\",{children:L(\"stats.height\")}),(0,_.jsx)(\"td\",{children:Math.round(a[3]-a[1])})]})]}),1===o.length&&(0,_.jsxs)(\"tr\",{children:[(0,_.jsx)(\"td\",{children:L(\"stats.angle\")}),(0,_.jsx)(\"td\",{children:\"\".concat(Math.round(180*o[0].angle\/Math.PI),\"\u00b0\")})]}),null===(t=e.renderCustomStats)||void 0===t?void 0:t.call(e,e.elements,e.appState)]})})]})})}),Xf=(n(9757),function(e){var t=e.message,n=e.clearToast,r=(0,l.useRef)(0),o=(0,l.useCallback)((function(){return r.current=window.setTimeout((function(){return n()}),c.Lg)}),[n]);return(0,l.useEffect)((function(){return o(),function(){return clearTimeout(r.current)}}),[o,t]),(0,_.jsx)(\"div\",{className:\"Toast\",onMouseEnter:function(){return clearTimeout(null==r?void 0:r.current)},onMouseLeave:o,children:(0,_.jsx)(\"p\",{className:\"Toast__message\",children:t})})});function qf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function $f(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?qf(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):qf(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Qf=As({name:\"viewMode\",perform:function(e,t){return Tc(\"view\",\"mode\",\"view\"),{appState:$f($f({},t),{},{viewModeEnabled:!this.checked(t)}),commitToHistory:!1}},checked:function(e){return e.viewModeEnabled},contextItemLabel:\"labels.viewMode\",keyTest:function(e){return!e[ln]&&e.altKey&&e.code===Jt}});function Jf(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return eh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return eh(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function eh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function th(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function nh(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?th(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):th(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function rh(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=x(e);if(t){var o=x(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return y(this,n)}}var oh=s().createContext(!1),ah=function(){return(0,l.useContext)(oh)},ih=s().createContext({container:null,id:null}),lh=function(){return(0,l.useContext)(ih)},sh=!1,ch=0,uh=0,dh=0,ph=!1,fh=!1,hh=!1,mh={horizontal:null,vertical:null},gh=0,vh=!1,bh=null,yh={pointers:new Map,lastCenter:null,initialDistance:null,initialScale:null},xh=function(e){g(o,e);var t,n,r=rh(o);function o(e){var t;p(this,o),t=r.call(this,e),wh.call(b(t));var n,a,i,l,s=ir(),u=e.excalidrawRef,d=e.viewModeEnabled,f=void 0!==d&&d,h=e.zenModeEnabled,m=void 0!==h&&h,g=e.gridModeEnabled,v=void 0!==g&&g,y=e.theme,x=void 0===y?s.theme:y,w=e.name,k=void 0===w?s.name:w;if(t.state=nh(nh(nh({},s),{},{theme:x,isLoading:!0},t.getCanvasOffsets()),{},{viewModeEnabled:f,zenModeEnabled:m,gridSize:v?c.k:null,name:k,width:window.innerWidth,height:window.innerHeight}),t.id=Ye(),u){var S,E=\"current\"in u&&(null===(S=u.current)||void 0===S?void 0:S.readyPromise)||((i=new Promise((function(e,t){n=e,a=t}))).resolve=n,i.reject=a,i),j={ready:!0,readyPromise:E,updateScene:t.updateScene,resetScene:t.resetScene,getSceneElementsIncludingDeleted:t.getSceneElementsIncludingDeleted,history:{clear:t.resetHistory},scrollToContent:t.scrollToContent,getSceneElements:t.getSceneElements,getAppState:function(){return t.state},refresh:t.refresh,importLibrary:t.importLibraryFromUrl,setToastMessage:t.setToastMessage,id:t.id};\"function\"==typeof u?u(j):u.current=j,E.resolve(j)}return t.excalidrawContainerValue={container:t.excalidrawContainerRef.current,id:t.id},t.scene=new Jr,t.library=new Ap(b(t)),t.history=new Np,t.actionManager=new Tp(t.syncActionResult,(function(){return t.state}),(function(){return t.scene.getElementsIncludingDeleted()}),b(t)),t.actionManager.registerAll(Ts),t.actionManager.registerAction((l=t.history,{name:\"undo\",perform:function(e,t){return Pp(e,t,(function(){return l.undoOnce()}))},keyTest:function(e){return e[ln]&&e.key.toLowerCase()===Mn&&!e.shiftKey},PanelComponent:function(e){var t=e.updateData,n=e.data;return(0,_.jsx)(vl,{type:\"button\",icon:Bl,\"aria-label\":L(\"buttons.undo\"),onClick:t,size:(null==n?void 0:n.size)||\"medium\"})},commitToHistory:function(){return!1}})),t.actionManager.registerAction(function(e){return{name:\"redo\",perform:function(t,n){return Pp(t,n,(function(){return e.redoOnce()}))},keyTest:function(e){return e[ln]&&e.shiftKey&&e.key.toLowerCase()===Mn||Tt&&e.ctrlKey&&!e.shiftKey&&e.key===On},PanelComponent:function(e){var t=e.updateData,n=e.data;return(0,_.jsx)(vl,{type:\"button\",icon:Hl,\"aria-label\":L(\"buttons.redo\"),onClick:t,size:(null==n?void 0:n.size)||\"medium\"})},commitToHistory:function(){return!1}}}(t.history)),t}return h(o,[{key:\"renderCanvas\",value:function(){var e=window.devicePixelRatio,t=this.state,n=t.width,r=t.height,o=n*e,a=r*e;return t.viewModeEnabled?(0,_.jsx)(\"canvas\",{className:\"excalidraw__canvas\",style:{width:n,height:r,cursor:c.oc.GRAB},width:o,height:a,ref:this.handleCanvasRef,onContextMenu:this.handleCanvasContextMenu,onPointerMove:this.handleCanvasPointerMove,onPointerUp:this.removePointer,onPointerCancel:this.removePointer,onTouchMove:this.handleTouchMove,onPointerDown:this.handleCanvasPointerDown,children:L(\"labels.drawingCanvas\")}):(0,_.jsx)(\"canvas\",{className:\"excalidraw__canvas\",style:{width:n,height:r},width:o,height:a,ref:this.handleCanvasRef,onContextMenu:this.handleCanvasContextMenu,onPointerDown:this.handleCanvasPointerDown,onDoubleClick:this.handleCanvasDoubleClick,onPointerMove:this.handleCanvasPointerMove,onPointerUp:this.removePointer,onPointerCancel:this.removePointer,onTouchMove:this.handleTouchMove,children:L(\"labels.drawingCanvas\")})}},{key:\"render\",value:function(){var e,t,n=this,r=this.state,o=r.zenModeEnabled,a=r.viewModeEnabled,i=this.props,l=i.onCollabButtonClick,s=i.renderTopRightUI,c=i.renderFooter,u=i.renderCustomStats;return(0,_.jsx)(\"div\",{className:Ze(\"excalidraw excalidraw-container\",{\"excalidraw--view-mode\":a,\"excalidraw--mobile\":this.isMobile}),ref:this.excalidrawContainerRef,onDrop:this.handleAppOnDrop,tabIndex:0,onKeyDown:this.props.handleKeyboardGlobally?void 0:this.onKeyDown,children:(0,_.jsx)(ih.Provider,{value:this.excalidrawContainerValue,children:(0,_.jsxs)(oh.Provider,{value:this.isMobile,children:[(0,_.jsx)(Zf,{canvas:this.canvas,appState:this.state,setAppState:this.setAppState,actionManager:this.actionManager,elements:this.scene.getElements(),onCollabButtonClick:l,onLockToggle:this.toggleLock,onInsertElements:function(e){return n.addElementsFromPasteOrLibrary({elements:e,position:\"center\"})},zenModeEnabled:o,toggleZenMode:this.toggleZenMode,langCode:T().code,isCollaborating:this.props.isCollaborating||!1,renderTopRightUI:s,renderCustomFooter:c,viewModeEnabled:a,showExitZenModeBtn:void 0===(null===(e=this.props)||void 0===e?void 0:e.zenModeEnabled)&&o,showThemeBtn:void 0===(null===(t=this.props)||void 0===t?void 0:t.theme)&&this.props.UIOptions.canvasActions.theme,libraryReturnUrl:this.props.libraryReturnUrl,UIOptions:this.props.UIOptions,focusContainer:this.focusContainer,library:this.library,id:this.id}),(0,_.jsx)(\"div\",{className:\"excalidraw-textEditorContainer\"}),(0,_.jsx)(\"div\",{className:\"excalidraw-contextMenuContainer\"}),this.state.showStats&&(0,_.jsx)(Yf,{appState:this.state,setAppState:this.setAppState,elements:this.scene.getElements(),onClose:this.toggleStats,renderCustomStats:u}),null!==this.state.toastMessage&&(0,_.jsx)(Xf,{message:this.state.toastMessage,clearToast:this.clearToast}),(0,_.jsx)(\"main\",{children:this.renderCanvas()})]})})})}},{key:\"componentDidMount\",value:(n=(0,d.Z)(k().mark((function e(){var t,n,r,o,a=this;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:this.excalidrawContainerValue.container=this.excalidrawContainerRef.current,\"production\"!==c.Vi.TEST&&\"production\"!==c.Vi.DEVELOPMENT||(this.setState.bind(this),Object.defineProperties(window.h,{state:{configurable:!0,get:function(){return a.state}},setState:{configurable:!0,value:function(){return a.setState.apply(a,arguments)}},app:{configurable:!0,value:this},history:{configurable:!0,value:this.history}})),this.scene.addCallback(this.onSceneUpdated),this.addEventListeners(),this.excalidrawContainerRef.current&&this.focusContainer(),\"ResizeObserver\"in window&&null!==(t=this.excalidrawContainerRef)&&void 0!==t&&t.current?(this.resizeObserver=new ResizeObserver((function(){var e=a.excalidrawContainerRef.current.getBoundingClientRect(),t=e.width,n=e.height;a.isMobile=t<c.kV||n<c.Yx&&t<c.sS,a.updateDOMRect()})),null===(n=this.resizeObserver)||void 0===n||n.observe(this.excalidrawContainerRef.current)):window.matchMedia&&(r=window.matchMedia(\"(max-width: \".concat(c.kV,\"px), (max-height: \").concat(c.Yx,\"px) and (max-width: \").concat(c.sS,\"px)\")),o=function(){return a.isMobile=r.matches},r.addListener(o),this.detachIsMobileMqHandler=function(){return r.removeListener(o)}),new URLSearchParams(window.location.search.slice(1)).has(\"web-share-target\")?this.restoreFileFromShare():this.updateDOMRect(this.initializeScene);case 8:case\"end\":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)})},{key:\"componentWillUnmount\",value:function(){var e;null===(e=this.resizeObserver)||void 0===e||e.disconnect(),this.unmounted=!0,this.removeEventListeners(),this.scene.destroy(),clearTimeout(gh),gh=0}},{key:\"removeEventListeners\",value:function(){var e,t;document.removeEventListener(c.Ks.POINTER_UP,this.removePointer),document.removeEventListener(c.Ks.COPY,this.onCopy),document.removeEventListener(c.Ks.PASTE,this.pasteFromClipboard),document.removeEventListener(c.Ks.CUT,this.onCut),null===(e=this.nearestScrollableContainer)||void 0===e||e.removeEventListener(c.Ks.SCROLL,this.onScroll),document.removeEventListener(c.Ks.KEYDOWN,this.onKeyDown,!1),document.removeEventListener(c.Ks.MOUSE_MOVE,this.updateCurrentCursorPosition,!1),document.removeEventListener(c.Ks.KEYUP,this.onKeyUp),window.removeEventListener(c.Ks.RESIZE,this.onResize,!1),window.removeEventListener(c.Ks.UNLOAD,this.onUnload,!1),window.removeEventListener(c.Ks.BLUR,this.onBlur,!1),window.removeEventListener(c.Ks.DRAG_OVER,this.disableEvent,!1),window.removeEventListener(c.Ks.DROP,this.disableEvent,!1),document.removeEventListener(c.Ks.GESTURE_START,this.onGestureStart,!1),document.removeEventListener(c.Ks.GESTURE_CHANGE,this.onGestureChange,!1),document.removeEventListener(c.Ks.GESTURE_END,this.onGestureEnd,!1),null===(t=this.detachIsMobileMqHandler)||void 0===t||t.call(this)}},{key:\"addEventListeners\",value:function(){var e,t;this.removeEventListeners(),document.addEventListener(c.Ks.POINTER_UP,this.removePointer),document.addEventListener(c.Ks.COPY,this.onCopy),this.props.handleKeyboardGlobally&&document.addEventListener(c.Ks.KEYDOWN,this.onKeyDown,!1),document.addEventListener(c.Ks.KEYUP,this.onKeyUp,{passive:!0}),document.addEventListener(c.Ks.MOUSE_MOVE,this.updateCurrentCursorPosition),null===(e=document.fonts)||void 0===e||null===(t=e.addEventListener)||void 0===t||t.call(e,\"loadingdone\",this.onFontLoaded),document.addEventListener(c.Ks.GESTURE_START,this.onGestureStart,!1),document.addEventListener(c.Ks.GESTURE_CHANGE,this.onGestureChange,!1),document.addEventListener(c.Ks.GESTURE_END,this.onGestureEnd,!1),this.state.viewModeEnabled||(document.addEventListener(c.Ks.PASTE,this.pasteFromClipboard),document.addEventListener(c.Ks.CUT,this.onCut),this.props.detectScroll&&(this.nearestScrollableContainer=function(e){for(var t=e.parentElement;t;){if(t===document.body)return document;var n=window.getComputedStyle(t).overflowY;if(t.scrollHeight>t.clientHeight&&(\"auto\"===n||\"scroll\"===n))return t;t=t.parentElement}return document}(this.excalidrawContainerRef.current),this.nearestScrollableContainer.addEventListener(c.Ks.SCROLL,this.onScroll)),window.addEventListener(c.Ks.RESIZE,this.onResize,!1),window.addEventListener(c.Ks.UNLOAD,this.onUnload,!1),window.addEventListener(c.Ks.BLUR,this.onBlur,!1),window.addEventListener(c.Ks.DRAG_OVER,this.disableEvent,!1),window.addEventListener(c.Ks.DROP,this.disableEvent,!1))}},{key:\"componentDidUpdate\",value:function(e,t){var n,r,o=this;e.langCode!==this.props.langCode&&this.updateLanguage(),e.viewModeEnabled!==this.props.viewModeEnabled&&this.setState({viewModeEnabled:!!this.props.viewModeEnabled}),t.viewModeEnabled!==this.state.viewModeEnabled&&(this.addEventListeners(),this.deselectElements()),e.zenModeEnabled!==this.props.zenModeEnabled&&this.setState({zenModeEnabled:!!this.props.zenModeEnabled}),e.theme!==this.props.theme&&this.props.theme&&this.setState({theme:this.props.theme}),e.gridModeEnabled!==this.props.gridModeEnabled&&this.setState({gridSize:this.props.gridModeEnabled?c.k:null}),this.props.name&&e.name!==this.props.name&&this.setState({name:this.props.name}),null===(n=this.excalidrawContainerRef.current)||void 0===n||n.classList.toggle(\"theme--dark\",\"dark\"===this.state.theme),this.state.editingLinearElement&&!this.state.selectedElementIds[this.state.editingLinearElement.elementId]&&setTimeout((function(){o.actionManager.executeAction(Pc)}));var a=t.multiElement;t.elementType!==this.state.elementType&&null!=a&&ri(this.state)&&et(a)&&si(a,this.state,this.scene,Jn(ti.getPointAtIndexGlobalCoordinates(a,-1)));var i={},l={},s={},u={},d={};this.state.collaborators.forEach((function(e,t){if(e.selectedElementIds)for(var n=0,r=Object.keys(e.selectedElementIds);n<r.length;n++){var a=r[n];a in s||(s[a]=[]),s[a].push(t)}e.pointer&&(e.username&&(u[t]=e.username),e.userState&&(d[t]=e.userState),l[t]=Xn({sceneX:e.pointer.x,sceneY:e.pointer.y},o.state),i[t]=e.button)}));var p=this.scene.getElements(),f=Vc(p.filter((function(e){return!o.state.editingElement||\"text\"!==o.state.editingElement.type||e.id!==o.state.editingElement.id})),this.state,this.state.selectionElement,window.devicePixelRatio,this.rc,this.canvas,{scrollX:this.state.scrollX,scrollY:this.state.scrollY,viewBackgroundColor:this.state.viewBackgroundColor,zoom:this.state.zoom,remotePointerViewportCoords:l,remotePointerButton:i,remoteSelectedElementIds:s,remotePointerUsernames:u,remotePointerUserStates:d,shouldCacheIgnoreZoom:this.state.shouldCacheIgnoreZoom},{renderOptimizations:!0,renderScrollbars:!this.isMobile}),h=f.atLeastOneVisibleElement,m=f.scrollBars;m&&(mh=m);var g,v,b=\"text\"!==(null===(r=this.state.editingElement)||void 0===r?void 0:r.type)&&(!h&&p.length>0);(this.state.scrolledOutside!==b&&this.setState({scrolledOutside:b}),this.history.record(this.state,this.scene.getElementsIncludingDeleted()),this.state.isLoading)||(null===(g=(v=this.props).onChange)||void 0===g||g.call(v,this.scene.getElementsIncludingDeleted(),this.state))}},{key:\"addTextFromPaste\",value:function(e){var t=Yn({clientX:uh,clientY:dh},this.state),n=t.x,r=t.y,o=To({x:n,y:r,strokeColor:this.state.currentItemStrokeColor,backgroundColor:this.state.currentItemBackgroundColor,fillStyle:this.state.currentItemFillStyle,strokeWidth:this.state.currentItemStrokeWidth,strokeStyle:this.state.currentItemStrokeStyle,roughness:this.state.currentItemRoughness,opacity:this.state.currentItemOpacity,strokeSharpness:this.state.currentItemStrokeSharpness,text:e,fontSize:this.state.currentItemFontSize,fontFamily:this.state.currentItemFontFamily,textAlign:this.state.currentItemTextAlign,verticalAlign:c.hs});this.scene.replaceAllElements([].concat(F(this.scene.getElementsIncludingDeleted()),[o])),this.setState({selectedElementIds:V({},o.id,!0)}),this.history.resumeRecording()}},{key:\"selectShapeTool\",value:function(e){var t;ph||Kn(this.canvas,e),(t=document.activeElement)instanceof HTMLElement&&t.className.includes(\"ToolIcon\")&&this.focusContainer(),Je(e)||this.setState({suggestedBindings:[]}),\"selection\"!==e?this.setState({elementType:e,selectedElementIds:{},selectedGroupIds:{},editingGroupId:null}):this.setState({elementType:e})}},{key:\"handleTextWysiwyg\",value:function(e,t){var n=this,r=t.isExistingElement,o=void 0!==r&&r,a=function(t){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];n.scene.replaceAllElements(F(n.scene.getElementsIncludingDeleted().map((function(n){return n.id===e.id&&Xe(n)?Ao(n,{text:t,isDeleted:r}):n}))))};!function(e){var t=e.id,n=e.appState,r=e.onChange,o=e.onSubmit,a=e.getViewportCoords,i=e.element,l=e.canvas,s=e.excalidrawContainer,u=function(){var e,r=null===(e=Jr.getScene(i))||void 0===e?void 0:e.getElement(t);if(r&&Xe(r)){var o=R(a(r.x,r.y),2),l=o[0],c=o[1],u=r.textAlign,p=r.angle;d.value=r.text;var f=r.text.replace(\/\\r\\n?\/g,\"\\n\").split(\"\\n\"),h=r.height\/f.length,m=(n.offsetLeft+n.width-l-8)\/n.zoom.value-Number(getComputedStyle(null==s?void 0:s.parentNode).marginRight.slice(0,-2));Object.assign(d.style,{font:Nn(r),lineHeight:\"\".concat(h,\"px\"),width:\"\".concat(r.width,\"px\"),height:\"\".concat(r.height,\"px\"),left:\"\".concat(l,\"px\"),top:\"\".concat(c,\"px\"),transform:Gi(r.width,r.height,p,n,m),textAlign:u,color:r.strokeColor,opacity:r.opacity\/100,filter:\"var(--theme-filter)\",maxWidth:\"\".concat(m,\"px\")})}},d=document.createElement(\"textarea\");d.dir=\"auto\",d.tabIndex=0,d.dataset.type=\"wysiwyg\",d.wrap=\"off\",Object.assign(d.style,{position:\"absolute\",display:\"inline-block\",minHeight:\"1em\",backfaceVisibility:\"hidden\",margin:0,padding:0,border:0,outline:0,resize:\"none\",background:\"transparent\",overflow:\"hidden\",whiteSpace:\"pre\",zIndex:\"var(--zIndex-wysiwyg)\"}),u(),r&&(d.oninput=function(){r(Vi(d.value))}),d.onkeydown=function(e){if(e.stopPropagation(),e.key===un)e.preventDefault(),b=!0,y();else if(e.key===cn&&e[ln]){if(e.preventDefault(),e.isComposing||229===e.keyCode)return;b=!0,y()}else(e.key===fn||e[ln]&&(e.code===Ht||e.code===Bt))&&(e.preventDefault(),e.shiftKey||e.code===Ht?m():h(),d.dispatchEvent(new Event(\"input\")))};var p=\" \".repeat(4),f=new RegExp(\"^ {1,\".concat(4,\"}\")),h=function(){var e=d.selectionStart,t=d.selectionEnd,n=g(),r=d.value;n.forEach((function(e){var t=r.slice(0,e),n=r.slice(e);r=\"\".concat(t).concat(p).concat(n)})),d.value=r,d.selectionStart=e+4,d.selectionEnd=t+4*n.length},m=function(){var e=d.selectionStart,t=d.selectionEnd,n=g(),r=[],o=d.value;n.forEach((function(e){var t=o.slice(e,e+4).match(f);if(t){var n=o.slice(0,e),a=o.slice(e+t[0].length);o=\"\".concat(n).concat(a),r.push(e)}})),d.value=o,r.length&&(e>r[r.length-1]?d.selectionStart=Math.max(e-4,r[r.length-1]):d.selectionStart=e,d.selectionEnd=Math.max(d.selectionStart,t-4*r.length))},g=function(){var e=d.selectionStart,t=d.selectionEnd,n=d.value,r=n.slice(0,e).match(\/[^\\n]*$\/)[0].length;return e-=r,n.slice(e,t).split(\"\\n\").reduce((function(t,n,r,o){return t.concat(r?t[r-1]+o[r-1].length+1:e)}),[]).reverse()},v=function(e){e.preventDefault(),e.stopPropagation()},b=!1,y=function(){x(),o({text:Vi(d.value),viaKeyboard:b})},x=function(){E||(E=!0,d.onblur=null,d.oninput=null,d.onkeydown=null,j&&j.disconnect(),window.removeEventListener(\"resize\",u),window.removeEventListener(\"wheel\",v,!0),window.removeEventListener(\"pointerdown\",k),window.removeEventListener(\"pointerup\",w),window.removeEventListener(\"blur\",y),S(),d.remove())},w=function e(){window.removeEventListener(\"pointerup\",e),setTimeout((function(){d.onblur=y,d.focus()}))},k=function(e){(e.target instanceof HTMLElement||e.target instanceof SVGElement)&&e.target.closest(\".\".concat(c.$C.SHAPE_ACTIONS_MENU))&&!Bn(e.target)&&(d.onblur=null,window.addEventListener(\"pointerup\",w),window.addEventListener(\"blur\",y))},S=Jr.getScene(i).addCallback((function(){u(),d.focus()})),E=!1;d.select(),w();var j=null;l&&\"ResizeObserver\"in window?(j=new window.ResizeObserver((function(){u()}))).observe(l):window.addEventListener(\"resize\",u),window.addEventListener(\"pointerdown\",k),window.addEventListener(\"wheel\",v,{passive:!1,capture:!0}),null==s||s.querySelector(\".excalidraw-textEditorContainer\").appendChild(d)}({id:e.id,appState:this.state,canvas:this.canvas,getViewportCoords:function(e,t){var r=Xn({sceneX:e,sceneY:t},n.state),o=r.x,a=r.y;return[o-n.state.offsetLeft,a-n.state.offsetTop]},onChange:nr((function(t){a(t),$i(e)&&gi(e)})),onSubmit:nr((function(t){var r=t.text,i=t.viaKeyboard,l=!r.trim();a(r,l),!l&&i&&n.setState((function(t){return{selectedElementIds:nh(nh({},t.selectedElementIds),{},V({},e.id,!0))}})),l&&Mi(n.scene.getElements(),[e]),l&&!o||n.history.resumeRecording(),n.setState({draggingElement:null,editingElement:null}),n.state.elementLocked&&Kn(n.canvas,n.state.elementType),n.focusContainer()})),element:e,excalidrawContainer:this.excalidrawContainerRef.current}),this.deselectElements(),a(e.text)}},{key:\"deselectElements\",value:function(){this.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})}},{key:\"getTextElementAtPosition\",value:function(e,t){var n=this.getElementAtPosition(e,t);return n&&Xe(n)&&!n.isDeleted?n:null}},{key:\"getElementAtPosition\",value:function(e,t,n){var r=this.getElementsAtPosition(e,t);if(r.length>1){if(null!=n&&n.preferSelected)for(var o=r.length-1;o>-1;o--)if(this.state.selectedElementIds[r[o].id])return r[o];var a=r[r.length-1];return ma(a,this.state,e,t)?r[r.length-2]:a}return 1===r.length?r[0]:null}},{key:\"getElementsAtPosition\",value:function(e,t){var n,r,o=this;return n=this.scene.getElements(),r=function(n){return function(e,t,n,r){var o=10\/t.zoom.value,a=[n,r];return va(t,e)?ba(e,a,o):ga(e,t,a)}(n,o.state,e,t)},n.filter((function(e){return!e.isDeleted&&r(e)}))}},{key:\"maybeCleanupAfterMissingPointerUp\",value:function(e){null!==bh&&bh(e)}},{key:\"updateGestureOnPointerDown\",value:function(e){yh.pointers.set(e.pointerId,{x:e.clientX,y:e.clientY}),2===yh.pointers.size&&(yh.lastCenter=Lp(yh.pointers),yh.initialScale=this.state.zoom.value,yh.initialDistance=_p(Array.from(yh.pointers.values())))}},{key:\"initialPointerDownState\",value:function(e){var t=Yn(e,this.state),n=ol(this.scene.getElements(),this.state),r=R(St(n),4),o=r[0],a=r[1],i=r[2],l=r[3];return{origin:t,withCmdOrCtrl:e[ln],originInGrid:Jn(pt(t.x,t.y,this.state.gridSize)),scrollbars:nl(mh,e.clientX-this.state.offsetLeft,e.clientY-this.state.offsetTop),lastCoords:nh({},t),originalElements:this.scene.getElements().reduce((function(e,t){return e.set(t.id,_o(t)),e}),new Map),resize:{handleType:!1,isResizing:!1,offset:{x:0,y:0},arrowDirection:\"origin\",center:{x:(i+o)\/2,y:(l+a)\/2}},hit:{element:null,allHitElements:[],wasAddedToSelection:!1,hasBeenDuplicated:!1,hasHitCommonBoundingBoxOfSelectedElements:this.isHittingCommonBoundingBoxOfSelectedElements(t,n)},drag:{hasOccurred:!1,offset:null},eventListeners:{onMove:null,onUp:null,onKeyUp:null,onKeyDown:null}}}},{key:\"handleDraggingScrollBar\",value:function(e,t){var n=this;if(!t.scrollbars.isOverEither||this.state.multiElement)return!1;hh=!0,t.lastCoords.x=e.clientX,t.lastCoords.y=e.clientY;var r=nr((function(e){e.target instanceof HTMLElement&&n.handlePointerMoveOverScrollbars(e,t)})),o=nr((function(){hh=!1,Kn(n.canvas,n.state.elementType),bh=null,n.setState({cursorButton:\"up\"}),n.savePointer(e.clientX,e.clientY,\"up\"),window.removeEventListener(c.Ks.POINTER_MOVE,r),window.removeEventListener(c.Ks.POINTER_UP,o)}));return bh=o,window.addEventListener(c.Ks.POINTER_MOVE,r),window.addEventListener(c.Ks.POINTER_UP,o),!0}},{key:\"isASelectedElement\",value:function(e){return null!=e&&this.state.selectedElementIds[e.id]}},{key:\"isHittingCommonBoundingBoxOfSelectedElements\",value:function(e,t){if(t.length<2)return!1;var n=10\/this.state.zoom.value,r=R(St(t),4),o=r[0],a=r[1],i=r[2],l=r[3];return e.x>o-n&&e.x<i+n&&e.y>a-n&&e.y<l+n}},{key:\"onKeyDownFromPointerDownHandler\",value:function(e){var t=this;return nr((function(n){t.maybeHandleResize(e,n)||t.maybeDragNewGenericElement(e,n)}))}},{key:\"onKeyUpFromPointerDownHandler\",value:function(e){var t=this;return nr((function(n){n.key===an&&n.preventDefault(),t.maybeHandleResize(e,n)||t.maybeDragNewGenericElement(e,n)}))}},{key:\"onPointerMoveFromPointerDownHandler\",value:function(e){var t=this;return nr((function(n){if(null===e.drag.offset&&(e.drag.offset=Jn(function(e,t,n){var r=R(St(e),2);return[t-r[0],n-r[1]]}(ol(t.scene.getElements(),t.state),e.origin.x,e.origin.y))),n.target instanceof HTMLElement&&!t.handlePointerMoveOverScrollbars(n,e)){var r=Yn(n,t.state),o=R(pt(r.x,r.y,t.state.gridSize),2),a=o[0],i=o[1];if(e.drag.hasOccurred||\"arrow\"!==t.state.elementType&&\"line\"!==t.state.elementType||!(it(r.x,r.y,e.origin.x,e.origin.y)<c.f)){if(e.resize.isResizing&&(e.lastCoords.x=r.x,e.lastCoords.y=r.y,t.maybeHandleResize(e,n)))return!0;if(t.state.editingLinearElement)if(ti.handlePointDragging(t.state,(function(e){return t.setState(e)}),r.x,r.y,(function(e,n){t.maybeSuggestBindingForLinearElementAtCursor(e,n,r)})))return e.lastCoords.x=r.x,void(e.lastCoords.y=r.y);if(e.hit.allHitElements.some((function(e){return t.isASelectedElement(e)}))||e.hit.hasHitCommonBoundingBoxOfSelectedElements){e.drag.hasOccurred=!0;var l=ol(t.scene.getElements(),t.state);if(l.length>0&&!e.withCmdOrCtrl){var s=R(pt(r.x-e.drag.offset.x,r.y-e.drag.offset.y,t.state.gridSize),2),u=s[0],d=s[1],p=[Math.abs(r.x-e.origin.x),Math.abs(r.y-e.origin.y)],f=p[0],h=p[1],m=n.shiftKey;if(function(e,t,n,r,o){var a=arguments.length>5&&void 0!==arguments[5]&&arguments[5],i=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,l=arguments.length>7&&void 0!==arguments[7]?arguments[7]:0,s=R(St(t),2),c=s[0],u=s[1],d={x:n-c,y:r-u};t.forEach((function(n){var r,o;if(a){var s=a&&i<l,c=a&&i>l,u=e.originalElements.get(n.id);r=s&&u?u.x:n.x+d.x,o=c&&u?u.y:n.y+d.y}else r=n.x+d.x,o=n.y+d.y;ao(n,{x:r,y:o}),gi(n,{simultaneouslyUpdated:t})}))}(e,l,u,d,t.scene,m,f,h),t.maybeSuggestBindingForAll(l),n.altKey&&!e.hit.hasBeenDuplicated){e.hit.hasBeenDuplicated=!0;var g,v=[],b=[],y=new Map,x=new Map,w=e.hit.element,k=Jf(t.scene.getElementsIncludingDeleted());try{for(k.s();!(g=k.n()).done;){var S=g.value;if(t.state.selectedElementIds[S.id]||S.id===(null==w?void 0:w.id)&&e.hit.wasAddedToSelection){var E=Do(t.state.editingGroupId,y,S),j=R(pt(e.origin.x-e.drag.offset.x,e.origin.y-e.drag.offset.y,t.state.gridSize),2),C=j[0],O=j[1];ao(E,{x:E.x+(C-u),y:E.y+(O-d)}),v.push(E),b.push(S),x.set(S.id,E.id)}else v.push(S)}}catch(e){k.e(e)}finally{k.f()}var M=[].concat(v,b);Ci(M,b,x,\"duplicatesServeAsOld\"),t.scene.replaceAllElements(M)}return}}var I=t.state.draggingElement;if(I){if(\"freedraw\"===I.type){var P=I.points,T=r.x-I.x,A=r.y-I.y,L=I.simulatePressure?I.pressures:[].concat(F(I.pressures),[n.pressure]);ao(I,{points:[].concat(F(P),[[T,A]]),pressures:L})}else if(Qe(I)){e.drag.hasOccurred=!0;var _=I.points,D=a-I.x,z=i-I.y;if(An(n)&&2===_.length){var B=co(t.state.elementType,D,z);D=B.width,z=B.height}1===_.length?ao(I,{points:[].concat(F(_),[[D,z]])}):_.length>1&&ao(I,{points:[].concat(F(_.slice(0,-1)),[[D,z]])}),et(I)&&t.maybeSuggestBindingForLinearElementAtCursor(I,\"end\",r,t.state.startBoundElement)}else e.lastCoords.x=r.x,e.lastCoords.y=r.y,t.maybeDragNewGenericElement(e,n);if(\"selection\"===t.state.elementType){var H=t.scene.getElements();!n.shiftKey&&rl(H,t.state)&&(e.withCmdOrCtrl&&e.hit.element?t.setState((function(n){return wo(nh(nh({},n),{},{selectedElementIds:V({},e.hit.element.id,!0)}),t.scene.getElements())})):t.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null}));var N=function(e,t){var n=R(gt(t),4),r=n[0],o=n[1],a=n[2],i=n[3];return e.filter((function(e){var t=R(kt(e),4),n=t[0],l=t[1],s=t[2],c=t[3];return\"selection\"!==e.type&&r<=n&&o<=l&&a>=s&&i>=c}))}(H,I);t.setState((function(n){return wo(nh(nh({},n),{},{selectedElementIds:nh(nh(nh({},n.selectedElementIds),N.reduce((function(e,t){return e[t.id]=!0,e}),{})),e.hit.element?V({},e.hit.element.id,!N.length):null)}),t.scene.getElements())}))}}}}}))}},{key:\"handlePointerMoveOverScrollbars\",value:function(e,t){if(t.scrollbars.isOverHorizontal){var n=e.clientX,r=n-t.lastCoords.x;return this.setState({scrollX:this.state.scrollX-r\/this.state.zoom.value}),t.lastCoords.x=n,!0}if(t.scrollbars.isOverVertical){var o=e.clientY,a=o-t.lastCoords.y;return this.setState({scrollY:this.state.scrollY-a\/this.state.zoom.value}),t.lastCoords.y=o,!0}return!1}},{key:\"onPointerUpFromPointerDownHandler\",value:function(e){var t=this;return nr((function(n){var r=t.state,o=r.draggingElement,a=r.resizingElement,i=r.multiElement,l=r.elementType,s=r.elementLocked,u=r.isResizing,d=r.isRotating;if(t.setState({isResizing:!1,isRotating:!1,resizingElement:null,selectionElement:null,cursorButton:\"up\",editingElement:i||Xe(t.state.editingElement)?t.state.editingElement:null}),t.savePointer(n.clientX,n.clientY,\"up\"),t.state.editingLinearElement){var p=ti.handlePointerUp(n,t.state.editingLinearElement,t.state);p!==t.state.editingLinearElement&&t.setState({editingLinearElement:p,suggestedBindings:[]})}if(bh=null,window.removeEventListener(c.Ks.POINTER_MOVE,e.eventListeners.onMove),window.removeEventListener(c.Ks.POINTER_UP,e.eventListeners.onUp),window.removeEventListener(c.Ks.KEYDOWN,e.eventListeners.onKeyDown),window.removeEventListener(c.Ks.KEYUP,e.eventListeners.onKeyUp),\"freedraw\"===(null==o?void 0:o.type)){var f=Yn(n,t.state),h=o.points,m=f.x-o.x,g=f.y-o.y;m===h[0][0]&&g===h[0][1]&&(g+=1e-4,m+=1e-4);var v=o.simulatePressure?[]:[].concat(F(o.pressures),[n.pressure]);return ao(o,{points:[].concat(F(h),[[m,g]]),pressures:v}),void t.actionManager.executeAction(Pc)}if(Qe(o)){o.points.length>1&&t.history.resumeRecording();var b=Yn(n,t.state);e.drag.hasOccurred||!o||i?e.drag.hasOccurred&&!i&&(ri(t.state)&&et(o)&&si(o,t.state,t.scene,b),t.setState({suggestedBindings:[],startBoundElement:null}),s?t.setState((function(e){return{draggingElement:null,selectedElementIds:nh(nh({},e.selectedElementIds),{},V({},t.state.draggingElement.id,!0))}})):(Gn(t.canvas),t.setState((function(e){return{draggingElement:null,elementType:\"selection\",selectedElementIds:nh(nh({},e.selectedElementIds),{},V({},t.state.draggingElement.id,!0))}})))):(ao(o,{points:[].concat(F(o.points),[[b.x-o.x,b.y-o.y]])}),t.setState({multiElement:o,editingElement:t.state.draggingElement}))}else{if(\"selection\"!==l&&o&&so(o))return t.scene.replaceAllElements(t.scene.getElementsIncludingDeleted().slice(0,-1)),void t.setState({draggingElement:null});o&&ao(o,uo(o)),a&&t.history.resumeRecording(),a&&so(a)&&t.scene.replaceAllElements(t.scene.getElementsIncludingDeleted().filter((function(e){return e.id!==a.id})));var y=e.hit.element;if(y&&!e.drag.hasOccurred&&!e.hit.wasAddedToSelection)if(n.shiftKey)if(t.state.selectedElementIds[y.id])if(bo(t.state,y)){var x=y.groupIds.flatMap((function(e){return So(t.scene.getElements(),e)})).map((function(e){return V({},e.id,!1)})).reduce((function(e,t){return nh(nh({},e),t)}),{});t.setState((function(e){return{selectedGroupIds:nh(nh({},e.selectedElementIds),y.groupIds.map((function(e){return V({},e,!1)})).reduce((function(e,t){return nh(nh({},e),t)}),{})),selectedElementIds:nh(nh({},e.selectedElementIds),x)}}))}else t.setState((function(e){return wo(nh(nh({},e),{},{selectedElementIds:nh(nh({},e.selectedElementIds),{},V({},y.id,!1))}),t.scene.getElements())}));else t.setState((function(e){return{selectedElementIds:nh(nh({},e.selectedElementIds),{},V({},y.id,!0))}}));else t.setState((function(e){return nh({},wo(nh(nh({},e),{},{selectedElementIds:V({},y.id,!0)}),t.scene.getElements()))}));t.state.editingLinearElement||e.drag.hasOccurred||t.state.isResizing||!(y&&ma(y,t.state,e.origin.x,e.origin.y)||!y&&e.hit.hasHitCommonBoundingBoxOfSelectedElements)?(!s&&\"freedraw\"!==l&&o&&t.setState((function(e){return{selectedElementIds:nh(nh({},e.selectedElementIds),{},V({},o.id,!0))}})),(\"selection\"!==l||rl(t.scene.getElements(),t.state))&&t.history.resumeRecording(),(e.drag.hasOccurred||u||d)&&(ri(t.state)?ii:pi)(ol(t.scene.getElements(),t.state)),s||\"freedraw\"===l?t.setState({draggingElement:null,suggestedBindings:[]}):(Gn(t.canvas),t.setState({draggingElement:null,suggestedBindings:[],elementType:\"selection\"}))):t.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})}}))}},{key:\"maybeSuggestBindingForAll\",value:function(e){var t,n,r=(t=e,n=new Set(t.map((function(e){return e.id}))),t.flatMap((function(e){return et(e)?wi(e).filter((function(e){return!n.has(e.id)})):nt(e)?Ei(e).filter((function(e){return!n.has(e[0].id)})):[]})));this.setState({suggestedBindings:r})}},{key:\"clearSelection\",value:function(e){this.setState((function(t){return{selectedElementIds:{},selectedGroupIds:{},editingGroupId:t.editingGroupId&&null!=e&&ko(e,t.editingGroupId)?t.editingGroupId:null}})),this.setState({selectedElementIds:{},previousSelectedElementIds:this.state.selectedElementIds})}},{key:\"getTextWysiwygSnappedToCenterPosition\",value:function(e,t,n,r,o){var a=function(e,t,n){for(var r=null,o=e.length-1;o>=0;--o)if(!e[o].isDeleted){var a=R(gt(e[o]),4),i=a[0],l=a[1],s=a[2],c=a[3];if(i<t&&t<s&&l<n&&n<c){r=e[o];break}}return r}(this.scene.getElementsIncludingDeleted().filter((function(e){return!Xe(e)})),e,t);if(a){var i=a.x+a.width\/2,l=a.y+a.height\/2;if(Math.hypot(e-i,t-l)<c.wZ){var s=Xn({sceneX:i,sceneY:l},n);return{viewportX:s.x,viewportY:s.y,elementCenterX:i,elementCenterY:l}}}}},{key:\"getCanvasOffsets\",value:function(){var e;if(null!==(e=this.excalidrawContainerRef)&&void 0!==e&&e.current){var t=this.excalidrawContainerRef.current.getBoundingClientRect();return{offsetLeft:t.left,offsetTop:t.top}}return{offsetLeft:0,offsetTop:0}}},{key:\"updateLanguage\",value:(t=(0,d.Z)(k().mark((function e(){var t,n=this;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=C.find((function(e){return e.code===n.props.langCode}))||j,e.next=3,P(t);case 3:this.setAppState({});case 4:case\"end\":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}],[{key:\"resetTapTwice\",value:function(){sh=!1}}]),o}(s().Component);xh.defaultProps={UIOptions:c.cW};var wh=function(){var e=this;this.canvas=null,this.rc=null,this.unmounted=!1,this.isMobile=!1,this.excalidrawContainerRef=s().createRef(),this.focusContainer=function(){var t;e.props.autoFocus&&(null===(t=e.excalidrawContainerRef.current)||void 0===t||t.focus())},this.getSceneElementsIncludingDeleted=function(){return e.scene.getElementsIncludingDeleted()},this.getSceneElements=function(){return e.scene.getElements()},this.syncActionResult=nr((function(t){if(!e.unmounted&&!1!==t){var n=null;if(t.elements&&(t.elements.forEach((function(t){var r;(null===(r=e.state.editingElement)||void 0===r?void 0:r.id)===t.id&&e.state.editingElement!==t&&$i(t)&&(n=t)})),e.scene.replaceAllElements(t.elements),t.commitToHistory&&e.history.resumeRecording()),t.appState||n){var r,o,a,i,l,s;t.commitToHistory&&e.history.resumeRecording();var u=(null==t||null===(r=t.appState)||void 0===r?void 0:r.viewModeEnabled)||!1,d=(null==t||null===(o=t.appState)||void 0===o?void 0:o.zenModeEnabled)||!1,p=(null==t||null===(a=t.appState)||void 0===a?void 0:a.gridSize)||null,f=(null==t||null===(i=t.appState)||void 0===i?void 0:i.theme)||\"light\",h=null!==(l=null==t||null===(s=t.appState)||void 0===s?void 0:s.name)&&void 0!==l?l:e.state.name;void 0!==e.props.viewModeEnabled&&(u=e.props.viewModeEnabled),void 0!==e.props.zenModeEnabled&&(d=e.props.zenModeEnabled),void 0!==e.props.gridModeEnabled&&(p=e.props.gridModeEnabled?c.k:null),void 0!==e.props.theme&&(f=e.props.theme),void 0!==e.props.name&&(h=e.props.name),e.setState((function(e){var r;return Object.assign(t.appState||{},{editingElement:n||(null===(r=t.appState)||void 0===r?void 0:r.editingElement)||null,viewModeEnabled:u,zenModeEnabled:d,gridSize:p,theme:f,name:h})}),(function(){t.syncHistory&&e.history.setCurrentState(e.state,e.scene.getElementsIncludingDeleted())}))}}})),this.onBlur=nr((function(){ph=!1,e.setState({isBindingEnabled:!0})})),this.onUnload=function(){e.onBlur()},this.disableEvent=function(e){e.preventDefault()},this.onFontLoaded=function(){e.scene.getElementsIncludingDeleted().forEach((function(e){Xe(e)&&Hr(e)})),e.onSceneUpdated()},this.importLibraryFromUrl=function(){var t=(0,d.Z)(k().mark((function t(n,r){var o,a,i,l,s;return k().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return window.location.hash.includes(c.ah.addLibrary)?((o=new URLSearchParams(window.location.hash.slice(1))).delete(c.ah.addLibrary),window.history.replaceState({},c.iC,\"#\".concat(o.toString()))):window.location.search.includes(c.UO.addLibrary)&&((a=new URLSearchParams(window.location.search)).delete(c.UO.addLibrary),window.history.replaceState({},c.iC,\"?\".concat(a.toString()))),t.prev=1,t.next=4,fetch(decodeURIComponent(n));case 4:return i=t.sent,t.next=7,i.blob();case 7:return l=t.sent,t.t0=JSON,t.next=11,l.text();case 11:if(t.t1=t.sent,s=t.t0.parse.call(t.t0,t.t1),Pu(s)){t.next=15;break}throw new Error;case 15:if(r!==e.id&&!window.confirm(L(\"alerts.confirmAddLibrary\",{numShapes:s.library.length}))){t.next=20;break}return t.next=18,e.library.importLibrary(l);case 18:e.state.isLibraryOpen&&e.setState({isLibraryOpen:!1}),e.setState({isLibraryOpen:!0});case 20:t.next=26;break;case 22:t.prev=22,t.t2=t.catch(1),window.alert(L(\"alerts.errorLoadingLibrary\")),console.error(t.t2);case 26:return t.prev=26,e.focusContainer(),t.finish(26);case 29:case\"end\":return t.stop()}}),t,null,[[1,22,26,29]])})));return function(e,n){return t.apply(this,arguments)}}(),this.resetHistory=function(){e.history.clear()},this.resetScene=nr((function(t){e.scene.replaceAllElements([]),e.setState((function(n){return nh(nh({},ir()),{},{isLoading:(null==t||!t.resetLoadingState)&&n.isLoading,theme:e.state.theme})})),e.resetHistory()})),this.initializeScene=(0,d.Z)(k().mark((function t(){var n,r,o,a,i;return k().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return\"launchQueue\"in window&&\"LaunchParams\"in window&&window.launchQueue.setConsumer(function(){var t=(0,d.Z)(k().mark((function t(n){var r,o;return k().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n.files.length){t.next=2;break}return t.abrupt(\"return\");case 2:return r=n.files[0],t.next=5,r.getFile();case 5:(o=t.sent).handle=r,Su(o,e.state,e.scene.getElementsIncludingDeleted()).then((function(t){var n=t.elements,r=t.appState;return e.syncActionResult({elements:n,appState:nh(nh({},r||e.state),{},{isLoading:!1}),commitToHistory:!0})})).catch((function(t){e.setState({isLoading:!1,errorMessage:t.message})}));case 8:case\"end\":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),e.state.isLoading||e.setState({isLoading:!0}),r=null,t.prev=3,t.next=6,e.props.initialData;case 6:if(t.t0=t.sent,t.t0){t.next=9;break}t.t0=null;case 9:r=t.t0,null!==(o=r)&&void 0!==o&&o.libraryItems&&(e.libraryItemsFromStorage=r.libraryItems),t.next=17;break;case 13:t.prev=13,t.t1=t.catch(3),console.error(t.t1),r={appState:{errorMessage:t.t1.message||\"Encountered an error during importing or restoring scene data\"}};case 17:if((a=vu(r,null,null)).appState=nh(nh({},a.appState),{},{isLoading:!1}),null!==(n=r)&&void 0!==n&&n.scrollToContent&&(a.appState=nh(nh({},a.appState),ll(a.elements,nh(nh({},a.appState),{},{width:e.state.width,height:e.state.height,offsetTop:e.state.offsetTop,offsetLeft:e.state.offsetLeft})))),e.resetHistory(),e.syncActionResult(nh(nh({},a),{},{commitToHistory:!0})),!(i=new URLSearchParams(window.location.hash.slice(1)).get(c.ah.addLibrary)||new URLSearchParams(window.location.search).get(c.UO.addLibrary))){t.next=26;break}return t.next=26,e.importLibraryFromUrl(i);case 26:case\"end\":return t.stop()}}),t,null,[[3,13]])}))),this.onResize=nr((function(){e.scene.getElementsIncludingDeleted().forEach((function(e){return Hr(e)})),e.setState({})})),this.onScroll=Fn((function(){var t=e.getCanvasOffsets(),n=t.offsetTop,r=t.offsetLeft;e.setState((function(e){return e.offsetLeft===r&&e.offsetTop===n?null:{offsetTop:n,offsetLeft:r}}))}),c.HM),this.onCut=nr((function(t){var n;(null===(n=e.excalidrawContainerRef.current)||void 0===n?void 0:n.contains(document.activeElement))&&!Bn(t.target)&&(e.cutAll(),t.preventDefault())})),this.onCopy=nr((function(t){var n;(null===(n=e.excalidrawContainerRef.current)||void 0===n?void 0:n.contains(document.activeElement))&&!Bn(t.target)&&(e.copyAll(),t.preventDefault())})),this.cutAll=function(){e.copyAll(),e.actionManager.executeAction(zs)},this.copyAll=function(){ad(e.scene.getElements(),e.state)},this.onTapStart=function(t){if(!sh)return sh=!0,clearTimeout(ch),void(ch=window.setTimeout(xh.resetTapTwice,c.Gj));if(sh&&1===t.touches.length){var n=R(t.touches,1)[0];e.handleCanvasDoubleClick({clientX:n.clientX,clientY:n.clientY}),sh=!1,clearTimeout(ch)}t.preventDefault(),2===t.touches.length&&e.setState({selectedElementIds:{}})},this.onTapEnd=function(t){t.touches.length>0&&e.setState({previousSelectedElementIds:{},selectedElementIds:e.state.previousSelectedElementIds})},this.pasteFromClipboard=nr(function(){var t=(0,d.Z)(k().mark((function t(n){var r,o,a,i;return k().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(o=document.activeElement,null===(r=e.excalidrawContainerRef.current)||void 0===r?void 0:r.contains(o)){t.next=4;break}return t.abrupt(\"return\");case 4:if(a=document.elementFromPoint(uh,dh),!n||a instanceof HTMLCanvasElement&&!Bn(o)){t.next=7;break}return t.abrupt(\"return\");case 7:return t.next=9,cd(n);case 9:if(i=t.sent,!e.props.onPaste){t.next=22;break}return t.prev=11,t.next=14,e.props.onPaste(i,n);case 14:if(t.t0=t.sent,!1!==t.t0){t.next=17;break}return t.abrupt(\"return\");case 17:t.next=22;break;case 19:t.prev=19,t.t1=t.catch(11),console.error(t.t1);case 22:i.errorMessage?e.setState({errorMessage:i.errorMessage}):i.spreadsheet?e.setState({pasteDialog:{data:i.spreadsheet,shown:!0}}):i.elements?e.addElementsFromPasteOrLibrary({elements:i.elements,position:\"cursor\"}):i.text&&e.addTextFromPaste(i.text),e.selectShapeTool(\"selection\"),null==n||n.preventDefault();case 25:case\"end\":return t.stop()}}),t,null,[[11,19]])})));return function(e){return t.apply(this,arguments)}}()),this.addElementsFromPasteOrLibrary=function(t){var n=mu(t.elements,null),r=R(St(n),4),o=r[0],a=r[1],i=r[2],l=r[3],s=Vn(o,i)\/2,c=Vn(a,l)\/2,u=\"object\"===v(t.position)?t.position.clientX:\"cursor\"===t.position?uh:e.state.width\/2+e.state.offsetLeft,d=\"object\"===v(t.position)?t.position.clientY:\"cursor\"===t.position?dh:e.state.height\/2+e.state.offsetTop,p=Yn({clientX:u,clientY:d},e.state),f=p.x-s,h=p.y-c,m=new Map,g=R(pt(f,h,e.state.gridSize),2),b=g[0],y=g[1],x=new Map,w=n.map((function(t){var n=Do(e.state.editingGroupId,m,t,{x:t.x+b-o,y:t.y+y-a});return x.set(t.id,n.id),n})),k=[].concat(F(e.scene.getElementsIncludingDeleted()),F(w));Ci(k,n,x),e.scene.replaceAllElements(k),e.history.resumeRecording(),e.setState(wo(nh(nh({},e.state),{},{isLibraryOpen:!1,selectedElementIds:w.reduce((function(e,t){return e[t.id]=!0,e}),{}),selectedGroupIds:{}}),e.scene.getElements())),e.selectShapeTool(\"selection\")},this.setAppState=function(t){e.setState(t)},this.removePointer=function(e){\"touch\"===e.pointerType&&gh&&(clearTimeout(gh),gh=0,vh=!1),yh.pointers.delete(e.pointerId)},this.toggleLock=function(){e.setState((function(e){return{elementLocked:!e.elementLocked,elementType:e.elementLocked?\"selection\":e.elementType}}))},this.toggleZenMode=function(){e.actionManager.executeAction(Ep)},this.toggleStats=function(){e.state.showStats||Tc(\"dialog\",\"stats\"),e.actionManager.executeAction(Op)},this.scrollToContent=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.scene.getElements();e.setState(nh({},ll(Array.isArray(t)?t:[t],e.state,e.canvas)))},this.clearToast=function(){e.setState({toastMessage:null})},this.setToastMessage=function(t){e.setState({toastMessage:t})},this.restoreFileFromShare=(0,d.Z)(k().mark((function t(){var n,r,o;return k().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,caches.open(\"web-share-target\");case 3:return n=t.sent,t.next=6,n.match(\"shared-file\");case 6:if(!(r=t.sent)){t.next=15;break}return t.next=10,r.blob();case 10:return o=t.sent,e.loadFileToCanvas(o),t.next=14,n.delete(\"shared-file\");case 14:window.history.replaceState(null,c.iC,window.location.pathname);case 15:t.next=20;break;case 17:t.prev=17,t.t0=t.catch(0),e.setState({errorMessage:t.t0.message});case 20:case\"end\":return t.stop()}}),t,null,[[0,17]])}))),this.updateScene=nr((function(t){t.commitToHistory&&e.history.resumeRecording(),t.appState&&e.setState(t.appState),t.elements&&e.scene.replaceAllElements(t.elements),t.collaborators&&e.setState({collaborators:t.collaborators})})),this.onSceneUpdated=function(){e.setState({})},this.updateCurrentCursorPosition=nr((function(e){uh=e.clientX,dh=e.clientY})),this.onKeyDown=nr((function(t){var n;if((\"Proxy\"in window&&(!t.shiftKey&&\/^[A-Z]$\/.test(t.key)||t.shiftKey&&\/^[a-z]$\/.test(t.key))&&(t=new Proxy(t,{get:function(e,n){var r=e[n];return\"function\"==typeof r?r.bind(e):\"key\"===n?t.shiftKey?e.key.toUpperCase():e.key.toLowerCase():r}})),!(Bn(t.target)&&t.key!==un||In(t.key)&&(n=t.target,n instanceof HTMLElement&&\"wysiwyg\"===n.dataset.type||n instanceof HTMLBRElement||n instanceof HTMLInputElement||n instanceof HTMLTextAreaElement||n instanceof HTMLSelectElement)))&&(t.key===dn&&e.setState({showHelpDialog:!0}),!e.actionManager.handleKeyDown(t)&&!e.state.viewModeEnabled)){if(t[ln]&&e.state.isBindingEnabled&&e.setState({isBindingEnabled:!1}),t.code===Ft&&e.setState({isLibraryOpen:!e.state.isLibraryOpen}),In(t.key)){var r=e.state.gridSize&&(t.shiftKey?c.$e:e.state.gridSize)||(t.shiftKey?c.Iw:c.$e),o=e.scene.getElements().filter((function(t){return e.state.selectedElementIds[t.id]})),a=0,i=0;t.key===tn?a=-r:t.key===nn?a=r:t.key===rn?i=-r:t.key===en&&(i=r),o.forEach((function(e){ao(e,{x:e.x+a,y:e.y+i}),gi(e,{simultaneouslyUpdated:o})})),e.maybeSuggestBindingForAll(o),t.preventDefault()}else if(t.key===cn){var l=ol(e.scene.getElements(),e.state);if(1===l.length&&Qe(l[0]))e.state.editingLinearElement&&e.state.editingLinearElement.elementId===l[0].id||(e.history.resumeRecording(),e.setState({editingLinearElement:new ti(l[0],e.scene)}));else if(1===l.length&&!Qe(l[0])){var s=l[0];return e.startTextEditing({sceneX:s.x+s.width\/2,sceneY:s.y+s.height\/2}),void t.preventDefault()}}else if(!t.ctrlKey&&!t.altKey&&!t.metaKey&&null===e.state.draggingElement){var u=function(e){var t=Rp.find((function(t,n){return e===(n+1).toString()||(\"string\"==typeof t.key?t.key===e:t.key.includes(e))}));return(null==t?void 0:t.value)||null}(t.key);u?e.selectShapeTool(u):t.key===wn&&e.toggleLock()}if(t.key===pn&&0===yh.pointers.size&&(ph=!0,Un(e.canvas,c.oc.GRABBING)),t.key===vn||t.key===Sn){var d=ol(e.scene.getElements(),e.state);if(\"selection\"===e.state.elementType&&!d.length)return;t.key===vn&&(sl(e.state.elementType)||d.some((function(e){return sl(e.type)})))&&e.setState({openPopup:\"backgroundColorPicker\"}),t.key===Sn&&e.setState({openPopup:\"strokeColorPicker\"})}}})),this.onKeyUp=nr((function(t){if(t.key===pn&&(e.state.viewModeEnabled?Un(e.canvas,c.oc.GRAB):\"selection\"===e.state.elementType?Gn(e.canvas):(Kn(e.canvas,e.state.elementType),e.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})),ph=!1),t[ln]||e.state.isBindingEnabled||e.setState({isBindingEnabled:!0}),In(t.key)){var n=ol(e.scene.getElements(),e.state);ri(e.state)?ii(n):pi(n),e.setState({suggestedBindings:[]})}})),this.onGestureStart=nr((function(t){t.preventDefault(),e.setState({selectedElementIds:{}}),yh.initialScale=e.state.zoom.value})),this.onGestureChange=nr((function(t){if(t.preventDefault(),2!==yh.pointers.size){var n=yh.initialScale;n&&e.setState((function(e){var r=e.zoom,o=e.offsetLeft,a=e.offsetTop;return{zoom:ml(gl(n*t.scale),r,{left:o,top:a},{x:uh,y:dh})}}))}})),this.onGestureEnd=nr((function(t){t.preventDefault(),e.setState({previousSelectedElementIds:{},selectedElementIds:e.state.previousSelectedElementIds}),yh.initialScale=null})),this.startTextEditing=function(t){var n=t.sceneX,r=t.sceneY,o=t.insertAtParentCenter,a=void 0===o||o,i=e.getTextElementAtPosition(n,r),l=a&&e.getTextWysiwygSnappedToCenterPosition(n,r,e.state,e.canvas,window.devicePixelRatio),s=i||To({x:l?l.elementCenterX:n,y:l?l.elementCenterY:r,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,strokeSharpness:e.state.currentItemStrokeSharpness,text:\"\",fontSize:e.state.currentItemFontSize,fontFamily:e.state.currentItemFontFamily,textAlign:l?\"center\":e.state.currentItemTextAlign,verticalAlign:l?\"middle\":c.hs});e.setState({editingElement:s}),i?l&&\"center\"===s.textAlign||ao(s,{verticalAlign:c.hs}):(e.scene.replaceAllElements([].concat(F(e.scene.getElementsIncludingDeleted()),[s])),l||ao(s,{y:s.y-s.baseline\/2})),e.setState({editingElement:s}),e.handleTextWysiwyg(s,{isExistingElement:!!i})},this.handleCanvasDoubleClick=function(t){if(!e.state.multiElement&&\"selection\"===e.state.elementType){var n=ol(e.scene.getElements(),e.state);if(1===n.length&&Qe(n[0]))e.state.editingLinearElement&&e.state.editingLinearElement.elementId===n[0].id||(e.history.resumeRecording(),e.setState({editingLinearElement:new ti(n[0],e.scene)}));else{Gn(e.canvas);var r=Yn(t,e.state),o=r.x,a=r.y;if(xo(e.state).length>0){var i=e.getElementAtPosition(o,a),l=i&&function(e,t){return e.groupIds.find((function(e){return t[e]}))}(i,e.state.selectedGroupIds);if(l)return void e.setState((function(t){return wo(nh(nh({},t),{},{editingGroupId:l,selectedElementIds:V({},i.id,!0),selectedGroupIds:{}}),e.scene.getElements())}))}Gn(e.canvas),t[ln]||e.state.viewModeEnabled||e.startTextEditing({sceneX:o,sceneY:a,insertAtParentCenter:!t.altKey})}}},this.handleCanvasPointerMove=function(t){e.savePointer(t.clientX,t.clientY,e.state.cursorButton),yh.pointers.has(t.pointerId)&&yh.pointers.set(t.pointerId,{x:t.clientX,y:t.clientY});var n=yh.initialScale;if(2===yh.pointers.size&&yh.lastCenter&&n&&yh.initialDistance){var r=Lp(yh.pointers),o=r.x-yh.lastCenter.x,a=r.y-yh.lastCenter.y;yh.lastCenter=r;var i=_p(Array.from(yh.pointers.values()))\/yh.initialDistance;e.setState((function(e){var t=e.zoom,l=e.scrollX,s=e.scrollY,c=e.offsetLeft,u=e.offsetTop;return{scrollX:l+o\/t.value,scrollY:s+a\/t.value,zoom:ml(gl(n*i),t,{left:c,top:u},r),shouldCacheIgnoreZoom:!0}})),e.resetShouldCacheIgnoreZoomDebounced()}else yh.lastCenter=yh.initialDistance=yh.initialScale=null;if(!(ph||fh||hh)){var l=nl(mh,t.clientX-e.state.offsetLeft,t.clientY-e.state.offsetTop).isOverEither;e.state.draggingElement||e.state.multiElement||(l?Gn(e.canvas):Kn(e.canvas,e.state.elementType));var s=Yn(t,e.state),u=s.x,d=s.y;if(e.state.editingLinearElement&&!e.state.editingLinearElement.isDragging){var p=ti.handlePointerMove(t,u,d,e.state.editingLinearElement,e.state.gridSize);p!==e.state.editingLinearElement&&e.setState({editingLinearElement:p}),null!=p.lastUncommittedPoint?e.maybeSuggestBindingAtCursor(s):e.setState({suggestedBindings:[]})}if(tt(e.state.elementType)){var f=e.state.draggingElement;et(f)?e.maybeSuggestBindingForLinearElementAtCursor(f,\"end\",s,e.state.startBoundElement):e.maybeSuggestBindingAtCursor(s)}if(e.state.multiElement){var h=e.state.multiElement,m=h.x,g=h.y,v=h.points,b=h.lastCommittedPoint,y=v[v.length-1];return Kn(e.canvas,e.state.elementType),void(y===b?it(u-m,d-g,y[0],y[1])>=c.qx?ao(h,{points:[].concat(F(v),[[u-m,d-g]])}):Un(e.canvas,c.oc.POINTER):v.length>2&&b&&it(u-m,d-g,b[0],b[1])<c.qx?(Un(e.canvas,c.oc.POINTER),ao(h,{points:v.slice(0,-1)})):(lt(v,e.state.zoom.value)&&Un(e.canvas,c.oc.POINTER),ao(h,{points:[].concat(F(v.slice(0,-1)),[[u-m,d-g]])})))}if(!(Boolean(t.buttons)||\"selection\"!==e.state.elementType&&\"text\"!==e.state.elementType)){var x=e.scene.getElements(),w=ol(x,e.state);if(1!==w.length||l||e.state.editingLinearElement){if(w.length>1&&!l){var k=qa(St(w),u,d,e.state.zoom,t.pointerType);if(k)return void Un(e.canvas,Qa({transformHandleType:k}))}}else{var S=Xa(x,e.state,u,d,e.state.zoom,t.pointerType);if(S&&S.transformHandleType)return void Un(e.canvas,Qa(S))}var E=e.getElementAtPosition(s.x,s.y);\"text\"===e.state.elementType?Un(e.canvas,Xe(E)?c.oc.TEXT:c.oc.CROSSHAIR):e.state.viewModeEnabled?Un(e.canvas,c.oc.GRAB):l||t[ln]||!E&&!e.isHittingCommonBoundingBoxOfSelectedElements(s,w)?Un(e.canvas,c.oc.AUTO):Un(e.canvas,c.oc.MOVE)}}},this.handleTouchMove=function(e){vh=!0},this.handleCanvasPointerDown=function(t){var n=document.getSelection();if(null!=n&&n.anchorNode&&n.removeAllRanges(),e.maybeOpenContextMenuAfterPointerDownOnTouchDevices(t),e.maybeCleanupAfterMissingPointerUp(t),!fh&&(e.setState({lastPointerDownWith:t.pointerType,cursorButton:\"down\"}),e.savePointer(t.clientX,t.clientY,\"down\"),!e.handleCanvasPanUsingWheelOrSpaceDrag(t)&&!(t.button!==c.Oh.MAIN&&t.button!==c.Oh.TOUCH||(e.updateGestureOnPointerDown(t),yh.pointers.size>1)))){var r=e.initialPointerDownState(t);if(!e.handleDraggingScrollBar(t,r)&&(e.clearSelectionIfNotUsingSelection(),e.updateBindingEnabledOnPointerMove(t),!e.handleSelectionOnPointerDown(t,r)))if(\"text\"!==e.state.elementType){\"arrow\"===e.state.elementType||\"line\"===e.state.elementType?e.handleLinearElementOnPointerDown(t,e.state.elementType,r):\"freedraw\"===e.state.elementType?e.handleFreeDrawElementOnPointerDown(t,e.state.elementType,r):e.createGenericElementOnPointerDown(e.state.elementType,r);var o=e.onPointerMoveFromPointerDownHandler(r),a=e.onPointerUpFromPointerDownHandler(r),i=e.onKeyDownFromPointerDownHandler(r),l=e.onKeyUpFromPointerDownHandler(r);bh=a,e.state.viewModeEnabled||(window.addEventListener(c.Ks.POINTER_MOVE,o),window.addEventListener(c.Ks.POINTER_UP,a),window.addEventListener(c.Ks.KEYDOWN,i),window.addEventListener(c.Ks.KEYUP,l),r.eventListeners.onMove=o,r.eventListeners.onUp=a,r.eventListeners.onKeyUp=l,r.eventListeners.onKeyDown=i)}else e.handleTextOnPointerDown(t,r)}},this.maybeOpenContextMenuAfterPointerDownOnTouchDevices=function(t){\"touch\"===t.pointerType&&(vh=!1,gh?vh=!0:gh=window.setTimeout((function(){gh=0,vh||e.handleCanvasContextMenu(t)}),c.nM))},this.handleCanvasPanUsingWheelOrSpaceDrag=function(t){if(0!==yh.pointers.size||!(t.button===c.Oh.WHEEL||t.button===c.Oh.MAIN&&ph||e.state.viewModeEnabled))return!1;fh=!0;var n=!1,r=\/Linux\/.test(window.navigator.platform);Un(e.canvas,c.oc.GRABBING);var o=t.clientX,a=t.clientY,i=nr((function(t){var i=o-t.clientX,l=a-t.clientY;if(o=t.clientX,a=t.clientY,r&&!n&&(Math.abs(i)>1||Math.abs(l)>1)){n=!0;var s=function e(t){document.body.removeEventListener(c.Ks.PASTE,e),t.stopPropagation()};document.body.addEventListener(c.Ks.PASTE,s),window.addEventListener(c.Ks.POINTER_UP,(function e(){setTimeout((function(){document.body.removeEventListener(c.Ks.PASTE,s),window.removeEventListener(c.Ks.POINTER_UP,e)}),100)}))}e.setState({scrollX:e.state.scrollX-i\/e.state.zoom.value,scrollY:e.state.scrollY-l\/e.state.zoom.value})})),l=nr(bh=function(){bh=null,fh=!1,ph||(e.state.viewModeEnabled?Un(e.canvas,c.oc.GRAB):Kn(e.canvas,e.state.elementType)),e.setState({cursorButton:\"up\"}),e.savePointer(t.clientX,t.clientY,\"up\"),window.removeEventListener(c.Ks.POINTER_MOVE,i),window.removeEventListener(c.Ks.POINTER_UP,l),window.removeEventListener(c.Ks.BLUR,l)});return window.addEventListener(c.Ks.BLUR,l),window.addEventListener(c.Ks.POINTER_MOVE,i,{passive:!0}),window.addEventListener(c.Ks.POINTER_UP,l),!0},this.clearSelectionIfNotUsingSelection=function(){\"selection\"!==e.state.elementType&&e.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})},this.handleSelectionOnPointerDown=function(t,n){if(\"selection\"===e.state.elementType){var r=e.scene.getElements(),o=ol(r,e.state);if(1!==o.length||e.state.editingLinearElement)o.length>1&&(n.resize.handleType=qa(St(o),n.origin.x,n.origin.y,e.state.zoom,t.pointerType));else{var a=Xa(r,e.state,n.origin.x,n.origin.y,e.state.zoom,t.pointerType);null!=a&&(e.setState({resizingElement:a.element}),n.resize.handleType=a.transformHandleType)}if(n.resize.handleType)Un(e.canvas,Qa({transformHandleType:n.resize.handleType})),n.resize.isResizing=!0,n.resize.offset=Jn(function(e,t,n,r){var o=R(1===t.length?gt(t[0]):St(t),4),a=o[0],i=o[1],l=o[2],s=o[3],c=(a+l)\/2,u=(i+s)\/2,d=1===t.length?t[0].angle:0,p=R(rt(n,r,c,u,-d),2);switch(n=p[0],r=p[1],e){case\"n\":return rt(n-(a+l)\/2,r-i,0,0,d);case\"s\":return rt(n-(a+l)\/2,r-s,0,0,d);case\"w\":return rt(n-a,r-(i+s)\/2,0,0,d);case\"e\":return rt(n-l,r-(i+s)\/2,0,0,d);case\"nw\":return rt(n-a,r-i,0,0,d);case\"ne\":return rt(n-l,r-i,0,0,d);case\"sw\":return rt(n-a,r-s,0,0,d);case\"se\":return rt(n-l,r-s,0,0,d);default:return[0,0]}}(n.resize.handleType,o,n.origin.x,n.origin.y)),1===o.length&&Qe(o[0])&&2===o[0].points.length&&(n.resize.arrowDirection=(u=n.resize.handleType,d=o[0],p=R(d.points,2),f=R(p[1],2),h=f[0],m=f[1],\"nw\"===u&&(h<0||m<0)||\"ne\"===u&&h>=0||\"sw\"===u&&h<=0||\"se\"===u&&(h>0||m>0)?\"end\":\"origin\"));else{var i;if(e.state.editingLinearElement){var l=ti.handlePointerDown(t,e.state,(function(t){return e.setState(t)}),e.history,n.origin);if(l.hitElement&&(n.hit.element=l.hitElement),l.didAddPoint)return!0}n.hit.element=null!==(i=n.hit.element)&&void 0!==i?i:e.getElementAtPosition(n.origin.x,n.origin.y),n.hit.allHitElements=e.getElementsAtPosition(n.origin.x,n.origin.y);var s=n.hit.element,c=n.hit.allHitElements.some((function(t){return e.isASelectedElement(t)}));if(null!==s&&c||t.shiftKey||n.hit.hasHitCommonBoundingBoxOfSelectedElements||e.clearSelection(s),null!=s){if(t[ln])return e.state.selectedElementIds[s.id]||(n.hit.wasAddedToSelection=!0),e.setState((function(t){return nh(nh({},function(e,t){return go(go({},e),{},{editingGroupId:t.groupIds.length?t.groupIds[0]:null,selectedGroupIds:{},selectedElementIds:V({},t.id,!0)})}(t,s)),{},{previousSelectedElementIds:e.state.selectedElementIds})})),!1;e.state.selectedElementIds[s.id]||(e.state.editingGroupId&&!ko(s,e.state.editingGroupId)&&e.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null}),c||n.hit.hasHitCommonBoundingBoxOfSelectedElements||(e.setState((function(t){return wo(nh(nh({},t),{},{selectedElementIds:nh(nh({},t.selectedElementIds),{},V({},s.id,!0))}),e.scene.getElements())})),n.hit.wasAddedToSelection=!0))}e.setState({previousSelectedElementIds:e.state.selectedElementIds})}}var u,d,p,f,h,m;return!1},this.handleTextOnPointerDown=function(t,n){var r;\"text\"!==(null===(r=e.state.editingElement)||void 0===r?void 0:r.type)&&(e.startTextEditing({sceneX:n.origin.x,sceneY:n.origin.y,insertAtParentCenter:!t.altKey}),Gn(e.canvas),e.state.elementLocked||e.setState({elementType:\"selection\"}))},this.handleFreeDrawElementOnPointerDown=function(t,n,r){var o,a=R(pt(r.origin.x,r.origin.y,null),2),i=a[0],l=a[1],s=(o={type:n,x:i,y:l,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,strokeSharpness:e.state.currentItemLinearStrokeSharpness,simulatePressure:.5===t.pressure},Oo(Oo({},Mo(o.type,o)),{},{points:o.points||[],pressures:[],simulatePressure:o.simulatePressure,lastCommittedPoint:null}));e.setState((function(e){return{selectedElementIds:nh(nh({},e.selectedElementIds),{},V({},s.id,!1))}}));var c=s.simulatePressure?s.pressures:[].concat(F(s.pressures),[t.pressure]);ao(s,{points:[[0,0]],pressures:c});var u=hi(r.origin,e.scene);e.scene.replaceAllElements([].concat(F(e.scene.getElementsIncludingDeleted()),[s])),e.setState({draggingElement:s,editingElement:s,startBoundElement:u,suggestedBindings:[]})},this.handleLinearElementOnPointerDown=function(t,n,r){if(e.state.multiElement){var o=e.state.multiElement;if(\"line\"===o.type&&lt(o.points,e.state.zoom.value))return ao(o,{lastCommittedPoint:o.points[o.points.length-1]}),void e.actionManager.executeAction(Pc);var a=o.x,i=o.y,l=o.lastCommittedPoint;if(o.points.length>1&&l&&it(r.origin.x-a,r.origin.y-i,l[0],l[1])<c.qx)return void e.actionManager.executeAction(Pc);e.setState((function(e){return{selectedElementIds:nh(nh({},e.selectedElementIds),{},V({},o.id,!0))}})),ao(o,{lastCommittedPoint:o.points[o.points.length-1]}),Un(e.canvas,c.oc.POINTER)}else{var s=R(pt(r.origin.x,r.origin.y,e.state.gridSize),2),u=s[0],d=s[1],p=e.state,f=p.currentItemStartArrowhead,h=p.currentItemEndArrowhead,m=R(\"arrow\"===n?[f,h]:[null,null],2),g=m[0],v=m[1],b=Lo({type:n,x:u,y:d,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,strokeSharpness:e.state.currentItemLinearStrokeSharpness,startArrowhead:g,endArrowhead:v});e.setState((function(e){return{selectedElementIds:nh(nh({},e.selectedElementIds),{},V({},b.id,!1))}})),ao(b,{points:[].concat(F(b.points),[[0,0]])});var y=hi(r.origin,e.scene);e.scene.replaceAllElements([].concat(F(e.scene.getElementsIncludingDeleted()),[b])),e.setState({draggingElement:b,editingElement:b,startBoundElement:y,suggestedBindings:[]})}},this.createGenericElementOnPointerDown=function(t,n){var r=R(pt(n.origin.x,n.origin.y,e.state.gridSize),2),o=r[0],a=r[1],i=Io({type:t,x:o,y:a,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,strokeSharpness:e.state.currentItemStrokeSharpness});\"selection\"===i.type?e.setState({selectionElement:i,draggingElement:i}):(e.scene.replaceAllElements([].concat(F(e.scene.getElementsIncludingDeleted()),[i])),e.setState({multiElement:null,draggingElement:i,editingElement:i}))},this.updateBindingEnabledOnPointerMove=function(t){var n=function(e){return!e[ln]}(t);e.state.isBindingEnabled!==n&&e.setState({isBindingEnabled:n})},this.maybeSuggestBindingAtCursor=function(t){var n=hi(t,e.scene);e.setState({suggestedBindings:null!=n?[n]:[]})},this.maybeSuggestBindingForLinearElementAtCursor=function(t,n,r,o){var a=hi(r,e.scene);e.setState({suggestedBindings:null==a||di(t,null==o?void 0:o.id,a)?[]:[a]})},this.handleCanvasRef=function(t){var n,r,o;null!==t?(e.canvas=t,e.rc=Ke.canvas(e.canvas),e.canvas.addEventListener(c.Ks.WHEEL,e.handleWheel,{passive:!1}),e.canvas.addEventListener(c.Ks.TOUCH_START,e.onTapStart),e.canvas.addEventListener(c.Ks.TOUCH_END,e.onTapEnd)):(null===(n=e.canvas)||void 0===n||n.removeEventListener(c.Ks.WHEEL,e.handleWheel),null===(r=e.canvas)||void 0===r||r.removeEventListener(c.Ks.TOUCH_START,e.onTapStart),null===(o=e.canvas)||void 0===o||o.removeEventListener(c.Ks.TOUCH_END,e.onTapEnd))},this.handleAppOnDrop=function(){var t=(0,d.Z)(k().mark((function t(n){var r,o,a,i,l,s,u,d,p,f;return k().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(t.prev=0,\"image\/png\"!==(null==(a=n.dataTransfer.files[0])?void 0:a.type)&&\"image\/svg+xml\"!==(null==a?void 0:a.type)){t.next=21;break}if(!qc){t.next=14;break}return t.prev=4,i=n.dataTransfer.items[0],t.next=8,i.getAsFileSystemHandle();case 8:a.handle=t.sent,t.next=14;break;case 11:t.prev=11,t.t0=t.catch(4),console.warn(t.t0.name,t.t0.message);case 14:return t.next=16,Su(a,e.state,e.scene.getElementsIncludingDeleted());case 16:return l=t.sent,s=l.elements,u=l.appState,e.syncActionResult({elements:s,appState:nh(nh({},u||e.state),{},{isLoading:!1}),commitToHistory:!0}),t.abrupt(\"return\");case 21:t.next=26;break;case 23:return t.prev=23,t.t1=t.catch(0),t.abrupt(\"return\",e.setState({isLoading:!1,errorMessage:t.t1.message}));case 26:if(\"\"===(d=n.dataTransfer.getData(c.LO.excalidrawlib))){t.next=30;break}return e.addElementsFromPasteOrLibrary({elements:JSON.parse(d),position:n}),t.abrupt(\"return\");case 30:if(!((null==(p=null===(r=n.dataTransfer)||void 0===r?void 0:r.files[0])?void 0:p.type)===c.LO.excalidrawlib||null!=p&&null!==(o=p.name)&&void 0!==o&&o.endsWith(\".excalidrawlib\"))){t.next=35;break}e.library.importLibrary(p).then((function(){e.setState({isLibraryOpen:!1}),e.setState({isLibraryOpen:!0})})).catch((function(t){return e.setState({isLoading:!1,errorMessage:t.message})})),t.next=49;break;case 35:if(e.setState({isLoading:!0}),!qc){t.next=47;break}return t.prev=37,f=n.dataTransfer.items[0],t.next=41,f.getAsFileSystemHandle();case 41:p.handle=t.sent,t.next=47;break;case 44:t.prev=44,t.t2=t.catch(37),console.warn(t.t2.name,t.t2.message);case 47:return t.next=49,e.loadFileToCanvas(p);case 49:case\"end\":return t.stop()}}),t,null,[[0,23],[4,11],[37,44]])})));return function(e){return t.apply(this,arguments)}}(),this.loadFileToCanvas=function(t){Su(t,e.state,e.scene.getElementsIncludingDeleted()).then((function(t){var n=t.elements,r=t.appState;return e.syncActionResult({elements:n,appState:nh(nh({},r||e.state),{},{isLoading:!1}),commitToHistory:!0})})).catch((function(t){e.setState({isLoading:!1,errorMessage:t.message})}))},this.handleCanvasContextMenu=function(t){t.preventDefault();var n=Yn(t,e.state),r=n.x,o=n.y,a=e.getElementAtPosition(r,o,{preferSelected:!0}),i=a?\"element\":\"canvas\",l=e.excalidrawContainerRef.current.getBoundingClientRect(),s=l.top,c=l.left,u=t.clientX-c,d=t.clientY-s;a&&!e.state.selectedElementIds[a.id]?e.setState({selectedElementIds:V({},a.id,!0)},(function(){e._openContextMenu({top:d,left:u},i)})):e._openContextMenu({top:d,left:u},i)},this.maybeDragNewGenericElement=function(t,n){var r=e.state.draggingElement,o=t.lastCoords;if(r)if(\"selection\"===r.type)Fi(r,e.state.elementType,t.origin.x,t.origin.y,o.x,o.y,Vn(t.origin.x,o.x),Vn(t.origin.y,o.y),Tn(n),Pn(n));else{var a=R(pt(o.x,o.y,e.state.gridSize),2),i=a[0],l=a[1];Fi(r,e.state.elementType,t.originInGrid.x,t.originInGrid.y,i,l,Vn(t.originInGrid.x,i),Vn(t.originInGrid.y,l),Tn(n),Pn(n)),e.maybeSuggestBindingForAll([r])}},this.maybeHandleResize=function(t,n){var r=ol(e.scene.getElements(),e.state),o=t.resize.handleType;e.setState({isResizing:o&&\"rotation\"!==o,isRotating:\"rotation\"===o});var a=t.lastCoords,i=R(pt(a.x-t.resize.offset.x,a.y-t.resize.offset.y,e.state.gridSize),2),l=i[0],s=i[1];return!!function(e,t,n,r,o,a,i,l,s,c,u){if(1===n.length){var d=R(n,1)[0];return\"rotation\"===t?(Li(d,l,s,o),gi(d)):!Qe(d)||2!==d.points.length||\"nw\"!==t&&\"ne\"!==t&&\"sw\"!==t&&\"se\"!==t?!Xe(d)||\"nw\"!==t&&\"ne\"!==t&&\"sw\"!==t&&\"se\"!==t?t&&Hi(e.originalElements.get(d.id),i,d,t,a,l,s):(Bi(d,t,a,l,s),gi(d)):_i(d,r,o,l,s),!0}if(n.length>1){if(\"rotation\"===t)return Ri(e,n,l,s,o,c,u),!0;if(\"nw\"===t||\"ne\"===t||\"sw\"===t||\"se\"===t)return Ni(n,t,l,s),!0}return!1}(t,o,r,t.resize.arrowDirection,An(n),Pn(n),Tn(n),l,s,t.resize.center.x,t.resize.center.y)&&(e.maybeSuggestBindingForAll(r),!0)},this._openContextMenu=function(t,n){var r=t.left,o=t.top,a=Vd.contextItemPredicate(e.actionManager.getElementsIncludingDeleted(),e.actionManager.getAppState()),i=Gd.contextItemPredicate(e.actionManager.getElementsIncludingDeleted(),e.actionManager.getAppState()),l=lp.contextItemPredicate(e.actionManager.getElementsIncludingDeleted(),e.actionManager.getAppState()),s=sp.contextItemPredicate(e.actionManager.getElementsIncludingDeleted(),e.actionManager.getAppState()),c=\"separator\",u=e.scene.getElements(),d=[];if(od&&u.length>0&&d.push(bp),rd&&u.length>0&&d.push(vp),\"canvas\"===n){var p=[].concat(d,[void 0===e.props.gridModeEnabled&&wp,void 0===e.props.zenModeEnabled&&Ep,void 0===e.props.viewModeEnabled&&Qf,Op]);e.state.viewModeEnabled?Up({options:p,top:o,left:r,actionManager:e.actionManager,appState:e.state,container:e.excalidrawContainerRef.current}):Up({options:[e.isMobile&&navigator.clipboard&&{name:\"paste\",perform:function(t,n){return e.pasteFromClipboard(null),{commitToHistory:!1}},contextItemLabel:\"labels.paste\"},e.isMobile&&navigator.clipboard&&c,od&&u.length>0&&bp,rd&&u.length>0&&vp,(od&&u.length>0||rd&&u.length>0)&&c,Qs,c,void 0===e.props.gridModeEnabled&&wp,void 0===e.props.zenModeEnabled&&Ep,void 0===e.props.viewModeEnabled&&Qf,Op],top:o,left:r,actionManager:e.actionManager,appState:e.state,container:e.excalidrawContainerRef.current})}else\"element\"===n&&(e.state.viewModeEnabled?Up({options:[navigator.clipboard&&mp].concat(d),top:o,left:r,actionManager:e.actionManager,appState:e.state,container:e.excalidrawContainerRef.current}):Up({options:[e.isMobile&&gp,e.isMobile&&navigator.clipboard&&mp,e.isMobile&&navigator.clipboard&&{name:\"paste\",perform:function(t,n){return e.pasteFromClipboard(null),{commitToHistory:!1}},contextItemLabel:\"labels.paste\"},e.isMobile&&c].concat(d,[c,Ad,Ld,c,a&&Vd,i&&Gd,(a||i)&&c,Zd,c,Ws,Zs,Ys,Xs,c,l&&lp,s&&sp,(l||s)&&c,tc,zs]),top:o,left:r,actionManager:e.actionManager,appState:e.state,container:e.excalidrawContainerRef.current}))},this.handleWheel=nr((function(t){if(t.preventDefault(),!fh){var n=t.deltaX,r=t.deltaY,o=e.state,a=o.selectedElementIds,i=o.previousSelectedElementIds;if(t.metaKey||t.ctrlKey){var l=Math.sign(r),s=Math.abs(r);s>10&&(s=10),s*=l,0!==Object.keys(i).length&&setTimeout((function(){e.setState({selectedElementIds:i,previousSelectedElementIds:{}})}),1e3);var u=e.state.zoom.value-s\/100;return u+=Math.log10(Math.max(1,e.state.zoom.value))*-l,u=Math.round(u*c.V4*100)\/(100*c.V4),e.setState((function(e){var t=e.zoom,n=e.offsetLeft,r=e.offsetTop;return{zoom:ml(gl(u),t,{left:n,top:r},{x:uh,y:dh}),selectedElementIds:{},previousSelectedElementIds:0!==Object.keys(a).length?a:i,shouldCacheIgnoreZoom:!0}})),void e.resetShouldCacheIgnoreZoomDebounced()}t.shiftKey?e.setState((function(e){var t=e.zoom;return{scrollX:e.scrollX-(r||n)\/t.value}})):e.setState((function(e){var t=e.zoom,o=e.scrollX,a=e.scrollY;return{scrollX:o-n\/t.value,scrollY:a-r\/t.value}}))}})),this.savePointer=function(t,n,r){var o,a;if(t&&n){var i=Yn({clientX:t,clientY:n},e.state);isNaN(i.x)||isNaN(i.y),null===(o=(a=e.props).onPointerUpdate)||void 0===o||o.call(a,{pointer:i,button:r,pointersMap:yh.pointers})}},this.resetShouldCacheIgnoreZoomDebounced=Fn((function(){e.unmounted||e.setState({shouldCacheIgnoreZoom:!1})}),300),this.updateDOMRect=function(t){var n;if(null!==(n=e.excalidrawContainerRef)&&void 0!==n&&n.current){var r=e.excalidrawContainerRef.current.getBoundingClientRect(),o=r.width,a=r.height,i=r.left,l=r.top,s=e.state,c=s.width,u=s.height,d=s.offsetTop,p=s.offsetLeft;if(o===c&&a===u&&i===p&&l===d)return void(t&&t());e.setState({width:o,height:a,offsetLeft:i,offsetTop:l},(function(){t&&t()}))}},this.refresh=function(){e.setState(nh({},e.getCanvasOffsets()))}};\"production\"!==c.Vi.TEST&&\"production\"!==c.Vi.DEVELOPMENT||(window.h=window.h||{},Object.defineProperties(window.h,{elements:{configurable:!0,get:function(){return this.app.scene.getElementsIncludingDeleted()},set:function(e){return this.app.scene.replaceAllElements(e)}}}));var kh=xh;n(4285),n(3313);function Sh(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Eh(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Sh(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Sh(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var jh=function(e){var t=e.elements,n=e.appState,r=e.getDimensions,o=void 0===r?function(e,t){return{width:e,height:t,scale:1}}:r,a=vu({elements:t,appState:n},null,null),i=a.elements,l=a.appState,s=l.exportBackground,c=l.viewBackgroundColor;return _u(qi(i),Eh(Eh({},l),{},{offsetTop:0,offsetLeft:0,width:0,height:0}),{exportBackground:s,viewBackgroundColor:c},(function(e,t){var n=document.createElement(\"canvas\"),r=o(e,t);return n.width=r.width,n.height=r.height,{canvas:n,scale:r.scale}}))},Ch=function(e){var t=jh(e),n=e.mimeType,r=void 0===n?\"image\/png\":n,o=e.quality;return\"image\/png\"===r&&\"number\"==typeof o&&console.warn('\"quality\" will be ignored for \"image\/png\" mimeType'),\"image\/jpg\"===r&&(r=\"image\/jpeg\"),o=o||(\/image\\\/jpe?g\/.test(r)?.92:.8),new Promise((function(e){t.toBlob((function(t){e(t)}),r,o)}))},Oh=function(){var e=(0,d.Z)(k().mark((function e(t){var n,r,o,a,i,l,s;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.elements,r=t.appState,o=void 0===r?ir():r,a=t.exportPadding,i=vu({elements:n,appState:o},null,null),l=i.elements,s=i.appState,e.abrupt(\"return\",Du(qi(l),Eh(Eh({},s),{},{exportPadding:a})));case 3:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),Mh=[\"initialData\",\"UIOptions\"],Ih=[\"initialData\",\"UIOptions\"];function Ph(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Th(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ph(Object(n),!0).forEach((function(t){i()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ph(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ah=function(e){var t,n,r=e.onChange,o=e.initialData,a=e.excalidrawRef,i=e.onCollabButtonClick,s=e.isCollaborating,u=e.onPointerUpdate,d=e.renderTopRightUI,p=e.renderFooter,f=e.langCode,h=void 0===f?j.code:f,m=e.viewModeEnabled,g=e.zenModeEnabled,v=e.gridModeEnabled,b=e.libraryReturnUrl,y=e.theme,x=e.name,w=e.renderCustomStats,k=e.onPaste,S=e.detectScroll,E=void 0===S||S,C=e.handleKeyboardGlobally,O=void 0!==C&&C,M=e.onLibraryChange,I=e.autoFocus,P=void 0!==I&&I,T=null===(t=e.UIOptions)||void 0===t?void 0:t.canvasActions,A={canvasActions:Th(Th({},c.cW.canvasActions),T)};null!=T&&T.export&&(A.canvasActions.export.saveFileToDisk=(null===(n=T.export)||void 0===n?void 0:n.saveFileToDisk)||c.cW.canvasActions.export.saveFileToDisk);return(0,l.useEffect)((function(){var e=function(e){\"number\"==typeof e.scale&&1!==e.scale&&e.preventDefault()};return document.addEventListener(\"touchmove\",e,{passive:!1}),function(){document.removeEventListener(\"touchmove\",e)}}),[]),(0,_.jsx)(B,{langCode:h,children:(0,_.jsx)(kh,{onChange:r,initialData:o,excalidrawRef:a,onCollabButtonClick:i,isCollaborating:s,onPointerUpdate:u,renderTopRightUI:d,renderFooter:p,langCode:h,viewModeEnabled:m,zenModeEnabled:g,gridModeEnabled:v,libraryReturnUrl:b,theme:y,name:x,renderCustomStats:w,UIOptions:A,onPaste:k,detectScroll:E,handleKeyboardGlobally:O,onLibraryChange:M,autoFocus:P})})},Lh=function(e,t){e.initialData;var n=e.UIOptions,r=void 0===n?{}:n,a=o()(e,Mh),i=(t.initialData,t.UIOptions),l=void 0===i?{}:i,s=o()(t,Ih),c=Object.keys(r),u=Object.keys(l);if(c.length!==u.length)return!1;var d=c.every((function(e){\"canvasActions\"===e&&Object.keys(r.canvasActions).every((function(e){var t,n,o,a;return\"export\"===e&&null!=r&&null!==(t=r.canvasActions)&&void 0!==t&&t.export&&null!=l&&null!==(n=l.canvasActions)&&void 0!==n&&n.export?r.canvasActions.export.saveFileToDisk===l.canvasActions.export.saveFileToDisk:(null==r||null===(o=r.canvasActions)||void 0===o?void 0:o[e])===(null==l||null===(a=l.canvasActions)||void 0===a?void 0:a[e])}));return!0})),p=Object.keys(e),f=Object.keys(t);return d&&p.length===f.length&&p.every((function(e){return a[e]===s[e]}))},_h=(0,l.forwardRef)((function(e,t){return(0,_.jsx)(Ah,Th(Th({},e),{},{excalidrawRef:t}))})),Dh=s().memo(_h,Lh),zh=(n(8336),Dh)},4698:function(t){\"use strict\";t.exports=e},6207:function(e){\"use strict\";e.exports=t},8950:function(e,t,n){\"use strict\";function r(e,t,n,r,o,a,i){try{var l=e[a](i),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function o(e){return function(){var t=this,n=arguments;return new Promise((function(o,a){var i=e.apply(t,n);function l(e){r(i,o,a,l,s,\"next\",e)}function s(e){r(i,o,a,l,s,\"throw\",e)}l(void 0)}))}}n.d(t,{Z:function(){return o}})},1463:function(e){\"use strict\";e.exports=JSON.parse('{\"labels\":{\"paste\":\"Paste\",\"pasteCharts\":\"Paste charts\",\"selectAll\":\"Select all\",\"multiSelect\":\"Add element to selection\",\"moveCanvas\":\"Move canvas\",\"cut\":\"Cut\",\"copy\":\"Copy\",\"copyAsPng\":\"Copy to clipboard as PNG\",\"copyAsSvg\":\"Copy to clipboard as SVG\",\"bringForward\":\"Bring forward\",\"sendToBack\":\"Send to back\",\"bringToFront\":\"Bring to front\",\"sendBackward\":\"Send backward\",\"delete\":\"Delete\",\"copyStyles\":\"Copy styles\",\"pasteStyles\":\"Paste styles\",\"stroke\":\"Stroke\",\"background\":\"Background\",\"fill\":\"Fill\",\"strokeWidth\":\"Stroke width\",\"strokeShape\":\"Stroke shape\",\"strokeShape_gel\":\"Gel pen\",\"strokeShape_fountain\":\"Fountain pen\",\"strokeShape_brush\":\"Brush pen\",\"strokeStyle\":\"Stroke style\",\"strokeStyle_solid\":\"Solid\",\"strokeStyle_dashed\":\"Dashed\",\"strokeStyle_dotted\":\"Dotted\",\"sloppiness\":\"Sloppiness\",\"opacity\":\"Opacity\",\"textAlign\":\"Text align\",\"edges\":\"Edges\",\"sharp\":\"Sharp\",\"round\":\"Round\",\"arrowheads\":\"Arrowheads\",\"arrowhead_none\":\"None\",\"arrowhead_arrow\":\"Arrow\",\"arrowhead_bar\":\"Bar\",\"arrowhead_dot\":\"Dot\",\"fontSize\":\"Font size\",\"fontFamily\":\"Font family\",\"onlySelected\":\"Only selected\",\"withBackground\":\"Background\",\"exportEmbedScene\":\"Embed scene\",\"exportEmbedScene_details\":\"Scene data will be saved into the exported PNG\/SVG file so that the scene can be restored from it.\\\\nWill increase exported file size.\",\"addWatermark\":\"Add \\\\\"Made with Excalidraw\\\\\"\",\"handDrawn\":\"Hand-drawn\",\"normal\":\"Normal\",\"code\":\"Code\",\"small\":\"Small\",\"medium\":\"Medium\",\"large\":\"Large\",\"veryLarge\":\"Very large\",\"solid\":\"Solid\",\"hachure\":\"Hachure\",\"crossHatch\":\"Cross-hatch\",\"thin\":\"Thin\",\"bold\":\"Bold\",\"left\":\"Left\",\"center\":\"Center\",\"right\":\"Right\",\"extraBold\":\"Extra bold\",\"architect\":\"Architect\",\"artist\":\"Artist\",\"cartoonist\":\"Cartoonist\",\"fileTitle\":\"File name\",\"colorPicker\":\"Color picker\",\"canvasBackground\":\"Canvas background\",\"drawingCanvas\":\"Drawing canvas\",\"layers\":\"Layers\",\"actions\":\"Actions\",\"language\":\"Language\",\"liveCollaboration\":\"Live collaboration\",\"duplicateSelection\":\"Duplicate\",\"untitled\":\"Untitled\",\"name\":\"Name\",\"yourName\":\"Your name\",\"madeWithExcalidraw\":\"Made with Excalidraw\",\"group\":\"Group selection\",\"ungroup\":\"Ungroup selection\",\"collaborators\":\"Collaborators\",\"showGrid\":\"Show grid\",\"addToLibrary\":\"Add to library\",\"removeFromLibrary\":\"Remove from library\",\"libraryLoadingMessage\":\"Loading library\u2026\",\"libraries\":\"Browse libraries\",\"loadingScene\":\"Loading scene\u2026\",\"align\":\"Align\",\"alignTop\":\"Align top\",\"alignBottom\":\"Align bottom\",\"alignLeft\":\"Align left\",\"alignRight\":\"Align right\",\"centerVertically\":\"Center vertically\",\"centerHorizontally\":\"Center horizontally\",\"distributeHorizontally\":\"Distribute horizontally\",\"distributeVertically\":\"Distribute vertically\",\"flipHorizontal\":\"Flip horizontal\",\"flipVertical\":\"Flip vertical\",\"viewMode\":\"View mode\",\"toggleExportColorScheme\":\"Toggle export color scheme\",\"share\":\"Share\",\"showStroke\":\"Show stroke color picker\",\"showBackground\":\"Show background color picker\",\"toggleTheme\":\"Toggle theme\"},\"buttons\":{\"clearReset\":\"Reset the canvas\",\"exportJSON\":\"Export to file\",\"exportImage\":\"Save as image\",\"export\":\"Export\",\"exportToPng\":\"Export to PNG\",\"exportToSvg\":\"Export to SVG\",\"copyToClipboard\":\"Copy to clipboard\",\"copyPngToClipboard\":\"Copy PNG to clipboard\",\"scale\":\"Scale\",\"save\":\"Save to current file\",\"saveAs\":\"Save as\",\"load\":\"Load\",\"getShareableLink\":\"Get shareable link\",\"close\":\"Close\",\"selectLanguage\":\"Select language\",\"scrollBackToContent\":\"Scroll back to content\",\"zoomIn\":\"Zoom in\",\"zoomOut\":\"Zoom out\",\"resetZoom\":\"Reset zoom\",\"menu\":\"Menu\",\"done\":\"Done\",\"edit\":\"Edit\",\"undo\":\"Undo\",\"redo\":\"Redo\",\"resetLibrary\":\"Reset library\",\"createNewRoom\":\"Create new room\",\"fullScreen\":\"Full screen\",\"darkMode\":\"Dark mode\",\"lightMode\":\"Light mode\",\"zenMode\":\"Zen mode\",\"exitZenMode\":\"Exit zen mode\"},\"alerts\":{\"clearReset\":\"This will clear the whole canvas. Are you sure?\",\"couldNotCreateShareableLink\":\"Couldn\\'t create shareable link.\",\"couldNotCreateShareableLinkTooBig\":\"Couldn\\'t create shareable link: the scene is too big\",\"couldNotLoadInvalidFile\":\"Couldn\\'t load invalid file\",\"importBackendFailed\":\"Importing from backend failed.\",\"cannotExportEmptyCanvas\":\"Cannot export empty canvas.\",\"couldNotCopyToClipboard\":\"Couldn\\'t copy to clipboard. Try using Chrome browser.\",\"decryptFailed\":\"Couldn\\'t decrypt data.\",\"uploadedSecurly\":\"The upload has been secured with end-to-end encryption, which means that Excalidraw server and third parties can\\'t read the content.\",\"loadSceneOverridePrompt\":\"Loading external drawing will replace your existing content. Do you wish to continue?\",\"collabStopOverridePrompt\":\"Stopping the session will overwrite your previous, locally stored drawing. Are you sure?\\\\n\\\\n(If you want to keep your local drawing, simply close the browser tab instead.)\",\"errorLoadingLibrary\":\"There was an error loading the third party library.\",\"errorAddingToLibrary\":\"Couldn\\'t add item to the library\",\"errorRemovingFromLibrary\":\"Couldn\\'t remove item from the library\",\"confirmAddLibrary\":\"This will add {{numShapes}} shape(s) to your library. Are you sure?\",\"imageDoesNotContainScene\":\"Importing images isn\\'t supported at the moment.\\\\n\\\\nDid you want to import a scene? This image does not seem to contain any scene data. Have you enabled this during export?\",\"cannotRestoreFromImage\":\"Scene couldn\\'t be restored from this image file\",\"invalidSceneUrl\":\"Couldn\\'t import scene from the supplied URL. It\\'s either malformed, or doesn\\'t contain valid Excalidraw JSON data.\",\"resetLibrary\":\"This will clear your library. Are you sure?\",\"invalidEncryptionKey\":\"Encryption key must be of 22 characters. Live collaboration is disabled.\"},\"toolBar\":{\"selection\":\"Selection\",\"rectangle\":\"Rectangle\",\"diamond\":\"Diamond\",\"ellipse\":\"Ellipse\",\"arrow\":\"Arrow\",\"line\":\"Line\",\"freedraw\":\"Draw\",\"text\":\"Text\",\"library\":\"Library\",\"lock\":\"Keep selected tool active after drawing\"},\"headings\":{\"canvasActions\":\"Canvas actions\",\"selectedShapeActions\":\"Selected shape actions\",\"shapes\":\"Shapes\"},\"hints\":{\"linearElement\":\"Click to start multiple points, drag for single line\",\"freeDraw\":\"Click and drag, release when you\\'re finished\",\"text\":\"Tip: you can also add text by double-clicking anywhere with the selection tool\",\"text_selected\":\"Double-click or press ENTER to edit text\",\"text_editing\":\"Press Escape or CtrlOrCmd+ENTER to finish editing\",\"linearElementMulti\":\"Click on last point or press Escape or Enter to finish\",\"lockAngle\":\"You can constrain angle by holding SHIFT\",\"resize\":\"You can constrain proportions by holding SHIFT while resizing,\\\\nhold ALT to resize from the center\",\"rotate\":\"You can constrain angles by holding SHIFT while rotating\",\"lineEditor_info\":\"Double-click or press Enter to edit points\",\"lineEditor_pointSelected\":\"Press Delete to remove point, CtrlOrCmd+D to duplicate, or drag to move\",\"lineEditor_nothingSelected\":\"Select a point to move or remove, or hold Alt and click to add new points\"},\"canvasError\":{\"cannotShowPreview\":\"Cannot show preview\",\"canvasTooBig\":\"The canvas may be too big.\",\"canvasTooBigTip\":\"Tip: try moving the farthest elements a bit closer together.\"},\"errorSplash\":{\"headingMain_pre\":\"Encountered an error. Try \",\"headingMain_button\":\"reloading the page.\",\"clearCanvasMessage\":\"If reloading doesn\\'t work, try \",\"clearCanvasMessage_button\":\"clearing the canvas.\",\"clearCanvasCaveat\":\" This will result in loss of work \",\"trackedToSentry_pre\":\"The error with identifier \",\"trackedToSentry_post\":\" was tracked on our system.\",\"openIssueMessage_pre\":\"We were very cautious not to include your scene information on the error. If your scene is not private, please consider following up on our \",\"openIssueMessage_button\":\"bug tracker.\",\"openIssueMessage_post\":\" Please include information below by copying and pasting into the GitHub issue.\",\"sceneContent\":\"Scene content:\"},\"roomDialog\":{\"desc_intro\":\"You can invite people to your current scene to collaborate with you.\",\"desc_privacy\":\"Don\\'t worry, the session uses end-to-end encryption, so whatever you draw will stay private. Not even our server will be able to see what you come up with.\",\"button_startSession\":\"Start session\",\"button_stopSession\":\"Stop session\",\"desc_inProgressIntro\":\"Live-collaboration session is now in progress.\",\"desc_shareLink\":\"Share this link with anyone you want to collaborate with:\",\"desc_exitSession\":\"Stopping the session will disconnect you from the room, but you\\'ll be able to continue working with the scene, locally. Note that this won\\'t affect other people, and they\\'ll still be able to collaborate on their version.\",\"shareTitle\":\"Join a live collaboration session on Excalidraw\"},\"errorDialog\":{\"title\":\"Error\"},\"exportDialog\":{\"disk_title\":\"Save to disk\",\"disk_details\":\"Export the scene data to a file from which you can import later.\",\"disk_button\":\"Save to file\",\"link_title\":\"Shareable link\",\"link_details\":\"Export as a read-only link.\",\"link_button\":\"Export to Link\",\"excalidrawplus_description\":\"Save the scene to your Excalidraw+ workspace.\",\"excalidrawplus_button\":\"Export\",\"excalidrawplus_exportError\":\"Couldn\\'t export to Excalidraw+ at this moment...\"},\"helpDialog\":{\"blog\":\"Read our blog\",\"click\":\"click\",\"curvedArrow\":\"Curved arrow\",\"curvedLine\":\"Curved line\",\"documentation\":\"Documentation\",\"doubleClick\":\"double-click\",\"drag\":\"drag\",\"editor\":\"Editor\",\"editSelectedShape\":\"Edit selected shape (text\/arrow\/line)\",\"github\":\"Found an issue? Submit\",\"howto\":\"Follow our guides\",\"or\":\"or\",\"preventBinding\":\"Prevent arrow binding\",\"shapes\":\"Shapes\",\"shortcuts\":\"Keyboard shortcuts\",\"textFinish\":\"Finish editing (text editor)\",\"textNewLine\":\"Add new line (text editor)\",\"title\":\"Help\",\"view\":\"View\",\"zoomToFit\":\"Zoom to fit all elements\",\"zoomToSelection\":\"Zoom to selection\"},\"encrypted\":{\"tooltip\":\"Your drawings are end-to-end encrypted so Excalidraw\\'s servers will never see them.\",\"link\":\"Blog post on end-to-end encryption in Excalidraw\"},\"stats\":{\"angle\":\"Angle\",\"element\":\"Element\",\"elements\":\"Elements\",\"height\":\"Height\",\"scene\":\"Scene\",\"selected\":\"Selected\",\"storage\":\"Storage\",\"title\":\"Stats for nerds\",\"total\":\"Total\",\"version\":\"Version\",\"versionCopy\":\"Click to copy\",\"versionNotAvailable\":\"Version not available\",\"width\":\"Width\"},\"toast\":{\"copyStyles\":\"Copied styles.\",\"copyToClipboard\":\"Copied to clipboard.\",\"copyToClipboardAsPng\":\"Copied {{exportSelection}} to clipboard as PNG\\\\n({{exportColorScheme}})\",\"fileSaved\":\"File saved.\",\"fileSavedToFilename\":\"Saved to {filename}\",\"canvas\":\"canvas\",\"selection\":\"selection\"},\"colors\":{\"495057\":\"Gray 7\",\"ffffff\":\"White\",\"f8f9fa\":\"Gray 0\",\"f1f3f5\":\"Gray 1\",\"fff5f5\":\"Red 0\",\"fff0f6\":\"Pink 0\",\"f8f0fc\":\"Grape 0\",\"f3f0ff\":\"Violet 0\",\"edf2ff\":\"Indigo 0\",\"e7f5ff\":\"Blue 0\",\"e3fafc\":\"Cyan 0\",\"e6fcf5\":\"Teal 0\",\"ebfbee\":\"Green 0\",\"f4fce3\":\"Lime 0\",\"fff9db\":\"Yellow 0\",\"fff4e6\":\"Orange 0\",\"transparent\":\"Transparent\",\"ced4da\":\"Gray 4\",\"868e96\":\"Gray 6\",\"fa5252\":\"Red 6\",\"e64980\":\"Pink 6\",\"be4bdb\":\"Grape 6\",\"7950f2\":\"Violet 6\",\"4c6ef5\":\"Indigo 6\",\"228be6\":\"Blue 6\",\"15aabf\":\"Cyan 6\",\"12b886\":\"Teal 6\",\"40c057\":\"Green 6\",\"82c91e\":\"Lime 6\",\"fab005\":\"Yellow 6\",\"fd7e14\":\"Orange 6\",\"000000\":\"Black\",\"343a40\":\"Gray 8\",\"c92a2a\":\"Red 9\",\"a61e4d\":\"Pink 9\",\"862e9c\":\"Grape 9\",\"5f3dc4\":\"Violet 9\",\"364fc7\":\"Indigo 9\",\"1864ab\":\"Blue 9\",\"0b7285\":\"Cyan 9\",\"087f5b\":\"Teal 9\",\"2b8a3e\":\"Green 9\",\"5c940d\":\"Lime 9\",\"e67700\":\"Yellow 9\",\"d9480f\":\"Orange 9\"}}')},4451:function(e){\"use strict\";e.exports=JSON.parse('{\"ar-SA\":100,\"bg-BG\":68,\"ca-ES\":84,\"cs-CZ\":29,\"da-DK\":20,\"de-DE\":100,\"el-GR\":74,\"en\":100,\"es-ES\":100,\"fa-IR\":77,\"fi-FI\":100,\"fr-FR\":100,\"he-IL\":99,\"hi-IN\":67,\"hu-HU\":60,\"id-ID\":100,\"it-IT\":100,\"ja-JP\":100,\"kab-KAB\":93,\"kk-KZ\":26,\"ko-KR\":68,\"lv-LV\":14,\"my-MM\":56,\"nb-NO\":100,\"nl-NL\":100,\"nn-NO\":74,\"oc-FR\":100,\"pa-IN\":99,\"pl-PL\":70,\"pt-BR\":100,\"pt-PT\":99,\"ro-RO\":100,\"ru-RU\":99,\"sk-SK\":100,\"sv-SE\":100,\"tr-TR\":78,\"uk-UA\":80,\"zh-CN\":100,\"zh-TW\":100}')}},l={};function s(e){var t=l[e];if(void 0!==t)return t.exports;var n=l[e]={id:e,exports:{}};return i[e](n,n.exports,s),n.exports}return s.m=i,s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,{a:t}),t},r=Object.getPrototypeOf?function(e){return Object.getPrototypeOf(e)}:function(e){return e.__proto__},s.t=function(e,t){if(1&t&&(e=this(e)),8&t)return e;if(\"object\"==typeof e&&e){if(4&t&&e.__esModule)return e;if(16&t&&\"function\"==typeof e.then)return e}var o=Object.create(null);s.r(o);var a={};n=n||[null,r({}),r([]),r(r)];for(var i=2&t&&e;\"object\"==typeof i&&!~n.indexOf(i);i=r(i))Object.getOwnPropertyNames(i).forEach((function(t){a[t]=function(){return e[t]}}));return a.default=function(){return e},s.d(o,a),o},s.d=function(e,t){for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.f={},s.e=function(e){return Promise.all(Object.keys(s.f).reduce((function(t,n){return s.f[n](e,t),t}),[]))},s.u=function(e){return\"excalidraw-assets\/\"+{9:\"image\",43:\"i18n-de-DE-json\",60:\"i18n-ko-KR-json\",62:\"i18n-zh-TW-json\",137:\"i18n-ja-JP-json\",149:\"i18n-pt-PT-json\",164:\"i18n-kab-KAB-json\",196:\"i18n-nl-NL-json\",213:\"i18n-tr-TR-json\",242:\"i18n-my-MM-json\",246:\"i18n-nb-NO-json\",262:\"i18n-he-IL-json\",280:\"i18n-pa-IN-json\",304:\"i18n-zh-CN-json\",317:\"i18n-es-ES-json\",351:\"i18n-ca-ES-json\",364:\"i18n-fr-FR-json\",381:\"i18n-pt-BR-json\",384:\"i18n-bg-BG-json\",387:\"i18n-cs-CZ-json\",401:\"i18n-sk-SK-json\",465:\"i18n-it-IT-json\",472:\"i18n-fi-FI-json\",491:\"i18n-id-ID-json\",526:\"i18n-el-GR-json\",558:\"i18n-ar-SA-json\",565:\"i18n-oc-FR-json\",583:\"i18n-uk-UA-json\",617:\"i18n-da-DK-json\",649:\"i18n-kk-KZ-json\",661:\"i18n-hu-HU-json\",698:\"i18n-sv-SE-json\",710:\"i18n-fa-IR-json\",736:\"vendor\",752:\"i18n-ro-RO-json\",852:\"i18n-pl-PL-json\",869:\"i18n-ru-RU-json\",899:\"i18n-lv-LV-json\",920:\"i18n-nn-NO-json\",933:\"i18n-hi-IN-json\"}[e]+\"-\"+{9:\"02a1f3ecd6baf42daaa6\",43:\"2984c3ea70efb6a7673c\",60:\"530261d88e915f413822\",62:\"93a8203eb30054101fcc\",137:\"10da607a92dd9ee4b6b1\",149:\"fb8bc9b15f2d232ce452\",164:\"72dfe5e520fb843a911e\",196:\"220f20ddbd7092a3a948\",213:\"60da00067a54eacae6ea\",242:\"9c8f0251105b94363a8f\",246:\"102950eb1c0d17b2be82\",262:\"c22c852f5d1007b76cfd\",280:\"b7ad703689a54409b91a\",304:\"9b20d01d442a9938174a\",317:\"770832e8199e76bcea31\",351:\"6f613ec62c184eed761c\",364:\"7e2c395dc072fbeb4dc8\",381:\"5eb00d985874b4016992\",384:\"63af3f6053ca50d0c1a3\",387:\"c485bdbc1ad44e51f1f1\",401:\"4fc55e97187d84b3e35f\",465:\"55de4a420bc2799d63ac\",472:\"1856fe5f0aa5f6733c71\",491:\"36ef4139fdc39bd473e9\",526:\"ef1babaff2ea7b0ca48c\",558:\"a98b3a07a69a56aa6ddc\",565:\"3fb584025bb45201012f\",583:\"3398bd8076ace43903a4\",617:\"fdc74fe43abb7f09253d\",649:\"72a00814a5ea1bc1bd4d\",661:\"2173dae4a84d3f943a3d\",698:\"5fd1ff062cab18b6c3ec\",710:\"5d17bed42e8aa3e26778\",736:\"881ef50682618d9bd3d3\",752:\"dc651de2037f6a904212\",852:\"589514e9da02be71829e\",869:\"1620932d8cf3b49dbac7\",899:\"efdf3550b88b63639a73\",920:\"5b64fbe09ec2fdc5c686\",933:\"3577c3ff017e2af147ee\"}[e]+\".js\"},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o={},a=\"Excalidraw:\",s.l=function(e,t,n,r){if(o[e])o[e].push(t);else{var i,l;if(void 0!==n)for(var c=document.getElementsByTagName(\"script\"),u=0;u<c.length;u++){var d=c[u];if(d.getAttribute(\"src\")==e||d.getAttribute(\"data-webpack\")==a+n){i=d;break}}i||(l=!0,(i=document.createElement(\"script\")).charset=\"utf-8\",i.timeout=120,s.nc&&i.setAttribute(\"nonce\",s.nc),i.setAttribute(\"data-webpack\",a+n),i.src=e),o[e]=[t];var p=function(t,n){i.onerror=i.onload=null,clearTimeout(f);var r=o[e];if(delete o[e],i.parentNode&&i.parentNode.removeChild(i),r&&r.forEach((function(e){return e(n)})),t)return t(n)},f=setTimeout(p.bind(null,void 0,{type:\"timeout\",target:i}),12e4);i.onerror=p.bind(null,i.onerror),i.onload=p.bind(null,i.onload),l&&document.head.appendChild(i)}},s.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},s.p=\"\",function(){var e={388:0};s.f.j=function(t,n){var r=s.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var o=new Promise((function(n,o){r=e[t]=[n,o]}));n.push(r[2]=o);var a=s.p+s.u(t),i=new Error;s.l(a,(function(n){if(s.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var o=n&&(\"load\"===n.type?\"missing\":n.type),a=n&&n.target&&n.target.src;i.message=\"Loading chunk \"+t+\" failed.\\n(\"+o+\": \"+a+\")\",i.name=\"ChunkLoadError\",i.type=o,i.request=a,r[1](i)}}),\"chunk-\"+t,t)}};var t=function(t,n){var r,o,a=n[0],i=n[1],l=n[2],c=0;for(r in i)s.o(i,r)&&(s.m[r]=i[r]);if(l)l(s);for(t&&t(n);c<a.length;c++)o=a[c],s.o(e,o)&&e[o]&&e[o][0](),e[a[c]]=0},n=self.webpackChunkExcalidraw=self.webpackChunkExcalidraw||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))}(),s(21)}()}));\n};"],"names":["shadow$provide","global","require","module","exports","process","e","t","define","amd","Excalidraw","React","ReactDOM","self","s","l","n","id","i","r","o","7945","4516","Object","getOwnPropertySymbols","prototype","hasOwnProperty","propertyIsEnumerable","assign","String","getOwnPropertyNames","fromCharCode","map","join","forEach","keys","a","TypeError","c","arguments","length","u","call","d","6094","key","ref","defaultProps","$$typeof","type","props","_owner","current","Fragment","Symbol","for","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","__self","__source","jsx","jsxs","4512","1602","defineProperty","value","enumerable","configurable","writable","create","g","M","_invoke","f","Error","h","P","method","arg","delegate","j","m","sent","_sent","dispatchException","abrupt","done","p","v","b","S","E","resolve","__await","then","this._invoke","iterator","return","resultName","next","nextLoc","C","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","O","completion","reset","I","isNaN","asyncIterator","toStringTag","wrap","y","x","getPrototypeOf","w","k","constructor","displayName","isGeneratorFunction","e.isGeneratorFunction","name","mark","e.mark","setPrototypeOf","__proto__","awrap","e.awrap","AsyncIterator","async","e.async","Promise","toString","k.toString","e.keys","reverse","pop","values","prev","charAt","slice","stop","rval","complete","finish","catch","delegateYield","regeneratorRuntime","Function","8336","__esModule","default","insert","singleton","locals","554","2789","5080","7225","778","4220","1292","196","2205","1310","3922","7096","7117","1106","3336","694","8328","8051","4301","9966","4623","1528","518","9757","5422","6781","580","4285","3313","8635","487","identifier","base","concat","css","media","sourceMap","references","updater","document","createElement","attributes","nonce","nc","setAttribute","appendChild","styleSheet","cssText","createTextNode","childNodes","removeChild","insertBefore","removeAttribute","btoa","unescape","encodeURIComponent","JSON","stringify","firstChild","bind","parentNode","querySelector","window","HTMLIFrameElement","contentDocument","head","filter","Boolean","e.exports","all","atob","splice","788","code","o.keys","9713","6479","indexOf","7316","4295","Z","9135","3729","4241","6029","9609","2345","6578","9482","7955","3195","2978","1587","9478","7369","1434","5644","6843","8461","9935","532","3874","2681","6759","9650","2044","6626","6359","9915","9310","6464","themeFilter","3645","t.toString","t.i","1667","test","hash","needQuotes","replace","9638","7464","8288","iC","qx","Iw","$e","wZ","ay","oc","Oh","Ks","Vi","$C","ut","_D","n5","rk","Hg","hs","LO","r8","pb","Gj","nM","Lg","HM","V4","T","EH","A","ZF","L","UO","_","ah","D","cW","z","kV","B","sS","H","Yx","N","zK","R","ZB","F","qy","V","Math","PI","TEXT","CROSSHAIR","GRABBING","GRAB","POINTER","MOVE","AUTO","MAIN","WHEEL","SECONDARY","TOUCH","COPY","PASTE","CUT","KEYDOWN","KEYUP","MOUSE_MOVE","RESIZE","UNLOAD","FOCUS","BLUR","DRAG_OVER","DROP","GESTURE_END","BEFORE_UNLOAD","GESTURE_START","GESTURE_CHANGE","POINTER_MOVE","POINTER_UP","STATE_CHANGE","TOUCH_START","TOUCH_END","HASHCHANGE","VISIBILITY_CHANGE","SCROLL","TEST","DEVELOPMENT","SHAPE_ACTIONS_MENU","Virgil","Helvetica","Cascadia","excalidraw","excalidrawlib","excalidrawClipboard","excalidrawLibrary","location","origin","VIEW","ZEN","GRID","addLibrary","canvasActions","changeViewBackgroundColor","clearCanvas","export","saveFileToDisk","loadScene","saveToActiveFile","theme","saveAsImage","21","ReferenceError","Reflect","construct","sham","Proxy","valueOf","apply","Array","from","G","cos","sin","U","sqrt","pow","K","W","Number","MAX_SAFE_INTEGER","X","Y","max","min","q","round","hachureAngle","hachureGap","strokeWidth","ymin","ymax","islope","sort","abs","edge","le","match","text","RegExp","$1","parseFloat","substr","ae","data","se","ce","de","ue","asin","toFixed","tan","he","je","ops","ge","Oe","roughness","disableMultiStroke","randomizer","seed","ve","curveStepCount","curveFitting","Ee","increment","rx","ry","be","Ie","Se","Me","estimatedPoints","opset","ye","Pe","op","xe","maxRandomnessOffset","we","pe","fillStyle","re","Q","J","ee","te","ne","$","fillPolygon","ke","oe","disableMultiStrokeFill","Ce","bowing","preserveVertices","curveTightness","Te","Le","De","ze","He","Ne","We","isArray","Ze","ht","mt","rr","or","ur","dr","pr","fr","hr","gr","vr","br","hypot","yr","xr","wr","kr","Cr","runningLength","reduce","pressure","Sr","distance","vector","point","jr","shift","Or","Mr","getOwnPropertyDescriptor","Ir","getOwnPropertyDescriptors","defineProperties","Zr","Yr","Path2D","Wr","set","Xr","replaceAll","qr","simulatePressure","points","pressures","size","thinning","smoothing","streamline","easing","last","ro","oo","po","fo","ho","mo","go","Co","Oo","fa","ha","Ja","ei","ni","Pi","Ti","Wi","Zi","Ls","_s","qs","$s","Js","ec","uc","dc","pc","options","label","onChange","onClose","useRef","useEffect","focus","className","role","onKeyDown","find","keyBinding","toLowerCase","metaKey","altKey","ctrlKey","fn","setTimeout","activeElement","In","rtl","children","tn","nn","en","rn","preventDefault","un","cn","nativeEvent","stopImmediatePropagation","stopPropagation","onClick","currentTarget","title","toUpperCase","onFocus","icon","fc","group","useState","Suspense","fallback","onCloseRequest","target","right","left","hc","mc","kc","Sc","jc","Cc","Dc","zc","Jc","eu","tu","Map","has","get","nu","su","cu","uu","du","bu","yu","Bu","Hu","Nu","Ru","hd","md","bd","yd","Sd","Ed","Id","Pd","Dd","zd","Bd","Hd","Nd","Rd","Kd","Wd","Yd","Xd","tp","np","fp","hp","yp","xp","kp","Sp","jp","Cp","Mp","Ip","zp","Bp","qp","$p","pf","ff","yf","xf","jf","If","Vf","qf","$f","Jf","eh","th","nh","rh","Sh","Eh","Ph","Th","FONT_FAMILY","zh","defaultLang","exportToBlob","Ch","exportToCanvas","jh","exportToSvg","getElementMap","Yi","getFreeDrawSvgPath","getSceneVersion","Xi","isInvisiblySmallElement","so","languages","loadFromBlob","Su","loadLibraryFromBlob","Eu","restore","vu","restoreAppState","gu","restoreElements","mu","serializeAsJSON","Cu","parse","EXCALIDRAW_ASSET_PATH","u2","i8","unshift","documentElement","dir","lang","startsWith","split","state","isLoading","langCode","setState","Component","helper","_fillPolygon","connectingLines","renderLines","doubleLineOps","splitOnIntersections","midPointInPolygon","dotsOnLines","fillWeight","ceil","randOffsetWithRange","ellipse","dashedLine","dashOffset","dashGap","floor","atan","zigzagOffset","zigzagLines","imul","random","randOffset","Fe","defaultOptions","stroke","combineNestedSvgPaths","config","_o","newSeed","_d","shape","sets","line","rectangle","fill","Re","circle","linearPath","arc","curve","polygon","path","simplification","opsToPath","trim","toPaths","fillSketch","Ve","canvas","ctx","getContext","gen","draw","getDefaultOptions","save","strokeStyle","lineWidth","strokeLineDash","setLineDash","strokeLineDashOffset","lineDashOffset","_drawToContext","fillLineDash","fillLineDashOffset","beginPath","moveTo","bezierCurveTo","lineTo","Ue","svg","ownerDocument","createElementNS","Ge","fixedDecimalPlaceDigits","Ke","generator","Ye","crypto","getRandomValues","Uint8Array","Xe","qe","Qe","Je","et","nt","rt","ot","at","lt","st","ct","pt","ft","gt","yt","vt","bt","minY","minX","maxX","maxY","wt","zr","kt","angle","St","Et","strokeSharpness","Nr","jt","Ct","Ot","red","pink","grape","violet","indigo","blue","cyan","teal","green","lime","yellow","orange","Mt","canvasBackground","white","gray","elementBackground","elementStroke","black","It","Pt","navigator","platform","Tt","ln","zn","Bn","HTMLElement","dataset","HTMLBRElement","HTMLTextAreaElement","HTMLInputElement","Hn","fontFamily","entries","Nn","fontSize","Rn","body","style","position","whiteSpace","font","innerText","offsetWidth","offsetHeight","display","overflow","width","height","offsetTop","baseline","Fn","clearTimeout","flush","o.flush","cancel","o.cancel","Gn","cursor","Un","Kn","Wn","fullscreenElement","nodeName","Zn","Yn","zoom","clientX","translation","offsetLeft","scrollX","clientY","scrollY","Xn","sceneX","sceneY","qn","getComputedStyle","getPropertyValue","$n","Jn","er","tr","nr","unstable_batchedUpdates","ar","includes","devicePixelRatio","ir","Date","getFullYear","getMonth","padStart","getDate","getHours","getMinutes","collaborators","currentChartType","currentItemBackgroundColor","currentItemEndArrowhead","currentItemFillStyle","currentItemFontFamily","currentItemFontSize","currentItemLinearStrokeSharpness","currentItemOpacity","currentItemRoughness","currentItemStartArrowhead","currentItemStrokeColor","currentItemStrokeSharpness","currentItemStrokeStyle","currentItemStrokeWidth","currentItemTextAlign","cursorButton","draggingElement","editingElement","editingGroupId","editingLinearElement","elementLocked","elementType","errorMessage","exportBackground","exportScale","exportEmbedScene","exportWithDarkMode","fileHandle","gridSize","isBindingEnabled","isLibraryOpen","isResizing","isRotating","lastPointerDownWith","multiElement","openMenu","openPopup","pasteDialog","shown","previousSelectedElementIds","resizingElement","scrolledOutside","selectedElementIds","selectedGroupIds","selectionElement","shouldCacheIgnoreZoom","showHelpDialog","showStats","startBoundElement","suggestedBindings","toastMessage","viewBackgroundColor","zenModeEnabled","viewModeEnabled","lr","browser","sr","Er","Pr","_r","globalAlpha","opacity","lineJoin","lineCap","strokeColor","isConnected","textAlign","fillText","remove","Dr","WeakMap","backgroundColor","Rr","delete","startArrowhead","endArrowhead","arrow","bar","dot","Fr","canvasZoom","translate","scale","element","canvasOffsetX","canvasOffsetY","Vr","rotate","drawImage","Gr","fillRect","Ur","Kr","Ln","textContent","Qr","callbacks","Set","nonDeletedElements","elements","elementsMap","getElement","isDeleted","getNonDeletedElement","clear","mapElementToScene","qi","informMutation","add","sceneMapById","sceneMapByElement","eo","now","to","ao","version","versionNonce","getScene","io","lo","co","sign","uo","vo","groupIds","fromEntries","yo","xo","wo","ol","So","jo","Mo","boundElementIds","Io","Po","verticalAlign","To","Lo","lastCommittedPoint","startBinding","endBinding","Do","zo","mouse","pen","touch","Bo","Ho","No","nw","Ro","sw","Fo","Vo","rotation","Go","Uo","Ko","Wo","Zo","Yo","qo","$o","Qo","Jo","na","oa","aa","ia","da","pa","ma","ga","ba","Sa","wa","threshold","check","ya","xa","Ca","ka","Aa","console","warn","Oa","La","Pa","Ea","ja","some","Wa","Da","_a","Ba","Ha","flatMap","Fa","Ua","Za","Ya","Xa","transformHandleType","qa","$a","Qa","ti","elementId","normalizePoints","lastUncommittedPoint","activePointIndex","isDragging","pointerOffset","endBindingElement","startBindingElement","createPointAt","movePoint","hi","getPointAtIndexGlobalCoordinates","didAddPoint","hitElement","resumeRecording","getPointIndexUnderCursor","oi","getPointsGlobalCoordinates","POINT_HANDLE_SIZE","getNormalizedPoints","ai","getNonDeletedElements","ui","ci","ii","ki","li","Ei","si","mi","pi","hl","getElements","gap","gi","newSize","bi","simultaneouslyUpdated","xi","yi","pointFromAbsoluteCoords","wi","ji","Ci","Oi","Mi","Ii","Ai","Di","zi","Hi","isFinite","Ni","Ri","atan2","originalElements","Fi","Ui","Ki","Qi","tl","horizontal","vertical","parseInt","top","bottom","nl","isOverEither","isOverHorizontal","isOverVertical","rl","al","il","scenePoint","viewportDimensions","ll","sl","cl","ul","dl","ml","gl","vl","forwardRef","lh","useImperativeHandle","visible","hidden","ToolIcon","selected","keyBindingLabel","showAriaLabel","checked","bl","yl","wl","mirror","focusable","viewBox","kl","Sl","El","jl","Cl","Ol","Ml","Il","Pl","Tl","Al","Ll","_l","Dl","zl","Bl","Hl","Nl","Rl","memo","Fl","Vl","Gl","Ul","strokeLinecap","Kl","Wl","Zl","Yl","Xl","ql","strokeDasharray","$l","Ql","Jl","es","marginLeft","ts","ns","rs","os","as","fillRule","clipRule","is","ls","ss","cs","us","ds","ps","fs","ms","gs","vs","bs","flip","transform","ys","xs","ws","ks","Ss","Es","js","Cs","Os","Ms","Is","Ps","Ts","As","Ds","zs","perform","appState","commitToHistory","contextItemLabel","keyTest","on","sn","PanelComponent","updateData","Bs","Hs","Ns","Rs","Fs","Ws","keyPriority","shiftKey","Ht","Zs","Bt","Ys","Xs","Qs","hn","tc","mn","rc","active","fitInViewport","useLayoutEffect","getBoundingClientRect","innerWidth","innerHeight","contains","addEventListener","removeEventListener","ac","Option","color","ic","flat","lc","colors","showInput","tabIndex","sc","useCallback","spellCheck","onBlur","cc","isActive","setActive","gc","vc","bc","step","onWheel","deltaY","every","yc","MOON","SUN","xc","classList","wc","long","onPointerEnter","minWidth","maxWidth","onPointerLeave","confirm","At","_t","Lt","Dt","Gt","zt","Ec","Rt","Nt","marginInlineStart","Wt","Oc","Mc","Ic","Pc","focusContainer","Tc","env","REACT_APP_GOOGLE_ANALYTICS_ID","gtag","event_category","event_label","JEST_WORKER_ID","Ac","htmlFor","isNameEditable","parentElement","isComposing","keyCode","blur","_c","charCodeAt","background","ACTIVE","AWAY","IDLE","Bc","textBaseline","getImageData","Hc","strokeRect","Nc","Rc","Fc","Vc","renderScrollbars","renderSelection","renderOptimizations","renderGrid","atLeastOneVisibleElement","setTransform","clearRect","error","Zc","Wc","remoteSelectedElementIds","elementX1","elementY1","elementX2","elementY2","selectionColors","Gc","getLineDash","remotePointerViewportCoords","remotePointerUserStates","remotePointerButton","closePath","remotePointerUsernames","measureText","actualBoundingBoxDescent","actualBoundingBoxAscent","ie","el","quadraticCurveTo","scrollBars","Xc","offsetX","offsetY","qc","$c","Qc","ru","message","ou","DOMException","au","jpg","png","json","iu","extensions","description","mimeTypes","multiple","legacySetup","files","requestAnimationFrame","setInterval","clearInterval","lu","fileName","extension","pu","selection","diamond","freedraw","fu","hu","xu","decodePngMetadata","t0","Blob","FileReader","readAsText","onloadend","n.onloadend","readyState","DONE","result","decodeSvgMetadata","t1","wu","ku","handle","ju","toBlob","source","Ou","Mu","Tu","loadLibrary","library","Au","importLibrary","_u","exportPadding","zu","Du","encodeSvgMetadata","innerHTML","Lu","Wu","exec","Zu","Yu","Uu","reason","Ku","spreadsheet","labels","Xu","qu","$u","chartWidth","Vu","chartHeight","Qu","Gu","Fu","toLocaleString","Ju","ed","td","nd","clipboard","rd","od","HTMLCanvasElement","ad","dd","ld","sd","clipboardData","getData","readText","t2","cd","ud","write","ClipboardItem","writeText","getAttribute","border","padding","margin","pageYOffset","scrollTop","select","setSelectionRange","execCommand","fd","outerHTML","encodePngMetadata","blob","metadata","gd","vd","xd","align","justifyContent","alignItems","wd","justifyItems","kd","onSave","appProps","trunc","jd","Sn","Cd","Od","Md","yn","marginTop","marginBottom","Td","Ad","Kt","Ld","qt","requestFullscreen","exitFullscreen","Yt","dn","Fd","Vd","lastIndexOf","contextItemPredicate","Zt","Gd","Ud","substring","username","pointer","Zd","saveLibrary","qd","$d","axis","Qd","Jd","ep","rp","midX","midY","ap","ip","findIndex","lp","space","Xt","cp","sp","up","dp","mp","gp","$t","vp","bp","exportSelection","exportColorScheme","wp","Vt","Ep","Qt","Op","Ut","Pp","syncHistory","Tp","actions","renderAction","this.renderAction","app","UIOptions","getElementsIncludingDeleted","getAppState","this.updater","registerAction","Ap","libraryCache","resetLibrary","onLibraryChange","restoreLibraryItem","this.restoreLibraryItem","this.loadLibrary","libraryItemsFromStorage","Lp","Dp","_p","Np","elementCache","recording","stateHistory","redoStack","lastEntry","generateEntry","this.generateEntry","dehydrateHistoryEntry","hydrateHistoryEntry","shouldCreateEntry","clearRedoStack","pushEntry","Rp","jn","kn","gn","x1","y1","x2","y2","xn","bn","Cn","En","Fp","cut","copy","paste","copyStyles","pasteStyles","selectAll","deleteSelectedElements","duplicateSelection","sendBackward","bringForward","sendToBack","bringToFront","copyAsPng","copyAsSvg","ungroup","gridMode","zenMode","stats","addToLibrary","flipHorizontal","flipVertical","viewMode","Vp","actionManager","onContextMenu","dangerous","checkmark","executeAction","Gp","Up","render","container","unmountComponentAtNode","Kp","Wp","setAppState","Zp","Yp","showThemeBtn","Xp","collaboratorCount","isCollaborating","Qp","Jp","ef","createPortal","labelledBy","toggle","tf","autofocus","querySelectorAll","small","nf","rf","of","af","lf","shade","sf","onExportToPng","onExportToSvg","onExportToClipboard","gridTemplateColumns","userSelect","cf","uf","side","df","hf","mf","pendingElements","onRemoveFromLibrary","tagName","onMouseEnter","onMouseLeave","draggable","onDragStart","dataTransfer","setData","xmlns","vf","CHECKED","UNCHECKED","bf","wf","heading","kf","UserList_mobile","mobile","Sf","Ef","Cf","libraryMenu","renderJSONExportDialog","renderImageExportDialog","onCollabButtonClick","onLockToggle","renderCustomFooter","marginRight","Of","chartType","Mf","onInsertChart","Pf","href","rel","Tf","Af","flexDirection","flexWrap","Lf","_f","caption","Df","lineHeight","flex","shortcuts","zf","isOr","Bf","Hf","Nf","exportOpts","onExportToBackend","renderCustomUI","Rf","Ff","Gf","libraryItems","onAddToLibrary","onInsertShape","setLibraryItems","libraryReturnUrl","pathname","Uf","onClickOutside","Element","closest","race","Zf","Kf","onInsertElements","showExitZenModeBtn","toggleZenMode","renderTopRightUI","zIndex","maxHeight","Wf","Yf","colSpan","renderCustomStats","Xf","clearToast","Qf","Jt","oh","createContext","useContext","ih","sh","ch","uh","dh","ph","fh","hh","mh","gh","vh","bh","xh","wh","excalidrawRef","gridModeEnabled","getCanvasOffsets","readyPromise","reject","ready","updateScene","resetScene","getSceneElementsIncludingDeleted","history","resetHistory","scrollToContent","getSceneElements","refresh","importLibraryFromUrl","setToastMessage","excalidrawContainerValue","excalidrawContainerRef","scene","syncActionResult","registerAll","undoOnce","Mn","redoOnce","On","handleCanvasRef","handleCanvasContextMenu","onPointerMove","handleCanvasPointerMove","onPointerUp","removePointer","onPointerCancel","onTouchMove","handleTouchMove","onPointerDown","handleCanvasPointerDown","onDoubleClick","handleCanvasDoubleClick","renderFooter","isMobile","onDrop","handleAppOnDrop","handleKeyboardGlobally","Provider","toggleLock","addElementsFromPasteOrLibrary","toggleStats","renderCanvas","addCallback","onSceneUpdated","addEventListeners","resizeObserver","ResizeObserver","updateDOMRect","observe","matchMedia","matches","addListener","detachIsMobileMqHandler","this.detachIsMobileMqHandler","removeListener","URLSearchParams","search","restoreFileFromShare","initializeScene","disconnect","unmounted","removeEventListeners","destroy","onCopy","pasteFromClipboard","onCut","nearestScrollableContainer","onScroll","updateCurrentCursorPosition","onKeyUp","onResize","onUnload","disableEvent","onGestureStart","onGestureChange","onGestureEnd","passive","fonts","onFontLoaded","overflowY","scrollHeight","clientHeight","updateLanguage","deselectElements","userState","button","record","replaceAllElements","isExistingElement","onSubmit","getViewportCoords","excalidrawContainer","minHeight","backfaceVisibility","outline","resize","oninput","d.oninput","onkeydown","d.onkeydown","dispatchEvent","Event","repeat","selectionStart","selectionEnd","onblur","viaKeyboard","SVGElement","capture","getElementAtPosition","getElementsAtPosition","preferSelected","pointers","pointerId","lastCenter","initialScale","initialDistance","withCmdOrCtrl","originInGrid","scrollbars","lastCoords","handleType","offset","arrowDirection","center","hit","allHitElements","wasAddedToSelection","hasBeenDuplicated","hasHitCommonBoundingBoxOfSelectedElements","isHittingCommonBoundingBoxOfSelectedElements","drag","hasOccurred","eventListeners","onMove","onUp","handlePointerMoveOverScrollbars","savePointer","maybeHandleResize","maybeDragNewGenericElement","an","handlePointDragging","maybeSuggestBindingForLinearElementAtCursor","isASelectedElement","maybeSuggestBindingForAll","handlePointerUp","viewportX","viewportY","elementCenterX","elementCenterY","createRef","this.focusContainer","autoFocus","this.getSceneElementsIncludingDeleted","this.getSceneElements","setCurrentState","this.onUnload","this.disableEvent","this.onFontLoaded","replaceState","fetch","decodeURIComponent","numShapes","alert","this.resetHistory","resetLoadingState","launchQueue","setConsumer","getFile","initialData","cutAll","copyAll","this.cutAll","this.copyAll","onTapStart","this.onTapStart","resetTapTwice","touches","onTapEnd","this.onTapEnd","elementFromPoint","onPaste","addTextFromPaste","selectShapeTool","this.addElementsFromPasteOrLibrary","this.setAppState","this.removePointer","pointerType","this.toggleLock","this.toggleZenMode","this.toggleStats","this.scrollToContent","this.clearToast","this.setToastMessage","caches","open","loadFileToCanvas","this.onSceneUpdated","HTMLSelectElement","handleKeyDown","Ft","startTextEditing","wn","pn","vn","this.startTextEditing","insertAtParentCenter","getTextElementAtPosition","getTextWysiwygSnappedToCenterPosition","handleTextWysiwyg","this.handleCanvasDoubleClick","this.handleCanvasPointerMove","resetShouldCacheIgnoreZoomDebounced","handlePointerMove","maybeSuggestBindingAtCursor","buttons","this.handleTouchMove","this.handleCanvasPointerDown","getSelection","anchorNode","removeAllRanges","maybeOpenContextMenuAfterPointerDownOnTouchDevices","maybeCleanupAfterMissingPointerUp","handleCanvasPanUsingWheelOrSpaceDrag","updateGestureOnPointerDown","initialPointerDownState","handleDraggingScrollBar","clearSelectionIfNotUsingSelection","updateBindingEnabledOnPointerMove","handleSelectionOnPointerDown","handleLinearElementOnPointerDown","handleFreeDrawElementOnPointerDown","createGenericElementOnPointerDown","onPointerMoveFromPointerDownHandler","onPointerUpFromPointerDownHandler","onKeyDownFromPointerDownHandler","onKeyUpFromPointerDownHandler","handleTextOnPointerDown","this.maybeOpenContextMenuAfterPointerDownOnTouchDevices","this.handleCanvasPanUsingWheelOrSpaceDrag","this.clearSelectionIfNotUsingSelection","this.handleSelectionOnPointerDown","handlePointerDown","clearSelection","this.handleTextOnPointerDown","this.handleFreeDrawElementOnPointerDown","this.handleLinearElementOnPointerDown","this.createGenericElementOnPointerDown","this.updateBindingEnabledOnPointerMove","this.maybeSuggestBindingAtCursor","this.maybeSuggestBindingForLinearElementAtCursor","this.handleCanvasRef","handleWheel","items","getAsFileSystemHandle","endsWith","this.loadFileToCanvas","this.handleCanvasContextMenu","_openContextMenu","this.maybeDragNewGenericElement","this.maybeHandleResize","this._openContextMenu","deltaX","log10","this.savePointer","onPointerUpdate","pointersMap","this.updateDOMRect","this.refresh","getDimensions","mimeType","quality","Mh","Ih","Ah","detectScroll","_h","Dh","Lh","4698","6207","8950","1463","4451","s.n","s.t","a.default","s.d","s.e","s.u","s.o","s.l","getElementsByTagName","charset","timeout","src","onerror","onload","s.r","s.f.j","request","webpackChunkExcalidraw"]}},{"offset":{"line":855,"column":0},"map":{"version":3,"file":"excalidraw.js","lineCount":123,"mappings":"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\/G,mBAAN+G,EAAM\/G,qEAAN+G,EACaxB,sBADbwB,EACaxB,IAAAA,CAAAA,wDAAAA,CAAAA,CAAAA,+EAAAA,EACIC,gCADJD,CAAAA,CADbwB,CAAD;AAZC\/G,CADd,CAAA,EAe+BwF,IAf\/B,CAAA,CAAA,EAe+BA,IAf\/B,CAAA,EAAA,+CAAA,CAAAnE;AAkCA2F,IAAAA,CAAAA,sCAAAA,GAAArF,IAAAA,CAAAA,sBAAA,CAAUsF,IAAAA,CAAAA,sBAAV,EAAUA,QAAAA,CACPlF,mBADOkF,CACPlF;AADH,MAEQmF,qBAAM5H,IAAAA,CAAAA,kCAAD,EAFb,EAGQ6H,6BAAS9E,IAAAA,CAAAA,qBAAA,CAAA,IAAC+E,IAAAA,CAAAA,6BAAD,CAACA,IAAD,EAACA,CAAD,EAACA,CAAD,EAACA,IAAAA,CAAAA,wCAAD,EAACA,CAAAA,IAAAA,CAAAA,sDAAAA,EAA8BF,kBAA9BE,CAAD,EAA+BF,IAA\/B,CAAA,CAHjB;AAAA,SAKcG,IAAAA,CAAAA,kCAAA,CAAAH,kBAAA,CALd,IAMoB9D,IAAAA,CAAAA,gBAAAA,CAAI+D,0BAAJ\/D,CANpB,IAOoBA,IAAAA,CAAAA,gBAAD,CAAMkE,IAAAA,CAAAA,gCAAAA,EAAN,CAPnB,IAQoBlE,IAAAA,CAAAA,gBAAAA,CAAKmE,IAAAA,CAAAA,iDAAD,EAAJnE,CARpB,GAAA,IAAA,GASOkC,gDAAAA,CAAevD,mBAAfuD,CATP;AACGvD,CADH,EAAA,IAAAyB,IAAAA,CAAAA,6BAAA,CAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAAC,IAAAA,CAAAA,wCAAA,EAAA,CAAA0B,IAAAA,CAAAA,oBAAA,CAAA,EAAA,IAAA,CAAA,EAAA,qCAAA,CAAA6B;AC9CEQ,IAAAA,CAAAA,mCAAGC,CAAAA,WAAH,EAAA;;","sources":["frontend\/handler\/draw.cljs","frontend\/extensions\/excalidraw.cljs","shadow\/loader.js","shadow\/module\/excalidraw\/prepend.js","node_modules\/@excalidraw\/excalidraw\/dist\/excalidraw.production.min.js","frontend\/rum.cljs","goog\/object\/object.js","cljs\/core.cljs","frontend\/db.cljs","frontend\/handler\/editor.cljs","frontend\/state.cljs"],"sourcesContent":["(ns frontend.handler.draw\n  (:refer-clojure :exclude [load-file])\n  (:require [frontend.config :as config]\n            [frontend.date :as date]\n            [frontend.db :as db]\n            [frontend.fs :as fs]\n            [frontend.handler.file :as file-handler]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [promesa.core :as p]))\n\n(defn create-draws-directory!\n  [repo]\n  (when repo\n    (let [repo-dir (config\/get-repo-dir repo)]\n      (util\/p-handle\n       (fs\/mkdir! (str repo-dir (str \"\/\" config\/default-draw-directory)))\n       (fn [_result] nil)\n       (fn [_error] nil)))))\n\n(defn save-excalidraw!\n  [file data]\n  (let [path file\n        repo (state\/get-current-repo)]\n    (when repo\n      (let [repo-dir (config\/get-repo-dir repo)]\n        (->\n         (p\/do!\n          (create-draws-directory! repo)\n          (fs\/write-file! repo repo-dir path data nil)\n          (db\/transact! repo\n                        [{:file\/path path\n                          :block\/name (util\/page-name-sanity-lc file)\n                          :block\/file {:file\/path path}\n                          :block\/journal? false}]))\n         (p\/catch (fn [error]\n                    (prn \"Write file failed, path: \" path \", data: \" data)\n                    (js\/console.dir error))))))))\n\n(defn load-excalidraw-file\n  [file ok-handler]\n  (when-let [repo (state\/get-current-repo)]\n    (util\/p-handle\n     (file-handler\/load-file repo file)\n     (fn [content]\n       (ok-handler content))\n     (fn [error]\n       (println \"Error loading \" file \": \"\n                error)))))\n\n(defonce default-content\n  (util\/format\n   \"{\\n  \\\"type\\\": \\\"excalidraw\\\",\\n  \\\"version\\\": 2,\\n  \\\"source\\\": \\\"%s\\\",\\n  \\\"elements\\\": [],\\n  \\\"appState\\\": {\\n    \\\"viewBackgroundColor\\\": \\\"#FFF\\\",\\n    \\\"gridSize\\\": null\\n  }\\n}\"\n   config\/website))\n\n(defn file-name\n  []\n  (str (date\/get-date-time-string-2) \".excalidraw\"))\n\n(defn create-draw-with-default-content\n  [current-file]\n  (when-let [repo (state\/get-current-repo)]\n    (p\/let [exists? (fs\/file-exists? (config\/get-repo-dir repo)\n                                     (str config\/default-draw-directory current-file))]\n      (when-not exists?\n        (save-excalidraw! current-file default-content)))))\n","(ns frontend.extensions.excalidraw\n  (:require [cljs-bean.core :as bean]\n            [clojure.string :as string]\n            ;; NOTE: Always use production build of excalidraw\n            ;; See-also: https:\/\/github.com\/excalidraw\/excalidraw\/pull\/3330\n            [\"@excalidraw\/excalidraw\/dist\/excalidraw.production.min\" :as Excalidraw]\n            [frontend.config :as config]\n            [frontend.db :as db]\n            [frontend.handler.editor :as editor-handler]\n            [frontend.handler.draw :as draw]\n            [frontend.handler.notification :as notification]\n            [frontend.handler.ui :as ui-handler]\n            [frontend.rum :as r]\n            [frontend.state :as state]\n            [frontend.ui :as ui]\n            [frontend.util :as util]\n            [goog.object :as gobj]\n            [rum.core :as rum]\n            [frontend.mobile.util :as mobile-util]))\n\n(def excalidraw (r\/adapt-class (gobj\/get Excalidraw \"default\")))\n(def serialize-as-json (gobj\/get Excalidraw \"serializeAsJSON\"))\n\n(defn from-json\n  [text]\n  (when-not (string\/blank? text)\n    (try\n      (js\/JSON.parse text)\n      (catch js\/Error e\n        (println \"from json error:\")\n        (js\/console.dir e)\n        (notification\/show!\n         (util\/format \"Could not load this invalid excalidraw file\")\n         :error)))))\n\n(defn- update-draw-content-width\n  [state]\n  (let [el ^js (rum\/dom-node state)]\n    (loop [el (.querySelector el \".draw-wrap\")]\n      (cond\n        (or (nil? el) (undefined? el) (undefined? (.-classList el)))\n        nil\n\n        (..  el -classList (contains \"block-content\"))\n        (let [width (.-clientWidth el)]\n          (reset! (::draw-width state) width))\n\n        :else\n        (recur (.-parentNode el))))\n    state))\n\n(rum\/defcs draw-inner < rum\/reactive\n  (rum\/local 800 ::draw-width)\n  (rum\/local true ::zen-mode?)\n  (rum\/local false ::view-mode?)\n  (rum\/local false ::grid-mode?)\n  (rum\/local nil ::elements)\n  {:did-mount update-draw-content-width\n   :did-update update-draw-content-width}\n  [state data option]\n  (let [*draw-width (get state ::draw-width)\n        *zen-mode? (get state ::zen-mode?)\n        *view-mode? (get state ::view-mode?)\n        *grid-mode? (get state ::grid-mode?)\n        wide-mode? (state\/sub :ui\/wide-mode?)\n        *elements (get state ::elements)\n        {:keys [file block-uuid]} option]\n    (when data\n      [:div.overflow-hidden {:on-mouse-down (fn [e] (util\/stop e))}\n       [:div.my-1 {:style {:font-size 10}}\n        [:a.mr-2 {:on-click ui-handler\/toggle-wide-mode!}\n         (util\/format \"Wide Mode (%s)\" (if wide-mode? \"ON\" \"OFF\"))]\n        [:a.mr-2 {:on-click #(swap! *zen-mode? not)}\n         (util\/format \"Zen Mode (%s)\" (if @*zen-mode? \"ON\" \"OFF\"))]\n        [:a.mr-2 {:on-click #(swap! *view-mode? not)}\n         (util\/format \"View Mode (%s)\" (if @*view-mode? \"ON\" \"OFF\"))]\n        [:a.mr-2 {:on-click #(swap! *grid-mode? not)}\n         (util\/format \"Grid Mode (%s)\" (if @*view-mode? \"ON\" \"OFF\"))]\n        [:a.mr-2 {:on-click #(when-let [block (db\/pull [:block\/uuid block-uuid])]\n                               (editor-handler\/edit-block! block :max block-uuid))}\n         \"Edit Block\"]]\n       [:div.draw-wrap\n        {:on-mouse-down (fn [e]\n                          (util\/stop e)\n                          (state\/set-block-component-editing-mode! true))\n         :on-blur #(state\/set-block-component-editing-mode! false)\n         :style {:width  @*draw-width\n                 :height (if wide-mode? 650 500)}}\n        (excalidraw\n         (merge\n          {:on-change (fn [elements app-state]\n                        (when-not (or (= \"down\" (gobj\/get app-state \"cursorButton\"))\n                                      (gobj\/get app-state \"draggingElement\")\n                                      (gobj\/get app-state \"editingElement\")\n                                      (gobj\/get app-state \"editingGroupId\")\n                                      (gobj\/get app-state \"editingLinearElement\"))\n                          (let [elements->clj (bean\/->clj elements)]\n                            (when (and (seq elements->clj)\n                                       (not= elements->clj @*elements)) ;; not= requires clj collections\n                              (reset! *elements elements->clj)\n                              (draw\/save-excalidraw!\n                               file\n                               (serialize-as-json elements app-state))))))\n           \n           :zen-mode-enabled @*zen-mode?\n           :view-mode-enabled @*view-mode?\n           :grid-mode-enabled @*grid-mode?\n           :initial-data data}))]])))\n\n(rum\/defcs draw-container < rum\/reactive\n  {:init (fn [state]\n           (let [[option] (:rum\/args state)\n                 file (:file option)\n                 *data (atom nil)\n                 *loading? (atom true)]\n             (when file\n               (draw\/load-excalidraw-file\n                file\n                (fn [data]\n                  (let [data (from-json data)]\n                    (reset! *data data)\n                    (reset! *loading? false)))))\n             (assoc state\n                    ::data *data\n                    ::loading? *loading?)))}\n  [state option]\n  (let [*data (get state ::data)\n        *loading? (get state ::loading?)\n        loading? (rum\/react *loading?)\n        data (rum\/react *data)\n        db-restoring? (state\/sub :db\/restoring?)]\n    (when (:file option)\n      (cond\n        db-restoring?\n        [:div.ls-center\n         (ui\/loading \"Loading\")]\n\n        (false? loading?)\n        (draw-inner data option)\n\n        :else\n        nil))))\n\n(rum\/defc draw < rum\/reactive\n  [option]\n  (let [repo (state\/get-current-repo)\n        granted? (state\/sub [:nfs\/user-granted? repo])]\n    ;; Web granted\n    (when-not (and (config\/local-db? repo)\n                   (not granted?)\n                   (not (util\/electron?))\n                   (not (mobile-util\/is-native-platform?)))\n      (draw-container option))))\n","goog.module(\"shadow.loader\");\ngoog.module.declareLegacyNamespace();\n\nconst GMM = goog.require(\"goog.module.ModuleManager\");\nconst GML = goog.require(\"goog.module.ModuleLoader\");\n\nconst GO = goog.require(\"goog.object\");\nconst GHUC = goog.require(\"goog.html.uncheckedconversions\");\nconst GSC = goog.require(\"goog.string.Const\");\n\n\/** @define {boolean} *\/\nconst TEST = goog.define(\"shadow.loader.TEST\", false);\n\n\/\/ this is written in JS so it doesn't depend on cljs.core\n\nconst ml = new GML();\nml.setSourceUrlInjection(true);\n\nconst mm = GMM.getInstance();\nmm.setLoader(ml);\n\nlet initCalled = false;\n\nfunction ensureInitWasCalled () {\n  if (!initCalled) {\n    throw new Error(\n      \"shadow.loader API was called before shadow.loader.init!\\n\" +\n        \"You are probably calling module loader too early before shadow-cljs got fully initialized.\"\n    );\n  }\n};\n\nfunction init (uriPrefix) {\n  if (TEST) return;\n\n  if (initCalled) {\n    throw new Error(\n      \"shadow.loader.init was already called! If you are calling it manually set :module-loader-init false in your config.\"\n    );\n  }\n\n  if (goog.global.shadow$modules) {\n    mm.setAllModuleInfo(goog.global.shadow$modules[\"infos\"]);\n\n    var uris = goog.global.shadow$modules[\"uris\"];\n\n    \/\/ this is absurd. the uris are generated by the compiler. should be trusted already.\n    \/\/ I would really like to know how Google integrates this data into their builds\n    var trustReason = GSC.from(\"generated by compiler\");\n\n    GO.getKeys(uris).forEach(function (key) {\n      var module_uris = uris[key];\n      if (module_uris.length == 0) {\n        \/\/ default module is added without uris since it will always be loaded\n        \/\/ when this is called\n        mm.getModuleInfo(key).setLoaded();\n      } else {\n        var trusted_uris = [];\n        module_uris.forEach(function (module_uri) {\n          var trusted =\n            GHUC.trustedResourceUrlFromStringKnownToSatisfyTypeContract(\n              trustReason,\n              uriPrefix + module_uri\n            );\n          trusted_uris.push(trusted);\n        });\n        mm.getModuleInfo(key).setTrustedUris(trusted_uris);\n      }\n    });\n\n    initCalled = true;\n  }\n};\n\nfunction getModuleManager() {\n  return mm;\n};\n\nfunction getModuleLoader() {\n  return ml;\n};\n\n\/\/ allow calling (shadow.loader\/load :with-a-keyword)\nfunction string_id(id) {\n  var result = id.toString();\n  if (result.charAt(0) == \":\") {\n    result = result.substring(1);\n  }\n  return result;\n};\n\nfunction set_load_start(id) {\n  mm.beforeLoadModuleCode(id);\n};\n\n\/\/ FIXME: id no longer required, just keeping it in case someone ends up using old closure lib\nfunction set_loaded (id) {\n  mm.setLoaded(id);\n};\n\n\/\/ ignored. only for cljs.loader compat\nfunction set_loaded_BANG_ () {};\n\nfunction loaded_QMARK_(id) {\n  if (TEST) {\n    return true;\n  }\n\n  return mm.getModuleInfo(string_id(id)).isLoaded();\n};\n\nfunction with_module(\n  moduleId,\n  fn,\n  opt_handler,\n  opt_noLoad,\n  opt_userInitiated,\n  opt_preferSynchronous\n) {\n  ensureInitWasCalled();\n  return mm.execOnLoad(\n    string_id(moduleId),\n    fn,\n    opt_handler,\n    opt_noLoad,\n    opt_userInitiated,\n    opt_preferSynchronous\n  );\n};\n\nfunction load (id, cb) {\n  if (TEST) {\n    var result = goog.async.Deferred.succeed();\n    if (cb) {\n      result = result.then(cb);\n    }\n    return result;\n  }\n\n  ensureInitWasCalled();\n  id = string_id(id);\n  if (cb) {\n    mm.execOnLoad(id, cb);\n  }\n  return mm.load(id);\n};\n\nfunction load_multiple(ids, opt_userInitiated) {\n  if (TEST) {\n    var result = {};\n    for (const id of ids) {\n      result[id] = goog.async.Deferred.succeed();\n    }\n    return result;\n  }\n  ensureInitWasCalled();\n  return mm.loadMultiple(ids, opt_userInitiated);\n};\n\nfunction prefetch (id) {\n  if (TEST) return;\n\n  ensureInitWasCalled();\n  mm.prefetchModule(string_id(id));\n};\n\nfunction preload (id) {\n  if (TEST) return;\n\n  ensureInitWasCalled();\n  return mm.preloadModule(string_id(id));\n};\n\nexports = {\n    preload,\n    prefetch,\n    load_multiple,\n    load,\n    with_module,\n    loaded_QMARK_,\n    set_loaded_BANG_,\n    set_loaded,\n    set_load_start,\n    getModuleLoader,\n    getModuleManager,\n    init\n};","\nshadow.loader.set_load_start('excalidraw');","shadow$provide[582] = function(global,require,module,exports) {\nvar process = require('process');\n\/*! For license information please see excalidraw.production.min.js.LICENSE.txt *\/\n!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t(require(\"react\"),require(\"react-dom\")):\"function\"==typeof define&&define.amd?define([\"react\",\"react-dom\"],t):\"object\"==typeof exports?exports.Excalidraw=t(require(\"react\"),require(\"react-dom\")):e.Excalidraw=t(e.React,e.ReactDOM)}(self,(function(e,t){return function(){var n,r,o,a,i={7945:function(e,t,n){e.exports=n(1602)},4516:function(e){\"use strict\";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError(\"Object.assign cannot be called with null or undefined\");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String(\"abc\");if(e[5]=\"de\",\"5\"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t[\"_\"+String.fromCharCode(n)]=n;if(\"0123456789\"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(\"\"))return!1;var r={};return\"abcdefghijklmnopqrst\".split(\"\").forEach((function(e){r[e]=e})),\"abcdefghijklmnopqrst\"===Object.keys(Object.assign({},r)).join(\"\")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,l,s=o(e),c=1;c<arguments.length;c++){for(var u in i=Object(arguments[c]))n.call(i,u)&&(s[u]=i[u]);if(t){l=t(i);for(var d=0;d<l.length;d++)r.call(i,l[d])&&(s[l[d]]=i[l[d]])}}return s}},6094:function(e,t,n){\"use strict\";n(4516);var r=n(4698),o=60103;if(t.Fragment=60107,\"function\"==typeof Symbol&&Symbol.for){var a=Symbol.for;o=a(\"react.element\"),t.Fragment=a(\"react.fragment\")}var i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l=Object.prototype.hasOwnProperty,s={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,a={},c=null,u=null;for(r in void 0!==n&&(c=\"\"+n),void 0!==t.key&&(c=\"\"+t.key),void 0!==t.ref&&(u=t.ref),t)l.call(t,r)&&!s.hasOwnProperty(r)&&(a[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===a[r]&&(a[r]=t[r]);return{$$typeof:o,type:e,key:c,ref:u,props:a,_owner:i.current}}t.jsx=c,t.jsxs=c},4512:function(e,t,n){\"use strict\";e.exports=n(6094)},1602:function(e){var t=function(e){\"use strict\";var t,n=Object.prototype,r=n.hasOwnProperty,o=\"function\"==typeof Symbol?Symbol:{},a=o.iterator||\"@@iterator\",i=o.asyncIterator||\"@@asyncIterator\",l=o.toStringTag||\"@@toStringTag\";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},\"\")}catch(e){s=function(e,t,n){return e[t]=n}}function c(e,t,n,r){var o=t&&t.prototype instanceof g?t:g,a=Object.create(o.prototype),i=new M(r||[]);return a._invoke=function(e,t,n){var r=d;return function(o,a){if(r===f)throw new Error(\"Generator is already running\");if(r===h){if(\"throw\"===o)throw a;return P()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=j(i,n);if(l){if(l===m)continue;return l}}if(\"next\"===n.method)n.sent=n._sent=n.arg;else if(\"throw\"===n.method){if(r===d)throw r=h,n.arg;n.dispatchException(n.arg)}else\"return\"===n.method&&n.abrupt(\"return\",n.arg);r=f;var s=u(e,t,n);if(\"normal\"===s.type){if(r=n.done?h:p,s.arg===m)continue;return{value:s.arg,done:n.done}}\"throw\"===s.type&&(r=h,n.method=\"throw\",n.arg=s.arg)}}}(e,n,i),a}function u(e,t,n){try{return{type:\"normal\",arg:e.call(t,n)}}catch(e){return{type:\"throw\",arg:e}}}e.wrap=c;var d=\"suspendedStart\",p=\"suspendedYield\",f=\"executing\",h=\"completed\",m={};function g(){}function v(){}function b(){}var y={};y[a]=function(){return this};var x=Object.getPrototypeOf,w=x&&x(x(I([])));w&&w!==n&&r.call(w,a)&&(y=w);var k=b.prototype=g.prototype=Object.create(y);function S(e){[\"next\",\"throw\",\"return\"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,a,i,l){var s=u(e[o],e,a);if(\"throw\"!==s.type){var c=s.arg,d=c.value;return d&&\"object\"==typeof d&&r.call(d,\"__await\")?t.resolve(d.__await).then((function(e){n(\"next\",e,i,l)}),(function(e){n(\"throw\",e,i,l)})):t.resolve(d).then((function(e){c.value=e,i(c)}),(function(e){return n(\"throw\",e,i,l)}))}l(s.arg)}var o;this._invoke=function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}}function j(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,\"throw\"===n.method){if(e.iterator.return&&(n.method=\"return\",n.arg=t,j(e,n),\"throw\"===n.method))return m;n.method=\"throw\",n.arg=new TypeError(\"The iterator does not provide a 'throw' method\")}return m}var o=u(r,e.iterator,n.arg);if(\"throw\"===o.type)return n.method=\"throw\",n.arg=o.arg,n.delegate=null,m;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,\"return\"!==n.method&&(n.method=\"next\",n.arg=t),n.delegate=null,m):a:(n.method=\"throw\",n.arg=new TypeError(\"iterator result is not an object\"),n.delegate=null,m)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type=\"normal\",delete t.arg,e.completion=t}function M(e){this.tryEntries=[{tryLoc:\"root\"}],e.forEach(C,this),this.reset(!0)}function I(e){if(e){var n=e[a];if(n)return n.call(e);if(\"function\"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:P}}function P(){return{value:t,done:!0}}return v.prototype=k.constructor=b,b.constructor=v,v.displayName=s(b,l,\"GeneratorFunction\"),e.isGeneratorFunction=function(e){var t=\"function\"==typeof e&&e.constructor;return!!t&&(t===v||\"GeneratorFunction\"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,l,\"GeneratorFunction\")),e.prototype=Object.create(k),e},e.awrap=function(e){return{__await:e}},S(E.prototype),E.prototype[i]=function(){return this},e.AsyncIterator=E,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new E(c(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(k),s(k,l,\"Generator\"),k[a]=function(){return this},k.toString=function(){return\"[object Generator]\"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=I,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=t,this.tryEntries.forEach(O),!e)for(var n in this)\"t\"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if(\"throw\"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return l.type=\"throw\",l.arg=e,n.next=r,o&&(n.method=\"next\",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if(\"root\"===i.tryLoc)return o(\"end\");if(i.tryLoc<=this.prev){var s=r.call(i,\"catchLoc\"),c=r.call(i,\"finallyLoc\");if(s&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error(\"try statement without catch or finally\");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,\"finallyLoc\")&&this.prev<o.finallyLoc){var a=o;break}}a&&(\"break\"===e||\"continue\"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method=\"next\",this.next=a.finallyLoc,m):this.complete(i)},complete:function(e,t){if(\"throw\"===e.type)throw e.arg;return\"break\"===e.type||\"continue\"===e.type?this.next=e.arg:\"return\"===e.type?(this.rval=this.arg=e.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if(\"throw\"===r.type){var o=r.arg;O(n)}return o}}throw new Error(\"illegal catch attempt\")},delegateYield:function(e,n,r){return this.delegate={iterator:I(e),resultName:n,nextLoc:r},\"next\"===this.method&&(this.arg=t),m}},e}(e.exports);try{regeneratorRuntime=t}catch(e){Function(\"r\",\"regeneratorRuntime = r\")(t)}},8336:function(e,t,n){var r=n(487),o=n(4295);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},554:function(e,t,n){var r=n(487),o=n(9135);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},2789:function(e,t,n){var r=n(487),o=n(3729);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},5080:function(e,t,n){var r=n(487),o=n(4241);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},7225:function(e,t,n){var r=n(487),o=n(6029);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},778:function(e,t,n){var r=n(487),o=n(9609);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},4220:function(e,t,n){var r=n(487),o=n(2345);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},1292:function(e,t,n){var r=n(487),o=n(6578);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},196:function(e,t,n){var r=n(487),o=n(9482);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},2205:function(e,t,n){var r=n(487),o=n(7955);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},1310:function(e,t,n){var r=n(487),o=n(3195);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},3922:function(e,t,n){var r=n(487),o=n(2978);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},7096:function(e,t,n){var r=n(487),o=n(1587);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},7117:function(e,t,n){var r=n(487),o=n(9478);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},1106:function(e,t,n){var r=n(487),o=n(7369);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},3336:function(e,t,n){var r=n(487),o=n(1434);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},694:function(e,t,n){var r=n(487),o=n(5644);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},8328:function(e,t,n){var r=n(487),o=n(6843);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},8051:function(e,t,n){var r=n(487),o=n(8461);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},4301:function(e,t,n){var r=n(487),o=n(9935);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},9966:function(e,t,n){var r=n(487),o=n(532);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},4623:function(e,t,n){var r=n(487),o=n(3874);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},1528:function(e,t,n){var r=n(487),o=n(2681);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},518:function(e,t,n){var r=n(487),o=n(6759);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},9757:function(e,t,n){var r=n(487),o=n(9650);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},5422:function(e,t,n){var r=n(487),o=n(2044);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},6781:function(e,t,n){var r=n(487),o=n(6626);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},580:function(e,t,n){var r=n(487),o=n(6359);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},4285:function(e,t,n){var r=n(487),o=n(9915);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},3313:function(e,t,n){var r=n(487),o=n(9310);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},8635:function(e,t,n){var r=n(487),o=n(6464);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},487:function(e,t,n){\"use strict\";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function l(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],o=0;o<e.length;o++){var a=e[o],s=t.base?a[0]+t.base:a[0],c=n[s]||0,u=\"\".concat(s,\" \").concat(c);n[s]=c+1;var d=l(u),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(i[d].references++,i[d].updater(p)):i.push({identifier:u,updater:g(p,t),references:1}),r.push(u)}return r}function c(e){var t=document.createElement(\"style\"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),\"function\"==typeof e.insert)e.insert(t);else{var i=a(e.insert||\"head\");if(!i)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");i.appendChild(t)}return t}var u,d=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join(\"\\n\")});function p(e,t,n,r){var o=n?\"\":r.media?\"@media \".concat(r.media,\" {\").concat(r.css,\"}\"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function f(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o?e.setAttribute(\"media\",o):e.removeAttribute(\"media\"),a&&\"undefined\"!=typeof btoa&&(r+=\"\\n\/*# sourceMappingURL=data:application\/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a)))),\" *\/\")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function g(e,t){var n,r,o;if(t.singleton){var a=m++;n=h||(h=c(t)),r=p.bind(null,n,a,!1),o=p.bind(null,n,a,!0)}else n=c(t),r=f.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||\"boolean\"==typeof t.singleton||(t.singleton=o());var n=s(e=e||[],t);return function(e){if(e=e||[],\"[object Array]\"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=l(n[r]);i[o].references--}for(var a=s(e,t),c=0;c<n.length;c++){var u=l(n[c]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}n=a}}}},788:function(e,t,n){var r={\".\/ar-SA.json\":[7822,558],\".\/bg-BG.json\":[1203,384],\".\/ca-ES.json\":[510,351],\".\/cs-CZ.json\":[7605,387],\".\/da-DK.json\":[2392,617],\".\/de-DE.json\":[2853,43],\".\/el-GR.json\":[9876,526],\".\/en.json\":[1463],\".\/es-ES.json\":[2264,317],\".\/fa-IR.json\":[3747,710],\".\/fi-FI.json\":[9490,472],\".\/fr-FR.json\":[7830,364],\".\/he-IL.json\":[1994,262],\".\/hi-IN.json\":[4646,933],\".\/hu-HU.json\":[6373,661],\".\/id-ID.json\":[3247,491],\".\/it-IT.json\":[3257,465],\".\/ja-JP.json\":[198,137],\".\/kab-KAB.json\":[228,164],\".\/kk-KZ.json\":[8972,649],\".\/ko-KR.json\":[7596,60],\".\/lv-LV.json\":[2327,899],\".\/my-MM.json\":[7704,242],\".\/nb-NO.json\":[1167,246],\".\/nl-NL.json\":[290,196],\".\/nn-NO.json\":[4481,920],\".\/oc-FR.json\":[2284,565],\".\/pa-IN.json\":[6773,280],\".\/percentages.json\":[4451],\".\/pl-PL.json\":[3661,852],\".\/pt-BR.json\":[8881,381],\".\/pt-PT.json\":[5622,149],\".\/ro-RO.json\":[2013,752],\".\/ru-RU.json\":[2253,869],\".\/sk-SK.json\":[4570,401],\".\/sv-SE.json\":[6006,698],\".\/tr-TR.json\":[7315,213],\".\/uk-UA.json\":[334,583],\".\/zh-CN.json\":[1037,304],\".\/zh-TW.json\":[931,62]};function o(e){if(!n.o(r,e))return Promise.resolve().then((function(){var t=new Error(\"Cannot find module '\"+e+\"'\");throw t.code=\"MODULE_NOT_FOUND\",t}));var t=r[e],o=t[0];return Promise.all(t.slice(1).map(n.e)).then((function(){return n.t(o,19)}))}o.keys=function(){return Object.keys(r)},o.id=788,e.exports=o},9713:function(e){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},6479:function(e,t,n){var r=n(7316);e.exports=function(e,t){if(null==e)return{};var n,o,a=r(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}},7316:function(e){e.exports=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}},4295:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r),a=n(1667),i=n.n(a),l=n(7464),s=n(9638),c=o()((function(e){return e[1]})),u=i()(l.Z),d=i()(s.Z);c.push([e.id,'@font-face{font-family:\"Virgil\";src:url('+u+');font-display:swap}@font-face{font-family:\"Cascadia\";src:url('+d+\");font-display:swap}\",\"\"]),t.default=c},9135:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\".excalidraw .ActiveFile .ActiveFile__fileName{display:flex;align-items:center}.excalidraw .ActiveFile .ActiveFile__fileName span{text-overflow:ellipsis;overflow:hidden;white-space:nowrap;width:9.3em}.excalidraw .ActiveFile .ActiveFile__fileName svg{width:1.15em;-webkit-margin-end:.3em;margin-inline-end:.3em;-webkit-transform:scaleY(0.9);transform:scaleY(0.9)}\",\"\"]),t.default=o},3729:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Avatar{width:2.5rem;height:2.5rem;border-radius:1.25rem;display:flex;justify-content:center;align-items:center;color:#fff;cursor:pointer;font-size:.8rem;font-weight:500}\",\"\"]),t.default=o},4241:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Card{display:flex;flex-direction:column;align-items:center;max-width:290px;margin:1em;text-align:center}.excalidraw .Card .Card-icon{font-size:2.6em;display:flex;flex:0 0 auto;padding:1.4rem;border-radius:50%;background:var(--card-color);color:#fff}.excalidraw .Card .Card-icon svg{width:2.8rem;height:2.8rem}.excalidraw .Card .Card-details{font-size:.96em;min-height:90px;padding:0 1em;margin-bottom:auto}.excalidraw .Card .Card-button.ToolIcon_type_button{height:2.5rem;margin-top:1em;margin-bottom:.3em;background-color:var(--card-color)}.excalidraw .Card .Card-button.ToolIcon_type_button:hover{background-color:var(--card-color-darker)}.excalidraw .Card .Card-button.ToolIcon_type_button:active{background-color:var(--card-color-darkest)}.excalidraw .Card .Card-button.ToolIcon_type_button .ToolIcon__label{color:#fff}\",\"\"]),t.default=o},6029:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Checkbox{margin:4px .3em;display:flex;align-items:center;cursor:pointer;-webkit-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.excalidraw .Checkbox:hover:not(.is-checked) .Checkbox-box:not(:focus){box-shadow:0 0 0 2px #4dabf7}.excalidraw .Checkbox:hover:not(.is-checked) .Checkbox-box:not(:focus) svg{display:block;opacity:.3}.excalidraw .Checkbox:active .Checkbox-box{box-shadow:0 0 2px 1px inset #1c7ed6 !important}.excalidraw .Checkbox:hover .Checkbox-box{background-color:rgba(208,235,255,.2)}.excalidraw .Checkbox.is-checked .Checkbox-box{background-color:#d0ebff}.excalidraw .Checkbox.is-checked .Checkbox-box svg{display:block}.excalidraw .Checkbox.is-checked:hover .Checkbox-box{background-color:#a5d8ff}.excalidraw .Checkbox .Checkbox-box{width:22px;height:22px;padding:0;flex:0 0 auto;margin:0 1em;display:flex;align-items:center;justify-content:center;box-shadow:0 0 0 2px #1c7ed6;background-color:transparent;border-radius:4px;color:#1c7ed6}.excalidraw .Checkbox .Checkbox-box:focus{box-shadow:0 0 0 3px #1c7ed6}.excalidraw .Checkbox .Checkbox-box svg{display:none;width:16px;height:16px;stroke-width:3px}.excalidraw .Checkbox .Checkbox-label{display:flex;align-items:center}.excalidraw .Checkbox .excalidraw-tooltip-icon{width:1em;height:1em}\",\"\"]),t.default=o},9609:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .CollabButton.is-collaborating{background-color:var(--button-special-active-bg-color)}.excalidraw .CollabButton.is-collaborating .ToolIcon__icon svg,.excalidraw .CollabButton.is-collaborating .ToolIcon__label{color:var(--icon-green-fill-color)}.excalidraw .CollabButton-collaborators{min-width:1em;position:absolute;bottom:-5px;padding:3px;border-radius:50%;background-color:#40c057;color:#fff;font-size:.7em;font-family:var(--ui-font)}:root[dir=ltr] .excalidraw .CollabButton-collaborators{right:-5px}:root[dir=rtl] .excalidraw .CollabButton-collaborators{left:-5px}\",\"\"]),t.default=o},2345:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,':export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .color-picker{background:var(--popup-bg-color);border:0 solid rgba(255,255,255,.25);box-shadow:rgba(0,0,0,.25) 0 1px 4px;border-radius:4px;position:absolute}:root[dir=ltr] .excalidraw .color-picker{left:-5.5px}:root[dir=rtl] .excalidraw .color-picker{right:-5.5px}.excalidraw .color-picker-control-container{display:grid;grid-template-columns:auto 1fr;align-items:center}.excalidraw .color-picker-triangle{width:0;height:0;border-style:solid;border-width:0 9px 10px;border-color:transparent transparent var(--popup-bg-color);position:absolute;top:-10px}:root[dir=ltr] .excalidraw .color-picker-triangle{left:12px}:root[dir=rtl] .excalidraw .color-picker-triangle{right:12px}.excalidraw .color-picker-triangle-shadow{border-color:transparent transparent rgba(0,0,0,.1);top:-11px}.excalidraw .color-picker-content{padding:.5rem;display:grid;grid-template-columns:repeat(5, auto);grid-gap:.5rem;border-radius:4px}.excalidraw .color-picker-content:focus{outline:none;box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .color-picker-content .color-input-container{grid-column:1\/span 5}.excalidraw .color-picker-swatch{position:relative;height:1.875rem;width:1.875rem;cursor:pointer;border-radius:4px;margin:0;box-sizing:border-box;border:1px solid #ddd;background-color:currentColor !important;-webkit-filter:var(--theme-filter);filter:var(--theme-filter)}.excalidraw .color-picker-swatch:focus{box-shadow:0 0 4px 1px currentColor;border-color:var(--select-highlight-color)}.excalidraw .color-picker-transparent{border-radius:4px;box-shadow:rgba(0,0,0,.1) 0 0 0 1px inset;position:absolute;top:0;right:0;bottom:0;left:0}.excalidraw .color-picker-transparent,.excalidraw .color-picker-label-swatch{background:url(\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAAMUlEQVQ4T2NkYGAQYcAP3uCTZhw1gGGYhAGBZIA\/nYDCgBDAm9BGDWAAJyRCgLaBCAAgXwixzAS0pgAAAABJRU5ErkJggg==\") left center}.excalidraw .color-picker-hash{background:var(--input-border-color);height:1.875rem;width:1.875rem;color:var(--input-label-color);display:flex;align-items:center;justify-content:center;position:relative}:root[dir=ltr] .excalidraw .color-picker-hash{border-radius:4px 0 0 4px}:root[dir=rtl] .excalidraw .color-picker-hash{border-radius:0 4px 4px 0}.excalidraw .color-input-container:focus-within .color-picker-hash{box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .color-input-container:focus-within .color-picker-hash::before,.excalidraw .color-input-container:focus-within .color-picker-hash::after{content:\"\";width:1px;height:100%;position:absolute;top:0}.excalidraw .color-input-container:focus-within .color-picker-hash::before{background:var(--input-border-color)}:root[dir=ltr] .excalidraw .color-input-container:focus-within .color-picker-hash::before{right:-1px}:root[dir=rtl] .excalidraw .color-input-container:focus-within .color-picker-hash::before{left:-1px}.excalidraw .color-input-container:focus-within .color-picker-hash::after{background:var(--input-bg-color)}:root[dir=ltr] .excalidraw .color-input-container:focus-within .color-picker-hash::after{right:-2px}:root[dir=rtl] .excalidraw .color-input-container:focus-within .color-picker-hash::after{left:-2px}.excalidraw .color-input-container{display:flex}.excalidraw .color-picker-input{width:11ch;margin:0;font-size:1rem;background-color:var(--input-bg-color);color:var(--text-primary-color);border:0;outline:none;height:1.75em;box-shadow:var(--input-border-color) 0 0 0 1px inset;float:left;padding:1px;-webkit-padding-start:.5em;padding-inline-start:.5em;-webkit-appearance:none;appearance:none}:root[dir=ltr] .excalidraw .color-picker-input{border-radius:0 4px 4px 0}:root[dir=rtl] .excalidraw .color-picker-input{border-radius:4px 0 0 4px}.excalidraw .color-picker-label-swatch{height:1.875rem;width:1.875rem;-webkit-margin-end:.25rem;margin-inline-end:.25rem;border:1px solid #dee2e6;position:relative;overflow:hidden;background-color:transparent !important;-webkit-filter:var(--theme-filter);filter:var(--theme-filter)}.excalidraw .color-picker-label-swatch:after{content:\"\";position:absolute;top:0;left:0;width:100%;height:100%;background:var(--swatch-color)}.excalidraw .color-picker-keybinding{position:absolute;bottom:2px;font-size:.7em}:root[dir=ltr] .excalidraw .color-picker-keybinding{right:2px}:root[dir=rtl] .excalidraw .color-picker-keybinding{left:2px}.excalidraw--mobile.excalidraw .color-picker-keybinding{display:none}.excalidraw .color-picker-type-canvasBackground .color-picker-keybinding{color:#aaa}.excalidraw .color-picker-type-elementBackground .color-picker-keybinding{color:#fff}.excalidraw .color-picker-swatch[aria-label=transparent] .color-picker-keybinding{color:#aaa}.excalidraw .color-picker-type-elementStroke .color-picker-keybinding{color:#d4d4d4}.excalidraw.theme--dark .color-picker-type-elementBackground .color-picker-keybinding{color:#000}.excalidraw.theme--dark .color-picker-swatch[aria-label=transparent] .color-picker-keybinding{color:#000}',\"\"]),t.default=o},6578:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,':export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .context-menu{position:relative;border-radius:4px;box-shadow:0 3px 10px rgba(0,0,0,.2);padding:0;list-style:none;-webkit-user-select:none;user-select:none;margin:-0.25rem 0 0 .125rem;padding:.5rem 0;background-color:var(--popup-secondary-bg-color);border:1px solid var(--button-gray-3);cursor:default}.excalidraw .context-menu button{color:var(--popup-text-color)}.excalidraw .context-menu-option{position:relative;width:100%;min-width:9.5rem;margin:0;padding:.25rem 1rem .25rem 1.25rem;text-align:start;border-radius:0;background-color:transparent;border:none;white-space:nowrap;display:grid;grid-template-columns:1fr .2fr;align-items:center}.excalidraw .context-menu-option.checkmark::before{position:absolute;left:6px;margin-bottom:1px;content:\"\u2713\"}.excalidraw .context-menu-option.dangerous .context-menu-option__label{color:#f03e3e}.excalidraw .context-menu-option .context-menu-option__label{justify-self:start;-webkit-margin-end:20px;margin-inline-end:20px}.excalidraw .context-menu-option .context-menu-option__shortcut{justify-self:end;opacity:.6;font-family:inherit;font-size:.7rem}.excalidraw .context-menu-option:hover{color:var(--popup-bg-color);background-color:var(--select-highlight-color)}.excalidraw .context-menu-option:hover.dangerous{background-color:#fa5252}.excalidraw .context-menu-option:hover.dangerous .context-menu-option__label{color:var(--popup-bg-color)}.excalidraw .context-menu-option:focus{z-index:1}.excalidraw--mobile.excalidraw .context-menu-option{display:block}.excalidraw--mobile.excalidraw .context-menu-option .context-menu-option__label{-webkit-margin-end:0;margin-inline-end:0}.excalidraw--mobile.excalidraw .context-menu-option .context-menu-option__shortcut{display:none}.excalidraw .context-menu-option-separator{border:none;border-top:1px solid #adb5bd}',\"\"]),t.default=o},9482:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Dialog{-webkit-user-select:text;user-select:text;cursor:auto}.excalidraw .Dialog__title{display:grid;align-items:center;margin-top:0;grid-template-columns:1fr calc(var(--space-factor) * 7);grid-gap:var(--metric);padding:calc(var(--space-factor) * 2);text-align:center;font-variant:small-caps;font-size:1.2em}.excalidraw .Dialog__titleContent{flex:1}.excalidraw .Dialog .Modal__close{color:var(--icon-fill-color);margin:0}.excalidraw .Dialog__content{padding:0 16px 16px}.excalidraw--mobile.excalidraw .Dialog{--metric: calc(var(--space-factor) * 4);--inset-left: max(var(--metric), var(--sal));--inset-right: max(var(--metric), var(--sar))}.excalidraw--mobile.excalidraw .Dialog__title{grid-template-columns:calc(var(--space-factor) * 7) 1fr calc( var(--space-factor) * 7 );position:-webkit-sticky;position:sticky;top:0;padding:calc(var(--space-factor) * 2);background:var(--island-bg-color);font-size:1.25em;box-sizing:border-box;border-bottom:1px solid var(--button-gray-2);z-index:1}.excalidraw--mobile.excalidraw .Dialog__titleContent{text-align:center}.excalidraw--mobile.excalidraw .Dialog .Island{width:100vw;height:100%;box-sizing:border-box;overflow-y:auto;padding-left:max(calc(var(--padding) * var(--space-factor)), var(--sal));padding-right:max(calc(var(--padding) * var(--space-factor)), var(--sar));padding-bottom:max(calc(var(--padding) * var(--space-factor)), var(--sab))}.excalidraw--mobile.excalidraw .Dialog .Modal__close{order:-1}\",\"\"]),t.default=o},7955:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,':export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .ExportDialog__preview{--preview-padding: calc(var(--space-factor) * 4);background:url(\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAAMUlEQVQ4T2NkYGAQYcAP3uCTZhw1gGGYhAGBZIA\/nYDCgBDAm9BGDWAAJyRCgLaBCAAgXwixzAS0pgAAAABJRU5ErkJggg==\") left center;text-align:center;padding:var(--preview-padding);margin-bottom:calc(var(--space-factor) * 3)}.excalidraw .ExportDialog__preview canvas{max-width:calc(100% - var(--preview-padding) * 2);max-height:25rem}.excalidraw.theme--dark .ExportDialog__preview canvas{-webkit-filter:none;filter:none}.excalidraw .ExportDialog__actions{width:100%;display:flex;grid-gap:calc(var(--space-factor) * 2);align-items:top;justify-content:space-between}.excalidraw--mobile.excalidraw .ExportDialog{display:flex;flex-direction:column}.excalidraw--mobile.excalidraw .ExportDialog__actions{flex-direction:column;align-items:center}.excalidraw--mobile.excalidraw .ExportDialog__actions>*{margin-bottom:calc(var(--space-factor) * 3)}.excalidraw--mobile.excalidraw .ExportDialog__preview canvas{max-height:30vh}.excalidraw--mobile.excalidraw .ExportDialog__dialog,.excalidraw--mobile.excalidraw .ExportDialog__dialog .Island{height:100%;box-sizing:border-box}.excalidraw--mobile.excalidraw .ExportDialog__dialog .Island{overflow-y:auto}.excalidraw .ExportDialog--json .ExportDialog-cards{display:grid;grid-template-columns:repeat(auto-fit, minmax(200px, 1fr));justify-items:center;row-gap:2em}@media(max-width: 460px){.excalidraw .ExportDialog--json .ExportDialog-cards{grid-template-columns:repeat(auto-fit, minmax(240px, 1fr))}.excalidraw .ExportDialog--json .ExportDialog-cards .Card-details{min-height:40px}}.excalidraw .ExportDialog--json .ExportDialog-cards .ProjectName{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;margin:1em auto;align-items:flex-start;flex-direction:column}.excalidraw .ExportDialog--json .ExportDialog-cards .ProjectName .TextInput{width:auto}.excalidraw .ExportDialog--json .ExportDialog-cards .ProjectName-label{margin:.625em 0;font-weight:bold}.excalidraw button.ExportDialog-imageExportButton{width:5rem;height:5rem;margin:0 .2em;border-radius:1rem;background-color:var(--button-color);box-shadow:0 3px 5px -1px rgba(0,0,0,.28),0 6px 10px 0 rgba(0,0,0,.14);font-family:Cascadia;font-size:1.8em;color:#fff}.excalidraw button.ExportDialog-imageExportButton:hover{background-color:var(--button-color-darker)}.excalidraw button.ExportDialog-imageExportButton:active{background-color:var(--button-color-darkest);box-shadow:none}.excalidraw button.ExportDialog-imageExportButton svg{width:.9em}',\"\"]),t.default=o},3195:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\".excalidraw .FixedSideContainer{position:absolute;pointer-events:none}.excalidraw .FixedSideContainer>*{pointer-events:all}.excalidraw .FixedSideContainer_side_top{left:var(--space-factor);top:var(--space-factor);right:var(--space-factor);z-index:2}.excalidraw .FixedSideContainer_side_top.zen-mode{right:42px}\",\"\"]),t.default=o},2978:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .HelpDialog h3{border-bottom:1px solid var(--button-gray-2);padding-bottom:4px}.excalidraw .HelpDialog--island{border:1px solid var(--button-gray-2);margin-bottom:16px}.excalidraw .HelpDialog--island-title{margin:0;padding:4px;background-color:var(--button-gray-1);text-align:center}.excalidraw .HelpDialog--shortcut{border-top:1px solid var(--button-gray-2)}.excalidraw .HelpDialog--key{word-break:keep-all;border:1px solid var(--button-gray-2);padding:2px 8px;margin:auto 4px;background-color:var(--button-gray-1);border-radius:2px;font-size:.8em;min-height:26px;box-sizing:border-box;display:flex;align-items:center;font-family:inherit}.excalidraw .HelpDialog--header{display:flex;flex-direction:row;justify-content:space-evenly;margin-bottom:32px;padding-bottom:16px}.excalidraw .HelpDialog--btn{border:1px solid var(--link-color);padding:8px 32px;border-radius:4px}.excalidraw .HelpDialog--btn:hover{text-decoration:none}\",\"\"]),t.default=o},1587:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .HintViewer{pointer-events:none;box-sizing:border-box;position:absolute;display:flex;justify-content:center;left:0;top:100%;max-width:100%;width:100%;margin-top:6px;text-align:center;color:#868e96;font-size:.8rem}.excalidraw--mobile.excalidraw .HintViewer{position:static;padding-right:2em}.excalidraw .HintViewer>span{padding:.2rem .4rem;background-color:var(--overlay-bg-color);border-radius:4px}\",\"\"]),t.default=o},9478:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,':export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .picker-container{display:inline-block;box-sizing:border-box;margin-right:.25rem}.excalidraw .picker{background:var(--popup-bg-color);border:0 solid rgba(255,255,255,.25);box-shadow:rgba(0,0,0,.25) 0 1px 4px;border-radius:4px;position:absolute}.excalidraw .picker-container button,.excalidraw .picker button{position:relative;display:flex;align-items:center;justify-content:center}.excalidraw .picker-container button:focus,.excalidraw .picker button:focus{outline:transparent;background-color:var(--button-gray-2)}.excalidraw .picker-container button:focus svg,.excalidraw .picker button:focus svg{opacity:1}.excalidraw .picker-container button:hover,.excalidraw .picker button:hover{background-color:var(--button-gray-2)}.excalidraw .picker-container button:active,.excalidraw .picker button:active{background-color:var(--button-gray-3)}.excalidraw .picker-container button:disabled,.excalidraw .picker button:disabled{cursor:not-allowed}.excalidraw .picker-container button svg,.excalidraw .picker button svg{margin:0;width:36px;height:18px;opacity:.6;pointer-events:none}.excalidraw .picker button{padding:.25rem .28rem .35rem .25rem}.excalidraw .picker-triangle{width:0;height:0;position:relative;top:-10px;z-index:10}:root[dir=ltr] .excalidraw .picker-triangle{left:12px}:root[dir=rtl] .excalidraw .picker-triangle{right:12px}.excalidraw .picker-triangle:before{content:\"\";position:absolute;border-style:solid;border-width:0 9px 10px;border-color:transparent transparent rgba(0,0,0,.1);top:-1px}.excalidraw .picker-triangle:after{content:\"\";position:absolute;border-style:solid;border-width:0 9px 10px;border-color:transparent transparent var(--popup-bg-color)}.excalidraw .picker-content{padding:.5rem;display:grid;grid-auto-flow:column;grid-gap:.5rem;border-radius:4px}:root[dir=rtl] .excalidraw .picker-content{padding:.4rem}.excalidraw .picker-keybinding{position:absolute;bottom:2px;font-size:.7em;color:var(--keybinding-color)}:root[dir=ltr] .excalidraw .picker-keybinding{right:2px}:root[dir=rtl] .excalidraw .picker-keybinding{left:2px}.excalidraw--mobile.excalidraw .picker-keybinding{display:none}.excalidraw .picker-type-canvasBackground .picker-keybinding{color:#aaa}.excalidraw .picker-type-elementBackground .picker-keybinding{color:#fff}.excalidraw .picker-swatch[aria-label=transparent] .picker-keybinding{color:#aaa}.excalidraw .picker-type-elementStroke .picker-keybinding{color:#d4d4d4}.excalidraw.theme--dark .picker-type-elementBackground .picker-keybinding{color:#000}.excalidraw.theme--dark .picker-swatch[aria-label=transparent] .picker-keybinding{color:#000}',\"\"]),t.default=o},7369:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\".excalidraw .Island{--padding: 0;background-color:var(--island-bg-color);box-shadow:var(--shadow-island);border-radius:4px;padding:calc(var(--padding) * var(--space-factor));position:relative;transition:box-shadow .5s ease-in-out}.excalidraw .Island.zen-mode{box-shadow:none}\",\"\"]),t.default=o},1434:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\".excalidraw .layer-ui__library{margin:auto;display:flex;align-items:center;justify-content:center}.excalidraw .layer-ui__library .layer-ui__library-header{display:flex;align-items:center;width:100%;margin:2px 0}.excalidraw .layer-ui__library .layer-ui__library-header button{margin:0 2px}.excalidraw .layer-ui__library .layer-ui__library-header a{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-padding-end:18px;padding-inline-end:18px;white-space:nowrap}.excalidraw .layer-ui__library-message{padding:10px 20px;max-width:200px}.excalidraw .layer-ui__library-items{max-height:50vh;overflow:auto}.excalidraw .layer-ui__wrapper{z-index:var(--zIndex-layerUI)}.excalidraw .layer-ui__wrapper__top-right{display:flex}.excalidraw .layer-ui__wrapper__footer{width:100%}.excalidraw .layer-ui__wrapper__footer-right{z-index:100;display:flex}.excalidraw .layer-ui__wrapper .zen-mode-transition{transition:-webkit-transform .5s ease-in-out;transition:transform .5s ease-in-out;transition:transform .5s ease-in-out, -webkit-transform .5s ease-in-out}:root[dir=ltr] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-left{-webkit-transform:translate(-999px, 0);transform:translate(-999px, 0)}:root[dir=ltr] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-right{-webkit-transform:translate(999px, 0);transform:translate(999px, 0)}:root[dir=rtl] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-left{-webkit-transform:translate(999px, 0);transform:translate(999px, 0)}:root[dir=rtl] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-right{-webkit-transform:translate(-999px, 0);transform:translate(-999px, 0)}:root[dir=ltr] .excalidraw .layer-ui__wrapper .zen-mode-transition.layer-ui__wrapper__footer-left--transition-left{-webkit-transform:translate(-76px, 0);transform:translate(-76px, 0)}:root[dir=rtl] .excalidraw .layer-ui__wrapper .zen-mode-transition.layer-ui__wrapper__footer-left--transition-left{-webkit-transform:translate(76px, 0);transform:translate(76px, 0)}.excalidraw .layer-ui__wrapper .zen-mode-transition.layer-ui__wrapper__footer-left--transition-bottom{-webkit-transform:translate(0, 92px);transform:translate(0, 92px)}.excalidraw .layer-ui__wrapper .disable-zen-mode{height:30px;position:absolute;bottom:10px;font-size:10px;padding:10px;font-weight:500;opacity:0;visibility:hidden;transition:visibility 0s linear 0s,opacity .5s}[dir=ltr] .excalidraw .layer-ui__wrapper .disable-zen-mode{right:15px}[dir=rtl] .excalidraw .layer-ui__wrapper .disable-zen-mode{left:15px}.excalidraw .layer-ui__wrapper .disable-zen-mode--visible{opacity:1;visibility:visible;transition:visibility 0s linear 300ms,opacity .5s;transition-delay:.8s}.excalidraw .layer-ui__wrapper .layer-ui__wrapper__footer-center{pointer-events:none}.excalidraw .layer-ui__wrapper .layer-ui__wrapper__footer-center>*{pointer-events:all}.excalidraw .layer-ui__wrapper .layer-ui__wrapper__footer-left,.excalidraw .layer-ui__wrapper .layer-ui__wrapper__footer-right,.excalidraw .layer-ui__wrapper .disable-zen-mode--visible{pointer-events:all}.excalidraw .layer-ui__wrapper .layer-ui__wrapper__footer-left{margin-bottom:.2em}.excalidraw .layer-ui__wrapper .layer-ui__wrapper__footer-right{margin-top:auto;margin-bottom:auto;-webkit-margin-end:1em;margin-inline-end:1em}\",\"\"]),t.default=o},5644:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\".excalidraw .library-unit{align-items:center;border:1px solid var(--button-gray-2);display:flex;justify-content:center;position:relative;width:63px;height:63px}.excalidraw .library-unit__dragger{display:flex;height:100%;width:100%}.excalidraw .library-unit__dragger>svg{-webkit-filter:var(--theme-filter);filter:var(--theme-filter);flex-grow:1;max-height:100%;max-width:100%}.excalidraw .library-unit__removeFromLibrary,.excalidraw .library-unit__removeFromLibrary:hover,.excalidraw .library-unit__removeFromLibrary:active{align-items:center;background:none;border:none;color:var(--icon-fill-color);display:flex;justify-content:center;margin:0;padding:0;position:absolute;right:5px;top:5px}.excalidraw .library-unit__removeFromLibrary>svg{height:16px;width:16px}.excalidraw .library-unit__pulse{-webkit-transform:scale(1);transform:scale(1);-webkit-animation:library-unit__pulse-animation 1s ease-in infinite;animation:library-unit__pulse-animation 1s ease-in infinite}.excalidraw .library-unit__adder{position:absolute;left:50%;top:50%;width:20px;height:20px;margin-left:-10px;margin-top:-10px;pointer-events:none}.excalidraw .library-unit__active{cursor:pointer}@-webkit-keyframes library-unit__pulse-animation{0%{-webkit-transform:scale(0.95);transform:scale(0.95)}50%{-webkit-transform:scale(1);transform:scale(1)}100%{-webkit-transform:scale(0.95);transform:scale(0.95)}}@keyframes library-unit__pulse-animation{0%{-webkit-transform:scale(0.95);transform:scale(0.95)}50%{-webkit-transform:scale(1);transform:scale(1)}100%{-webkit-transform:scale(0.95);transform:scale(0.95)}}\",\"\"]),t.default=o},6843:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw.excalidraw-modal-container{position:absolute;z-index:10}.excalidraw .Modal{position:absolute;top:0;left:0;right:0;bottom:0;display:flex;align-items:center;justify-content:center;overflow:auto;padding:calc(var(--space-factor) * 10)}.excalidraw .Modal__background{position:absolute;top:0;left:0;right:0;bottom:0;z-index:1;background-color:rgba(0,0,0,.7)}.excalidraw .Modal__content{position:relative;z-index:2;width:100%;max-width:var(--max-width);max-height:100%;opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px);-webkit-animation:Modal__content_fade-in .1s ease-out .05s forwards;animation:Modal__content_fade-in .1s ease-out .05s forwards;position:relative;overflow-y:auto;background:var(--island-bg-color);border:1px solid var(--dialog-border-color);box-shadow:0 2px 10px rgba(0,0,0,.25);border-radius:6px;box-sizing:border-box}.excalidraw .Modal__content:focus{outline:none}.excalidraw--mobile.excalidraw .Modal__content{max-width:100%;border:0;border-radius:0}@-webkit-keyframes Modal__content_fade-in{from{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}to{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes Modal__content_fade-in{from{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}to{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}.excalidraw .Modal__close{width:calc(var(--space-factor) * 7);height:calc(var(--space-factor) * 7);display:flex;align-items:center;justify-content:center}.excalidraw .Modal__close svg{height:calc(var(--space-factor) * 5)}.excalidraw--mobile.excalidraw .Modal{padding:0}.excalidraw--mobile.excalidraw .Modal__content{position:absolute;top:0;left:0;right:0;bottom:0}\",\"\"]),t.default=o},8461:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw--mobile.excalidraw .PasteChartDialog .Island{display:flex;flex-direction:column}.excalidraw .PasteChartDialog .container{display:flex;align-items:center;justify-content:space-around;flex-wrap:wrap}.excalidraw--mobile.excalidraw .PasteChartDialog .container{flex-direction:column;justify-content:center}.excalidraw .PasteChartDialog .ChartPreview{margin:8px;text-align:center;width:192px;height:128px;border-radius:2px;padding:1px;border:1px solid #ced4da;display:flex;align-items:center;justify-content:center;background:transparent}.excalidraw .PasteChartDialog .ChartPreview div{display:inline-block}.excalidraw .PasteChartDialog .ChartPreview svg{max-height:120px;max-width:186px}.excalidraw .PasteChartDialog .ChartPreview:hover{padding:0;border:2px solid #339af0}\",\"\"]),t.default=o},9935:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\".excalidraw .popover{position:absolute;z-index:10}\",\"\"]),t.default=o},532:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\".ProjectName{margin:auto;display:flex;align-items:center}.ProjectName .TextInput{height:calc(1rem - 3px);width:200px;overflow:hidden;text-align:center;margin-left:8px;text-overflow:ellipsis}.ProjectName .TextInput--readonly{background:none;border:none;width:auto;max-width:200px;padding-left:2px}.ProjectName .TextInput--readonly:hover{background:none}\",\"\"]),t.default=o},3874:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\".excalidraw .Stack{--gap: 0;display:grid;gap:calc(var(--space-factor) * var(--gap))}.excalidraw .Stack_vertical{grid-template-columns:auto;grid-auto-flow:row;grid-auto-rows:-webkit-min-content;grid-auto-rows:min-content}.excalidraw .Stack_horizontal{grid-template-rows:auto;grid-auto-flow:column;grid-auto-columns:-webkit-min-content;grid-auto-columns:min-content}\",\"\"]),t.default=o},2681:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Stats{position:absolute;top:64px;right:12px;font-size:12px;z-index:10}.excalidraw .Stats h3{margin:0 24px 8px 0;white-space:nowrap}.excalidraw .Stats .close{float:right;height:16px;width:16px;cursor:pointer}.excalidraw .Stats .close svg{width:100%;height:100%}.excalidraw .Stats table{width:100%}.excalidraw .Stats table th{border-bottom:1px solid var(--input-border-color);padding:4px}.excalidraw .Stats table tr td:nth-child(2){min-width:24px;text-align:right}:root[dir=rtl] .excalidraw .Stats{left:12px;right:initial}:root[dir=rtl] .excalidraw .Stats h3{margin:0 0 8px 24px}:root[dir=rtl] .excalidraw .Stats .close{float:left}\",\"\"]),t.default=o},6759:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .TextInput{color:var(--text-primary-color);display:inline-block;border:1.5px solid var(--button-gray-1);line-height:1;padding:.75rem;white-space:nowrap;border-radius:var(--space-factor);background-color:var(--input-bg-color)}.excalidraw .TextInput:not(:focus):hover{background-color:var(--input-hover-bg-color)}.excalidraw .TextInput:focus{outline:none;box-shadow:0 0 0 2px var(--focus-highlight-color)}\",\"\"]),t.default=o},9650:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Toast{-webkit-animation:fade-in .5s;animation:fade-in .5s;background-color:var(--button-gray-1);border-radius:4px;bottom:10px;box-sizing:border-box;cursor:default;left:50%;margin-left:-150px;padding:4px 0;position:absolute;text-align:center;width:300px;z-index:999999}.excalidraw .Toast__message{color:var(--popup-text-color);white-space:pre-wrap}@-webkit-keyframes fade-in{from{opacity:0}to{opacity:1}}@keyframes fade-in{from{opacity:0}to{opacity:1}}\",\"\"]),t.default=o},2044:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw .ToolIcon{display:inline-flex;align-items:center;position:relative;font-family:Cascadia;cursor:pointer;-webkit-tap-highlight-color:transparent;border-radius:var(--space-factor);-webkit-user-select:none;user-select:none;background-color:var(--button-gray-1)}.excalidraw .ToolIcon:hover{background-color:var(--button-gray-2)}.excalidraw .ToolIcon:active{background-color:var(--button-gray-3)}.excalidraw .ToolIcon--plain{background-color:transparent}.excalidraw .ToolIcon--plain .ToolIcon__icon{width:2rem;height:2rem}.excalidraw .ToolIcon__icon{width:2.5rem;height:2.5rem;color:var(--icon-fill-color);display:flex;justify-content:center;align-items:center;border-radius:var(--space-factor)}.excalidraw .ToolIcon__icon svg{position:relative;height:1em;fill:var(--icon-fill-color);color:var(--icon-fill-color)}.excalidraw .ToolIcon__icon+.ToolIcon__label{-webkit-margin-start:0;margin-inline-start:0}.excalidraw .ToolIcon__label{color:var(--icon-fill-color);font-family:var(--ui-font);margin:0 .8em;text-overflow:ellipsis}.excalidraw .ToolIcon_size_small .ToolIcon__icon{width:2rem;height:2rem;font-size:.8em}.excalidraw .excalidraw .ToolIcon_type_button,.excalidraw .Modal .ToolIcon_type_button,.excalidraw .ToolIcon_type_button{padding:0;border:none;margin:0;font-size:inherit}.excalidraw .excalidraw .ToolIcon_type_button:focus,.excalidraw .Modal .ToolIcon_type_button:focus,.excalidraw .ToolIcon_type_button:focus{box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .excalidraw .ToolIcon_type_button.ToolIcon--selected,.excalidraw .Modal .ToolIcon_type_button.ToolIcon--selected,.excalidraw .ToolIcon_type_button.ToolIcon--selected{background-color:var(--button-gray-2)}.excalidraw .excalidraw .ToolIcon_type_button.ToolIcon--selected:active,.excalidraw .Modal .ToolIcon_type_button.ToolIcon--selected:active,.excalidraw .ToolIcon_type_button.ToolIcon--selected:active{background-color:var(--button-gray-3)}.excalidraw .excalidraw .ToolIcon_type_button:hover,.excalidraw .Modal .ToolIcon_type_button:hover,.excalidraw .ToolIcon_type_button:hover{background-color:var(--button-gray-2)}.excalidraw .excalidraw .ToolIcon_type_button:active,.excalidraw .Modal .ToolIcon_type_button:active,.excalidraw .ToolIcon_type_button:active{background-color:var(--button-gray-3)}.excalidraw .excalidraw .ToolIcon_type_button--show,.excalidraw .Modal .ToolIcon_type_button--show,.excalidraw .ToolIcon_type_button--show{visibility:visible}.excalidraw .excalidraw .ToolIcon_type_button--hide,.excalidraw .Modal .ToolIcon_type_button--hide,.excalidraw .ToolIcon_type_button--hide{visibility:hidden}.excalidraw .ToolIcon_type_radio,.excalidraw .ToolIcon_type_checkbox{position:absolute;opacity:0;pointer-events:none}.excalidraw .ToolIcon_type_radio:not(.ToolIcon_toggle_opaque):checked+.ToolIcon__icon,.excalidraw .ToolIcon_type_checkbox:not(.ToolIcon_toggle_opaque):checked+.ToolIcon__icon{background-color:var(--button-gray-2)}.excalidraw .ToolIcon_type_radio:not(.ToolIcon_toggle_opaque):checked+.ToolIcon__icon:active,.excalidraw .ToolIcon_type_checkbox:not(.ToolIcon_toggle_opaque):checked+.ToolIcon__icon:active{background-color:var(--button-gray-3)}.excalidraw .ToolIcon_type_radio:focus+.ToolIcon__icon,.excalidraw .ToolIcon_type_checkbox:focus+.ToolIcon__icon{box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .ToolIcon_type_radio:active+.ToolIcon__icon,.excalidraw .ToolIcon_type_checkbox:active+.ToolIcon__icon{background-color:var(--button-gray-3)}.excalidraw .ToolIcon_type_floating{background-color:transparent}.excalidraw .ToolIcon_type_floating:hover{background-color:transparent}.excalidraw .ToolIcon_type_floating:active{background-color:transparent}.excalidraw .ToolIcon_type_floating:focus{box-shadow:none}.excalidraw .ToolIcon_type_floating .ToolIcon__icon{background-color:var(--button-gray-1);width:2rem;height:2em}.excalidraw .ToolIcon_type_floating .ToolIcon__icon:hover{background-color:var(--button-gray-2)}.excalidraw .ToolIcon_type_floating .ToolIcon__icon:active{background-color:var(--button-gray-3)}.excalidraw .ToolIcon.ToolIcon__lock{-webkit-margin-end:var(--space-factor);margin-inline-end:var(--space-factor)}.excalidraw .ToolIcon.ToolIcon__lock.ToolIcon_type_floating{margin-left:.1rem}.excalidraw .ToolIcon__keybinding{position:absolute;bottom:2px;right:3px;font-size:.5em;color:var(--keybinding-color);font-family:var(--ui-font);-webkit-user-select:none;user-select:none}@media(max-width: 425px){.excalidraw .Shape .ToolIcon__icon{width:2rem;height:2rem}.excalidraw .Shape .ToolIcon__icon svg{height:.8em}}@media(max-width: 760px){.excalidraw .ToolIcon.ToolIcon_type_floating{display:inline-block;position:absolute;right:-8px;margin-left:0;border-radius:20px 0 0 20px;z-index:1;background-color:var(--button-gray-1)}.excalidraw .ToolIcon.ToolIcon_type_floating:hover{background-color:var(--button-gray-1)}.excalidraw .ToolIcon.ToolIcon_type_floating:active{background-color:var(--button-gray-2)}.excalidraw .ToolIcon.ToolIcon_type_floating .ToolIcon__icon{border-radius:inherit}.excalidraw .ToolIcon.ToolIcon_type_floating svg{position:static}.excalidraw .ToolIcon.ToolIcon__library{top:100px}.excalidraw .ToolIcon.ToolIcon__lock{-webkit-margin-end:0;margin-inline-end:0;top:60px}}:root[dir=ltr] .excalidraw .unlocked-icon{left:2px}:root[dir=rtl] .excalidraw .unlocked-icon{right:2px}\",\"\"]),t.default=o},6626:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw-tooltip{position:absolute;z-index:1000;padding:8px;border-radius:6px;box-sizing:border-box;pointer-events:none;word-wrap:break-word;background:#000;line-height:1.5;text-align:center;font-size:13px;font-weight:500;color:#fff;display:none}.excalidraw-tooltip.excalidraw-tooltip--visible{display:block}.excalidraw-tooltip-wrapper{display:flex;height:100%}.excalidraw-tooltip-icon{width:.9em;height:.9em;margin-left:5px;margin-top:1px;display:flex}.excalidraw--mobile.excalidraw-tooltip-icon{display:none}\",\"\"]),t.default=o},6359:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\".excalidraw .UserList{pointer-events:none;padding:var(--space-factor) var(--space-factor) var(--space-factor) var(--space-factor);display:flex;flex-wrap:wrap;justify-content:flex-end}.excalidraw .UserList>*{pointer-events:all;margin:0 0 var(--space-factor) var(--space-factor)}.excalidraw .UserList_mobile{padding:0;justify-content:normal}.excalidraw .UserList_mobile>*{margin:0 var(--space-factor) var(--space-factor) 0}\",\"\"]),t.default=o},9915:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\".visually-hidden{position:absolute !important;height:1px;width:1px;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);white-space:nowrap;-webkit-user-select:none;user-select:none}.LoadingMessage{position:absolute;top:0;right:0;bottom:0;left:0;z-index:999;display:flex;align-items:center;justify-content:center;pointer-events:none}.LoadingMessage span{background-color:var(--button-gray-1);border-radius:5px;padding:.8em 1.2em;color:var(--popup-text-color);font-size:1.3em}\",\"\"]),t.default=o},9310:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,':export{themeFilter:invert(93%) hue-rotate(180deg)}:export{themeFilter:invert(93%) hue-rotate(180deg)}.excalidraw{--theme-filter: none;--button-destructive-bg-color: #ffe3e3;--button-destructive-color: #c92a2a;--button-gray-1: #e9ecef;--button-gray-2: #ced4da;--button-gray-3: #adb5bd;--button-special-active-bg-color: #ebfbee;--dialog-border-color: #868e96;--dropdown-icon: url(\\'data:image\/svg+xml,<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" width=\"292.4\" height=\"292.4\" viewBox=\"0 0 292 292\"><path d=\"M287 197L159 69c-4-3-8-5-13-5s-9 2-13 5L5 197c-3 4-5 8-5 13s2 9 5 13c4 4 8 5 13 5h256c5 0 9-1 13-5s5-8 5-13-1-9-5-13z\"\/><\/svg>\\');--focus-highlight-color: #a5d8ff;--icon-fill-color: #000000;--icon-green-fill-color: #2b8a3e;--default-bg-color: #ffffff;--input-bg-color: #ffffff;--input-border-color: #dee2e6;--input-hover-bg-color: #f1f3f5;--input-label-color: #495057;--island-bg-color: rgba(255, 255, 255, 0.96);--keybinding-color: #adb5bd;--link-color: #1c7ed6;--overlay-bg-color: rgba(255, 255, 255, 0.88);--popup-bg-color: #ffffff;--popup-secondary-bg-color: #f1f3f5;--popup-text-color: #000000;--popup-text-inverted-color: #ffffff;--sab: env(safe-area-inset-bottom);--sal: env(safe-area-inset-left);--sar: env(safe-area-inset-right);--sat: env(safe-area-inset-top);--select-highlight-color: #339af0;--shadow-island: 0 1px 5px rgba(0, 0, 0, 0.15);--space-factor: 0.25rem;--text-primary-color: #343a40}.excalidraw.theme--dark{background:#000}.excalidraw.theme--dark.theme--dark-background-none{background:none}.excalidraw.theme--dark{--theme-filter: invert(93%) hue-rotate(180deg);--button-destructive-bg-color: #5a0000;--button-destructive-color: #ffa8a8;--button-gray-1: #363636;--button-gray-2: #272727;--button-gray-3: #222;--button-special-active-bg-color: #204624;--dialog-border-color: #212529;--dropdown-icon: url(\\'data:image\/svg+xml,<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" width=\"292.4\" height=\"292.4\" viewBox=\"0 0 292 292\"><path fill=\"%23ced4da\" d=\"M287 197L159 69c-4-3-8-5-13-5s-9 2-13 5L5 197c-3 4-5 8-5 13s2 9 5 13c4 4 8 5 13 5h256c5 0 9-1 13-5s5-8 5-13-1-9-5-13z\"\/><\/svg>\\');--focus-highlight-color: #228be6;--icon-fill-color: #ced4da;--icon-green-fill-color: #69db7c;--default-bg-color: #121212;--input-bg-color: #121212;--input-border-color: #2e2e2e;--input-hover-bg-color: #181818;--input-label-color: #e9ecef;--island-bg-color: rgba(30, 30, 30, 0.98);--keybinding-color: #868e96;--overlay-bg-color: rgba(52, 58, 64, 0.12);--popup-bg-color: #2c2c2c;--popup-secondary-bg-color: #222;--popup-text-color: #ced4da;--popup-text-inverted-color: #2c2c2c;--select-highlight-color: #4dabf7;--shadow-island: 0 1px 5px rgba(0, 0, 0, 0.3);--text-primary-color: #ced4da}:root{--zIndex-canvas: 1;--zIndex-wysiwyg: 2;--zIndex-layerUI: 3}.excalidraw{position:relative;overflow:hidden;color:var(--text-primary-color);display:flex;top:0;bottom:0;left:0;right:0;height:100%;width:100%;-webkit-user-select:none;user-select:none}.excalidraw:focus{outline:none}.excalidraw a{font-weight:500;text-decoration:none;color:var(--link-color)}.excalidraw a:hover{text-decoration:underline}.excalidraw canvas{touch-action:none;image-rendering:pixelated;image-rendering:-moz-crisp-edges;z-index:var(--zIndex-canvas)}.excalidraw__canvas{position:absolute}.excalidraw.theme--dark canvas{-webkit-filter:var(--theme-filter);filter:var(--theme-filter)}.excalidraw .FixedSideContainer{padding-top:var(--sat, 0);padding-right:var(--sar, 0);padding-bottom:var(--sab, 0);padding-left:var(--sal, 0)}.excalidraw .panelRow{display:flex;justify-content:space-between}.excalidraw .panelColumn{display:flex;flex-direction:column}.excalidraw .panelColumn h3,.excalidraw .panelColumn legend,.excalidraw .panelColumn .control-label{margin-top:.333rem;margin-bottom:.333rem;font-size:.75rem;color:var(--text-primary-color);font-weight:bold;display:block}.excalidraw .panelColumn .control-label input{display:block;width:100%}.excalidraw .panelColumn h3:first-child,.excalidraw .panelColumn legend:first-child,.excalidraw .panelColumn .control-label:first-child{margin-top:0}.excalidraw .panelColumn legend{padding:0}.excalidraw .panelColumn .iconSelectList{flex-wrap:wrap;position:relative}.excalidraw .panelColumn .buttonList{flex-wrap:wrap}.excalidraw .panelColumn .buttonList label{margin-right:.25rem;font-size:.75rem;display:inline-block}.excalidraw .panelColumn .buttonList input[type=radio],.excalidraw .panelColumn .buttonList input[type=button]{opacity:0;position:absolute;pointer-events:none}.excalidraw .panelColumn .buttonList .iconRow{margin-top:8px}.excalidraw .panelColumn .buttonList .ToolIcon{margin:0;-webkit-margin-end:8px;margin-inline-end:8px}.excalidraw .panelColumn .buttonList .ToolIcon:focus{outline:transparent;box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .panelColumn .buttonList .ToolIcon:hover{background-color:var(--button-gray-2)}.excalidraw .panelColumn .buttonList .ToolIcon:active{background-color:var(--button-gray-3)}.excalidraw .panelColumn .buttonList .ToolIcon:disabled{cursor:not-allowed}.excalidraw .panelColumn .buttonList .ToolIcon__icon{width:28px;height:28px}.excalidraw .panelColumn fieldset{margin:0;margin-top:.333rem;padding:0;border:none}.excalidraw .divider{width:1px;background-color:#e9ecef;margin:1px}.excalidraw .buttonList label:focus-within,.excalidraw input:focus{outline:transparent;box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw button,.excalidraw .buttonList label{-webkit-user-select:none;user-select:none;background-color:var(--button-gray-1);border:0;border-radius:4px;margin:.125rem 0;padding:.25rem;white-space:nowrap;cursor:pointer}.excalidraw button:focus,.excalidraw .buttonList label:focus{outline:transparent;box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw button:hover,.excalidraw .buttonList label:hover{background-color:var(--button-gray-2)}.excalidraw button:active,.excalidraw .buttonList label:active{background-color:var(--button-gray-3)}.excalidraw button:disabled,.excalidraw .buttonList label:disabled{cursor:not-allowed}.excalidraw .active,.excalidraw .buttonList label.active{background-color:var(--button-gray-2)}.excalidraw .active:hover,.excalidraw .buttonList label.active:hover{background-color:var(--button-gray-2)}.excalidraw .active:active,.excalidraw .buttonList label.active:active{background-color:var(--button-gray-3)}.excalidraw .buttonList.buttonListIcon label{display:inline-flex;justify-content:center;align-items:center}.excalidraw .buttonList.buttonListIcon label svg{width:36px;height:14px;padding:2px;opacity:.6}.excalidraw .buttonList.buttonListIcon label.active svg{opacity:1}.excalidraw .App-top-bar{z-index:var(--zIndex-layerUI);display:flex;flex-direction:column;align-items:center}.excalidraw .App-bottom-bar{position:absolute;top:0;bottom:0;left:0;right:0;--bar-padding: calc(4 * var(--space-factor));padding-top:max(var(--bar-padding), var(--sat,0));padding-right:var(--sar, 0);padding-bottom:var(--sab, 0);padding-left:var(--sal, 0);z-index:4;display:flex;align-items:flex-end;pointer-events:none}.excalidraw .App-bottom-bar>.Island{width:100%;max-width:100%;min-width:100%;box-sizing:border-box;max-height:100%;display:flex;flex-direction:column;pointer-events:initial}.excalidraw .App-bottom-bar>.Island .panelColumn{padding:8px 8px 0 8px}.excalidraw .App-toolbar{width:100%;box-sizing:border-box}.excalidraw .App-toolbar-content{display:flex;align-items:center;justify-content:space-between;padding:8px}.excalidraw .App-mobile-menu{width:100%;overflow-x:visible;overflow-y:auto;box-sizing:border-box;margin-bottom:var(--bar-padding)}.excalidraw .App-menu{display:grid;color:var(--icon-fill-color)}.excalidraw .App-menu_top{grid-template-columns:1fr auto 1fr;grid-gap:4px;align-items:flex-start;cursor:default;pointer-events:none !important}.excalidraw .layer-ui__wrapper:not(.disable-pointerEvents) .App-menu_top>*{pointer-events:all}.excalidraw .App-menu_top>*:first-child{justify-self:flex-start}.excalidraw .App-menu_top>*:last-child{justify-self:flex-end}.excalidraw .App-menu_bottom{position:absolute;bottom:0;grid-template-columns:-webkit-min-content auto -webkit-min-content;grid-template-columns:min-content auto min-content;grid-gap:15px;align-items:flex-start;cursor:default;pointer-events:none !important;z-index:100}:root[dir=ltr] .excalidraw .App-menu_bottom{left:.25rem}:root[dir=rtl] .excalidraw .App-menu_bottom{right:.25rem}.excalidraw .App-menu_bottom--transition-left section{width:185px}.excalidraw .App-menu_bottom section{display:flex}.excalidraw .App-menu_bottom>*:first-child{justify-self:flex-start}.excalidraw .App-menu_bottom>*:last-child{justify-self:flex-end}.excalidraw .App-menu_left{grid-template-rows:1fr auto 1fr;height:100%}.excalidraw .App-menu_right{grid-template-rows:1fr;height:100%}.excalidraw .App-menu__left{overflow-y:auto}.excalidraw .dropdown-select{height:1.5rem;padding:0;-webkit-padding-start:.5rem;padding-inline-start:.5rem;-webkit-padding-end:1.5rem;padding-inline-end:1.5rem;color:var(--icon-fill-color);background-color:var(--button-gray-1);border-radius:var(--space-factor);border:1px solid var(--button-gray-2);font-size:.8rem;outline:none;-webkit-appearance:none;appearance:none;background-image:var(--dropdown-icon);background-repeat:no-repeat;background-position:right .7rem top 50%,0 0;background-size:.65em auto,100%}:root[dir=rtl] .excalidraw .dropdown-select{background-position:left .7rem top 50%,0 0}.excalidraw .dropdown-select:focus{box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .dropdown-select:hover{background-color:var(--button-gray-2)}.excalidraw .dropdown-select:active{background-color:var(--button-gray-2)}.excalidraw .zIndexButton{margin:0;-webkit-margin-end:8px;margin-inline-end:8px;padding:5px;display:inline-flex;align-items:center;justify-content:center}.excalidraw .zIndexButton svg{width:18px;height:18px}.excalidraw .scroll-back-to-content{color:var(--popup-text-color);position:absolute;left:50%;bottom:30px;-webkit-transform:translateX(-50%);transform:translateX(-50%);padding:10px 20px}.excalidraw .help-icon{display:flex;cursor:pointer;fill:#868e96;padding:0;margin:0;background:none;color:var(--icon-fill-color)}.excalidraw .help-icon svg{width:1.5rem;height:1.5rem}.excalidraw .help-icon:hover{background:none}.excalidraw .reset-zoom-button{padding:.2em;background:transparent;color:var(--text-primary-color);font-family:var(--ui-font)}.excalidraw .undo-redo-buttons{display:grid;grid-auto-flow:column;gap:.4em;margin-top:auto;margin-bottom:auto;-webkit-margin-start:.6em;margin-inline-start:.6em}.excalidraw--mobile.excalidraw aside{display:none}.excalidraw--mobile.excalidraw .scroll-back-to-content{bottom:calc(80px + var(--sab, 0));z-index:-1}:root[dir=rtl] .excalidraw .rtl-mirror{-webkit-transform:scaleX(-1);transform:scaleX(-1)}.excalidraw .zen-mode-visibility{visibility:visible;opacity:1;height:auto;width:auto;transition:opacity .5s}.excalidraw .zen-mode-visibility.zen-mode-visibility--hidden{visibility:hidden;opacity:0;height:0;width:0;transition:opacity .5s}.excalidraw .disable-pointerEvents{pointer-events:none !important}.excalidraw.excalidraw--view-mode .App-menu{display:flex;justify-content:space-between}@media print{.excalidraw .App-bottom-bar,.excalidraw .FixedSideContainer,.excalidraw .layer-ui__wrapper{display:none}}.ErrorSplash.excalidraw{min-height:100vh;padding:20px 0;overflow:auto;display:flex;align-items:center;justify-content:center;-webkit-user-select:text;user-select:text}.ErrorSplash.excalidraw .ErrorSplash-messageContainer{display:flex;flex-direction:column;align-items:center;justify-content:center;padding:40px;background-color:#ffe3e3;border:3px solid #c92a2a}.ErrorSplash.excalidraw .ErrorSplash-paragraph{margin:15px 0;max-width:600px}.ErrorSplash.excalidraw .ErrorSplash-paragraph.align-center{text-align:center}.ErrorSplash.excalidraw .bigger,.ErrorSplash.excalidraw .bigger button{font-size:1.1em}.ErrorSplash.excalidraw .smaller,.ErrorSplash.excalidraw .smaller button{font-size:.9em}.ErrorSplash.excalidraw .ErrorSplash-details{display:flex;flex-direction:column;align-items:flex-start}.ErrorSplash.excalidraw .ErrorSplash-details textarea{width:100%;margin:10px 0;font-family:\"Cascadia\";font-size:.8em}',\"\"]),t.default=o},6464:function(e,t,n){\"use strict\";n.r(t);var r=n(3645),o=n.n(r)()((function(e){return e[1]}));o.push([e.id,\"\",\"\"]),o.locals={themeFilter:\"invert(93%) hue-rotate(180deg)\"},t.default=o},3645:function(e){\"use strict\";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?\"@media \".concat(t[2],\" {\").concat(n,\"}\"):n})).join(\"\")},t.i=function(e,n,r){\"string\"==typeof e&&(e=[[null,e,\"\"]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var l=0;l<e.length;l++){var s=[].concat(e[l]);r&&o[s[0]]||(n&&(s[2]?s[2]=\"\".concat(n,\" and \").concat(s[2]):s[2]=n),t.push(s))}},t}},1667:function(e){\"use strict\";e.exports=function(e,t){return t||(t={}),\"string\"!=typeof(e=e&&e.__esModule?e.default:e)?e:(\/^['\"].*['\"]$\/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),\/[\"'() \\t\\n]\/.test(e)||t.needQuotes?'\"'.concat(e.replace(\/\"\/g,'\\\\\"').replace(\/\\n\/g,\"\\\\n\"),'\"'):e)}},9638:function(e,t,n){\"use strict\";t.Z=n.p+\"excalidraw-assets\/Cascadia.woff2\"},7464:function(e,t,n){\"use strict\";t.Z=n.p+\"excalidraw-assets\/Virgil.woff2\"},8288:function(e,t,n){\"use strict\";n.d(t,{iC:function(){return i},f:function(){return l},qx:function(){return s},Iw:function(){return c},$e:function(){return u},wZ:function(){return d},ay:function(){return p},oc:function(){return f},Oh:function(){return h},Ks:function(){return r},Vi:function(){return m},$C:function(){return g},ut:function(){return v},_D:function(){return b},n5:function(){return y},rk:function(){return x},Hg:function(){return w},hs:function(){return k},k:function(){return S},LO:function(){return E},r8:function(){return j},pb:function(){return C},Gj:function(){return O},nM:function(){return M},Lg:function(){return I},HM:function(){return P},V4:function(){return T},EH:function(){return A},ZF:function(){return L},UO:function(){return _},ah:function(){return D},cW:function(){return z},kV:function(){return B},sS:function(){return H},Yx:function(){return N},zK:function(){return R},ZB:function(){return F},qy:function(){return V}});var r,o=n(8635),a=n.n(o),i=\"Excalidraw\",l=10,s=8,c=5,u=1,d=30,p=Math.PI\/12,f={TEXT:\"text\",CROSSHAIR:\"crosshair\",GRABBING:\"grabbing\",GRAB:\"grab\",POINTER:\"pointer\",MOVE:\"move\",AUTO:\"\"},h={MAIN:0,WHEEL:1,SECONDARY:2,TOUCH:-1};!function(e){e.COPY=\"copy\",e.PASTE=\"paste\",e.CUT=\"cut\",e.KEYDOWN=\"keydown\",e.KEYUP=\"keyup\",e.MOUSE_MOVE=\"mousemove\",e.RESIZE=\"resize\",e.UNLOAD=\"unload\",e.FOCUS=\"focus\",e.BLUR=\"blur\",e.DRAG_OVER=\"dragover\",e.DROP=\"drop\",e.GESTURE_END=\"gestureend\",e.BEFORE_UNLOAD=\"beforeunload\",e.GESTURE_START=\"gesturestart\",e.GESTURE_CHANGE=\"gesturechange\",e.POINTER_MOVE=\"pointermove\",e.POINTER_UP=\"pointerup\",e.STATE_CHANGE=\"statechange\",e.WHEEL=\"wheel\",e.TOUCH_START=\"touchstart\",e.TOUCH_END=\"touchend\",e.HASHCHANGE=\"hashchange\",e.VISIBILITY_CHANGE=\"visibilitychange\",e.SCROLL=\"scroll\"}(r||(r={}));var m={TEST:\"test\",DEVELOPMENT:\"development\"},g={SHAPE_ACTIONS_MENU:\"App-menu__left\"},v={Virgil:1,Helvetica:2,Cascadia:3},b=\"Segoe UI Emoji\",y=20,x=v.Virgil,w=\"left\",k=\"top\",S=20,E={excalidraw:\"application\/vnd.excalidraw+json\",excalidrawlib:\"application\/vnd.excalidrawlib+json\"},j={excalidraw:\"excalidraw\",excalidrawClipboard:\"excalidraw\/clipboard\",excalidrawLibrary:\"excalidrawlib\"},C=window.location.origin,O=300,M=500,I=5e3,P=100,T=.1,A={VIEW:\"viewMode\",ZEN:\"zenMode\",GRID:\"gridMode\"},L=a().themeFilter,_={addLibrary:\"addLibrary\"},D={addLibrary:\"addLibrary\"},z={canvasActions:{changeViewBackgroundColor:!0,clearCanvas:!0,export:{saveFileToDisk:!0},loadScene:!0,saveToActiveFile:!0,theme:!0,saveAsImage:!0}},B=730,H=1e3,N=500,R=2,F=[1,2,3],V=10},21:function(e,t,n){\"use strict\";n.r(t),n.d(t,{FONT_FAMILY:function(){return c.ut},default:function(){return zh},defaultLang:function(){return j},exportToBlob:function(){return Ch},exportToCanvas:function(){return jh},exportToSvg:function(){return Oh},getElementMap:function(){return Yi},getFreeDrawSvgPath:function(){return Yr},getSceneVersion:function(){return Xi},isInvisiblySmallElement:function(){return so},languages:function(){return C},loadFromBlob:function(){return Su},loadLibraryFromBlob:function(){return Eu},restore:function(){return vu},restoreAppState:function(){return gu},restoreElements:function(){return mu},serializeAsJSON:function(){return Cu}});var r=n(6479),o=n.n(r),a=n(9713),i=n.n(a),l=n(4698),s=n.n(l),c=n(8288),u=JSON.parse('{\"u2\":\"@excalidraw\/excalidraw\",\"i8\":\"0.10.0\"}');\"production\"!==c.Vi.TEST&&(n.p=window.EXCALIDRAW_ASSET_PATH||\"https:\/\/unpkg.com\/\".concat(u.u2,\"@\").concat(u.i8,\"\/dist\/\"));var d=n(8950);function p(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function h(e,t,n){return t&&f(e.prototype,t),n&&f(e,n),e}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function\");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}function v(e){return(v=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e})(e)}function b(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}function y(e,t){return!t||\"object\"!==v(t)&&\"function\"!=typeof t?b(e):t}function x(e){return(x=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var w=n(7945),k=n.n(w),S=n(1463),E=n(4451),j={code:\"en\",label:\"English\"},C=[{code:\"ar-SA\",label:\"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\",rtl:!0},{code:\"bg-BG\",label:\"\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\"},{code:\"ca-ES\",label:\"Catal\u00e0\"},{code:\"de-DE\",label:\"Deutsch\"},{code:\"el-GR\",label:\"\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\"},{code:\"es-ES\",label:\"Espa\u00f1ol\"},{code:\"fa-IR\",label:\"\u0641\u0627\u0631\u0633\u06cc\",rtl:!0},{code:\"fi-FI\",label:\"Suomi\"},{code:\"fr-FR\",label:\"Fran\u00e7ais\"},{code:\"he-IL\",label:\"\u05e2\u05d1\u05e8\u05d9\u05ea\",rtl:!0},{code:\"hi-IN\",label:\"\u0939\u093f\u0928\u094d\u0926\u0940\"},{code:\"hu-HU\",label:\"Magyar\"},{code:\"id-ID\",label:\"Bahasa Indonesia\"},{code:\"it-IT\",label:\"Italiano\"},{code:\"ja-JP\",label:\"\u65e5\u672c\u8a9e\"},{code:\"kab-KAB\",label:\"Taqbaylit\"},{code:\"ko-KR\",label:\"\ud55c\uad6d\uc5b4\"},{code:\"my-MM\",label:\"Burmese\"},{code:\"nb-NO\",label:\"Norsk bokm\u00e5l\"},{code:\"nl-NL\",label:\"Nederlands\"},{code:\"nn-NO\",label:\"Norsk nynorsk\"},{code:\"oc-FR\",label:\"Occitan\"},{code:\"pa-IN\",label:\"\u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40\"},{code:\"pl-PL\",label:\"Polski\"},{code:\"pt-BR\",label:\"Portugu\u00eas Brasileiro\"},{code:\"pt-PT\",label:\"Portugu\u00eas\"},{code:\"ro-RO\",label:\"Rom\u00e2n\u0103\"},{code:\"ru-RU\",label:\"\u0420\u0443\u0441\u0441\u043a\u0438\u0439\"},{code:\"sk-SK\",label:\"Sloven\u010dina\"},{code:\"sv-SE\",label:\"Svenska\"},{code:\"tr-TR\",label:\"T\u00fcrk\u00e7e\"},{code:\"uk-UA\",label:\"\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\"},{code:\"zh-CN\",label:\"\u7b80\u4f53\u4e2d\u6587\"},{code:\"zh-TW\",label:\"\u7e41\u9ad4\u4e2d\u6587\"},{code:\"lv-LV\",label:\"Latvie\u0161u\"},{code:\"cs-CZ\",label:\"\u010cesky\"},{code:\"kk-KZ\",label:\"\u049a\u0430\u0437\u0430\u049b \u0442\u0456\u043b\u0456\"}].concat([j]).sort((function(e,t){return e.label>t.label?1:-1})).filter((function(e){return E[e.code]>=85})),O=\"__test__\";\"production\"===c.Vi.DEVELOPMENT&&C.unshift({code:O,label:\"test language\"},{code:\"\".concat(O,\".rtl\"),label:\"\u202atest language (rtl)\u202c\",rtl:!0});var M=j,I={},P=function(){var e=(0,d.Z)(k().mark((function e(t){return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(M=t,document.documentElement.dir=M.rtl?\"rtl\":\"ltr\",document.documentElement.lang=M.code,!t.code.startsWith(O)){e.next=7;break}I={},e.next=10;break;case 7:return e.next=9,n(788)(\".\/\".concat(M.code,\".json\"));case 9:I=e.sent;case 10:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),T=function(){return M},A=function(e,t){for(var n=0;n<t.length;++n){var r=t[n];if(void 0===e[r])return;e=e[r]}if(\"string\"==typeof e)return e},L=function(e,t){if(M.code.startsWith(O)){var n=t?\"\".concat(e,\"(\").concat(JSON.stringify(t).slice(1,-1),\")\"):e;return\"\u202a[[\".concat(n,\"]]\u202c\")}var r=e.split(\".\"),o=A(I,r)||A(S,r);if(void 0===o)throw new Error(\"Can't find translation for \".concat(e));if(t)for(var a in t)o=o.replace(\"{{\".concat(a,\"}}\"),t[a]);return o},_=n(4512),D=function(){return(0,_.jsx)(\"div\",{className:\"LoadingMessage\",children:(0,_.jsx)(\"span\",{children:L(\"labels.loadingScene\")})})};function z(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=x(e);if(t){var o=x(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return y(this,n)}}var B=function(e){g(r,e);var t,n=z(r);function r(){var e,t;p(this,r);for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];return y(t,(e=t=n.call.apply(n,[this].concat(a)),t.state={isLoading:!0},e))}return h(r,[{key:\"componentDidMount\",value:(t=(0,d.Z)(k().mark((function e(){var t,n=this;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=C.find((function(e){return e.code===n.props.langCode}))||j,e.next=3,P(t);case 3:this.setState({isLoading:!1});case 4:case\"end\":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:\"render\",value:function(){return this.state.isLoading?(0,_.jsx)(D,{}):this.props.children}}]),r}(s().Component);function H(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function N(e,t){if(e){if(\"string\"==typeof e)return H(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return\"Object\"===n&&e.constructor&&(n=e.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(e):\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n)?H(e,t):void 0}}function R(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(\"undefined\"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}}(e,t)||N(e,t)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function F(e){return function(e){if(Array.isArray(e))return H(e)}(e)||function(e){if(\"undefined\"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||N(e)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function V(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function G(e,t,n){if(e&&e.length){const[r,o]=t,a=Math.PI\/180*n,i=Math.cos(a),l=Math.sin(a);e.forEach((e=>{const[t,n]=e;e[0]=(t-r)*i-(n-o)*l+r,e[1]=(t-r)*l+(n-o)*i+o}))}}function U(e){const t=e[0],n=e[1];return Math.sqrt(Math.pow(t[0]-n[0],2)+Math.pow(t[1]-n[1],2))}function K(e,t,n,r){const o=t[1]-e[1],a=e[0]-t[0],i=o*e[0]+a*e[1],l=r[1]-n[1],s=n[0]-r[0],c=l*n[0]+s*n[1],u=o*s-l*a;return u?[(s*i-a*c)\/u,(o*c-l*i)\/u]:null}function W(e,t,n){const r=e.length;if(r<3)return!1;const o=[Number.MAX_SAFE_INTEGER,n],a=[t,n];let i=0;for(let t=0;t<r;t++){const n=e[t],l=e[(t+1)%r];if(X(n,l,a,o)){if(0===Y(n,a,l))return Z(n,a,l);i++}}return i%2==1}function Z(e,t,n){return t[0]<=Math.max(e[0],n[0])&&t[0]>=Math.min(e[0],n[0])&&t[1]<=Math.max(e[1],n[1])&&t[1]>=Math.min(e[1],n[1])}function Y(e,t,n){const r=(t[1]-e[1])*(n[0]-t[0])-(t[0]-e[0])*(n[1]-t[1]);return 0===r?0:r>0?1:2}function X(e,t,n,r){const o=Y(e,t,n),a=Y(e,t,r),i=Y(n,r,e),l=Y(n,r,t);return o!==a&&i!==l||(!(0!==o||!Z(e,n,t))||(!(0!==a||!Z(e,r,t))||(!(0!==i||!Z(n,e,r))||!(0!==l||!Z(n,t,r)))))}function q(e,t){const n=[0,0],r=Math.round(t.hachureAngle+90);r&&G(e,n,r);const o=function(e,t){const n=[...e];n[0].join(\",\")!==n[n.length-1].join(\",\")&&n.push([n[0][0],n[0][1]]);const r=[];if(n&&n.length>2){let e=t.hachureGap;e<0&&(e=4*t.strokeWidth),e=Math.max(e,.1);const o=[];for(let e=0;e<n.length-1;e++){const t=n[e],r=n[e+1];if(t[1]!==r[1]){const e=Math.min(t[1],r[1]);o.push({ymin:e,ymax:Math.max(t[1],r[1]),x:e===t[1]?t[0]:r[0],islope:(r[0]-t[0])\/(r[1]-t[1])})}}if(o.sort(((e,t)=>e.ymin<t.ymin?-1:e.ymin>t.ymin?1:e.x<t.x?-1:e.x>t.x?1:e.ymax===t.ymax?0:(e.ymax-t.ymax)\/Math.abs(e.ymax-t.ymax))),!o.length)return r;let a=[],i=o[0].ymin;for(;a.length||o.length;){if(o.length){let e=-1;for(let t=0;t<o.length&&!(o[t].ymin>i);t++)e=t;o.splice(0,e+1).forEach((e=>{a.push({s:i,edge:e})}))}if(a=a.filter((e=>!(e.edge.ymax<=i))),a.sort(((e,t)=>e.edge.x===t.edge.x?0:(e.edge.x-t.edge.x)\/Math.abs(e.edge.x-t.edge.x))),a.length>1)for(let e=0;e<a.length;e+=2){const t=e+1;if(t>=a.length)break;const n=a[e].edge,o=a[t].edge;r.push([[Math.round(n.x),i],[Math.round(o.x),i]])}i+=e,a.forEach((t=>{t.edge.x=t.edge.x+e*t.edge.islope}))}}return r}(e,t);return r&&(G(e,n,-r),function(e,t,n){const r=[];e.forEach((e=>r.push(...e))),G(r,t,n)}(o,n,-r)),o}class ${constructor(e){this.helper=e}fillPolygon(e,t){return this._fillPolygon(e,t)}_fillPolygon(e,t,n=!1){let r=q(e,t);if(n){const t=this.connectingLines(e,r);r=r.concat(t)}return{type:\"fillSketch\",ops:this.renderLines(r,t)}}renderLines(e,t){const n=[];for(const r of e)n.push(...this.helper.doubleLineOps(r[0][0],r[0][1],r[1][0],r[1][1],t));return n}connectingLines(e,t){const n=[];if(t.length>1)for(let r=1;r<t.length;r++){const o=t[r-1];if(U(o)<3)continue;const a=[t[r][0],o[1]];if(U(a)>3){const t=this.splitOnIntersections(e,a);n.push(...t)}}return n}midPointInPolygon(e,t){return W(e,(t[0][0]+t[1][0])\/2,(t[0][1]+t[1][1])\/2)}splitOnIntersections(e,t){const n=Math.max(5,.1*U(t)),r=[];for(let o=0;o<e.length;o++){const a=e[o],i=e[(o+1)%e.length];if(X(a,i,...t)){const e=K(a,i,t[0],t[1]);if(e){const o=U([e,t[0]]),a=U([e,t[1]]);o>n&&a>n&&r.push({point:e,distance:o})}}}if(r.length>1){const n=r.sort(((e,t)=>e.distance-t.distance)).map((e=>e.point));if(W(e,...t[0])||n.shift(),W(e,...t[1])||n.pop(),n.length<=1)return this.midPointInPolygon(e,t)?[t]:[];const o=[t[0],...n,t[1]],a=[];for(let t=0;t<o.length-1;t+=2){const n=[o[t],o[t+1]];this.midPointInPolygon(e,n)&&a.push(n)}return a}return this.midPointInPolygon(e,t)?[t]:[]}}class Q extends ${fillPolygon(e,t){return this._fillPolygon(e,t,!0)}}class J extends ${fillPolygon(e,t){const n=this._fillPolygon(e,t),r=Object.assign({},t,{hachureAngle:t.hachureAngle+90}),o=this._fillPolygon(e,r);return n.ops=n.ops.concat(o.ops),n}}class ee{constructor(e){this.helper=e}fillPolygon(e,t){const n=q(e,t=Object.assign({},t,{curveStepCount:4,hachureAngle:0,roughness:1}));return this.dotsOnLines(n,t)}dotsOnLines(e,t){const n=[];let r=t.hachureGap;r<0&&(r=4*t.strokeWidth),r=Math.max(r,.1);let o=t.fillWeight;o<0&&(o=t.strokeWidth\/2);const a=r\/4;for(const i of e){const e=U(i),l=e\/r,s=Math.ceil(l)-1,c=e-s*r,u=(i[0][0]+i[1][0])\/2-r\/4,d=Math.min(i[0][1],i[1][1]);for(let e=0;e<s;e++){const i=d+c+e*r,l=this.helper.randOffsetWithRange(u-a,u+a,t),s=this.helper.randOffsetWithRange(i-a,i+a,t),p=this.helper.ellipse(l,s,o,o,t);n.push(...p.ops)}}return{type:\"fillSketch\",ops:n}}}class te{constructor(e){this.helper=e}fillPolygon(e,t){const n=q(e,t);return{type:\"fillSketch\",ops:this.dashedLine(n,t)}}dashedLine(e,t){const n=t.dashOffset<0?t.hachureGap<0?4*t.strokeWidth:t.hachureGap:t.dashOffset,r=t.dashGap<0?t.hachureGap<0?4*t.strokeWidth:t.hachureGap:t.dashGap,o=[];return e.forEach((e=>{const a=U(e),i=Math.floor(a\/(n+r)),l=(a+r-i*(n+r))\/2;let s=e[0],c=e[1];s[0]>c[0]&&(s=e[1],c=e[0]);const u=Math.atan((c[1]-s[1])\/(c[0]-s[0]));for(let e=0;e<i;e++){const a=e*(n+r),i=a+n,c=[s[0]+a*Math.cos(u)+l*Math.cos(u),s[1]+a*Math.sin(u)+l*Math.sin(u)],d=[s[0]+i*Math.cos(u)+l*Math.cos(u),s[1]+i*Math.sin(u)+l*Math.sin(u)];o.push(...this.helper.doubleLineOps(c[0],c[1],d[0],d[1],t))}})),o}}class ne{constructor(e){this.helper=e}fillPolygon(e,t){const n=t.hachureGap<0?4*t.strokeWidth:t.hachureGap,r=t.zigzagOffset<0?n:t.zigzagOffset,o=q(e,t=Object.assign({},t,{hachureGap:n+r}));return{type:\"fillSketch\",ops:this.zigzagLines(o,r,t)}}zigzagLines(e,t,n){const r=[];return e.forEach((e=>{const o=U(e),a=Math.round(o\/(2*t));let i=e[0],l=e[1];i[0]>l[0]&&(i=e[1],l=e[0]);const s=Math.atan((l[1]-i[1])\/(l[0]-i[0]));for(let e=0;e<a;e++){const o=2*e*t,a=2*(e+1)*t,l=Math.sqrt(2*Math.pow(t,2)),c=[i[0]+o*Math.cos(s),i[1]+o*Math.sin(s)],u=[i[0]+a*Math.cos(s),i[1]+a*Math.sin(s)],d=[c[0]+l*Math.cos(s+Math.PI\/4),c[1]+l*Math.sin(s+Math.PI\/4)];r.push(...this.helper.doubleLineOps(c[0],c[1],d[0],d[1],n),...this.helper.doubleLineOps(d[0],d[1],u[0],u[1],n))}})),r}}const re={};class oe{constructor(e){this.seed=e}next(){return this.seed?(2**31-1&(this.seed=Math.imul(48271,this.seed)))\/2**31:Math.random()}}const ae={A:7,a:7,C:6,c:6,H:1,h:1,L:2,l:2,M:2,m:2,Q:4,q:4,S:4,s:4,T:2,t:2,V:1,v:1,Z:0,z:0};function ie(e,t){return e.type===t}function le(e){const t=[],n=function(e){const t=new Array;for(;\"\"!==e;)if(e.match(\/^([ \\t\\r\\n,]+)\/))e=e.substr(RegExp.$1.length);else if(e.match(\/^([aAcChHlLmMqQsStTvVzZ])\/))t[t.length]={type:0,text:RegExp.$1},e=e.substr(RegExp.$1.length);else{if(!e.match(\/^(([-+]?[0-9]+(\\.[0-9]*)?|[-+]?\\.[0-9]+)([eE][-+]?[0-9]+)?)\/))return[];t[t.length]={type:1,text:`${parseFloat(RegExp.$1)}`},e=e.substr(RegExp.$1.length)}return t[t.length]={type:2,text:\"\"},t}(e);let r=\"BOD\",o=0,a=n[o];for(;!ie(a,2);){let i=0;const l=[];if(\"BOD\"===r){if(\"M\"!==a.text&&\"m\"!==a.text)return le(\"M0,0\"+e);o++,i=ae[a.text],r=a.text}else ie(a,1)?i=ae[r]:(o++,i=ae[a.text],r=a.text);if(!(o+i<n.length))throw new Error(\"Path data ended short\");for(let e=o;e<o+i;e++){const t=n[e];if(!ie(t,1))throw new Error(\"Param not a number: \"+r+\",\"+t.text);l[l.length]=+t.text}if(\"number\"!=typeof ae[r])throw new Error(\"Bad segment: \"+r);{const e={key:r,data:l};t.push(e),o+=i,a=n[o],\"M\"===r&&(r=\"L\"),\"m\"===r&&(r=\"l\")}}return t}function se(e){let t=0,n=0,r=0,o=0;const a=[];for(const{key:i,data:l}of e)switch(i){case\"M\":a.push({key:\"M\",data:[...l]}),[t,n]=l,[r,o]=l;break;case\"m\":t+=l[0],n+=l[1],a.push({key:\"M\",data:[t,n]}),r=t,o=n;break;case\"L\":a.push({key:\"L\",data:[...l]}),[t,n]=l;break;case\"l\":t+=l[0],n+=l[1],a.push({key:\"L\",data:[t,n]});break;case\"C\":a.push({key:\"C\",data:[...l]}),t=l[4],n=l[5];break;case\"c\":{const e=l.map(((e,r)=>r%2?e+n:e+t));a.push({key:\"C\",data:e}),t=e[4],n=e[5];break}case\"Q\":a.push({key:\"Q\",data:[...l]}),t=l[2],n=l[3];break;case\"q\":{const e=l.map(((e,r)=>r%2?e+n:e+t));a.push({key:\"Q\",data:e}),t=e[2],n=e[3];break}case\"A\":a.push({key:\"A\",data:[...l]}),t=l[5],n=l[6];break;case\"a\":t+=l[5],n+=l[6],a.push({key:\"A\",data:[l[0],l[1],l[2],l[3],l[4],t,n]});break;case\"H\":a.push({key:\"H\",data:[...l]}),t=l[0];break;case\"h\":t+=l[0],a.push({key:\"H\",data:[t]});break;case\"V\":a.push({key:\"V\",data:[...l]}),n=l[0];break;case\"v\":n+=l[0],a.push({key:\"V\",data:[n]});break;case\"S\":a.push({key:\"S\",data:[...l]}),t=l[2],n=l[3];break;case\"s\":{const e=l.map(((e,r)=>r%2?e+n:e+t));a.push({key:\"S\",data:e}),t=e[2],n=e[3];break}case\"T\":a.push({key:\"T\",data:[...l]}),t=l[0],n=l[1];break;case\"t\":t+=l[0],n+=l[1],a.push({key:\"T\",data:[t,n]});break;case\"Z\":case\"z\":a.push({key:\"Z\",data:[]}),t=r,n=o}return a}function ce(e){const t=[];let n=\"\",r=0,o=0,a=0,i=0,l=0,s=0;for(const{key:c,data:u}of e){switch(c){case\"M\":t.push({key:\"M\",data:[...u]}),[r,o]=u,[a,i]=u;break;case\"C\":t.push({key:\"C\",data:[...u]}),r=u[4],o=u[5],l=u[2],s=u[3];break;case\"L\":t.push({key:\"L\",data:[...u]}),[r,o]=u;break;case\"H\":r=u[0],t.push({key:\"L\",data:[r,o]});break;case\"V\":o=u[0],t.push({key:\"L\",data:[r,o]});break;case\"S\":{let e=0,a=0;\"C\"===n||\"S\"===n?(e=r+(r-l),a=o+(o-s)):(e=r,a=o),t.push({key:\"C\",data:[e,a,...u]}),l=u[0],s=u[1],r=u[2],o=u[3];break}case\"T\":{const[e,a]=u;let i=0,c=0;\"Q\"===n||\"T\"===n?(i=r+(r-l),c=o+(o-s)):(i=r,c=o);const d=r+2*(i-r)\/3,p=o+2*(c-o)\/3,f=e+2*(i-e)\/3,h=a+2*(c-a)\/3;t.push({key:\"C\",data:[d,p,f,h,e,a]}),l=i,s=c,r=e,o=a;break}case\"Q\":{const[e,n,a,i]=u,c=r+2*(e-r)\/3,d=o+2*(n-o)\/3,p=a+2*(e-a)\/3,f=i+2*(n-i)\/3;t.push({key:\"C\",data:[c,d,p,f,a,i]}),l=e,s=n,r=a,o=i;break}case\"A\":{const e=Math.abs(u[0]),n=Math.abs(u[1]),a=u[2],i=u[3],l=u[4],s=u[5],c=u[6];if(0===e||0===n)t.push({key:\"C\",data:[r,o,s,c,s,c]}),r=s,o=c;else if(r!==s||o!==c){de(r,o,s,c,e,n,a,i,l).forEach((function(e){t.push({key:\"C\",data:e})})),r=s,o=c}break}case\"Z\":t.push({key:\"Z\",data:[]}),r=a,o=i}n=c}return t}function ue(e,t,n){return[e*Math.cos(n)-t*Math.sin(n),e*Math.sin(n)+t*Math.cos(n)]}function de(e,t,n,r,o,a,i,l,s,c){const u=(d=i,Math.PI*d\/180);var d;let p=[],f=0,h=0,m=0,g=0;if(c)[f,h,m,g]=c;else{[e,t]=ue(e,t,-u),[n,r]=ue(n,r,-u);const i=(e-n)\/2,c=(t-r)\/2;let d=i*i\/(o*o)+c*c\/(a*a);d>1&&(d=Math.sqrt(d),o*=d,a*=d);const p=o*o,v=a*a,b=p*v-p*c*c-v*i*i,y=p*c*c+v*i*i,x=(l===s?-1:1)*Math.sqrt(Math.abs(b\/y));m=x*o*c\/a+(e+n)\/2,g=x*-a*i\/o+(t+r)\/2,f=Math.asin(parseFloat(((t-g)\/a).toFixed(9))),h=Math.asin(parseFloat(((r-g)\/a).toFixed(9))),e<m&&(f=Math.PI-f),n<m&&(h=Math.PI-h),f<0&&(f=2*Math.PI+f),h<0&&(h=2*Math.PI+h),s&&f>h&&(f-=2*Math.PI),!s&&h>f&&(h-=2*Math.PI)}let v=h-f;if(Math.abs(v)>120*Math.PI\/180){const e=h,t=n,l=r;h=s&&h>f?f+120*Math.PI\/180*1:f+120*Math.PI\/180*-1,p=de(n=m+o*Math.cos(h),r=g+a*Math.sin(h),t,l,o,a,i,0,s,[h,e,m,g])}v=h-f;const b=Math.cos(f),y=Math.sin(f),x=Math.cos(h),w=Math.sin(h),k=Math.tan(v\/4),S=4\/3*o*k,E=4\/3*a*k,j=[e,t],C=[e+S*y,t-E*b],O=[n+S*w,r-E*x],M=[n,r];if(C[0]=2*j[0]-C[0],C[1]=2*j[1]-C[1],c)return[C,O,M].concat(p);{p=[C,O,M].concat(p);const e=[];for(let t=0;t<p.length;t+=3){const n=ue(p[t][0],p[t][1],u),r=ue(p[t+1][0],p[t+1][1],u),o=ue(p[t+2][0],p[t+2][1],u);e.push([n[0],n[1],r[0],r[1],o[0],o[1]])}return e}}const pe={randOffset:function(e,t){return Ee(e,t)},randOffsetWithRange:function(e,t,n){return Se(e,t,n)},ellipse:function(e,t,n,r,o){const a=ve(n,r,o);return be(e,t,o,a).opset},doubleLineOps:function(e,t,n,r,o){return je(e,t,n,r,o,!0)}};function fe(e,t,n,r,o){return{type:\"path\",ops:je(e,t,n,r,o)}}function he(e,t,n){const r=(e||[]).length;if(r>2){const o=[];for(let t=0;t<r-1;t++)o.push(...je(e[t][0],e[t][1],e[t+1][0],e[t+1][1],n));return t&&o.push(...je(e[r-1][0],e[r-1][1],e[0][0],e[0][1],n)),{type:\"path\",ops:o}}return 2===r?fe(e[0][0],e[0][1],e[1][0],e[1][1],n):{type:\"path\",ops:[]}}function me(e,t,n,r,o){return function(e,t){return he(e,!0,t)}([[e,t],[e+n,t],[e+n,t+r],[e,t+r]],o)}function ge(e,t){let n=Oe(e,1*(1+.2*t.roughness),t);if(!t.disableMultiStroke){const r=Oe(e,1.5*(1+.22*t.roughness),function(e){const t=Object.assign({},e);t.randomizer=void 0,e.seed&&(t.seed=e.seed+1);return t}(t));n=n.concat(r)}return{type:\"path\",ops:n}}function ve(e,t,n){const r=Math.sqrt(2*Math.PI*Math.sqrt((Math.pow(e\/2,2)+Math.pow(t\/2,2))\/2)),o=Math.max(n.curveStepCount,n.curveStepCount\/Math.sqrt(200)*r),a=2*Math.PI\/o;let i=Math.abs(e\/2),l=Math.abs(t\/2);const s=1-n.curveFitting;return i+=Ee(i*s,n),l+=Ee(l*s,n),{increment:a,rx:i,ry:l}}function be(e,t,n,r){const[o,a]=Ie(r.increment,e,t,r.rx,r.ry,1,r.increment*Se(.1,Se(.4,1,n),n),n);let i=Me(o,null,n);if(!n.disableMultiStroke){const[o]=Ie(r.increment,e,t,r.rx,r.ry,1.5,0,n),a=Me(o,null,n);i=i.concat(a)}return{estimatedPoints:a,opset:{type:\"path\",ops:i}}}function ye(e,t,n,r,o,a,i,l,s){const c=e,u=t;let d=Math.abs(n\/2),p=Math.abs(r\/2);d+=Ee(.01*d,s),p+=Ee(.01*p,s);let f=o,h=a;for(;f<0;)f+=2*Math.PI,h+=2*Math.PI;h-f>2*Math.PI&&(f=0,h=2*Math.PI);const m=2*Math.PI\/s.curveStepCount,g=Math.min(m\/2,(h-f)\/2),v=Pe(g,c,u,d,p,f,h,1,s);if(!s.disableMultiStroke){const e=Pe(g,c,u,d,p,f,h,1.5,s);v.push(...e)}return i&&(l?v.push(...je(c,u,c+d*Math.cos(f),u+p*Math.sin(f),s),...je(c,u,c+d*Math.cos(h),u+p*Math.sin(h),s)):v.push({op:\"lineTo\",data:[c,u]},{op:\"lineTo\",data:[c+d*Math.cos(f),u+p*Math.sin(f)]})),{type:\"path\",ops:v}}function xe(e,t){const n=[];if(e.length){const r=t.maxRandomnessOffset||0,o=e.length;if(o>2){n.push({op:\"move\",data:[e[0][0]+Ee(r,t),e[0][1]+Ee(r,t)]});for(let a=1;a<o;a++)n.push({op:\"lineTo\",data:[e[a][0]+Ee(r,t),e[a][1]+Ee(r,t)]})}}return{type:\"fillPath\",ops:n}}function we(e,t){return function(e,t){let n=e.fillStyle||\"hachure\";if(!re[n])switch(n){case\"zigzag\":re[n]||(re[n]=new Q(t));break;case\"cross-hatch\":re[n]||(re[n]=new J(t));break;case\"dots\":re[n]||(re[n]=new ee(t));break;case\"dashed\":re[n]||(re[n]=new te(t));break;case\"zigzag-line\":re[n]||(re[n]=new ne(t));break;case\"hachure\":default:n=\"hachure\",re[n]||(re[n]=new $(t))}return re[n]}(t,pe).fillPolygon(e,t)}function ke(e){return e.randomizer||(e.randomizer=new oe(e.seed||0)),e.randomizer.next()}function Se(e,t,n,r=1){return n.roughness*r*(ke(n)*(t-e)+e)}function Ee(e,t,n=1){return Se(-e,e,t,n)}function je(e,t,n,r,o,a=!1){const i=a?o.disableMultiStrokeFill:o.disableMultiStroke,l=Ce(e,t,n,r,o,!0,!1);if(i)return l;const s=Ce(e,t,n,r,o,!0,!0);return l.concat(s)}function Ce(e,t,n,r,o,a,i){const l=Math.pow(e-n,2)+Math.pow(t-r,2),s=Math.sqrt(l);let c=1;c=s<200?1:s>500?.4:-.0016668*s+1.233334;let u=o.maxRandomnessOffset||0;u*u*100>l&&(u=s\/10);const d=u\/2,p=.2+.2*ke(o);let f=o.bowing*o.maxRandomnessOffset*(r-t)\/200,h=o.bowing*o.maxRandomnessOffset*(e-n)\/200;f=Ee(f,o,c),h=Ee(h,o,c);const m=[],g=()=>Ee(d,o,c),v=()=>Ee(u,o,c),b=o.preserveVertices;return a&&(i?m.push({op:\"move\",data:[e+(b?0:g()),t+(b?0:g())]}):m.push({op:\"move\",data:[e+(b?0:Ee(u,o,c)),t+(b?0:Ee(u,o,c))]})),i?m.push({op:\"bcurveTo\",data:[f+e+(n-e)*p+g(),h+t+(r-t)*p+g(),f+e+2*(n-e)*p+g(),h+t+2*(r-t)*p+g(),n+(b?0:g()),r+(b?0:g())]}):m.push({op:\"bcurveTo\",data:[f+e+(n-e)*p+v(),h+t+(r-t)*p+v(),f+e+2*(n-e)*p+v(),h+t+2*(r-t)*p+v(),n+(b?0:v()),r+(b?0:v())]}),m}function Oe(e,t,n){const r=[];r.push([e[0][0]+Ee(t,n),e[0][1]+Ee(t,n)]),r.push([e[0][0]+Ee(t,n),e[0][1]+Ee(t,n)]);for(let o=1;o<e.length;o++)r.push([e[o][0]+Ee(t,n),e[o][1]+Ee(t,n)]),o===e.length-1&&r.push([e[o][0]+Ee(t,n),e[o][1]+Ee(t,n)]);return Me(r,null,n)}function Me(e,t,n){const r=e.length,o=[];if(r>3){const a=[],i=1-n.curveTightness;o.push({op:\"move\",data:[e[1][0],e[1][1]]});for(let t=1;t+2<r;t++){const n=e[t];a[0]=[n[0],n[1]],a[1]=[n[0]+(i*e[t+1][0]-i*e[t-1][0])\/6,n[1]+(i*e[t+1][1]-i*e[t-1][1])\/6],a[2]=[e[t+1][0]+(i*e[t][0]-i*e[t+2][0])\/6,e[t+1][1]+(i*e[t][1]-i*e[t+2][1])\/6],a[3]=[e[t+1][0],e[t+1][1]],o.push({op:\"bcurveTo\",data:[a[1][0],a[1][1],a[2][0],a[2][1],a[3][0],a[3][1]]})}if(t&&2===t.length){const e=n.maxRandomnessOffset;o.push({op:\"lineTo\",data:[t[0]+Ee(e,n),t[1]+Ee(e,n)]})}}else 3===r?(o.push({op:\"move\",data:[e[1][0],e[1][1]]}),o.push({op:\"bcurveTo\",data:[e[1][0],e[1][1],e[2][0],e[2][1],e[2][0],e[2][1]]})):2===r&&o.push(...je(e[0][0],e[0][1],e[1][0],e[1][1],n));return o}function Ie(e,t,n,r,o,a,i,l){const s=[],c=[],u=Ee(.5,l)-Math.PI\/2;c.push([Ee(a,l)+t+.9*r*Math.cos(u-e),Ee(a,l)+n+.9*o*Math.sin(u-e)]);for(let i=u;i<2*Math.PI+u-.01;i+=e){const e=[Ee(a,l)+t+r*Math.cos(i),Ee(a,l)+n+o*Math.sin(i)];s.push(e),c.push(e)}return c.push([Ee(a,l)+t+r*Math.cos(u+2*Math.PI+.5*i),Ee(a,l)+n+o*Math.sin(u+2*Math.PI+.5*i)]),c.push([Ee(a,l)+t+.98*r*Math.cos(u+i),Ee(a,l)+n+.98*o*Math.sin(u+i)]),c.push([Ee(a,l)+t+.9*r*Math.cos(u+.5*i),Ee(a,l)+n+.9*o*Math.sin(u+.5*i)]),[c,s]}function Pe(e,t,n,r,o,a,i,l,s){const c=a+Ee(.1,s),u=[];u.push([Ee(l,s)+t+.9*r*Math.cos(c-e),Ee(l,s)+n+.9*o*Math.sin(c-e)]);for(let a=c;a<=i;a+=e)u.push([Ee(l,s)+t+r*Math.cos(a),Ee(l,s)+n+o*Math.sin(a)]);return u.push([t+r*Math.cos(i),n+o*Math.sin(i)]),u.push([t+r*Math.cos(i),n+o*Math.sin(i)]),Me(u,null,s)}function Te(e,t,n,r,o,a,i,l){const s=[],c=[l.maxRandomnessOffset||1,(l.maxRandomnessOffset||1)+.3];let u=[0,0];const d=l.disableMultiStroke?1:2,p=l.preserveVertices;for(let f=0;f<d;f++)0===f?s.push({op:\"move\",data:[i[0],i[1]]}):s.push({op:\"move\",data:[i[0]+(p?0:Ee(c[0],l)),i[1]+(p?0:Ee(c[0],l))]}),u=p?[o,a]:[o+Ee(c[f],l),a+Ee(c[f],l)],s.push({op:\"bcurveTo\",data:[e+Ee(c[f],l),t+Ee(c[f],l),n+Ee(c[f],l),r+Ee(c[f],l),u[0],u[1]]});return s}function Ae(e){return[...e]}function Le(e,t){return Math.pow(e[0]-t[0],2)+Math.pow(e[1]-t[1],2)}function _e(e,t,n){const r=Le(t,n);if(0===r)return Le(e,t);let o=((e[0]-t[0])*(n[0]-t[0])+(e[1]-t[1])*(n[1]-t[1]))\/r;return o=Math.max(0,Math.min(1,o)),Le(e,De(t,n,o))}function De(e,t,n){return[e[0]+(t[0]-e[0])*n,e[1]+(t[1]-e[1])*n]}function ze(e,t,n,r){const o=r||[];if(function(e,t){const n=e[t+0],r=e[t+1],o=e[t+2],a=e[t+3];let i=3*r[0]-2*n[0]-a[0];i*=i;let l=3*r[1]-2*n[1]-a[1];l*=l;let s=3*o[0]-2*a[0]-n[0];s*=s;let c=3*o[1]-2*a[1]-n[1];return c*=c,i<s&&(i=s),l<c&&(l=c),i+l}(e,t)<n){const n=e[t+0];if(o.length){(a=o[o.length-1],i=n,Math.sqrt(Le(a,i)))>1&&o.push(n)}else o.push(n);o.push(e[t+3])}else{const r=.5,a=e[t+0],i=e[t+1],l=e[t+2],s=e[t+3],c=De(a,i,r),u=De(i,l,r),d=De(l,s,r),p=De(c,u,r),f=De(u,d,r),h=De(p,f,r);ze([a,c,p,h],0,n,o),ze([h,f,d,s],0,n,o)}var a,i;return o}function Be(e,t){return He(e,0,e.length,t)}function He(e,t,n,r,o){const a=o||[],i=e[t],l=e[n-1];let s=0,c=1;for(let r=t+1;r<n-1;++r){const t=_e(e[r],i,l);t>s&&(s=t,c=r)}return Math.sqrt(s)>r?(He(e,t,c+1,r,a),He(e,c,n,r,a)):(a.length||a.push(i),a.push(l)),a}function Ne(e,t=.15,n){const r=[],o=(e.length-1)\/3;for(let n=0;n<o;n++){ze(e,3*n,t,r)}return n&&n>0?He(r,0,r.length,n):r}const Re=\"none\";class Fe{constructor(e){this.defaultOptions={maxRandomnessOffset:2,roughness:1,bowing:1,stroke:\"#000\",strokeWidth:1,curveTightness:0,curveFitting:.95,curveStepCount:9,fillStyle:\"hachure\",fillWeight:-1,hachureAngle:-41,hachureGap:-1,dashOffset:-1,dashGap:-1,zigzagOffset:-1,seed:0,combineNestedSvgPaths:!1,disableMultiStroke:!1,disableMultiStrokeFill:!1,preserveVertices:!1},this.config=e||{},this.config.options&&(this.defaultOptions=this._o(this.config.options))}static newSeed(){return Math.floor(Math.random()*2**31)}_o(e){return e?Object.assign({},this.defaultOptions,e):this.defaultOptions}_d(e,t,n){return{shape:e,sets:t||[],options:n||this.defaultOptions}}line(e,t,n,r,o){const a=this._o(o);return this._d(\"line\",[fe(e,t,n,r,a)],a)}rectangle(e,t,n,r,o){const a=this._o(o),i=[],l=me(e,t,n,r,a);if(a.fill){const o=[[e,t],[e+n,t],[e+n,t+r],[e,t+r]];\"solid\"===a.fillStyle?i.push(xe(o,a)):i.push(we(o,a))}return a.stroke!==Re&&i.push(l),this._d(\"rectangle\",i,a)}ellipse(e,t,n,r,o){const a=this._o(o),i=[],l=ve(n,r,a),s=be(e,t,a,l);if(a.fill)if(\"solid\"===a.fillStyle){const n=be(e,t,a,l).opset;n.type=\"fillPath\",i.push(n)}else i.push(we(s.estimatedPoints,a));return a.stroke!==Re&&i.push(s.opset),this._d(\"ellipse\",i,a)}circle(e,t,n,r){const o=this.ellipse(e,t,n,n,r);return o.shape=\"circle\",o}linearPath(e,t){const n=this._o(t);return this._d(\"linearPath\",[he(e,!1,n)],n)}arc(e,t,n,r,o,a,i=!1,l){const s=this._o(l),c=[],u=ye(e,t,n,r,o,a,i,!0,s);if(i&&s.fill)if(\"solid\"===s.fillStyle){const i=ye(e,t,n,r,o,a,!0,!1,s);i.type=\"fillPath\",c.push(i)}else c.push(function(e,t,n,r,o,a,i){const l=e,s=t;let c=Math.abs(n\/2),u=Math.abs(r\/2);c+=Ee(.01*c,i),u+=Ee(.01*u,i);let d=o,p=a;for(;d<0;)d+=2*Math.PI,p+=2*Math.PI;p-d>2*Math.PI&&(d=0,p=2*Math.PI);const f=(p-d)\/i.curveStepCount,h=[];for(let e=d;e<=p;e+=f)h.push([l+c*Math.cos(e),s+u*Math.sin(e)]);return h.push([l+c*Math.cos(p),s+u*Math.sin(p)]),h.push([l,s]),we(h,i)}(e,t,n,r,o,a,s));return s.stroke!==Re&&c.push(u),this._d(\"arc\",c,s)}curve(e,t){const n=this._o(t),r=[],o=ge(e,n);if(n.fill&&n.fill!==Re&&e.length>=3){const t=Ne(function(e,t=0){const n=e.length;if(n<3)throw new Error(\"A curve must have at least three points.\");const r=[];if(3===n)r.push(Ae(e[0]),Ae(e[1]),Ae(e[2]),Ae(e[2]));else{const n=[];n.push(e[0],e[0]);for(let t=1;t<e.length;t++)n.push(e[t]),t===e.length-1&&n.push(e[t]);const o=[],a=1-t;r.push(Ae(n[0]));for(let e=1;e+2<n.length;e++){const t=n[e];o[0]=[t[0],t[1]],o[1]=[t[0]+(a*n[e+1][0]-a*n[e-1][0])\/6,t[1]+(a*n[e+1][1]-a*n[e-1][1])\/6],o[2]=[n[e+1][0]+(a*n[e][0]-a*n[e+2][0])\/6,n[e+1][1]+(a*n[e][1]-a*n[e+2][1])\/6],o[3]=[n[e+1][0],n[e+1][1]],r.push(o[1],o[2],o[3])}}return r}(e),10,(1+n.roughness)\/2);\"solid\"===n.fillStyle?r.push(xe(t,n)):r.push(we(t,n))}return n.stroke!==Re&&r.push(o),this._d(\"curve\",r,n)}polygon(e,t){const n=this._o(t),r=[],o=he(e,!0,n);return n.fill&&(\"solid\"===n.fillStyle?r.push(xe(e,n)):r.push(we(e,n))),n.stroke!==Re&&r.push(o),this._d(\"polygon\",r,n)}path(e,t){const n=this._o(t),r=[];if(!e)return this._d(\"path\",r,n);e=(e||\"\").replace(\/\\n\/g,\" \").replace(\/(-\\s)\/g,\"-\").replace(\"\/(ss)\/g\",\" \");const o=n.fill&&\"transparent\"!==n.fill&&n.fill!==Re,a=n.stroke!==Re,i=!!(n.simplification&&n.simplification<1),l=function(e,t,n){const r=ce(se(le(e))),o=[];let a=[],i=[0,0],l=[];const s=()=>{l.length>=4&&a.push(...Ne(l,t)),l=[]},c=()=>{s(),a.length&&(o.push(a),a=[])};for(const{key:e,data:t}of r)switch(e){case\"M\":c(),i=[t[0],t[1]],a.push(i);break;case\"L\":s(),a.push([t[0],t[1]]);break;case\"C\":if(!l.length){const e=a.length?a[a.length-1]:i;l.push([e[0],e[1]])}l.push([t[0],t[1]]),l.push([t[2],t[3]]),l.push([t[4],t[5]]);break;case\"Z\":s(),a.push([i[0],i[1]])}if(c(),!n)return o;const u=[];for(const e of o){const t=Be(e,n);t.length&&u.push(t)}return u}(e,1,i?4-4*n.simplification:(1+n.roughness)\/2);if(o)if(n.combineNestedSvgPaths){const e=[];l.forEach((t=>e.push(...t))),\"solid\"===n.fillStyle?r.push(xe(e,n)):r.push(we(e,n))}else l.forEach((e=>{\"solid\"===n.fillStyle?r.push(xe(e,n)):r.push(we(e,n))}));return a&&(i?l.forEach((e=>{r.push(he(e,!1,n))})):r.push(function(e,t){const n=ce(se(le(e))),r=[];let o=[0,0],a=[0,0];for(const{key:e,data:i}of n)switch(e){case\"M\":{const e=1*(t.maxRandomnessOffset||0),n=t.preserveVertices;r.push({op:\"move\",data:i.map((r=>r+(n?0:Ee(e,t))))}),a=[i[0],i[1]],o=[i[0],i[1]];break}case\"L\":r.push(...je(a[0],a[1],i[0],i[1],t)),a=[i[0],i[1]];break;case\"C\":{const[e,n,o,l,s,c]=i;r.push(...Te(e,n,o,l,s,c,a,t)),a=[s,c];break}case\"Z\":r.push(...je(a[0],a[1],o[0],o[1],t)),a=[o[0],o[1]]}return{type:\"path\",ops:r}}(e,n))),this._d(\"path\",r,n)}opsToPath(e,t){let n=\"\";for(const r of e.ops){const e=\"number\"==typeof t&&t>=0?r.data.map((e=>+e.toFixed(t))):r.data;switch(r.op){case\"move\":n+=`M${e[0]} ${e[1]} `;break;case\"bcurveTo\":n+=`C${e[0]} ${e[1]}, ${e[2]} ${e[3]}, ${e[4]} ${e[5]} `;break;case\"lineTo\":n+=`L${e[0]} ${e[1]} `}}return n.trim()}toPaths(e){const t=e.sets||[],n=e.options||this.defaultOptions,r=[];for(const e of t){let t=null;switch(e.type){case\"path\":t={d:this.opsToPath(e),stroke:n.stroke,strokeWidth:n.strokeWidth,fill:Re};break;case\"fillPath\":t={d:this.opsToPath(e),stroke:Re,strokeWidth:0,fill:n.fill||Re};break;case\"fillSketch\":t=this.fillSketch(e,n)}t&&r.push(t)}return r}fillSketch(e,t){let n=t.fillWeight;return n<0&&(n=t.strokeWidth\/2),{d:this.opsToPath(e),stroke:t.fill||Re,strokeWidth:n,fill:Re}}}class Ve{constructor(e,t){this.canvas=e,this.ctx=this.canvas.getContext(\"2d\"),this.gen=new Fe(t)}draw(e){const t=e.sets||[],n=e.options||this.getDefaultOptions(),r=this.ctx;for(const o of t)switch(o.type){case\"path\":r.save(),r.strokeStyle=\"none\"===n.stroke?\"transparent\":n.stroke,r.lineWidth=n.strokeWidth,n.strokeLineDash&&r.setLineDash(n.strokeLineDash),n.strokeLineDashOffset&&(r.lineDashOffset=n.strokeLineDashOffset),this._drawToContext(r,o),r.restore();break;case\"fillPath\":r.save(),r.fillStyle=n.fill||\"\";const t=\"curve\"===e.shape||\"polygon\"===e.shape?\"evenodd\":\"nonzero\";this._drawToContext(r,o,t),r.restore();break;case\"fillSketch\":this.fillSketch(r,o,n)}}fillSketch(e,t,n){let r=n.fillWeight;r<0&&(r=n.strokeWidth\/2),e.save(),n.fillLineDash&&e.setLineDash(n.fillLineDash),n.fillLineDashOffset&&(e.lineDashOffset=n.fillLineDashOffset),e.strokeStyle=n.fill||\"\",e.lineWidth=r,this._drawToContext(e,t),e.restore()}_drawToContext(e,t,n=\"nonzero\"){e.beginPath();for(const n of t.ops){const t=n.data;switch(n.op){case\"move\":e.moveTo(t[0],t[1]);break;case\"bcurveTo\":e.bezierCurveTo(t[0],t[1],t[2],t[3],t[4],t[5]);break;case\"lineTo\":e.lineTo(t[0],t[1])}}\"fillPath\"===t.type?e.fill(n):e.stroke()}get generator(){return this.gen}getDefaultOptions(){return this.gen.defaultOptions}line(e,t,n,r,o){const a=this.gen.line(e,t,n,r,o);return this.draw(a),a}rectangle(e,t,n,r,o){const a=this.gen.rectangle(e,t,n,r,o);return this.draw(a),a}ellipse(e,t,n,r,o){const a=this.gen.ellipse(e,t,n,r,o);return this.draw(a),a}circle(e,t,n,r){const o=this.gen.circle(e,t,n,r);return this.draw(o),o}linearPath(e,t){const n=this.gen.linearPath(e,t);return this.draw(n),n}polygon(e,t){const n=this.gen.polygon(e,t);return this.draw(n),n}arc(e,t,n,r,o,a,i=!1,l){const s=this.gen.arc(e,t,n,r,o,a,i,l);return this.draw(s),s}curve(e,t){const n=this.gen.curve(e,t);return this.draw(n),n}path(e,t){const n=this.gen.path(e,t);return this.draw(n),n}}const Ge=\"http:\/\/www.w3.org\/2000\/svg\";class Ue{constructor(e,t){this.svg=e,this.gen=new Fe(t)}draw(e){const t=e.sets||[],n=e.options||this.getDefaultOptions(),r=this.svg.ownerDocument||window.document,o=r.createElementNS(Ge,\"g\"),a=e.options.fixedDecimalPlaceDigits;for(const i of t){let t=null;switch(i.type){case\"path\":t=r.createElementNS(Ge,\"path\"),t.setAttribute(\"d\",this.opsToPath(i,a)),t.setAttribute(\"stroke\",n.stroke),t.setAttribute(\"stroke-width\",n.strokeWidth+\"\"),t.setAttribute(\"fill\",\"none\"),n.strokeLineDash&&t.setAttribute(\"stroke-dasharray\",n.strokeLineDash.join(\" \").trim()),n.strokeLineDashOffset&&t.setAttribute(\"stroke-dashoffset\",`${n.strokeLineDashOffset}`);break;case\"fillPath\":t=r.createElementNS(Ge,\"path\"),t.setAttribute(\"d\",this.opsToPath(i,a)),t.setAttribute(\"stroke\",\"none\"),t.setAttribute(\"stroke-width\",\"0\"),t.setAttribute(\"fill\",n.fill||\"\"),\"curve\"!==e.shape&&\"polygon\"!==e.shape||t.setAttribute(\"fill-rule\",\"evenodd\");break;case\"fillSketch\":t=this.fillSketch(r,i,n)}t&&o.appendChild(t)}return o}fillSketch(e,t,n){let r=n.fillWeight;r<0&&(r=n.strokeWidth\/2);const o=e.createElementNS(Ge,\"path\");return o.setAttribute(\"d\",this.opsToPath(t,n.fixedDecimalPlaceDigits)),o.setAttribute(\"stroke\",n.fill||\"\"),o.setAttribute(\"stroke-width\",r+\"\"),o.setAttribute(\"fill\",\"none\"),n.fillLineDash&&o.setAttribute(\"stroke-dasharray\",n.fillLineDash.join(\" \").trim()),n.fillLineDashOffset&&o.setAttribute(\"stroke-dashoffset\",`${n.fillLineDashOffset}`),o}get generator(){return this.gen}getDefaultOptions(){return this.gen.defaultOptions}opsToPath(e,t){return this.gen.opsToPath(e,t)}line(e,t,n,r,o){const a=this.gen.line(e,t,n,r,o);return this.draw(a)}rectangle(e,t,n,r,o){const a=this.gen.rectangle(e,t,n,r,o);return this.draw(a)}ellipse(e,t,n,r,o){const a=this.gen.ellipse(e,t,n,r,o);return this.draw(a)}circle(e,t,n,r){const o=this.gen.circle(e,t,n,r);return this.draw(o)}linearPath(e,t){const n=this.gen.linearPath(e,t);return this.draw(n)}polygon(e,t){const n=this.gen.polygon(e,t);return this.draw(n)}arc(e,t,n,r,o,a,i=!1,l){const s=this.gen.arc(e,t,n,r,o,a,i,l);return this.draw(s)}curve(e,t){const n=this.gen.curve(e,t);return this.draw(n)}path(e,t){const n=this.gen.path(e,t);return this.draw(n)}}var Ke={canvas:(e,t)=>new Ve(e,t),svg:(e,t)=>new Ue(e,t),generator:e=>new Fe(e),newSeed:()=>Fe.newSeed()};function We(e){var t,n,r=\"\";if(\"string\"==typeof e||\"number\"==typeof e)r+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=We(e[t]))&&(r&&(r+=\" \"),r+=n);else for(t in e)e[t]&&(r&&(r+=\" \"),r+=t);return r}function Ze(){for(var e,t,n=0,r=\"\";n<arguments.length;)(e=arguments[n++])&&(t=We(e))&&(r&&(r+=\" \"),r+=t);return r}let Ye=(e=21)=>{let t=\"\",n=crypto.getRandomValues(new Uint8Array(e));for(;e--;){let r=63&n[e];t+=r<36?r.toString(36):r<62?(r-26).toString(36).toUpperCase():r<63?\"_\":\"-\"}return t};var Xe=function(e){return null!=e&&\"text\"===e.type},qe=function(e){return null!=e&&$e(e.type)},$e=function(e){return\"freedraw\"===e},Qe=function(e){return null!=e&&Je(e.type)},Je=function(e){return\"arrow\"===e||\"line\"===e},et=function(e){return null!=e&&tt(e.type)},tt=function(e){return\"arrow\"===e},nt=function(e){return null!=e&&(\"rectangle\"===e.type||\"diamond\"===e.type||\"ellipse\"===e.type||\"text\"===e.type)},rt=function(e,t,n,r,o){return[(e-n)*Math.cos(o)-(t-r)*Math.sin(o)+n,(e-n)*Math.sin(o)+(t-r)*Math.cos(o)+r]},ot=function(e,t,n){return rt(e[0],e[1],t[0],t[1],n)},at=function(e,t,n,r,o,a,i,l){var s=Math.cos(r),c=Math.sin(r);return e.e&&e.w?t+=o+i:e.e?(t+=o*(1+s),n+=o*c,t+=i*(1-s),n+=i*-c):e.w&&(t+=o*(1-s),n+=o*-c,t+=i*(1+s),n+=i*c),e.n&&e.s?n+=a+l:e.n?(t+=a*c,n+=a*(1-s),t+=l*-c,n+=l*(1+s)):e.s&&(t+=a*-c,n+=a*(1+s),t+=l*c,n+=l*(1-s)),[t,n]},it=function(e,t,n,r){var o=n-e,a=r-t;return Math.hypot(o,a)},lt=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;if(e.length>=3){var n=[e[0],e[e.length-1]],r=n[0],o=n[1],a=it(r[0],r[1],o[0],o[1]);return a<=c.qx\/t}return!1},st=function(e,t,n){var r=e.length;if(r<3)return!1;for(var o=[Number.MAX_SAFE_INTEGER,n],a=[t,n],i=0,l=0;l<r;l++){var s=e[l],c=e[(l+1)%r];if(dt(s,c,a,o)){if(0===ut(s,a,c))return ct(s,a,c);i++}}return i%2==1},ct=function(e,t,n){return t[0]<=Math.max(e[0],n[0])&&t[0]>=Math.min(e[0],n[0])&&t[1]<=Math.max(e[1],n[1])&&t[1]>=Math.min(e[1],n[1])},ut=function(e,t,n){var r=(t[1]-e[1])*(n[0]-t[0])-(t[0]-e[0])*(n[1]-t[1]);return 0===r?0:r>0?1:2},dt=function(e,t,n,r){var o=ut(e,t,n),a=ut(e,t,r),i=ut(n,r,e),l=ut(n,r,t);return o!==a&&i!==l||(!(0!==o||!ct(e,n,t))||(!(0!==a||!ct(e,r,t))||(!(0!==i||!ct(n,e,r))||!(0!==l||!ct(n,t,r)))))},pt=function(e,t,n){return n?[Math.round(e\/n)*n,Math.round(t\/n)*n]:[e,t]},ft=function(e,t,n){var r=n.map((function(t){return t[e]})),o=Math.max.apply(Math,F(r)),a=Math.min.apply(Math,F(r)),i=o-a,l=0===i?1:t\/i,s=1\/0,c=n.map((function(t){return t.map((function(t,n){if(n!==e)return t;var r=t*l;return s=Math.min(r,s),r}))}));if(2===c.length)return c;var u=a-s;return c.map((function(t){return t.map((function(t,n){return n===e?t+u:t}))}))};function ht(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return mt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return mt(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function mt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var gt=function(e){return qe(e)?xt(e):Qe(e)?wt(e):[e.x,e.y,e.x+e.width,e.y+e.height]},vt=function(e){var t,n=ht(e.sets);try{for(n.s();!(t=n.n()).done;){var r=t.value;if(\"path\"===r.type)return r.ops}}catch(e){n.e(e)}finally{n.f()}return e.sets[0].ops},bt=function(e,t){var n=[0,0],r=e.reduce((function(e,r){var o=r.op,a=r.data;if(\"move\"===o)n=a;else if(\"bcurveTo\"===o){var i=[a[0],a[1]],l=[a[2],a[3]],s=[a[4],a[5]],c=n;n=s;for(var u=function(e,t){return Math.pow(1-e,3)*s[t]+3*e*Math.pow(1-e,2)*l[t]+3*Math.pow(e,2)*(1-e)*i[t]+c[t]*Math.pow(e,3)},d=0;d<=1;){var p=u(d,0),f=u(d,1);if(t){var h=R(t(p,f),2);p=h[0],f=h[1]}e.minY=Math.min(e.minY,f),e.minX=Math.min(e.minX,p),e.maxX=Math.max(e.maxX,p),e.maxY=Math.max(e.maxY,f),d+=.1}}return e}),{minX:1\/0,minY:1\/0,maxX:-1\/0,maxY:-1\/0});return[r.minX,r.minY,r.maxX,r.maxY]},yt=function(e){var t,n=1\/0,r=1\/0,o=-1\/0,a=-1\/0,i=ht(e);try{for(i.s();!(t=i.n()).done;){var l=R(t.value,2),s=l[0],c=l[1];n=Math.min(n,s),r=Math.min(r,c),o=Math.max(o,s),a=Math.max(a,c)}}catch(e){i.e(e)}finally{i.f()}return[n,r,o,a]},xt=function(e){var t=R(yt(e.points),4),n=t[0],r=t[1],o=t[2],a=t[3];return[n+e.x,r+e.y,o+e.x,a+e.y]},wt=function(e){var t;if(e.points.length<2||!Br(e)){var n=e.points.reduce((function(e,t){var n=R(t,2),r=n[0],o=n[1];return e.minY=Math.min(e.minY,o),e.minX=Math.min(e.minX,r),e.maxX=Math.max(e.maxX,r),e.maxY=Math.max(e.maxY,o),e}),{minX:1\/0,minY:1\/0,maxX:-1\/0,maxY:-1\/0}),r=n.minX,o=n.minY,a=n.maxX,i=n.maxY;t=[r+e.x,o+e.y,a+e.x,i+e.y]}else{var l=Br(e),s=vt(l[0]),c=R(bt(s),4),u=c[0],d=c[1],p=c[2],f=c[3];t=[u+e.x,d+e.y,p+e.x,f+e.y]}return t},kt=function(e){var t,n=R(gt(e),4),r=n[0],o=n[1],a=n[2],i=n[3],l=(r+a)\/2,s=(o+i)\/2;if(qe(e)){var c=yt(e.points.map((function(t){var n=R(t,2),r=n[0],o=n[1];return rt(r,o,l-e.x,s-e.y,e.angle)}))),u=R(c,4),d=u[0],p=u[1],f=u[2],h=u[3];return[d+e.x,p+e.y,f+e.x,h+e.y]}if(Qe(e))t=function(e,t,n){if(e.points.length<2||!Br(e)){var r=e.points.reduce((function(r,o){var a=R(o,2),i=a[0],l=a[1],s=R(rt(e.x+i,e.y+l,t,n,e.angle),2);return i=s[0],l=s[1],r.minY=Math.min(r.minY,l),r.minX=Math.min(r.minX,i),r.maxX=Math.max(r.maxX,i),r.maxY=Math.max(r.maxY,l),r}),{minX:1\/0,minY:1\/0,maxX:-1\/0,maxY:-1\/0});return[r.minX,r.minY,r.maxX,r.maxY]}var o=Br(e),a=vt(o[0]);return bt(a,(function(r,o){return rt(e.x+r,e.y+o,t,n,e.angle)}))}(e,l,s);else if(\"diamond\"===e.type){var m=R(rt(l,o,l,s,e.angle),2),g=m[0],v=m[1],b=R(rt(l,i,l,s,e.angle),2),y=b[0],x=b[1],w=R(rt(r,s,l,s,e.angle),2),k=w[0],S=w[1],E=R(rt(a,s,l,s,e.angle),2),j=E[0],C=E[1];t=[Math.min(g,y,k,j),Math.min(v,x,S,C),Math.max(g,y,k,j),Math.max(v,x,S,C)]}else if(\"ellipse\"===e.type){var O=(a-r)\/2,M=(i-o)\/2,I=Math.cos(e.angle),P=Math.sin(e.angle),T=Math.hypot(O*I,M*P),A=Math.hypot(M*I,O*P);t=[l-T,s-A,l+T,s+A]}else{var L=R(rt(r,o,l,s,e.angle),2),_=L[0],D=L[1],z=R(rt(r,i,l,s,e.angle),2),B=z[0],H=z[1],N=R(rt(a,i,l,s,e.angle),2),F=N[0],V=N[1],G=R(rt(a,o,l,s,e.angle),2),U=G[0],K=G[1];t=[Math.min(_,B,F,U),Math.min(D,H,V,K),Math.max(_,B,F,U),Math.max(D,H,V,K)]}return t},St=function(e){if(!e.length)return[0,0,0,0];var t=1\/0,n=-1\/0,r=1\/0,o=-1\/0;return e.forEach((function(e){var a=R(kt(e),4),i=a[0],l=a[1],s=a[2],c=a[3];t=Math.min(t,i),r=Math.min(r,l),n=Math.max(n,s),o=Math.max(o,c)})),[t,r,n,o]},Et=function(e,t,n){if(!Qe(e)&&!qe(e))return[e.x,e.y,e.x+t,e.y+n];var r,o=ft(0,t,ft(1,n,e.points));if(qe(e))r=yt(o);else{var a=Ke.generator(),i=\"sharp\"===e.strokeSharpness?a.linearPath(o,Nr(e)):a.curve(o,Nr(e)),l=vt(i);r=bt(l)}var s=R(r,4),c=s[0],u=s[1],d=s[2],p=s[3];return[c+e.x,u+e.y,d+e.x,p+e.y]},jt=function(e,t,n){var r=Ke.generator(),o=\"sharp\"===n?r.linearPath(t,Nr(e)):r.curve(t,Nr(e)),a=vt(o),i=R(bt(a),4),l=i[0],s=i[1],c=i[2],u=i[3];return[l+e.x,s+e.y,c+e.x,u+e.y]},Ct=JSON.parse('{\"white\":\"#ffffff\",\"black\":\"#000000\",\"gray\":[\"#f8f9fa\",\"#f1f3f5\",\"#e9ecef\",\"#dee2e6\",\"#ced4da\",\"#adb5bd\",\"#868e96\",\"#495057\",\"#343a40\",\"#212529\"],\"red\":[\"#fff5f5\",\"#ffe3e3\",\"#ffc9c9\",\"#ffa8a8\",\"#ff8787\",\"#ff6b6b\",\"#fa5252\",\"#f03e3e\",\"#e03131\",\"#c92a2a\"],\"pink\":[\"#fff0f6\",\"#ffdeeb\",\"#fcc2d7\",\"#faa2c1\",\"#f783ac\",\"#f06595\",\"#e64980\",\"#d6336c\",\"#c2255c\",\"#a61e4d\"],\"grape\":[\"#f8f0fc\",\"#f3d9fa\",\"#eebefa\",\"#e599f7\",\"#da77f2\",\"#cc5de8\",\"#be4bdb\",\"#ae3ec9\",\"#9c36b5\",\"#862e9c\"],\"violet\":[\"#f3f0ff\",\"#e5dbff\",\"#d0bfff\",\"#b197fc\",\"#9775fa\",\"#845ef7\",\"#7950f2\",\"#7048e8\",\"#6741d9\",\"#5f3dc4\"],\"indigo\":[\"#edf2ff\",\"#dbe4ff\",\"#bac8ff\",\"#91a7ff\",\"#748ffc\",\"#5c7cfa\",\"#4c6ef5\",\"#4263eb\",\"#3b5bdb\",\"#364fc7\"],\"blue\":[\"#e7f5ff\",\"#d0ebff\",\"#a5d8ff\",\"#74c0fc\",\"#4dabf7\",\"#339af0\",\"#228be6\",\"#1c7ed6\",\"#1971c2\",\"#1864ab\"],\"cyan\":[\"#e3fafc\",\"#c5f6fa\",\"#99e9f2\",\"#66d9e8\",\"#3bc9db\",\"#22b8cf\",\"#15aabf\",\"#1098ad\",\"#0c8599\",\"#0b7285\"],\"teal\":[\"#e6fcf5\",\"#c3fae8\",\"#96f2d7\",\"#63e6be\",\"#38d9a9\",\"#20c997\",\"#12b886\",\"#0ca678\",\"#099268\",\"#087f5b\"],\"green\":[\"#ebfbee\",\"#d3f9d8\",\"#b2f2bb\",\"#8ce99a\",\"#69db7c\",\"#51cf66\",\"#40c057\",\"#37b24d\",\"#2f9e44\",\"#2b8a3e\"],\"lime\":[\"#f4fce3\",\"#e9fac8\",\"#d8f5a2\",\"#c0eb75\",\"#a9e34b\",\"#94d82d\",\"#82c91e\",\"#74b816\",\"#66a80f\",\"#5c940d\"],\"yellow\":[\"#fff9db\",\"#fff3bf\",\"#ffec99\",\"#ffe066\",\"#ffd43b\",\"#fcc419\",\"#fab005\",\"#f59f00\",\"#f08c00\",\"#e67700\"],\"orange\":[\"#fff4e6\",\"#ffe8cc\",\"#ffd8a8\",\"#ffc078\",\"#ffa94d\",\"#ff922b\",\"#fd7e14\",\"#f76707\",\"#e8590c\",\"#d9480f\"]}'),Ot=function(e){return[Ct.red[e],Ct.pink[e],Ct.grape[e],Ct.violet[e],Ct.indigo[e],Ct.blue[e],Ct.cyan[e],Ct.teal[e],Ct.green[e],Ct.lime[e],Ct.yellow[e],Ct.orange[e]]},Mt={canvasBackground:[Ct.white,Ct.gray[0],Ct.gray[1]].concat(F(Ot(0))),elementBackground:[\"transparent\",Ct.gray[4],Ct.gray[6]].concat(F(Ot(6))),elementStroke:[Ct.black,Ct.gray[8],Ct.gray[7]].concat(F(Ot(9)))},It=n(6207),Pt=\/Mac|iPod|iPhone|iPad\/.test(window.navigator.platform),Tt=\/^Win\/.test(window.navigator.platform),At=\"Equal\",Lt=\"Minus\",_t=\"NumpadAdd\",Dt=\"NumpadSubtract\",zt=\"Numpad0\",Bt=\"BracketRight\",Ht=\"BracketLeft\",Nt=\"Digit1\",Rt=\"Digit2\",Ft=\"Digit9\",Vt=\"Quote\",Gt=\"Digit0\",Ut=\"Slash\",Kt=\"KeyC\",Wt=\"KeyD\",Zt=\"KeyG\",Yt=\"KeyF\",Xt=\"KeyH\",qt=\"KeyV\",$t=\"KeyX\",Qt=\"KeyZ\",Jt=\"KeyR\",en=\"ArrowDown\",tn=\"ArrowLeft\",nn=\"ArrowRight\",rn=\"ArrowUp\",on=\"Backspace\",an=\"Alt\",ln=Pt?\"metaKey\":\"ctrlKey\",sn=\"Delete\",cn=\"Enter\",un=\"Escape\",dn=\"?\",pn=\" \",fn=\"Tab\",hn=\"a\",mn=\"d\",gn=\"e\",vn=\"g\",bn=\"l\",yn=\"o\",xn=\"p\",wn=\"q\",kn=\"r\",Sn=\"s\",En=\"t\",jn=\"v\",Cn=\"x\",On=\"y\",Mn=\"z\",In=function(e){return e===tn||e===nn||e===en||e===rn},Pn=function(e){return e.altKey},Tn=function(e){return e.shiftKey},An=function(e){return e.shiftKey},Ln=\"http:\/\/www.w3.org\/2000\/svg\",_n=null,Dn=function(){if(_n)return _n;var e=new Date,t=e.getFullYear(),n=\"\".concat(e.getMonth()+1).padStart(2,\"0\"),r=\"\".concat(e.getDate()).padStart(2,\"0\"),o=\"\".concat(e.getHours()).padStart(2,\"0\"),a=\"\".concat(e.getMinutes()).padStart(2,\"0\");return\"\".concat(t,\"-\").concat(n,\"-\").concat(r,\"-\").concat(o).concat(a)},zn=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},Bn=function(e){return e instanceof HTMLElement&&\"wysiwyg\"===e.dataset.type||e instanceof HTMLBRElement||e instanceof HTMLTextAreaElement||e instanceof HTMLInputElement&&(\"text\"===e.type||\"number\"===e.type)},Hn=function(e){for(var t=e.fontFamily,n=0,r=Object.entries(c.ut);n<r.length;n++){var o=R(r[n],2),a=o[0];if(o[1]===t)return\"\".concat(a,\", \").concat(c._D)}return c._D},Nn=function(e){var t=e.fontSize,n=e.fontFamily;return\"\".concat(t,\"px \").concat(Hn({fontFamily:n}))},Rn=function(e,t){var n=document.createElement(\"div\"),r=document.body;n.style.position=\"absolute\",n.style.whiteSpace=\"pre\",n.style.font=t,r.appendChild(n),n.innerText=e.split(\"\\n\").map((function(e){return e||\" \"})).join(\"\\n\");var o=n.offsetWidth,a=n.offsetHeight,i=document.createElement(\"span\");i.style.display=\"inline-block\",i.style.overflow=\"hidden\",i.style.width=\"1px\",i.style.height=\"1px\",n.appendChild(i);var l=i.offsetTop+i.offsetHeight;return document.body.removeChild(n),{width:o,height:a,baseline:l}},Fn=function(e,t){var n=0,r=null,o=function(){for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];r=a,clearTimeout(n),n=window.setTimeout((function(){r=null,e.apply(void 0,a)}),t)};return o.flush=function(){if(clearTimeout(n),r){var t=r;r=null,e.apply(void 0,F(t))}},o.cancel=function(){r=null,clearTimeout(n)},o},Vn=function(e,t){return Math.abs(e-t)},Gn=function(e){e&&(e.style.cursor=\"\")},Un=function(e,t){e&&(e.style.cursor=t)},Kn=function(e,t){e&&(\"selection\"===t?Gn(e):e.style.cursor=c.oc.CROSSHAIR)},Wn=function(){var e;return\"HTML\"===(null===(e=document.fullscreenElement)||void 0===e?void 0:e.nodeName)},Zn=function(e){return e=e.replace(\/\\bAlt\\b\/i,\"Alt\").replace(\/\\bShift\\b\/i,\"Shift\").replace(\/\\b(Enter|Return)\\b\/i,\"Enter\").replace(\/\\bDel\\b\/i,\"Delete\"),Pt?e.replace(\/\\bCtrlOrCmd\\b\/i,\"Cmd\").replace(\/\\bAlt\\b\/i,\"Option\"):e.replace(\/\\bCtrlOrCmd\\b\/i,\"Ctrl\")},Yn=function(e,t){var n=e.clientX,r=e.clientY,o=t.zoom,a=t.offsetLeft,i=t.offsetTop,l=t.scrollX,s=t.scrollY,c=1\/o.value;return{x:(n-o.translation.x-a)*c-l,y:(r-o.translation.y-i)*c-s}},Xn=function(e,t){var n=e.sceneX,r=e.sceneY,o=t.zoom,a=t.offsetLeft,i=t.offsetTop,l=t.scrollX,s=t.scrollY;return{x:(n+l+a)*o.value+o.translation.x,y:(r+s+i)*o.value+o.translation.y}},qn=function(e){return getComputedStyle(document.documentElement).getPropertyValue(\"--\".concat(e))},$n=new RegExp(\"^[^\".concat(\"A-Za-z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u0300-\u0590\u0800-\u1fff\u2c00-\ufb1c\ufdfe-\ufe6f\ufefd-\uffff\",\"]*[\").concat(\"\u0591-\u07ff\ufb1d-\ufdfd\ufe70-\ufefc\",\"]\")),Qn=function(e){return $n.test(e)},Jn=function(e){var t=R(e,2);return{x:t[0],y:t[1]}},er=function(e){if(\"AbortError\"!==(null==e?void 0:e.name))throw e},tr=function(e){var t=5===e.length&&\"0\"===e.substr(4,1),n=9===e.length&&\"00\"===e.substr(7,2);return t||n||e===Mt.elementBackground[0]},nr=function(e){return function(t){(0,It.unstable_batchedUpdates)(e,t)}};function rr(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return or(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return or(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function or(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ar=c.ZB.includes(devicePixelRatio)?devicePixelRatio:1,ir=function(){return{theme:\"light\",collaborators:new Map,currentChartType:\"bar\",currentItemBackgroundColor:\"transparent\",currentItemEndArrowhead:\"arrow\",currentItemFillStyle:\"hachure\",currentItemFontFamily:c.rk,currentItemFontSize:c.n5,currentItemLinearStrokeSharpness:\"round\",currentItemOpacity:100,currentItemRoughness:1,currentItemStartArrowhead:null,currentItemStrokeColor:Ct.black,currentItemStrokeSharpness:\"sharp\",currentItemStrokeStyle:\"solid\",currentItemStrokeWidth:1,currentItemTextAlign:c.Hg,cursorButton:\"up\",draggingElement:null,editingElement:null,editingGroupId:null,editingLinearElement:null,elementLocked:!1,elementType:\"selection\",errorMessage:null,exportBackground:!0,exportScale:ar,exportEmbedScene:!1,exportWithDarkMode:!1,fileHandle:null,gridSize:null,isBindingEnabled:!0,isLibraryOpen:!1,isLoading:!1,isResizing:!1,isRotating:!1,lastPointerDownWith:\"mouse\",multiElement:null,name:\"\".concat(L(\"labels.untitled\"),\"-\").concat(Dn()),openMenu:null,openPopup:null,pasteDialog:{shown:!1,data:null},previousSelectedElementIds:{},resizingElement:null,scrolledOutside:!1,scrollX:0,scrollY:0,selectedElementIds:{},selectedGroupIds:{},selectionElement:null,shouldCacheIgnoreZoom:!1,showHelpDialog:!1,showStats:!1,startBoundElement:null,suggestedBindings:[],toastMessage:null,viewBackgroundColor:Ct.white,zenModeEnabled:!1,zoom:{value:1,translation:{x:0,y:0}},viewModeEnabled:!1}},lr={theme:{browser:!0,export:!1},collaborators:{browser:!1,export:!1},currentChartType:{browser:!0,export:!1},currentItemBackgroundColor:{browser:!0,export:!1},currentItemEndArrowhead:{browser:!0,export:!1},currentItemFillStyle:{browser:!0,export:!1},currentItemFontFamily:{browser:!0,export:!1},currentItemFontSize:{browser:!0,export:!1},currentItemLinearStrokeSharpness:{browser:!0,export:!1},currentItemOpacity:{browser:!0,export:!1},currentItemRoughness:{browser:!0,export:!1},currentItemStartArrowhead:{browser:!0,export:!1},currentItemStrokeColor:{browser:!0,export:!1},currentItemStrokeSharpness:{browser:!0,export:!1},currentItemStrokeStyle:{browser:!0,export:!1},currentItemStrokeWidth:{browser:!0,export:!1},currentItemTextAlign:{browser:!0,export:!1},cursorButton:{browser:!0,export:!1},draggingElement:{browser:!1,export:!1},editingElement:{browser:!1,export:!1},editingGroupId:{browser:!0,export:!1},editingLinearElement:{browser:!1,export:!1},elementLocked:{browser:!0,export:!1},elementType:{browser:!0,export:!1},errorMessage:{browser:!1,export:!1},exportBackground:{browser:!0,export:!1},exportEmbedScene:{browser:!0,export:!1},exportScale:{browser:!0,export:!1},exportWithDarkMode:{browser:!0,export:!1},fileHandle:{browser:!1,export:!1},gridSize:{browser:!0,export:!0},height:{browser:!1,export:!1},isBindingEnabled:{browser:!1,export:!1},isLibraryOpen:{browser:!1,export:!1},isLoading:{browser:!1,export:!1},isResizing:{browser:!1,export:!1},isRotating:{browser:!1,export:!1},lastPointerDownWith:{browser:!0,export:!1},multiElement:{browser:!1,export:!1},name:{browser:!0,export:!1},offsetLeft:{browser:!1,export:!1},offsetTop:{browser:!1,export:!1},openMenu:{browser:!0,export:!1},openPopup:{browser:!1,export:!1},pasteDialog:{browser:!1,export:!1},previousSelectedElementIds:{browser:!0,export:!1},resizingElement:{browser:!1,export:!1},scrolledOutside:{browser:!0,export:!1},scrollX:{browser:!0,export:!1},scrollY:{browser:!0,export:!1},selectedElementIds:{browser:!0,export:!1},selectedGroupIds:{browser:!0,export:!1},selectionElement:{browser:!1,export:!1},shouldCacheIgnoreZoom:{browser:!0,export:!1},showHelpDialog:{browser:!1,export:!1},showStats:{browser:!0,export:!1},startBoundElement:{browser:!1,export:!1},suggestedBindings:{browser:!1,export:!1},toastMessage:{browser:!1,export:!1},viewBackgroundColor:{browser:!0,export:!0},width:{browser:!1,export:!1},zenModeEnabled:{browser:!0,export:!1},zoom:{browser:!0,export:!1},viewModeEnabled:{browser:!1,export:!1}},sr=function(e,t){var n,r={},o=rr(Object.keys(e));try{for(o.s();!(n=o.n()).done;){var a=n.value,i=lr[a];null!=i&&i[t]&&(r[a]=e[a])}}catch(e){o.e(e)}finally{o.f()}return r},cr=function(e){return sr(e,\"export\")};function ur(e,t,n,r=(e=>e)){return e*r(.5-t*(.5-n))}function dr(e,t){return[e[0]+t[0],e[1]+t[1]]}function pr(e,t){return[e[0]-t[0],e[1]-t[1]]}function fr(e,t){return[e[0]*t,e[1]*t]}function hr(e){return[e[1],-e[0]]}function mr(e,t){return e[0]*t[0]+e[1]*t[1]}function gr(e,t){return e[0]===t[0]&&e[1]===t[1]}function vr(e,t){return function(e){return e[0]*e[0]+e[1]*e[1]}(pr(e,t))}function br(e){return function(e,t){return[e[0]\/t,e[1]\/t]}(e,function(e){return Math.hypot(e[0],e[1])}(e))}function yr(e,t){return Math.hypot(e[1]-t[1],e[0]-t[0])}function xr(e,t,n){let r=Math.sin(n),o=Math.cos(n),a=e[0]-t[0],i=e[1]-t[1],l=a*r+i*o;return[a*o-i*r+t[0],l+t[1]]}function wr(e,t,n){return dr(e,fr(pr(t,e),n))}function kr(e,t,n){return dr(e,fr(t,n))}var{min:Sr,PI:Er}=Math,jr=Er+1e-4;function Cr(e,t={}){var n;let{size:r=16,smoothing:o=.5,thinning:a=.5,simulatePressure:i=!0,easing:l=(e=>e),start:s={},end:c={},last:u=!1}=t,{cap:d=!0,taper:p=0,easing:f=(e=>e*(2-e))}=s,{cap:h=!0,taper:m=0,easing:g=(e=>--e*e*e+1)}=c;if(0===e.length)return[];let v,b=e[e.length-1].runningLength,y=Math.pow(r*o,2),x=[],w=[],k=e.slice(0,10).reduce(((e,t)=>{let n=t.pressure;if(i){let o=Sr(1,t.distance\/r),a=Sr(1,1-o);n=Sr(1,e+.275*o*(a-e))}return(e+n)\/2}),e[0].pressure),S=ur(r,a,e[e.length-1].pressure,l),E=e[0].vector,j=e[0].point,C=j,O=j,M=C,I=!0;for(let t=0;t<e.length-1;t++){let{pressure:o}=e[t],{point:s,vector:c,distance:u,runningLength:d}=e[t];if(t>0&&I&&d<r\/2)continue;if(I&&(I=!1),a){if(i){let e=Sr(1,u\/r),t=Sr(1,1-e);o=Sr(1,k+.275*e*(t-k))}S=ur(r,a,o,l)}else S=r\/2;void 0===v&&(v=S);let h=d<p?f(d\/p):1,P=b-d<m?g((b-d)\/m):1;S=Math.max(.01,S*Math.min(h,P));let T=(null==(n=e[t+1])?void 0:n.vector)||c,A=mr(c,T);if(A<0){let e=fr(hr(E),S);for(let t=1\/13,n=0;n<=1;n+=t)M=xr(dr(s,e),s,jr*-n),O=xr(pr(s,e),s,jr*n),w.push(M),x.push(O);j=O,C=M;continue}let L=fr(hr(wr(T,c,A)),S);O=pr(s,L),M=dr(s,L);let _=t<2||A<.25;(_||vr(j,O)>y)&&(x.push(O),j=O),(_||vr(C,M)>y)&&(w.push(M),C=M),k=o,E=c}let P=e[0],T=e[e.length-1],A=I||w.length<2||x.length<2;if(A&&(!p&&!m||u)){let t=0,n=gr(P.point,T.point)?dr(P.point,[1,1]):T.point;for(let n=0;n<e.length;n++){let{pressure:o,runningLength:i}=e[n];if(i>r){t=ur(r,a,o,l);break}}let o=kr(P.point,hr(br(pr(P.point,n))),-(t||S)),i=[];for(let e=1\/13,t=e;t<=1;t+=e)i.push(xr(o,P.point,2*jr*t));return i}let L=[],_=[];if(x.length>1&&w.length>1){M=w[1];for(let e=1;e<x.length;e++)if(!gr(M,x[e])){O=x[e];break}if(d||p){if(p||m&&A)L.push(P.point.slice(0,2));else if(!gr(M,O)){let e=kr(P.point,br(pr(O,M)),-yr(M,O)\/2);for(let t=1\/13,n=t;n<=1;n+=t){let t=xr(e,P.point,jr*n);if(yr(t,O)<1)break;L.push(t)}x.shift(),w.shift()}}else if(!gr(M,O)){let e=br(pr(O,M)),t=yr(M,O)\/2;L.push(kr(P.point,e,-t),kr(P.point,e,.95*-t),kr(P.point,e,.95*t),kr(P.point,e,t)),x.shift(),w.shift()}let e=function(e,t){return fr(dr(e,t),.5)}(x[x.length-1],w[w.length-1]),t=T.point,n=hr(br(pr(t,e)));if(h||m)if(m||p&&A)_.push(t.slice(0,2));else{let e=kr(t,n,S);for(let n=1\/29,r=0;r<=1;r+=n){let n=xr(e,t,3*jr*r);_.push(n)}}else{let r=wr(e,t,.95),o=.95*S;_.push(kr(r,n,o),kr(t,n,o),kr(t,n,-o),kr(r,n,-o))}}return x.concat(_,w.reverse(),L)}function Or(e,t={}){return Cr(function(e,t={}){var n;let{streamline:r=.5,size:o=16,last:a=!1}=t;if(0===e.length)return[];let i=.15+.85*(1-r),l=Array.isArray(e[0])?e:e.map((({x:e,y:t,pressure:n=.5})=>[e,t,n]));1===l.length&&l.push([...dr(l[0],[1,1]),l[0][2]||.5]);let s=[{point:[l[0][0],l[0][1]],pressure:l[0][2]||.25,vector:[1,1],distance:0,runningLength:0}],c=!1,u=0,d=s[0],p=l.length-1;for(let e=1;e<l.length;e++){let t=a&&e===p?l[e]:wr(d.point,l[e],i);if(gr(d.point,t))continue;let n=yr(t,d.point);if(u+=n,e<p&&!c){if(u<o)continue;c=!0}d={point:t,pressure:l[e][2]||.5,vector:br(pr(d.point,t)),distance:n,runningLength:u},s.push(d)}return s[0].vector=(null==(n=s[1])?void 0:n.vector)||[0,0],s}(e,t),t)}function Mr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ir(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Mr(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Mr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Pr=ir(),Tr=function(e){return[8,8+e]},Ar=function(e){return[1.5,6+e]},Lr=function(e){return\"freedraw\"===e.type?12*e.strokeWidth:20},_r=function(e,t,n){switch(n.globalAlpha=e.opacity\/100,e.type){case\"rectangle\":case\"diamond\":case\"ellipse\":n.lineJoin=\"round\",n.lineCap=\"round\",t.draw(Br(e));break;case\"arrow\":case\"line\":n.lineJoin=\"round\",n.lineCap=\"round\",Br(e).forEach((function(e){t.draw(e)}));break;case\"freedraw\":n.save(),n.fillStyle=e.strokeColor;var r=function(e){return Wr.get(e)}(e);n.fillStyle=e.strokeColor,n.fill(r),n.restore();break;default:if(!Xe(e))throw new Error(\"Unimplemented type \".concat(e.type));var o=Qn(e.text),a=o&&!n.canvas.isConnected;a&&document.body.appendChild(n.canvas),n.canvas.setAttribute(\"dir\",o?\"rtl\":\"ltr\"),n.save(),n.font=Nn(e),n.fillStyle=e.strokeColor,n.textAlign=e.textAlign;for(var i=e.text.replace(\/\\r\\n?\/g,\"\\n\").split(\"\\n\"),l=e.height\/i.length,s=e.height-e.baseline,c=\"center\"===e.textAlign?e.width\/2:\"right\"===e.textAlign?e.width:0,u=0;u<i.length;u++)n.fillText(i[u],c,(u+1)*l-s);n.restore(),a&&n.canvas.remove()}n.globalAlpha=1},Dr=new WeakMap,zr=new WeakMap,Br=function(e){return zr.get(e)},Hr=function(e){return zr.delete(e)},Nr=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n={seed:e.seed,strokeLineDash:\"dashed\"===e.strokeStyle?Tr(e.strokeWidth):\"dotted\"===e.strokeStyle?Ar(e.strokeWidth):void 0,disableMultiStroke:\"solid\"!==e.strokeStyle,strokeWidth:\"solid\"!==e.strokeStyle?e.strokeWidth+.5:e.strokeWidth,fillWeight:e.strokeWidth\/2,hachureGap:4*e.strokeWidth,roughness:e.roughness,stroke:e.strokeColor,preserveVertices:t};switch(e.type){case\"rectangle\":case\"diamond\":case\"ellipse\":return n.fillStyle=e.fillStyle,n.fill=\"transparent\"===e.backgroundColor?void 0:e.backgroundColor,\"ellipse\"===e.type&&(n.curveFitting=1),n;case\"line\":return lt(e.points)&&(n.fillStyle=e.fillStyle,n.fill=\"transparent\"===e.backgroundColor?void 0:e.backgroundColor),n;case\"freedraw\":case\"arrow\":return n;default:throw new Error(\"Unimplemented type \".concat(e.type))}},Rr=function(e,t){var n=zr.get(e)||null;if(!n){switch(Dr.delete(e),e.type){case\"rectangle\":if(\"round\"===e.strokeSharpness){var r=e.width,o=e.height,a=.25*Math.min(r,o);n=t.path(\"M \".concat(a,\" 0 L \").concat(r-a,\" 0 Q \").concat(r,\" 0, \").concat(r,\" \").concat(a,\" L \").concat(r,\" \").concat(o-a,\" Q \").concat(r,\" \").concat(o,\", \").concat(r-a,\" \").concat(o,\" L \").concat(a,\" \").concat(o,\" Q 0 \").concat(o,\", 0 \").concat(o-a,\" L 0 \").concat(a,\" Q 0 0, \").concat(a,\" 0\"),Nr(e,!0))}else n=t.rectangle(0,0,e.width,e.height,Nr(e));break;case\"diamond\":var i=R(function(e){var t=Math.floor(e.width\/2)+1,n=e.width,r=Math.floor(e.height\/2)+1;return[t,0,n,r,t,e.height,0,r]}(e),8),l=i[0],s=i[1],c=i[2],u=i[3],d=i[4],p=i[5],f=i[6],h=i[7];n=t.polygon([[l,s],[c,u],[d,p],[f,h]],Nr(e));break;case\"ellipse\":n=t.ellipse(e.width\/2,e.height\/2,e.width,e.height,Nr(e));break;case\"line\":case\"arrow\":var m=Nr(e),g=e.points.length?e.points:[[0,0]];if(n=\"sharp\"===e.strokeSharpness?m.fill?[t.polygon(g,m)]:[t.linearPath(g,m)]:[t.curve(g,m)],\"arrow\"===e.type){var v=e.startArrowhead,b=void 0===v?null:v,y=e.endArrowhead,x=void 0===y?\"arrow\":y,w=function(e,n,r,o){var a=function(e,t,n,r){var o=vt(t[0]);if(o.length<1)return null;var a=\"start\"===n?1:o.length-1,i=o[a].data,l=[i[4],i[5]],s=[i[2],i[3]],c=[i[0],i[1]],u=o[a-1],d=[0,0];\"move\"===u.op?d=u.data:\"bcurveTo\"===u.op&&(d=[u.data[4],u.data[5]]);var p=function(e,t){return Math.pow(1-e,3)*l[t]+3*e*Math.pow(1-e,2)*s[t]+3*Math.pow(e,2)*(1-e)*c[t]+d[t]*Math.pow(e,3)},f=R(\"start\"===n?d:l,2),h=f[0],m=f[1],g=[p(.3,0),p(.3,1)],v=g[0],b=g[1],y=Math.hypot(h-v,m-b),x=(h-v)\/y,w=(m-b)\/y,k={arrow:30,bar:15,dot:15}[r],S=0;if(\"arrow\"===r){var E=R(e.points[e.points.length-1],2),j=E[0],C=E[1],O=R(e.points.length>1?e.points[e.points.length-2]:[0,0],2),M=O[0],I=O[1];S=Math.hypot(j-M,C-I)}else for(var P=0;P<e.points.length;P++){var T=R(e.points[P-1]||[0,0],2),A=T[0],L=T[1],_=R(e.points[P],2),D=_[0],z=_[1];S+=Math.hypot(D-A,z-L)}var B=Math.min(k,S\/2),H=h-x*B,N=m-w*B;if(\"dot\"===r)return[h,m,Math.hypot(N-m,H-h)+e.strokeWidth];var F={arrow:20,bar:90}[r],V=R(rt(H,N,h,m,-F*Math.PI\/180),2),G=V[0],U=V[1],K=R(rt(H,N,h,m,F*Math.PI\/180),2);return[h,m,G,U,K[0],K[1]]}(e,n,r,o);if(null===a)return[];if(\"dot\"===o){var i=R(a,3),l=i[0],s=i[1],c=i[2];return[t.circle(l,s,c,Ir(Ir({},m),{},{fill:e.strokeColor,fillStyle:\"solid\",stroke:\"none\"}))]}var u=R(a,6),d=u[0],p=u[1],f=u[2],h=u[3],g=u[4],v=u[5];if(\"dotted\"===e.strokeStyle){var b=Ar(e.strokeWidth-1);m.strokeLineDash=[b[0],b[1]-1]}else delete m.strokeLineDash;return[t.line(f,h,d,p,m),t.line(g,v,d,p,m)]};if(null!==b){var k,S=w(e,n,\"start\",b);(k=n).push.apply(k,F(S))}if(null!==x){var E,j=w(e,n,\"end\",x);(E=n).push.apply(E,F(j))}}break;case\"freedraw\":Zr(e),n=[];break;case\"text\":n=[]}zr.set(e,n)}},Fr=function(e,t){var n=t?t.zoom:Pr.zoom,r=Dr.get(e),o=r&&r.canvasZoom!==n.value&&!(null!=t&&t.shouldCacheIgnoreZoom);if(!r||o){var a=function(e,t){var n=document.createElement(\"canvas\"),r=n.getContext(\"2d\"),o=Lr(e),a=0,i=0;if(Qe(e)||qe(e)){var l=R(gt(e),4),s=l[0],c=l[1],u=l[2],d=l[3];s=Math.floor(s),u=Math.ceil(u),c=Math.floor(c),d=Math.ceil(d),n.width=Vn(s,u)*window.devicePixelRatio*t.value+o*t.value*2,n.height=Vn(c,d)*window.devicePixelRatio*t.value+o*t.value*2,a=e.x>s?Math.floor(Vn(e.x,s))*window.devicePixelRatio*t.value:0,i=e.y>c?Math.floor(Vn(e.y,c))*window.devicePixelRatio*t.value:0,r.translate(a,i)}else n.width=e.width*window.devicePixelRatio*t.value+o*t.value*2,n.height=e.height*window.devicePixelRatio*t.value+o*t.value*2;r.save(),r.translate(o*t.value,o*t.value),r.scale(window.devicePixelRatio*t.value,window.devicePixelRatio*t.value);var p=Ke.canvas(n);return _r(e,p,r),r.restore(),{element:e,canvas:n,canvasZoom:t.value,canvasOffsetX:a,canvasOffsetY:i}}(e,n);return Dr.set(e,a),a}return r},Vr=function(e,t,n,r){var o=e.element,a=Lr(o),i=R(gt(o),4),l=i[0],s=i[1],c=i[2],u=i[3];qe(o)&&(l=Math.floor(l),c=Math.ceil(c),s=Math.floor(s),u=Math.ceil(u));var d=((l+c)\/2+r.scrollX)*window.devicePixelRatio,p=((s+u)\/2+r.scrollY)*window.devicePixelRatio;n.save(),n.scale(1\/window.devicePixelRatio,1\/window.devicePixelRatio),n.translate(d,p),n.rotate(o.angle),n.drawImage(e.canvas,-(c-l)\/2*window.devicePixelRatio-a*e.canvasZoom\/e.canvasZoom,-(u-s)\/2*window.devicePixelRatio-a*e.canvasZoom\/e.canvasZoom,e.canvas.width\/e.canvasZoom,e.canvas.height\/e.canvasZoom),n.restore()},Gr=function(e,t,n,r,o){var a=t.generator;switch(e.type){case\"selection\":n.save(),n.translate(e.x+o.scrollX,e.y+o.scrollY),n.fillStyle=\"rgba(0, 0, 255, 0.10)\",n.fillRect(0,0,e.width,e.height),n.restore();break;case\"freedraw\":if(Rr(e,a),r){var i=Fr(e,o);Vr(i,0,n,o)}else{var l=R(gt(e),4),s=l[0],c=l[1],u=l[2],d=l[3],p=(s+u)\/2+o.scrollX,f=(c+d)\/2+o.scrollY,h=(u-s)\/2-(e.x-s),m=(d-c)\/2-(e.y-c);n.save(),n.translate(p,f),n.rotate(e.angle),n.translate(-h,-m),_r(e,t,n),n.restore()}break;case\"rectangle\":case\"diamond\":case\"ellipse\":case\"line\":case\"arrow\":case\"text\":if(Rr(e,a),r){var g=Fr(e,o);Vr(g,0,n,o)}else{var v=R(gt(e),4),b=v[0],y=v[1],x=v[2],w=v[3],k=(b+x)\/2+o.scrollX,S=(y+w)\/2+o.scrollY,E=(x-b)\/2-(e.x-b),j=(w-y)\/2-(e.y-y);n.save(),n.translate(k,S),n.rotate(e.angle),n.translate(-E,-j),_r(e,t,n),n.restore()}break;default:throw new Error(\"Unimplemented type \".concat(e.type))}},Ur=function(e,t,n){if(void 0===n)return e.draw(t);var r={sets:t.sets,shape:t.shape,options:Ir(Ir({},t.options),{},{fixedDecimalPlaceDigits:n})};return e.draw(r)},Kr=function(e,t,n,r,o){var a=R(gt(e),4),i=a[0],l=a[1],s=a[2],u=a[3],d=(s-i)\/2-(e.x-i),p=(u-l)\/2-(e.y-l),f=180*e.angle\/Math.PI,h=t.generator;switch(e.type){case\"selection\":throw new Error(\"Selection rendering is not supported for SVG\");case\"rectangle\":case\"diamond\":case\"ellipse\":Rr(e,h);var m=Ur(t,Br(e),c.zK),g=e.opacity\/100;1!==g&&(m.setAttribute(\"stroke-opacity\",\"\".concat(g)),m.setAttribute(\"fill-opacity\",\"\".concat(g))),m.setAttribute(\"stroke-linecap\",\"round\"),m.setAttribute(\"transform\",\"translate(\".concat(r||0,\" \").concat(o||0,\") rotate(\").concat(f,\" \").concat(d,\" \").concat(p,\")\")),n.appendChild(m);break;case\"line\":case\"arrow\":Rr(e,h);var v=n.ownerDocument.createElementNS(Ln,\"g\"),b=e.opacity\/100;v.setAttribute(\"stroke-linecap\",\"round\"),Br(e).forEach((function(n){var a=Ur(t,n,c.zK);1!==b&&(a.setAttribute(\"stroke-opacity\",\"\".concat(b)),a.setAttribute(\"fill-opacity\",\"\".concat(b))),a.setAttribute(\"transform\",\"translate(\".concat(r||0,\" \").concat(o||0,\") rotate(\").concat(f,\" \").concat(d,\" \").concat(p,\")\")),\"line\"===e.type&&lt(e.points)&&\"transparent\"!==e.backgroundColor&&a.setAttribute(\"fill-rule\",\"evenodd\"),v.appendChild(a)})),n.appendChild(v);break;case\"freedraw\":Zr(e);var y=e.opacity\/100,x=n.ownerDocument.createElementNS(Ln,\"g\");1!==y&&(x.setAttribute(\"stroke-opacity\",\"\".concat(y)),x.setAttribute(\"fill-opacity\",\"\".concat(y))),x.setAttribute(\"transform\",\"translate(\".concat(r||0,\" \").concat(o||0,\") rotate(\").concat(f,\" \").concat(d,\" \").concat(p,\")\"));var w=n.ownerDocument.createElementNS(Ln,\"path\");x.setAttribute(\"stroke\",\"none\"),x.setAttribute(\"fill\",e.strokeColor),w.setAttribute(\"d\",Yr(e)),x.appendChild(w),n.appendChild(x);break;default:if(!Xe(e))throw new Error(\"Unimplemented type \".concat(e.type));var k=e.opacity\/100,S=n.ownerDocument.createElementNS(Ln,\"g\");1!==k&&(S.setAttribute(\"stroke-opacity\",\"\".concat(k)),S.setAttribute(\"fill-opacity\",\"\".concat(k))),S.setAttribute(\"transform\",\"translate(\".concat(r||0,\" \").concat(o||0,\") rotate(\").concat(f,\" \").concat(d,\" \").concat(p,\")\"));for(var E=e.text.replace(\/\\r\\n?\/g,\"\\n\").split(\"\\n\"),j=e.height\/E.length,C=e.height-e.baseline,O=\"center\"===e.textAlign?e.width\/2:\"right\"===e.textAlign?e.width:0,M=Qn(e.text)?\"rtl\":\"ltr\",I=\"center\"===e.textAlign?\"middle\":\"right\"===e.textAlign||\"rtl\"===M?\"end\":\"start\",P=0;P<E.length;P++){var T=n.ownerDocument.createElementNS(Ln,\"text\");T.textContent=E[P],T.setAttribute(\"x\",\"\".concat(O)),T.setAttribute(\"y\",\"\".concat((P+1)*j-C)),T.setAttribute(\"font-family\",Hn(e)),T.setAttribute(\"font-size\",\"\".concat(e.fontSize,\"px\")),T.setAttribute(\"fill\",e.strokeColor),T.setAttribute(\"text-anchor\",I),T.setAttribute(\"style\",\"white-space: pre;\"),T.setAttribute(\"direction\",M),S.appendChild(T)}n.appendChild(S)}},Wr=new WeakMap([]);function Zr(e){var t=Yr(e),n=new Path2D(t);return Wr.set(e,n),n}function Yr(e){return function(e){if(!e.length)return\"\";var t=e.length-1;return e.reduce((function(e,n,r,o){return r===t?e.push(n,Xr(n,o[0]),\"L\",o[0],\"Z\"):e.push(n,Xr(n,o[r+1])),e}),[\"M\",e[0],\"Q\"]).join(\" \").replaceAll(qr,\"$1\")}(Or(e.simulatePressure?e.points:e.points.length?e.points.map((function(t,n){var r=R(t,2);return[r[0],r[1],e.pressures[n]]})):[[0,0,.5]],{simulatePressure:e.simulatePressure,size:4.25*e.strokeWidth,thinning:.6,smoothing:.5,streamline:.5,easing:function(e){return Math.sin(e*Math.PI\/2)},last:!1}))}function Xr(e,t){return[(e[0]+t[0])\/2,(e[1]+t[1])\/2]}var qr=\/(\\s?[A-Z]?,?-?[0-9]*\\.[0-9]{0,2})(([0-9]|e|-)*)\/g;var $r=function(e){return\"string\"==typeof e},Qr=function(){function e(){p(this,e),this.callbacks=new Set,this.nonDeletedElements=[],this.elements=[],this.elementsMap=new Map}return h(e,[{key:\"getElementsIncludingDeleted\",value:function(){return this.elements}},{key:\"getElements\",value:function(){return this.nonDeletedElements}},{key:\"getElement\",value:function(e){return this.elementsMap.get(e)||null}},{key:\"getNonDeletedElement\",value:function(e){var t=this.getElement(e);return t&&$i(t)?t:null}},{key:\"getNonDeletedElements\",value:function(e){var t=this,n=[];return e.forEach((function(e){var r=t.getNonDeletedElement(e);null!=r&&n.push(r)})),n}},{key:\"replaceAllElements\",value:function(t){var n=this;this.elements=t,this.elementsMap.clear(),t.forEach((function(t){n.elementsMap.set(t.id,t),e.mapElementToScene(t,n)})),this.nonDeletedElements=qi(this.elements),this.informMutation()}},{key:\"informMutation\",value:function(){for(var e=0,t=Array.from(this.callbacks);e<t.length;e++){(0,t[e])()}}},{key:\"addCallback\",value:function(e){var t=this;if(this.callbacks.has(e))throw new Error;return this.callbacks.add(e),function(){if(!t.callbacks.has(e))throw new Error;t.callbacks.delete(e)}}},{key:\"destroy\",value:function(){var t=this;e.sceneMapById.forEach((function(n,r){n===t&&e.sceneMapById.delete(r)})),this.callbacks.clear()}}],[{key:\"mapElementToScene\",value:function(e,t){$r(e)?this.sceneMapById.set(e,t):this.sceneMapByElement.set(e,t)}},{key:\"getScene\",value:function(e){return $r(e)?this.sceneMapById.get(e)||null:this.sceneMapByElement.get(e)||null}}]),e}();Qr.sceneMapByElement=new WeakMap,Qr.sceneMapById=new Map;var Jr=Qr,eo=new oe(Date.now()),to=function(){return Math.floor(eo.next()*Math.pow(2,31))},no=function(){return Ye()};function ro(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function oo(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ro(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ro(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ao=function(e,t){var n,r=!1,o=t.points;for(var a in void 0!==o&&(t=oo(oo({},function(e){var t=e.map((function(e){return e[0]})),n=e.map((function(e){return e[1]}));return{width:Math.max.apply(Math,F(t))-Math.min.apply(Math,F(t)),height:Math.max.apply(Math,F(n))-Math.min.apply(Math,F(n))}}(o)),t)),t){var i=t[a];if(void 0!==i){if(e[a]===i&&(\"object\"!==v(i)||null===i||\"groupIds\"===a))continue;if(\"points\"===a){var l=e[a],s=i;if(l.length===s.length){for(var c=!1,u=l.length;--u;){var d=l[u],p=s[u];if(d[0]!==p[0]||d[1]!==p[1]){c=!0;break}}if(!c)continue}}e[a]=i,r=!0}}r&&(void 0===t.height&&void 0===t.width&&void 0===o||Hr(e),e.version++,e.versionNonce=to(),null===(n=Jr.getScene(e))||void 0===n||n.informMutation())},io=function(e,t){var n=!1;for(var r in t){var o=t[r];if(void 0!==o){if(e[r]===o&&(\"object\"!==v(o)||null===o||\"groupIds\"===r))continue;n=!0}}return n?oo(oo(oo({},e),t),{},{version:e.version+1,versionNonce:to()}):e},lo=function(e,t){return e.version=(null!=t?t:e.version)+1,e.versionNonce=to(),e},so=function(e){return Qe(e)||qe(e)?e.points.length<2:0===e.width&&0===e.height},co=function(e,t,n){var r=Math.abs(t),o=Math.abs(n);if(\"line\"===e||\"arrow\"===e||\"freedraw\"===e){var a=Math.round(Math.atan(o\/r)\/c.ay)*c.ay;0===a?n=0:a===Math.PI\/2?t=0:n=Math.round(r*Math.tan(a))*Math.sign(n)||n}else\"selection\"!==e&&(n=r*Math.sign(n));return{width:t,height:n}},uo=function(e){var t={width:e.width,height:e.height,x:e.x,y:e.y};if(e.width<0){var n=Math.abs(e.width);t.width=n,t.x=e.x-n}if(e.height<0){var r=Math.abs(e.height);t.height=r,t.y=e.y-r}return t};function po(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function fo(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return ho(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return ho(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function ho(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function mo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function go(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?mo(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):mo(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var vo=function(e,t,n){var r=n.filter((function(t){return t.groupIds.includes(e)}));return r.length<2?t.selectedGroupIds[e]||t.editingGroupId===e?go(go({},t),{},{selectedGroupIds:go(go({},t.selectedGroupIds),{},V({},e,!1)),editingGroupId:null}):t:go(go({},t),{},{selectedGroupIds:go(go({},t.selectedGroupIds),{},V({},e,!0)),selectedElementIds:go(go({},t.selectedElementIds),Object.fromEntries(r.map((function(e){return[e.id,!0]}))))})},bo=function(e,t){return null!=yo(e,t)},yo=function(e,t){return t.groupIds.filter((function(t){return t!==e.editingGroupId})).find((function(t){return e.selectedGroupIds[t]}))},xo=function(e){return Object.entries(e.selectedGroupIds).filter((function(e){var t=R(e,2);t[0];return t[1]})).map((function(e){var t=R(e,2),n=t[0];t[1];return n}))},wo=function(e,t){var n=go(go({},e),{},{selectedGroupIds:{}}),r=ol(t,e);if(!r.length)return go(go({},n),{},{editingGroupId:null});var o,a=fo(r);try{for(a.s();!(o=a.n()).done;){var i=o.value.groupIds;if(e.editingGroupId){var l=i.indexOf(e.editingGroupId);l>-1&&(i=i.slice(0,l))}if(i.length>0){var s=i[i.length-1];n=vo(s,n,t)}}}catch(e){a.e(e)}finally{a.f()}return n},ko=function(e,t){return e.groupIds.includes(t)},So=function(e,t){return e.filter((function(e){return ko(e,t)}))},Eo=function(e,t,n){var r=F(e),o=n?r.indexOf(n):-1,a=o>-1?o:r.length;return r.splice(a,0,t),r},jo=[\"x\",\"y\",\"strokeColor\",\"backgroundColor\",\"fillStyle\",\"strokeWidth\",\"strokeStyle\",\"roughness\",\"opacity\",\"width\",\"height\",\"angle\",\"groupIds\",\"strokeSharpness\",\"boundElementIds\"];function Co(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Oo(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Co(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Co(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Mo=function(e,t){var n,r,o=t.x,a=t.y,i=t.strokeColor,l=t.backgroundColor,s=t.fillStyle,c=t.strokeWidth,u=t.strokeStyle,d=t.roughness,p=t.opacity,f=t.width,h=void 0===f?0:f,m=t.height,g=void 0===m?0:m,v=t.angle,b=void 0===v?0:v,y=t.groupIds,x=void 0===y?[]:y,w=t.strokeSharpness,k=t.boundElementIds,S=void 0===k?null:k,E=po(t,jo);return{id:E.id||no(),type:e,x:o,y:a,width:h,height:g,angle:b,strokeColor:i,backgroundColor:l,fillStyle:s,strokeWidth:c,strokeStyle:u,roughness:d,opacity:p,groupIds:x,strokeSharpness:w,seed:null!==(n=E.seed)&&void 0!==n?n:to(),version:E.version||1,versionNonce:null!==(r=E.versionNonce)&&void 0!==r?r:0,isDeleted:!1,boundElementIds:S}},Io=function(e){return Mo(e.type,e)},Po=function(e,t){return{x:\"center\"===e.textAlign?t.width\/2:\"right\"===e.textAlign?t.width:0,y:\"middle\"===e.verticalAlign?t.height\/2:0}},To=function(e){var t=Rn(e.text,Nn(e)),n=Po(e,t);return io(Oo(Oo({},Mo(\"text\",e)),{},{text:e.text,fontSize:e.fontSize,fontFamily:e.fontFamily,textAlign:e.textAlign,verticalAlign:e.verticalAlign,x:e.x-n.x,y:e.y-n.y,width:t.width,height:t.height,baseline:t.baseline}),{})},Ao=function(e,t){var n=t.text,r=t.isDeleted;return io(e,Oo({text:n,isDeleted:null!=r?r:e.isDeleted},function(e,t){var n,r,o=Rn(t,Nn(e)),a=o.width,i=o.height,l=o.baseline,s=e.textAlign,c=e.verticalAlign;if(\"center\"===s&&\"middle\"===c){var u=Rn(e.text,Nn(e)),d=Po(e,{width:a-u.width,height:i-u.height});n=e.x-d.x,r=e.y-d.y}else{var p=R(gt(e),4),f=p[0],h=p[1],m=p[2],g=p[3],v=R(Et(e,a,i),4),b=(f-v[0])\/2,y=(h-v[1])\/2,x=(m-v[2])\/2,w=(g-v[3])\/2,k=R(at({s:!0,e:\"center\"===s||\"left\"===s,w:\"center\"===s||\"right\"===s},e.x,e.y,e.angle,b,y,x,w),2);n=k[0],r=k[1]}return{width:a,height:i,x:Number.isFinite(n)?n:e.x,y:Number.isFinite(r)?r:e.y,baseline:l}}(e,n)))},Lo=function(e){return Oo(Oo({},Mo(e.type,e)),{},{points:e.points||[],lastCommittedPoint:null,startBinding:null,endBinding:null,startArrowhead:e.startArrowhead,endArrowhead:e.endArrowhead})},_o=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(null==t||\"object\"!==v(t))return t;if(\"[object Object]\"===Object.prototype.toString.call(t)){var r=\"function\"==typeof t.constructor?Object.create(Object.getPrototypeOf(t)):{};for(var o in t)if(t.hasOwnProperty(o)){if(0===n&&(\"shape\"===o||\"canvas\"===o))continue;r[o]=e(t[o],n+1)}return r}if(Array.isArray(t)){for(var a=t.length,i=new Array(a);a--;)i[a]=e(t[a],n+1);return i}return t},Do=function(e,t,n,r){var o=_o(n);return o.id=no(),o.seed=to(),o.groupIds=function(e,t,n){for(var r=F(e),o=t?e.indexOf(t):-1,a=o>-1?o:e.length,i=0;i<a;i++)r[i]=n(r[i]);return r}(o.groupIds,e,(function(e){return t.has(e)||t.set(e,no()),t.get(e)})),r&&(o=Object.assign(o,r)),o},zo={mouse:8,pen:16,touch:28},Bo={e:!0,s:!0,n:!0,w:!0},Ho={e:!0,s:!0,n:!0,w:!0},No={e:!0,s:!0,n:!0,w:!0,nw:!0,se:!0},Ro={e:!0,s:!0,n:!0,w:!0,ne:!0,sw:!0},Fo=function(e,t,n,r,o,a,i){var l=R(rt(e+n\/2,t+r\/2,o,a,i),2);return[l[0]-n\/2,l[1]-r\/2,n,r]},Vo=function(e,t,n,r){var o=R(e,4),a=o[0],i=o[1],l=o[2],s=o[3],c=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},u=zo[r],d=u\/n.value,p=u\/n.value,f=u\/n.value,h=u\/n.value,m=l-a,g=s-i,v=(a+l)\/2,b=(i+s)\/2,y=4\/n.value,x=(u-8)\/(2*n.value),w={nw:c.nw?void 0:Fo(a-y-f+x,i-y-h+x,d,p,v,b,t),ne:c.ne?void 0:Fo(l+y-x,i-y-h+x,d,p,v,b,t),sw:c.sw?void 0:Fo(a-y-f+x,s+y-x,d,p,v,b,t),se:c.se?void 0:Fo(l+y-x,s+y-x,d,p,v,b,t),rotation:c.rotation?void 0:Fo(a+m\/2-d\/2,i-y-h+x-16\/n.value,d,p,v,b,t)},k=5*zo.mouse\/n.value;return Math.abs(m)>k&&(c.n||(w.n=Fo(a+m\/2-d\/2,i-y-h+x,d,p,v,b,t)),c.s||(w.s=Fo(a+m\/2-d\/2,s+y-x,d,p,v,b,t))),Math.abs(g)>k&&(c.w||(w.w=Fo(a-y-f+x,i+g\/2-p\/2,d,p,v,b,t)),c.e||(w.e=Fo(l+y-x,i+g\/2-p\/2,d,p,v,b,t))),w},Go=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"mouse\",r={};if(\"arrow\"===e.type||\"line\"===e.type||\"freedraw\"===e.type){if(2===e.points.length){var o=R(e.points,2),a=o[1];0===a[0]||0===a[1]?r=Ro:a[0]>0&&a[1]<0?r=No:a[0]>0&&a[1]>0?r=Ro:a[0]<0&&a[1]>0?r=No:a[0]<0&&a[1]<0&&(r=Ro)}}else\"text\"===e.type&&(r=Ho);return Vo(gt(e),e.angle,t,n,r)},Uo=function(e,t){return[0,0,0,0,t,e,1,0]},Ko=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=[0,0,0,0,0,0,0,0];if(t<0||t>7)throw new Error(\"Expected `index` betwen 0 and 7, got `\".concat(t,\"`\"));return 0!==e&&(n[t]=e),n},Wo=function(e){return[e[0],e[1],e[2],e[3],-e[4],-e[5],-e[6],-e[7]]},Zo=function(e,t){return ta(t)?[e[0]-t,e[1],e[2],e[3],e[4],e[5],e[6],e[7]]:[e[0]-t[0],e[1]-t[1],e[2]-t[2],e[3]-t[3],e[4]-t[4],e[5]-t[5],e[6]-t[6],e[7]-t[7]]},Yo=function(e,t){return ta(t)?[e[0]*t,e[1]*t,e[2]*t,e[3]*t,e[4]*t,e[5]*t,e[6]*t,e[7]*t]:[Xo(e,t),t[1]*e[0]+t[0]*e[1]-t[4]*e[2]+t[5]*e[3]+t[2]*e[4]-t[3]*e[5]-t[7]*e[6]-t[6]*e[7],t[2]*e[0]+t[0]*e[2]-t[6]*e[3]+t[3]*e[6],t[3]*e[0]+t[6]*e[2]+t[0]*e[3]-t[2]*e[6],t[4]*e[0]+t[2]*e[1]-t[1]*e[2]+t[7]*e[3]+t[0]*e[4]+t[6]*e[5]-t[5]*e[6]+t[3]*e[7],t[5]*e[0]-t[3]*e[1]+t[7]*e[2]+t[1]*e[3]-t[6]*e[4]+t[0]*e[5]+t[4]*e[6]+t[2]*e[7],t[6]*e[0]+t[3]*e[2]-t[2]*e[3]+t[0]*e[6],t[7]*e[0]+t[6]*e[1]+t[5]*e[2]+t[4]*e[3]+t[3]*e[4]+t[2]*e[5]+t[1]*e[6]+t[0]*e[7]]},Xo=function(e,t){return t[0]*e[0]+t[2]*e[2]+t[3]*e[3]-t[6]*e[6]},qo=function(e,t){return[$o(e,t),e[1]*t[7]+e[4]*t[5]-e[5]*t[4]+e[7]*t[1],e[2]*t[7]-e[4]*t[6]+e[6]*t[4]+e[7]*t[2],e[3]*t[7]+e[5]*t[6]-e[6]*t[5]+e[7]*t[3],e[4]*t[7]+e[7]*t[4],e[5]*t[7]+e[7]*t[5],e[6]*t[7]+e[7]*t[6],e[7]*t[7]]},$o=function(e,t){return e[0]*t[7]+e[1]*t[6]+e[2]*t[5]+e[3]*t[4]+e[4]*t[3]+e[5]*t[2]+e[6]*t[1]+e[7]*t[0]},Qo=function(e){return Math.sqrt(Math.abs(e[0]*e[0]-e[2]*e[2]-e[3]*e[3]+e[6]*e[6]))},Jo=function(e){var t=Qo(e);if(0===t||1===t)return e;var n=e[6]<0?-1:1;return Yo(e,n\/t)},ea=function(e){var t=function(e){return Math.sqrt(Math.abs(e[7]*e[7]-e[5]*e[5]-e[4]*e[4]+e[1]*e[1]))}(e);return 0===t||1===t?e:Yo(e,1\/t)},ta=function(e){return\"number\"==typeof e},na=(Ko(1,1),Ko(1,2),Ko(1,3),Ko(1,4),Ko(1,5),Ko(1,6),Ko(1,7),function(e,t,n){return Jo([0,n,e,t,0,0,0,0])}),ra=function(e,t){return Jo(qo(t,e))},oa=function(e,t){return n=e,[(r=t)[0]*n[0]+r[2]*n[2]+r[3]*n[3]-r[6]*n[6],r[1]*n[0]+r[0]*n[1]-r[4]*n[2]+r[5]*n[3]+r[2]*n[4]-r[3]*n[5]-r[7]*n[6]-r[6]*n[7],r[2]*n[0]+r[0]*n[2]-r[6]*n[3]+r[3]*n[6],r[3]*n[0]+r[6]*n[2]+r[0]*n[3]-r[2]*n[6],r[4]*n[0]+r[7]*n[3]+r[0]*n[4]+r[3]*n[7],r[5]*n[0]+r[7]*n[2]+r[0]*n[5]+r[2]*n[7],r[6]*n[0]+r[0]*n[6],r[7]*n[0]+r[0]*n[7]];var n,r},aa=function(e){var t=R(e,2),n=t[0];return[0,0,0,0,t[1],n,1,0]},ia=function(e){return[e[5],e[4]]},la=function(e,t){return Jo((n=e,[(r=t)[0]*n[0],r[1]*n[0]+r[0]*n[1],r[2]*n[0]+r[0]*n[2],r[3]*n[0]+r[0]*n[3],r[4]*n[0]+r[2]*n[1]-r[1]*n[2]+r[0]*n[4],r[5]*n[0]-r[3]*n[1]+r[1]*n[3]+r[0]*n[5],r[6]*n[0]+r[3]*n[2]-r[2]*n[3]+r[0]*n[6],r[7]*n[0]+r[6]*n[1]+r[5]*n[2]+r[4]*n[3]+r[3]*n[4]+r[2]*n[5]+r[1]*n[6]]));var n,r},sa=function(e,t){return Qo(qo(e,t))},ca=function(e,t){return $o(e,t)},ua=function(e){return[0,0,0,0,e[4],e[5],0,0]},da=function(e,t){return n=Yo(e,Math.sin(t\/2)),r=Math.cos(t\/2),ta(r)?[n[0]+r,n[1],n[2],n[3],n[4],n[5],n[6],n[7]]:[n[0]+r[0],n[1]+r[1],n[2]+r[2],n[3]+r[3],n[4]+r[4],n[5]+r[5],n[6]+r[6],n[7]+r[7]];var n,r},pa=function(e,t){return Jo(Yo(Yo(e,t),Wo(e)))};function fa(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return ha(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return ha(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function ha(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ma=function(e,t,n,r){var o=10\/t.zoom.value;return!ga(e,t,[n,r])&&ba(e,[n,r],o)},ga=function(e,t,n){var r=10\/t.zoom.value,o=\"text\"===e.type?Sa:function(e){if(\"arrow\"===e.type)return!1;if(\"freedraw\"===e.type)return!0;var t=\"transparent\"!==e.backgroundColor;return\"line\"===e.type?t&&lt(e.points):t}(e)?Ea:ja;return wa({element:e,point:n,threshold:r,check:o})},va=function(e,t){return e.selectedElementIds[t.id]},ba=function(e,t,n){var r=R(t,2),o=r[0],a=r[1],i=R(gt(e),4),l=i[0],s=i[1],c=i[2],u=i[3],d=R(rt(o,a,(l+c)\/2,(s+u)\/2,-e.angle),2),p=d[0],f=d[1];return p>l-n&&p<c+n&&f>s-n&&f<u+n},ya=function(e,t){var n=t.x,r=t.y,o=xa(e,e.width,e.height);return wa({element:e,point:[n,r],threshold:o,check:Ca})},xa=function(e,t,n){var r=(\"diamond\"===e.type?1\/Math.sqrt(2):1)*Math.min(t,n);return Math.max(16,Math.min(.25*r,32))},wa=function(e){switch(e.element.type){case\"rectangle\":case\"text\":case\"diamond\":case\"ellipse\":var t=ka(e.element,e.point);return e.check(t,e.threshold);case\"freedraw\":return!!e.check(Oa(e.element,e.point),e.threshold)&&Ta(e.element,e.point,e.threshold);case\"arrow\":case\"line\":return Aa(e);case\"selection\":return console.warn(\"This should not happen, we need to investigate why it does.\"),!1}},ka=function(e,t){switch(e.type){case\"rectangle\":case\"text\":return Oa(e,t);case\"diamond\":return Ma(e,t);case\"ellipse\":return Ia(e,t)}},Sa=function(e,t){return e<0},Ea=function(e,t){return e<t},ja=function(e,t){return Math.abs(e)<t},Ca=function(e,t){return 0<=e&&e<t},Oa=function(e,t){var n=R(La(e,t),4),r=n[1],o=n[2],a=n[3];return Math.max(ca(r,na(0,1,-a)),ca(r,na(1,0,-o)))},Ma=function(e,t){var n=R(La(e,t),4),r=n[1],o=n[2],a=n[3],i=na(a,o,-a*o);return ca(r,i)},Ia=function(e,t){var n=R(Pa(e,t),2),r=n[0],o=n[1];return-function(e){return Math.sign(e[1])}(o)*ca(r,o)},Pa=function(e,t){var n=R(La(e,t),4),r=n[1],o=n[2],a=n[3],i=R(ia(r),2),l=i[0],s=i[1],c=.707,u=.707,d=o,p=a;[0,1,2,3].forEach((function(e){var t=d*c,n=p*u,r=(d*d-p*p)*Math.pow(c,3)\/d,o=(p*p-d*d)*Math.pow(u,3)\/p,a=t-r,i=n-o,f=l-r,h=s-o,m=Math.hypot(i,a),g=Math.hypot(h,f);c=Math.min(1,Math.max(0,(f*m\/g+r)\/d)),u=Math.min(1,Math.max(0,(h*m\/g+o)\/p));var v=Math.hypot(u,c);c\/=v,u\/=v}));var f,h=Uo(d*c,p*u);return[r,oa(ra(r,f=h),f)]},Ta=function(e,t,n){var r,o;if(0===e.angle)r=t[0]-e.x,o=t[1]-e.y;else{var a=R(gt(e),4),i=a[0],l=a[1],s=a[2],c=a[3],u=ot(t,[i+(s-i)\/2,l+(c-l)\/2],-e.angle);r=u[0]-e.x,o=u[1]-e.y}var d,p=R(e.points,2),f=p[0],h=p[1];if(2===e.points.length)return it(f[0],f[1],r,o)<n||it(h[0],h[1],r,o)<n;for(var m=1;m<e.points.length-1;m++){var g=[h[0]-f[0],h[1]-f[1]],v=Math.hypot(g[1],g[0]),b=[g[0]\/v,g[1]\/v],y=[r-f[0],o-f[1]],x=(y[0]*b[0]+y[1]*b[1])\/Math.hypot(b[1],b[0]);d=[f[0]+b[0]*x,f[1]+b[1]*x];var w=it(d[0],d[1],f[0],f[1]),k=it(d[0],d[1],h[0],h[1]);if(d=k<w&&w>v?h:w<k&&k>v?f:d,Math.hypot(o-d[1],r-d[0])<n)return!0;f=h,h=e.points[m+1]}return!1},Aa=function(e){var t=e.element,n=e.threshold;if(!Br(t))return!1;var r=R(La(e.element,e.point),4),o=r[0],a=r[1],i=r[2],l=r[3],s=na(0,1,-l),c=na(1,0,-i);if(!Ea(ca(a,s),n)||!Ea(ca(a,c),n))return!1;var u=R(ia(o),2),d=u[0],p=u[1],f=Br(t);if(e.check===Ea&&f.some((function(e){return Ka(e,d,p,t.strokeSharpness)})))return!0;return f.some((function(e){return Wa(e,d,p,n)}))},La=function(e,t){var n=aa(t),r=gt(e),o=Da(r),a=da(o,e.angle),i=pa(a,n),l=function(e){return[0,0,0,0,Math.abs(e[4]),Math.abs(e[5]),1,0]}(Zo(i,ua(o))),s=function(e,t){return[0,0,0,0,t,e,0,0]}(e.x,e.y),c=Zo(i,s),u=R(r,4),d=u[0],p=u[1];return[c,l,(u[2]-d)\/2,(u[3]-p)\/2]},_a=function(e){var t=gt(e),n=Da(t),r=da(n,e.angle),o=Wo(function(e){return[1,0,0,0,-.5*e[5],.5*e[4],0,0]}(ua(n)));return Yo(o,r)},Da=function(e){var t=R(e,4),n=t[0],r=t[1],o=t[2],a=t[3];return Uo((n+o)\/2,(r+a)\/2)},za=function(e,t,n){var r=_a(e),o=pa(r,aa(t)),a=pa(r,aa(n)),i=ra(o,a),l=e.height\/e.width,s=e.width\/2,c=e.height\/2,u=i[2],d=i[3],p=i[1],f=Math.abs(d),h=Math.abs(u);switch(e.type){case\"rectangle\":case\"text\":return p\/(s*(h+l*f));case\"diamond\":return f<h?p\/(h*s):p\/(f*c);case\"ellipse\":return p\/(s*Math.sqrt(Math.pow(u,2)+Math.pow(l,2)*Math.pow(d,2)))}},Ba=function(e,t,n){var r,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;switch(e.type){case\"rectangle\":case\"text\":case\"diamond\":var a=Ha(e);r=a.flatMap((function(e,n){var r=[e,a[(n+1)%4]];return Na(t,Ra(r,o))})).concat(a.flatMap((function(e){return Va(e,o,t)})));break;case\"ellipse\":r=Fa(e,o,t)}if(r.length<2)return[];var i=r.sort((function(e,t){return sa(e,n)-sa(t,n)}));return[i[0],i[i.length-1]]},Ha=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=t*e.width\/2,r=t*e.height\/2;switch(e.type){case\"rectangle\":case\"text\":return[Uo(n,r),Uo(n,-r),Uo(-n,-r),Uo(-n,r)];case\"diamond\":return[Uo(0,r),Uo(n,0),Uo(0,-r),Uo(-n,0)]}},Na=function(e,t){var n=R(t,2),r=n[0],o=n[1];return ca(r,e)*ca(o,e)>=0?[]:[la(e,ra(r,o))]},Ra=function(e,t){var n=R(e,2),r=n[0],o=n[1],a=function(e,t){var n=.5*t;return[1,0,0,0,n*e[4],n*e[5],0,0]}(function(e,t){return ea([0,0,0,0,t[4]-e[4],t[5]-e[5],0,0])}(r,o),t);return[pa(a,r),pa(a,o)]},Fa=function(e,t,n){var r=e.width\/2+t,o=e.height\/2+t,a=n[2],i=n[3],l=n[1],s=r*r*a*a+o*o*i*i,c=s-l*l;if(0===s||c<=0)return[];var u=Math.sqrt(c),d=-r*r*a*l,p=-o*o*i*l;return[Uo((d+r*o*i*u)\/s,(p-r*o*a*u)\/s),Uo((d-r*o*i*u)\/s,(p+r*o*a*u)\/s)]},Va=function(e,t,n){if(0===t)return 0===ca(n,e)?[e]:[];var r=n[2],o=n[3],a=n[1],i=R(ia(e),2),l=i[0],s=i[1],c=r*r+o*o,u=t*t*c-Math.pow(r*l+o*s+a,2);if(0===c||u<=0)return[];var d=Math.sqrt(u),p=l*o*o-s*r*o-r*a,f=s*r*r-l*r*o-o*a;return[Uo((p+o*d)\/c,(f-r*d)\/c),Uo((p-o*d)\/c,(f+r*d)\/c)]},Ga=function(e,t,n){var r=Math.abs(t),o=e.width*r\/2,a=e.height*r\/2,i=Math.sign(t),l=R(ia(n),2),s=l[0],c=l[1],u=0===c?1e-4:c,d=Math.pow(s,2)*Math.pow(a,2)+Math.pow(u,2)*Math.pow(o,2),p=(-s*Math.pow(a,2)+i*u*Math.sqrt(Math.max(0,d-Math.pow(o,2)*Math.pow(a,2))))\/d,f=(-p*s-1)\/u,h=-Math.pow(o,2)*p\/(Math.pow(f,2)*Math.pow(a,2)+Math.pow(p,2)*Math.pow(o,2));return Uo(h,(-p*h-1)\/f)},Ua=function(e,t,n){var r=Math.abs(t),o=Math.sign(t),a=Ha(e,r),i=0,l=null;return a.forEach((function(e){var t=o*ra(n,e)[1];t>i&&(i=t,l=e)})),l},Ka=function(e,t,n,r){var o,a=[],i=!1,l=fa(vt(e));try{for(l.s();!(o=l.n()).done;){var s=o.value;\"move\"===s.op?(i=!i)&&a.push([s.data[0],s.data[1]]):\"bcurveTo\"===s.op&&i&&(a.push([s.data[0],s.data[1]]),a.push([s.data[2],s.data[3]]),a.push([s.data[4],s.data[5]]))}}catch(e){l.e(e)}finally{l.f()}if(a.length>=4){if(\"sharp\"===r)return st(a,t,n);var c=Ne(a,10,5);return st(c,t,n)}return!1},Wa=function(e,t,n,r){var o=vt(e),a=[0,0];return o.some((function(e,o){var i=e.op,l=e.data;if(\"move\"===i)a=l;else if(\"bcurveTo\"===i){var s=[l[0],l[1]],c=[l[2],l[3]],u=[l[4],l[5]],d=a;return a=u,function(e,t,n,r,o,a){for(var i=R(o,2),l=i[0],s=i[1],c=function(o,a){return Math.pow(1-o,3)*r[a]+3*o*Math.pow(1-o,2)*n[a]+3*Math.pow(o,2)*(1-o)*t[a]+e[a]*Math.pow(o,3)},u=0;u<=1;){var d=c(u,0),p=c(u,1);if(Math.sqrt(Math.pow(d-l,2)+Math.pow(p-s,2))<a)return!0;u+=.01}return!1}(d,s,c,u,[t,n],r)}return!1}))},Za=[\"rotation\"],Ya=function(e,t,n){return t>=e[0]&&t<=e[0]+e[2]&&n>=e[1]&&n<=e[1]+e[3]},Xa=function(e,t,n,r,o,a){return e.reduce((function(e,i){if(e)return e;var l=function(e,t,n,r,o,a){if(!t.selectedElementIds[e.id])return!1;var i=Go(e,o,a),l=i.rotation,s=po(i,Za);if(l&&Ya(l,n,r))return\"rotation\";var c=Object.keys(s).filter((function(e){var t=s[e];return!!t&&Ya(t,n,r)}));return c.length>0&&c[0]}(i,t,n,r,o,a);return l?{element:i,transformHandleType:l}:null}),null)},qa=function(e,t,n,r,o){var a=R(e,4),i=a[0],l=a[1],s=a[2],c=a[3],u=Vo([i,l,s,c],0,r,o,Bo);return Object.keys(u).find((function(e){var r=u[e];return r&&Ya(r,t,n)}))||!1},$a=[\"ns\",\"nesw\",\"ew\",\"nwse\"],Qa=function(e){var t=e.element,n=e.transformHandleType,r=t&&Math.sign(t.height)*Math.sign(t.width)==-1,o=null;switch(n){case\"n\":case\"s\":o=\"ns\";break;case\"w\":case\"e\":o=\"ew\";break;case\"nw\":case\"se\":o=r?\"nesw\":\"nwse\";break;case\"ne\":case\"sw\":o=r?\"nwse\":\"nesw\";break;case\"rotation\":return\"grab\"}return o&&t&&(o=function(e,t){var n=$a.indexOf(e);if(n>=0){var r=Math.round(t\/(Math.PI\/4));e=$a[(n+r)%$a.length]}return e}(o,t.angle)),o?\"\".concat(o,\"-resize\"):\"\"};function Ja(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ei(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ja(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ja(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ti=function(){function e(t,n){p(this,e),this.elementId=t.id,Jr.mapElementToScene(this.elementId,n),e.normalizePoints(t),this.activePointIndex=null,this.lastUncommittedPoint=null,this.isDragging=!1,this.pointerOffset={x:0,y:0},this.startBindingElement=\"keep\",this.endBindingElement=\"keep\"}return h(e,null,[{key:\"getElement\",value:function(e){var t,n=null===(t=Jr.getScene(e))||void 0===t?void 0:t.getNonDeletedElement(e);return n||null}},{key:\"handlePointDragging\",value:function(t,n,r,o,a){if(!t.editingLinearElement)return!1;var i=t.editingLinearElement,l=i.activePointIndex,s=i.elementId,c=i.isDragging,u=e.getElement(s);if(!u)return!1;if(null!=l&&l>-1){!1===c&&n({editingLinearElement:ei(ei({},i),{},{isDragging:!0})});var d=e.createPointAt(u,r-i.pointerOffset.x,o-i.pointerOffset.y,t.gridSize);return e.movePoint(u,l,d),et(u)&&a(u,0===l?\"start\":\"end\"),!0}return!1}},{key:\"handlePointerUp\",value:function(t,n,r){var o=n.elementId,a=n.activePointIndex,i=n.isDragging,l=e.getElement(o);if(!l)return n;var s={};!i||0!==a&&a!==l.points.length-1||(lt(l.points,r.zoom.value)&&e.movePoint(l,a,0===a?l.points[l.points.length-1]:l.points[0]),s=V({},0===a?\"startBindingElement\":\"endBindingElement\",ri(r)?hi(Jn(e.getPointAtIndexGlobalCoordinates(l,a)),Jr.getScene(l)):null));return ei(ei(ei({},n),s),{},{isDragging:!1,pointerOffset:{x:0,y:0}})}},{key:\"handlePointerDown\",value:function(t,n,r,o,a){var i={didAddPoint:!1,hitElement:null};if(!n.editingLinearElement)return i;var l=n.editingLinearElement.elementId,s=e.getElement(l);if(!s)return i;if(t.altKey)return null==n.editingLinearElement.lastUncommittedPoint&&ao(s,{points:[].concat(F(s.points),[e.createPointAt(s,a.x,a.y,n.gridSize)])}),o.resumeRecording(),r({editingLinearElement:ei(ei({},n.editingLinearElement),{},{activePointIndex:s.points.length-1,lastUncommittedPoint:null,endBindingElement:hi(a,Jr.getScene(s))})}),i.didAddPoint=!0,i;var c=e.getPointIndexUnderCursor(s,n.zoom,a.x,a.y);if(c>-1)i.hitElement=s;else{var u=n.editingLinearElement,d=u.startBindingElement,p=u.endBindingElement;ri(n)&&et(s)&&oi(s,d,p)}var f=R(gt(s),4),h=f[0],m=f[1],g=(h+f[2])\/2,v=(m+f[3])\/2,b=c>-1&&rt(s.x+s.points[c][0],s.y+s.points[c][1],g,v,s.angle);return r({editingLinearElement:ei(ei({},n.editingLinearElement),{},{activePointIndex:c>-1?c:null,pointerOffset:b?{x:a.x-b[0],y:a.y-b[1]}:{x:0,y:0}})}),i}},{key:\"handlePointerMove\",value:function(t,n,r,o,a){var i=o.elementId,l=o.lastUncommittedPoint,s=e.getElement(i);if(!s)return o;var c=s.points,u=c[c.length-1];if(!t.altKey)return u===l&&e.movePoint(s,c.length-1,\"delete\"),ei(ei({},o),{},{lastUncommittedPoint:null});var d=e.createPointAt(s,n-o.pointerOffset.x,r-o.pointerOffset.y,a);return u===l?e.movePoint(s,s.points.length-1,d):e.movePoint(s,\"new\",d),ei(ei({},o),{},{lastUncommittedPoint:s.points[s.points.length-1]})}},{key:\"getPointsGlobalCoordinates\",value:function(e){var t=R(gt(e),4),n=t[0],r=t[1],o=t[2],a=t[3],i=(n+o)\/2,l=(r+a)\/2;return e.points.map((function(t){var n=e.x,r=e.y,o=R(rt(n+t[0],r+t[1],i,l,e.angle),2);return[n=o[0],r=o[1]]}))}},{key:\"getPointAtIndexGlobalCoordinates\",value:function(e,t){var n=t<0?e.points.length+t:t,r=R(gt(e),4),o=r[0],a=r[1],i=(o+r[2])\/2,l=(a+r[3])\/2,s=e.points[n],c=e.x,u=e.y;return rt(c+s[0],u+s[1],i,l,e.angle)}},{key:\"pointFromAbsoluteCoords\",value:function(e,t){var n=R(gt(e),4),r=n[0],o=n[1],a=(r+n[2])\/2,i=(o+n[3])\/2,l=R(rt(t[0],t[1],a,i,-e.angle),2),s=l[0],c=l[1];return[s-e.x,c-e.y]}},{key:\"getPointIndexUnderCursor\",value:function(e,t,n,r){for(var o=this.getPointsGlobalCoordinates(e),a=o.length;--a>-1;){var i=o[a];if(it(n,r,i[0],i[1])*t.value<this.POINT_HANDLE_SIZE\/2+1)return a}return-1}},{key:\"createPointAt\",value:function(e,t,n,r){var o=pt(t,n,r),a=R(gt(e),4),i=a[0],l=a[1],s=(i+a[2])\/2,c=(l+a[3])\/2,u=R(rt(o[0],o[1],s,c,-e.angle),2),d=u[0],p=u[1];return[d-e.x,p-e.y]}},{key:\"getNormalizedPoints\",value:function(e){var t=e.points,n=t[0][0],r=t[0][1];return{points:t.map((function(e,t){return[e[0]-n,e[1]-r]})),x:e.x+n,y:e.y+r}}},{key:\"normalizePoints\",value:function(t){ao(t,e.getNormalizedPoints(t))}},{key:\"movePointByOffset\",value:function(t,n,r){var o=R(t.points[n],2),a=o[0],i=o[1];e.movePoint(t,n,[a+r.x,i+r.y])}},{key:\"movePoint\",value:function(e,t,n,r){var o,a=e.points,i=0,l=0;if(\"delete\"===n){if(\"new\"===t)throw new Error(\"invalid args in movePoint\");(o=a.slice()).splice(t,1),0===t&&(i=o[0][0],l=o[0][1],o=o.map((function(e,t){return 0===t?[0,0]:[e[0]-i,e[1]-l]})))}else if(\"new\"===t)o=[].concat(F(a),[n]);else{var s=n[0]-a[t][0],c=n[1]-a[t][1];o=a.map((function(e,n){return n===t?0===n?(i=s,l=c,e):(i=0,l=0,[e[0]+s,e[1]+c]):i||l?[e[0]-i,e[1]-l]:e}))}var u=jt(e,o,e.strokeSharpness||\"round\"),d=jt(e,a,e.strokeSharpness||\"round\"),p=(u[0]+u[2])\/2,f=(u[1]+u[3])\/2,h=(d[0]+d[2])\/2,m=(d[1]+d[3])\/2,g=rt(i,l,h-p,m-f,e.angle);ao(e,ei(ei({},r),{},{points:o,x:e.x+g[0],y:e.y+g[1]}))}}]),e}();function ni(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}ti.POINT_HANDLE_SIZE=20;var ri=function(e){return e.isBindingEnabled},oi=function(e,t,n){var r=new Set,o=new Set;ai(e,t,n,\"start\",r,o),ai(e,n,t,\"end\",r,o);var a=Array.from(o).filter((function(e){return!r.has(e)}));Jr.getScene(e).getNonDeletedElements(a).forEach((function(t){var n;ao(t,{boundElementIds:null===(n=t.boundElementIds)||void 0===n?void 0:n.filter((function(t){return t!==e.id}))})}))},ai=function(e,t,n,r,o,a){if(\"keep\"!==t)if(null!=t)null!=n&&(\"keep\"===n?ui(e,t,r):\"start\"!==r&&n.id===t.id)||(ci(e,t,r),o.add(t.id));else{var i=fi(e,r);null!=i&&a.add(i)}},ii=function(e){e.forEach((function(e){et(e)?oi(e,ki(e,\"start\"),ki(e,\"end\")):nt(e)&&li(e)}))},li=function(e){Ei(e).forEach((function(t){var n=R(t,2),r=n[0],o=n[1];return oi(r,\"end\"===o?\"keep\":e,\"start\"===o?\"keep\":e)}))},si=function(e,t,n,r){null!=t.startBoundElement&&ci(e,t.startBoundElement,\"start\");var o=hi(r,n);null==o||ui(e,o,\"end\")||ci(e,o,\"end\")},ci=function(e,t,n){var r;ao(e,V({},\"start\"===n?\"startBinding\":\"endBinding\",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ni(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ni(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({elementId:t.id},mi(e,t,n)))),ao(t,{boundElementIds:Array.from(new Set([].concat(F(null!==(r=t.boundElementIds)&&void 0!==r?r:[]),[e.id])))})},ui=function(e,t,n){var r=e[\"start\"===n?\"endBinding\":\"startBinding\"];return di(e,null==r?void 0:r.elementId,t)},di=function(e,t,n){return t===n.id&&e.points.length<3},pi=function(e){e.forEach((function(e){et(e)&&oi(e,null,null)}))},fi=function(e,t){var n=\"start\"===t?\"startBinding\":\"endBinding\",r=e[n];return null==r?null:(ao(e,V({},n,null)),r.elementId)},hi=function(e,t){return hl(t.getElements(),(function(t){return nt(t)&&ya(t,e)}))},mi=function(e,t,n){var r=\"start\"===n?-1:1,o=-1===r?0:e.points.length-1,a=o-r,i=ti.getPointAtIndexGlobalCoordinates(e,o),l=ti.getPointAtIndexGlobalCoordinates(e,a);return{focus:za(t,l,i),gap:Math.max(1,ka(t,i))}},gi=function(e,t){var n,r=null!==(n=e.boundElementIds)&&void 0!==n?n:[];if(0!==r.length){var o=null!=t?t:{},a=o.newSize,i=o.simultaneouslyUpdated,l=bi(i);Jr.getScene(e).getNonDeletedElements(r).forEach((function(t){var n=e;if(vi(t,n)){var r=xi(n,t.startBinding,a),o=xi(n,t.endBinding,a);l.has(t.id)?ao(t,{startBinding:r,endBinding:o}):(yi(t,\"start\",r,e),yi(t,\"end\",o,e))}}))}},vi=function(e,t){var n,r;return(null===(n=e.startBinding)||void 0===n?void 0:n.elementId)===t.id||(null===(r=e.endBinding)||void 0===r?void 0:r.elementId)===t.id},bi=function(e){return new Set((e||[]).map((function(e){return e.id})))},yi=function(e,t,n,r){if(!(null==n||n.elementId!==r.id&&e.points.length>2)){var o=Jr.getScene(e).getElement(n.elementId);if(null!=o){var a,i=\"start\"===t?-1:1,l=-1===i?0:e.points.length-1,s=l-i,c=ti.getPointAtIndexGlobalCoordinates(e,s),u=function(e,t,n){if(0===t){var r=gt(e),o=Da(r);return ia(o)}var a,i=_a(e),l=pa(i,aa(n)),s=Wo(i);switch(e.type){case\"rectangle\":case\"text\":case\"diamond\":a=Ua(e,t,l);break;case\"ellipse\":a=Ga(e,t,l)}return ia(pa(s,a))}(o,n.focus,c);if(0===n.gap)a=u;else{var d=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=_a(e),a=pa(o,aa(t)),i=pa(o,aa(n)),l=ra(a,i),s=Wo(o);return Ba(e,l,a,r).map((function(e){return ia(pa(s,e))}))}(o,c,u,n.gap);a=0===d.length?u:d[0]}ti.movePoint(e,l,ti.pointFromAbsoluteCoords(e,a),V({},\"start\"===t?\"startBinding\":\"endBinding\",n))}}},xi=function(e,t,n){if(null==t||null==n)return t;var r=t.gap,o=t.focus,a=t.elementId,i=n.width,l=n.height,s=e.width,c=e.height;return{elementId:a,gap:Math.max(1,Math.min(xa(e,i,l),r*(i<l?i\/s:l\/c))),focus:o}},wi=function(e){return[ki(e,\"start\"),ki(e,\"end\")].filter((function(e){return null!=e}))},ki=function(e,t){return hi(Si(e,t),Jr.getScene(e))},Si=function(e,t){var n=\"start\"===t?0:-1;return Jn(ti.getPointAtIndexGlobalCoordinates(e,n))},Ei=function(e){return Jr.getScene(e).getElements().map((function(t){if(!et(t))return null;var n=ji(t,\"start\",e),r=ji(t,\"end\",e);return n||r?[t,n&&r?\"both\":n?\"start\":\"end\",e]:null})).filter((function(e){return null!=e}))},ji=function(e,t,n){return null==e[\"start\"===t?\"startBinding\":\"endBinding\"]&&!ui(e,n,t)&&ya(n,Si(e,t))},Ci=function(e,t,n,r){var o=new Set,a=new Set,i=\"duplicatesServeAsOld\"===r;t.forEach((function(e){var t=e.boundElementIds;if(null!=t&&t.length>0&&(t.forEach((function(e){i&&!n.has(e)&&o.add(e)})),a.add(n.get(e.id))),et(e)){if(null!=e.startBinding){var r=e.startBinding.elementId;i&&!n.has(r)&&a.add(r)}if(null!=e.endBinding){var l=e.endBinding.elementId;i&&!n.has(l)&&a.add(l)}null==e.startBinding&&null==e.endBinding||o.add(n.get(e.id))}})),e.filter((function(e){var t=e.id;return o.has(t)})).forEach((function(e){var t=e.startBinding,r=e.endBinding;ao(e,{startBinding:Oi(t,n),endBinding:Oi(r,n)})})),e.filter((function(e){var t=e.id;return a.has(t)})).forEach((function(e){var t=e.boundElementIds;null!=t&&t.length>0&&ao(e,{boundElementIds:t.map((function(e){var t;return null!==(t=n.get(e))&&void 0!==t?t:e}))})}))},Oi=function(e,t){var n;if(null==e)return null;var r=e.elementId;return{focus:e.focus,gap:e.gap,elementId:null!==(n=t.get(r))&&void 0!==n?n:r}},Mi=function(e,t){var n=new Set(t.map((function(e){return e.id}))),r=new Set;t.forEach((function(e){var t;nt(e)&&(null===(t=e.boundElementIds)||void 0===t||t.forEach((function(e){n.has(e)||r.add(e)})))})),e.filter((function(e){var t=e.id;return r.has(t)})).forEach((function(e){var t=e.startBinding,r=e.endBinding;ao(e,{startBinding:Ii(t,n),endBinding:Ii(r,n)})}))},Ii=function(e,t){return null==e||t.has(e.elementId)?null:e};function Pi(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ti(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Pi(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Pi(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ai=function(e){return e>=2*Math.PI?e-2*Math.PI:e},Li=function(e,t,n,r){var o=R(gt(e),4),a=o[0],i=o[1],l=(a+o[2])\/2,s=(i+o[3])\/2,u=5*Math.PI\/2+Math.atan2(n-s,t-l);r&&(u+=c.ay\/2,u-=u%c.ay),u=Ai(u),ao(e,{angle:u})},_i=function(e,t,n,r,o){var a=R(gt(e),4),i=a[0],l=a[1],s=a[2],c=a[3],u=R(rt(r,o,(i+s)\/2,(l+c)\/2,-e.angle),2),d=u[0],p=u[1],f=R(\"end\"===t?[d-e.x,p-e.y]:[e.x+e.points[1][0]-d,e.y+e.points[1][1]-p],2),h=f[0],m=f[1];if(n){var g=R(function(e,t,n,r){var o=co.apply(void 0,[e].concat(F(rt(t,n,0,0,r))));return rt(o.width,o.height,0,0,-r)}(e.type,h,m,e.angle),2);h=g[0],m=g[1]}var v=R(at(\"end\"===t?{s:!0,e:!0}:{n:!0,w:!0},e.x,e.y,e.angle,0,0,(e.points[1][0]-h)\/2,(e.points[1][1]-m)\/2),2),b=v[0],y=v[1];ao(e,{x:b,y:y,points:[[0,0],[h,m]]})},Di=function(e,t,n){return Qe(e)||qe(e)?{points:ft(0,t,ft(1,n,e.points))}:{}},zi=function(e,t,n){var r=e.fontSize*(t\/e.width);if(r<1)return null;var o=Rn(e.text,Nn({fontSize:r,fontFamily:e.fontFamily}));return{size:r,baseline:o.baseline+(n-o.height)}},Bi=function(e,t,n,r,o){var a,i=R(gt(e),4),l=i[0],s=i[1],c=i[2],u=i[3],d=R(rt(r,o,(l+c)\/2,(s+u)\/2,-e.angle),2),p=d[0],f=d[1];switch(t){case\"se\":a=Math.max((p-l)\/(c-l),(f-s)\/(u-s));break;case\"nw\":a=Math.max((c-p)\/(c-l),(u-f)\/(u-s));break;case\"ne\":a=Math.max((p-l)\/(c-l),(u-f)\/(u-s));break;case\"sw\":a=Math.max((c-p)\/(c-l),(f-s)\/(u-s))}if(a>0){var h=e.width*a,m=e.height*a,g=zi(e,h,m);if(null===g)return;var v=R(Et(e,h,m),4),b=(l-v[0])\/2,y=(s-v[1])\/2,x=(c-v[2])\/2,w=(u-v[3])\/2,k=R(at(function(e,t){return{n:\/^(n|ne|nw)$\/.test(e)||t&&\/^(s|se|sw)$\/.test(e),s:\/^(s|se|sw)$\/.test(e)||t&&\/^(n|ne|nw)$\/.test(e),w:\/^(w|nw|sw)$\/.test(e)||t&&\/^(e|ne|se)$\/.test(e),e:\/^(e|ne|se)$\/.test(e)||t&&\/^(w|nw|sw)$\/.test(e)}}(t,n),e.x,e.y,e.angle,b,y,x,w),2),S=k[0],E=k[1];ao(e,{fontSize:g.size,width:h,height:m,baseline:g.baseline,x:S,y:E})}},Hi=function(e,t,n,r,o,a,i){var l,s,c=R(Et(e,e.width,e.height),4),u=[c[0],c[1]],d=[c[2],c[3]],p=[((l=u)[0]+(s=d)[0])\/2,(l[1]+s[1])\/2],f=ot([a,i],p,-e.angle),h=R(Et(n,n.width,n.height),4),m=h[0],g=h[1],v=h[2]-m,b=h[3]-g,y=(d[0]-u[0])\/v,x=(d[1]-u[1])\/b;r.includes(\"e\")&&(y=(f[0]-u[0])\/v),r.includes(\"s\")&&(x=(f[1]-u[1])\/b),r.includes(\"w\")&&(y=(d[0]-f[0])\/v),r.includes(\"n\")&&(x=(d[1]-f[1])\/b);var w=e.width,k=e.height,S=n.width*y,E=n.height*x;if(o&&(S=2*S-w,E=2*E-k),t){var j=Math.abs(S)\/w,C=Math.abs(E)\/k;if(1===r.length&&(E*=j,S*=C),2===r.length){var O=Math.max(j,C);S=w*O*Math.sign(S),E=k*O*Math.sign(E)}}var M=R(Et(e,S,E),4),I=M[0],P=M[1],T=M[2]-I,A=M[3]-P,L=[].concat(u);if([\"n\",\"w\",\"nw\"].includes(r)&&(L=[d[0]-Math.abs(T),d[1]-Math.abs(A)]),\"ne\"===r){var _=[u[0],d[1]];L=[_[0],_[1]-Math.abs(A)]}if(\"sw\"===r){var D=[d[0],u[1]];L=[D[0]-Math.abs(T),D[1]]}t&&([\"s\",\"n\"].includes(r)&&(L[0]=p[0]-T\/2),[\"e\",\"w\"].includes(r)&&(L[1]=p[1]-A\/2)),S<0&&(r.includes(\"e\")&&(L[0]-=Math.abs(T)),r.includes(\"w\")&&(L[0]+=Math.abs(T))),E<0&&(r.includes(\"s\")&&(L[1]-=Math.abs(A)),r.includes(\"n\")&&(L[1]+=Math.abs(A))),o&&(L[0]=p[0]-Math.abs(T)\/2,L[1]=p[1]-Math.abs(A)\/2);var z=e.angle,B=ot(L,p,z),H=[L[0]+Math.abs(T)\/2,L[1]+Math.abs(A)\/2],N=ot(H,p,z);L=ot(B,N,-z);var V=Di(e,S,E),G=F(L);G[0]+=e.x-I,G[1]+=e.y-P;var U=Ti({width:Math.abs(S),height:Math.abs(E),x:G[0],y:G[1]},V);0!==U.width&&0!==U.height&&Number.isFinite(U.x)&&Number.isFinite(U.y)&&(gi(n,{newSize:{width:U.width,height:U.height}}),ao(n,U))},Ni=function(e,t,n,r){var o,a,i=R(St(e),4),l=i[0],s=i[1],c=i[2],u=i[3];switch(t){case\"se\":o=Math.max((n-l)\/(c-l),(r-s)\/(u-s)),a=function(e,t,n){var r=R(t,2),a=r[0],i=r[1],c=R(n,2),u=c[0],d=c[1];return{x:e.x+(a-l)*(o-1)+a-u,y:e.y+(i-s)*(o-1)+i-d}};break;case\"nw\":o=Math.max((c-n)\/(c-l),(u-r)\/(u-s)),a=function(e,t,n){var r=R(t,4),a=r[2],i=r[3],l=R(n,4),s=l[2],d=l[3];return{x:e.x-(c-a)*(o-1)+a-s,y:e.y-(u-i)*(o-1)+i-d}};break;case\"ne\":o=Math.max((n-l)\/(c-l),(u-r)\/(u-s)),a=function(e,t,n){var r=R(t,4),a=r[0],i=r[3],s=R(n,4),c=s[0],d=s[3];return{x:e.x+(a-l)*(o-1)+a-c,y:e.y-(u-i)*(o-1)+i-d}};break;case\"sw\":o=Math.max((c-n)\/(c-l),(r-s)\/(u-s)),a=function(e,t,n){var r=R(t,3),a=r[1],i=r[2],l=R(n,3),u=l[1],d=l[2];return{x:e.x-(c-i)*(o-1)+i-d,y:e.y+(a-s)*(o-1)+a-u}}}if(o>0){var d=e.reduce((function(t,n){if(!t)return t;var r=n.width*o,i=n.height*o,l={};if(\"text\"===n.type){var s=zi(n,r,i);if(null===s)return null;l={fontSize:s.size,baseline:s.baseline}}var c=gt(n),u=Di(n,r,i);gi(n,{newSize:{width:r,height:i},simultaneouslyUpdated:e});var d=Et(Ti(Ti({},n),u),r,i),p=a(n,c,d),f=p.x,h=p.y;return[].concat(F(t),[Ti(Ti({width:r,height:i,x:f,y:h},u),l)])}),[]);d&&e.forEach((function(e,t){ao(e,d[t])}))}},Ri=function(e,t,n,r,o,a,i){var l=5*Math.PI\/2+Math.atan2(r-i,n-a);o&&(l+=c.ay\/2,l-=l%c.ay),t.forEach((function(t,n){var r,o,s=R(gt(t),4),c=s[0],u=s[1],d=(c+s[2])\/2,p=(u+s[3])\/2,f=null!==(r=null===(o=e.originalElements.get(t.id))||void 0===o?void 0:o.angle)&&void 0!==r?r:t.angle,h=R(rt(d,p,a,i,l+f-t.angle),2),m=h[0],g=h[1];ao(t,{x:t.x+(m-d),y:t.y+(g-p),angle:Ai(l+f)})}))},Fi=function(e,t,n,r,o,a,i,l,s,c){if(s){var u=co(t,i,a<r?-l:l);i=u.width,(l=u.height)<0&&(l=-l)}var d=o<n?n-i:n,p=a<r?r-l:r;c&&(d=n-(i+=i)\/2,p=r-(l+=l)\/2),0!==i&&0!==l&&ao(e,{x:d,y:p,width:i,height:l})},Vi=function(e){return e.replace(\/\\t\/g,\"        \").replace(\/\\r?\\n|\\r\/g,\"\\n\")},Gi=function(e,t,n,r,o){var a=r.zoom,i=r.offsetTop,l=r.offsetLeft,s=180*n\/Math.PI,c=(e-2*l)*(a.value-1)\/2,u=(t-2*i)*(a.value-1)\/2;return e>o&&1!==a.value&&(c=o\/2*(a.value-1)),\"translate(\".concat(c,\"px, \").concat(u,\"px) scale(\").concat(a.value,\") rotate(\").concat(s,\"deg)\")},Ui=function(e){var t=Rn(e.text,Nn(e));ao(e,{width:t.width,height:t.height,baseline:t.baseline})},Ki=function(e,t){return Boolean(!e.viewModeEnabled&&(e.editingElement||ol(t,e).length||\"selection\"!==e.elementType))};function Wi(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Zi(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Wi(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Wi(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Yi=function(e){return e.reduce((function(e,t){return e[t.id]=t,e}),{})},Xi=function(e){return e.reduce((function(e,t){return e+t.version}),0)},qi=function(e){return e.filter((function(e){return!e.isDeleted}))},$i=function(e){return!e.isDeleted},Qi=function(e){return qi(e).map((function(e){return Je(e.type)?Zi(Zi({},e),{},{lastCommittedPoint:null}):e}))},Ji=function(e){return Qi(e)},el=\"rgba(0,0,0,0.3)\",tl=function(e,t,n,r){var o=r.scrollX,a=r.scrollY,i=r.zoom;if(0===e.length)return{horizontal:null,vertical:null};var l=R(St(e),4),s=l[0],c=l[1],u=l[2],d=l[3],p=t\/i.value,f=n\/i.value,h=t-p,m=n-f,g={top:parseInt(qn(\"sat\")),bottom:parseInt(qn(\"sab\")),left:parseInt(qn(\"sal\")),right:parseInt(qn(\"sar\"))},v=T().rtl,b=h\/2-o+g.left,y=m\/2-a+g.top,x=b+p-g.right,w=y+f-g.bottom,k=Math.min(s,b),S=Math.min(c,y),E=Math.max(u,x),j=Math.max(d,w);return{horizontal:b===k&&x===E?null:{x:Math.max(g.left,4)+(b-k)\/(E-k)*t,y:n-6-Math.max(4,g.bottom),width:(x-b)\/(E-k)*t-Math.max(8,g.left+g.right),height:6},vertical:y===S&&w===j?null:{x:v?Math.max(g.left,4):t-6-Math.max(g.right,4),y:(y-S)\/(j-S)*n+Math.max(g.top,4),width:6,height:(w-y)\/(j-S)*n-Math.max(8,g.top+g.bottom)}}},nl=function(e,t,n){var r=R([e.horizontal,e.vertical].map((function(e){return null!=e&&e.x<=t&&t<=e.x+e.width&&e.y<=n&&n<=e.y+e.height})),2),o=r[0],a=r[1];return{isOverEither:o||a,isOverHorizontal:o,isOverVertical:a}},rl=function(e,t){return e.some((function(e){return t.selectedElementIds[e.id]}))},ol=function(e,t){return e.filter((function(e){return t.selectedElementIds[e.id]}))},al=function(e,t){return t.editingElement?[t.editingElement]:ol(e,t)},il=function(e){var t=e.scenePoint,n=e.viewportDimensions,r=e.zoom;return{scrollX:n.width\/2*(1\/r.value)-t.x-r.translation.x*(1\/r.value),scrollY:n.height\/2*(1\/r.value)-t.y-r.translation.y*(1\/r.value)}},ll=function(e,t,n){if(!(e=function(e){return e.filter((function(e){return!e.isDeleted&&!so(e)}))}(e)).length)return{scrollX:0,scrollY:0};var r=R(St(e),4),o=r[0],a=r[1],i=r[2],l=r[3];if(function(e,t,n){var r=R(n,4),o=r[0],a=r[1],i=r[2],l=r[3],s=Xn({sceneX:o,sceneY:a},e),c=s.x,u=s.y,d=Xn({sceneX:i,sceneY:l},e),p=d.x,f=d.y;return p-c>e.width||f-u>e.height}(t,0,[o,a,i,l])){var s=function(e,t){if(!e.length)return[0,0,0,0];var n=1\/0,r=e[0];return e.forEach((function(e){var o=R(kt(e),4),a=o[0],i=o[1],l=o[2],s=o[3],c=it((a+l)\/2,(i+s)\/2,t.x,t.y);c<n&&(n=c,r=e)})),kt(r)}(e,Yn({clientX:t.scrollX,clientY:t.scrollY},t)),c=R(s,4);o=c[0],a=c[1],i=c[2],l=c[3]}return il({scenePoint:{x:(o+i)\/2,y:(a+l)\/2},viewportDimensions:{width:t.width,height:t.height},zoom:t.zoom})},sl=function(e){return\"rectangle\"===e||\"ellipse\"===e||\"diamond\"===e||\"line\"===e},cl=function(e){return\"rectangle\"===e||\"ellipse\"===e||\"diamond\"===e||\"freedraw\"===e||\"arrow\"===e||\"line\"===e},ul=function(e){return\"rectangle\"===e||\"ellipse\"===e||\"diamond\"===e||\"arrow\"===e||\"line\"===e},dl=function(e){return\"rectangle\"===e||\"arrow\"===e||\"line\"===e},pl=function(e){return\"text\"===e},fl=function(e){return\"arrow\"===e},hl=function(e,t){for(var n=null,r=e.length-1;r>=0;--r){var o=e[r];if(!o.isDeleted&&t(o)){n=o;break}}return n},ml=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{x:0,y:0};return{value:e,translation:{x:r.x-n.left-(r.x-n.left-t.translation.x)*(e\/t.value),y:r.y-n.top-(r.y-n.top-t.translation.y)*(e\/t.value)}}},gl=function(e){var t=parseFloat(e.toFixed(2));return Math.max(.1,Math.min(t,10))},vl=(n(5422),s().forwardRef((function(e,t){var n=lh().id,r=s().useRef(null);s().useImperativeHandle(t,(function(){return r.current}));var o=\"ToolIcon_size_\".concat(e.size);return\"button\"===e.type||\"icon\"===e.type?(0,_.jsxs)(\"button\",{className:Ze(\"ToolIcon_type_button\",o,e.className,e.visible&&!e.hidden?\"ToolIcon_type_button--show\":\"ToolIcon_type_button--hide\",{ToolIcon:!e.hidden,\"ToolIcon--selected\":e.selected,\"ToolIcon--plain\":\"icon\"===e.type}),\"data-testid\":e[\"data-testid\"],hidden:e.hidden,title:e.title,\"aria-label\":e[\"aria-label\"],type:\"button\",onClick:e.onClick,ref:r,children:[(e.icon||e.label)&&(0,_.jsxs)(\"div\",{className:\"ToolIcon__icon\",\"aria-hidden\":\"true\",children:[e.icon||e.label,e.keyBindingLabel&&(0,_.jsx)(\"span\",{className:\"ToolIcon__keybinding\",children:e.keyBindingLabel})]}),e.showAriaLabel&&(0,_.jsx)(\"div\",{className:\"ToolIcon__label\",children:e[\"aria-label\"]}),e.children]}):(0,_.jsxs)(\"label\",{className:Ze(\"ToolIcon\",e.className),title:e.title,children:[(0,_.jsx)(\"input\",{className:\"ToolIcon_type_radio \".concat(o),type:\"radio\",name:e.name,\"aria-label\":e[\"aria-label\"],\"aria-keyshortcuts\":e[\"aria-keyshortcuts\"],\"data-testid\":e[\"data-testid\"],id:\"\".concat(n,\"-\").concat(e.id),onChange:e.onChange,checked:e.checked,ref:r}),(0,_.jsxs)(\"div\",{className:\"ToolIcon__icon\",children:[e.icon,e.keyBindingLabel&&(0,_.jsx)(\"span\",{className:\"ToolIcon__keybinding\",children:e.keyBindingLabel})]})]})})));vl.defaultProps={visible:!0,className:\"\",size:\"medium\"};var bl=function(e){return\"light\"===e?Ct.orange[4]:Ct.orange[9]},yl=function(e){return\"light\"===e?Ct.black:Ct.gray[4]},xl=function(e){return\"light\"===e?Ct.white:\"#1e1e1e\"},wl=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:512,n=\"number\"==typeof t?{width:t}:t,r=n.width,o=void 0===r?512:r,a=n.height,i=void 0===a?o:a,l=n.mirror,s=n.style;return(0,_.jsx)(\"svg\",{\"aria-hidden\":\"true\",focusable:\"false\",role:\"img\",viewBox:\"0 0 \".concat(o,\" \").concat(i),className:Ze({\"rtl-mirror\":l}),style:s,children:\"string\"==typeof e?(0,_.jsx)(\"path\",{fill:\"currentColor\",d:e}):e})},kl=wl((0,_.jsx)(\"polyline\",{fill:\"none\",stroke:\"currentColor\",points:\"20 6 9 17 4 12\"}),{width:24,height:24}),Sl=wl(\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\",{mirror:!0}),El=wl(\"M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z\",{width:448,height:512}),jl=wl(\"M252 54L203 8a28 27 0 00-20-8H28C12 0 0 12 0 27v195c0 15 12 26 28 26h204c15 0 28-11 28-26V73a28 27 0 00-8-19zM130 213c-21 0-37-16-37-36 0-19 16-35 37-35 20 0 37 16 37 35 0 20-17 36-37 36zm56-169v56c0 4-4 6-7 6H44c-4 0-7-2-7-6V42c0-4 3-7 7-7h133l4 2 3 2a7 7 0 012 5z M296 201l87 95-188 205-78 9c-10 1-19-8-18-20l9-84zm141-14l-41-44a31 31 0 00-46 0l-38 41 87 95 38-42c13-14 13-36 0-50z\",{width:448,height:512}),Cl=wl(\"M572.694 292.093L500.27 416.248A63.997 63.997 0 0 1 444.989 448H45.025c-18.523 0-30.064-20.093-20.731-36.093l72.424-124.155A64 64 0 0 1 152 256h399.964c18.523 0 30.064 20.093 20.73 36.093zM152 224h328v-48c0-26.51-21.49-48-48-48H272l-64-64H48C21.49 64 0 85.49 0 112v278.046l69.077-118.418C86.214 242.25 117.989 224 152 224z\",{width:576,height:512,mirror:!0}),Ol=wl(\"M384 112v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h80c0-35.29 28.71-64 64-64s64 28.71 64 64h80c26.51 0 48 21.49 48 48zM192 40c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24m96 114v-20a6 6 0 0 0-6-6H102a6 6 0 0 0-6 6v20a6 6 0 0 0 6 6h180a6 6 0 0 0 6-6z\",{width:384,height:512}),Ml=wl(\"M32 464a48 48 0 0 0 48 48h288a48 48 0 0 0 48-48V128H32zm272-256a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zM432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z\",{width:448,height:512}),Il=wl(\"M204.3 5C104.9 24.4 24.8 104.3 5.2 203.4c-37 187 131.7 326.4 258.8 306.7 41.2-6.4 61.4-54.6 42.5-91.7-23.1-45.4 9.9-98.4 60.9-98.4h79.7c35.8 0 64.8-29.6 64.9-65.3C511.5 97.1 368.1-26.9 204.3 5zM96 320c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm32-128c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128-64c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128 64c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z\"),Pl=wl(\"M384 121.9c0-6.3-2.5-12.4-7-16.9L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128zM571 308l-95.7-96.4c-10.1-10.1-27.4-3-27.4 11.3V288h-64v64h64v65.2c0 14.3 17.3 21.4 27.4 11.3L571 332c6.6-6.6 6.6-17.4 0-24zm-379 28v-32c0-8.8 7.2-16 16-16h176V160H248c-13.2 0-24-10.8-24-24V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V352H208c-8.8 0-16-7.2-16-16z\",{width:576,height:512,mirror:!0}),Tl=wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M571 308l-95.7-96.4c-10.1-10.1-27.4-3-27.4 11.3V288h-64v64h64v65.2c0 14.3 17.3 21.4 27.4 11.3L571 332c6.6-6.6 6.6-17.4 0-24zm-187 44v-64 64z\"}),(0,_.jsx)(\"path\",{d:\"M384 121.941V128H256V0h6.059c6.362 0 12.471 2.53 16.97 7.029l97.941 97.941a24.01 24.01 0 017.03 16.971zM248 160c-13.2 0-24-10.8-24-24V0H24C10.745 0 0 10.745 0 24v464c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24V160H248zm-135.455 16c26.51 0 48 21.49 48 48s-21.49 48-48 48-48-21.49-48-48 21.491-48 48-48zm208 240h-256l.485-48.485L104.545 328c4.686-4.686 11.799-4.201 16.485.485L160.545 368 264.06 264.485c4.686-4.686 12.284-4.686 16.971 0L320.545 304v112z\"})]}),{width:576,height:512,mirror:!0}),Al=wl(\"M216 0h80c13.3 0 24 10.7 24 24v168h87.7c17.8 0 26.7 21.5 14.1 34.1L269.7 378.3c-7.5 7.5-19.8 7.5-27.3 0L90.1 226.1c-12.6-12.6-3.7-34.1 14.1-34.1H192V24c0-13.3 10.7-24 24-24zm296 376v112c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24V376c0-13.3 10.7-24 24-24h146.7l49 49c20.1 20.1 52.5 20.1 72.6 0l49-49H488c13.3 0 24 10.7 24 24zm-124 88c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20zm64 0c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20z\",{width:512,height:512}),Ll=wl(\"M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z\",{width:448,height:512}),_l=wl(\"M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z\",{width:448,height:512}),Dl=wl(\"M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z\"),zl=wl(\"M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z\"),Bl=wl(\"M255.545 8c-66.269.119-126.438 26.233-170.86 68.685L48.971 40.971C33.851 25.851 8 36.559 8 57.941V192c0 13.255 10.745 24 24 24h134.059c21.382 0 32.09-25.851 16.971-40.971l-41.75-41.75c30.864-28.899 70.801-44.907 113.23-45.273 92.398-.798 170.283 73.977 169.484 169.442C423.236 348.009 349.816 424 256 424c-41.127 0-79.997-14.678-110.63-41.556-4.743-4.161-11.906-3.908-16.368.553L89.34 422.659c-4.872 4.872-4.631 12.815.482 17.433C133.798 479.813 192.074 504 256 504c136.966 0 247.999-111.033 248-247.998C504.001 119.193 392.354 7.755 255.545 8z\",{mirror:!0}),Hl=wl(\"M256.455 8c66.269.119 126.437 26.233 170.859 68.685l35.715-35.715C478.149 25.851 504 36.559 504 57.941V192c0 13.255-10.745 24-24 24H345.941c-21.382 0-32.09-25.851-16.971-40.971l41.75-41.75c-30.864-28.899-70.801-44.907-113.23-45.273-92.398-.798-170.283 73.977-169.484 169.442C88.764 348.009 162.184 424 256 424c41.127 0 79.997-14.678 110.629-41.556 4.743-4.161 11.906-3.908 16.368.553l39.662 39.662c4.872 4.872 4.631 12.815-.482 17.433C378.202 479.813 319.926 504 256 504 119.034 504 8.001 392.967 8 256.002 7.999 119.193 119.646 7.755 256.455 8z\",{mirror:!0}),Nl=wl(\"M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zM262.655 90c-54.497 0-89.255 22.957-116.549 63.758-3.536 5.286-2.353 12.415 2.715 16.258l34.699 26.31c5.205 3.947 12.621 3.008 16.665-2.122 17.864-22.658 30.113-35.797 57.303-35.797 20.429 0 45.698 13.148 45.698 32.958 0 14.976-12.363 22.667-32.534 33.976C247.128 238.528 216 254.941 216 296v4c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12v-1.333c0-28.462 83.186-29.647 83.186-106.667 0-58.002-60.165-102-116.531-102zM256 338c-25.365 0-46 20.635-46 46 0 25.364 20.635 46 46 46s46-20.636 46-46c0-25.365-20.635-46-46-46z\",{mirror:!0}),Rl=(wl(\"M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z\",{width:24,height:24}),wl(\"M16 5l-1.42 1.42-1.59-1.59V16h-1.98V4.83L9.42 6.42 8 5l4-4 4 4zm4 5v11c0 1.1-.9 2-2 2H6c-1.11 0-2-.9-2-2V10c0-1.11.89-2 2-2h3v2H6v11h12V10h-3V8h3c1.1 0 2 .89 2 2z\",{width:24,height:24}),wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{stroke:\"currentColor\",fill:\"currentColor\",d:\"M40 5.6v6.1l-4.1.7c-8.9 1.4-16.5 6.9-20.6 15C13 32 10.9 43 12.4 43c.4 0 2.4-1.3 4.4-3 5-3.9 12.1-7 18.2-7.7l5-.6v12.8l11.2-11.3L62.5 22 51.2 10.8 40-.5v6.1zm10.2 22.6L44 34.5v-6.8l-6.9.6c-3.9.3-9.8 1.7-13.2 3.1-3.5 1.4-6.5 2.4-6.7 2.2-.9-1 3-7.5 6.4-10.8C28 18.6 34.4 16 40.1 16c3.7 0 3.9-.1 3.9-3.2V9.5l6.2 6.3 6.3 6.2-6.3 6.2z\"}),(0,_.jsx)(\"path\",{stroke:\"currentColor\",fill:\"currentColor\",d:\"M0 36v20h48v-6.2c0-6 0-6.1-2-4.3-1.1 1-2 2.9-2 4.2V52H4V34c0-17.3-.1-18-2-18s-2 .7-2 20z\"})]}),{width:64,height:64}),wl((0,_.jsx)(\"path\",{stroke:\"currentColor\",strokeWidth:\"40\",fill:\"currentColor\",d:\"M148 560a318 318 0 0 0 522 110 316 316 0 0 0 0-450 316 316 0 0 0-450 0c-11 11-21 22-30 34v4h47c25 0 46 21 46 46s-21 45-46 45H90c-13 0-25-6-33-14-9-9-14-20-14-33V156c0-25 20-45 45-45s45 20 45 45v32l1 1a401 401 0 0 1 623 509l212 212a42 42 0 0 1-59 59L698 757A401 401 0 0 1 65 570a42 42 0 0 1 83-10z\"}),{width:1024}),s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M22 9.556C22 8.696 21.303 8 20.444 8H16v8H8v4.444C8 21.304 8.697 22 9.556 22h10.888c.86 0 1.556-.697 1.556-1.556V9.556z\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\"}),(0,_.jsx)(\"path\",{d:\"M16 3.556C16 2.696 15.303 2 14.444 2H3.556C2.696 2 2 2.697 2 3.556v10.888C2 15.304 2.697 16 3.556 16h10.888c.86 0 1.556-.697 1.556-1.556V3.556z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"})]}),{width:24,mirror:!0})}))),Fl=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M16 3.556C16 2.696 15.303 2 14.444 2H3.556C2.696 2 2 2.697 2 3.556v10.888C2 15.304 2.697 16 3.556 16h10.888c.86 0 1.556-.697 1.556-1.556V3.556z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"}),(0,_.jsx)(\"path\",{d:\"M22 9.556C22 8.696 21.303 8 20.444 8H9.556C8.696 8 8 8.697 8 9.556v10.888C8 21.304 8.697 22 9.556 22h10.888c.86 0 1.556-.697 1.556-1.556V9.556z\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\"})]}),{width:24,mirror:!0})})),Vl=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M13 21a1 1 0 001 1h7a1 1 0 001-1v-7a1 1 0 00-1-1h-3v5h-5v3zM11 3a1 1 0 00-1-1H3a1 1 0 00-1 1v7a1 1 0 001 1h3V6h5V3z\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\"}),(0,_.jsx)(\"path\",{d:\"M18 7.333C18 6.597 17.403 6 16.667 6H7.333C6.597 6 6 6.597 6 7.333v9.334C6 17.403 6.597 18 7.333 18h9.334c.736 0 1.333-.597 1.333-1.333V7.333z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"})]}),{width:24,mirror:!0})})),Gl=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M18 7.333C18 6.597 17.403 6 16.667 6H7.333C6.597 6 6 6.597 6 7.333v9.334C6 17.403 6.597 18 7.333 18h9.334c.736 0 1.333-.597 1.333-1.333V7.333z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"}),(0,_.jsx)(\"path\",{d:\"M11 3a1 1 0 00-1-1H3a1 1 0 00-1 1v7a1 1 0 001 1h8V3zM22 14a1 1 0 00-1-1h-7a1 1 0 00-1 1v7a1 1 0 001 1h8v-8z\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\"})]}),{width:24,mirror:!0})})),Ul=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M 2,5 H 22\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),(0,_.jsx)(\"path\",{d:\"M 6,7 C 5.446,7 5,7.446 5,8 v 9.999992 c 0,0.554 0.446,1 1,1 h 3.0000001 c 0.554,0 0.9999999,-0.446 0.9999999,-1 V 8 C 10,7.446 9.5540001,7 9.0000001,7 Z m 9,0 c -0.554,0 -1,0.446 -1,1 v 5.999992 c 0,0.554 0.446,1 1,1 h 3 c 0.554,0 1,-0.446 1,-1 V 8 C 19,7.446 18.554,7 18,7 Z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"})]}),{width:24,mirror:!0})})),Kl=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M 2,19 H 22\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),(0,_.jsx)(\"path\",{d:\"m 6,16.999992 c -0.554,0 -1,-0.446 -1,-1 V 6 C 5,5.446 5.446,5 6,5 H 9.0000001 C 9.5540001,5 10,5.446 10,6 v 9.999992 c 0,0.554 -0.4459999,1 -0.9999999,1 z m 9,0 c -0.554,0 -1,-0.446 -1,-1 V 10 c 0,-0.554 0.446,-1 1,-1 h 3 c 0.554,0 1,0.446 1,1 v 5.999992 c 0,0.554 -0.446,1 -1,1 z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"})]}),{width:24,mirror:!0})})),Wl=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M 5,2 V 22\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),(0,_.jsx)(\"path\",{d:\"m 7.000004,5.999996 c 0,-0.554 0.446,-1 1,-1 h 9.999992 c 0.554,0 1,0.446 1,1 v 3.0000001 c 0,0.554 -0.446,0.9999999 -1,0.9999999 H 8.000004 c -0.554,0 -1,-0.4459999 -1,-0.9999999 z m 0,9 c 0,-0.554 0.446,-1 1,-1 h 5.999992 c 0.554,0 1,0.446 1,1 v 3 c 0,0.554 -0.446,1 -1,1 H 8.000004 c -0.554,0 -1,-0.446 -1,-1 z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"})]}),{width:24})})),Zl=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M 19,2 V 22\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),(0,_.jsx)(\"path\",{d:\"m 16.999996,5.999996 c 0,-0.554 -0.446,-1 -1,-1 H 6.000004 c -0.554,0 -1,0.446 -1,1 v 3.0000001 c 0,0.554 0.446,0.9999999 1,0.9999999 h 9.999992 c 0.554,0 1,-0.4459999 1,-0.9999999 z m 0,9 c 0,-0.554 -0.446,-1 -1,-1 h -5.999992 c -0.554,0 -1,0.446 -1,1 v 3 c 0,0.554 0.446,1 1,1 h 5.999992 c 0.554,0 1,-0.446 1,-1 z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"})]}),{width:24})})),Yl=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M19 5V19M5 5V19\",stroke:yl(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),(0,_.jsx)(\"path\",{d:\"M15 9C15.554 9 16 9.446 16 10V14C16 14.554 15.554 15 15 15H9C8.446 15 8 14.554 8 14V10C8 9.446 8.446 9 9 9H15Z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"})]}),{width:24})})),Xl=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M5 5L19 5M5 19H19\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),(0,_.jsx)(\"path\",{d:\"M15 9C15.554 9 16 9.446 16 10V14C16 14.554 15.554 15 15 15H9C8.446 15 8 14.554 8 14V10C8 9.446 8.446 9 9 9H15Z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"})]}),{width:24})})),ql=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"m 5.000004,16.999996 c 0,0.554 0.446,1 1,1 h 3 c 0.554,0 1,-0.446 1,-1 v -10 c 0,-0.554 -0.446,-1 -1,-1 h -3 c -0.554,0 -1,0.446 -1,1 z m 9,-2 c 0,0.554 0.446,1 1,1 h 3 c 0.554,0 1,-0.446 1,-1 v -6 c 0,-0.554 -0.446,-1 -1,-1 h -3 c -0.554,0 -1,0.446 -1,1 z\",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"}),(0,_.jsx)(\"path\",{d:\"M 2,12 H 22\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\",strokeDasharray:\"1, 2.8\",strokeLinecap:\"round\"})]}),{width:24,mirror:!0})})),$l=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M 7 5 C 6.446 5 6 5.446 6 6 L 6 9 C 6 9.554 6.446 10 7 10 L 17 10 C 17.554 10 18 9.554 18 9 L 18 6 C 18 5.446 17.554 5 17 5 L 7 5 z M 9 14 C 8.446 14 8 14.446 8 15 L 8 18 C 8 18.554 8.446 19 9 19 L 15 19 C 15.554 19 16 18.554 16 18 L 16 15 C 16 14.446 15.554 14 15 14 L 9 14 z \",fill:bl(t),stroke:bl(t),strokeWidth:\"2\"}),(0,_.jsx)(\"path\",{d:\"M 12,2 V 22\",fill:yl(t),stroke:yl(t),strokeWidth:\"2\",strokeDasharray:\"1, 2.8\",strokeLinecap:\"round\"})]}),{width:24})})),Ql=wl(\"M192 256c61.9 0 112-50.1 112-112S253.9 32 192 32 80 82.1 80 144s50.1 112 112 112zm76.8 32h-8.3c-20.8 10-43.9 16-68.5 16s-47.6-6-68.5-16h-8.3C51.6 288 0 339.6 0 403.2V432c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48v-28.8c0-63.6-51.6-115.2-115.2-115.2zM480 256c53 0 96-43 96-96s-43-96-96-96-96 43-96 96 43 96 96 96zm48 32h-3.8c-13.9 4.8-28.6 8-44.2 8s-30.3-3.2-44.2-8H432c-20.4 0-39.2 5.9-55.7 15.4 24.4 26.3 39.7 61.2 39.7 99.8v38.4c0 2.2-.5 4.3-.6 6.4H592c26.5 0 48-21.5 48-48 0-61.9-50.1-112-112-112z\",{width:640,height:512,mirror:!0}),Jl=(wl(\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm115.7 272l-176 101c-15.8 8.8-35.7-2.5-35.7-21V152c0-18.4 19.8-29.8 35.7-21l176 107c16.4 9.2 16.4 32.9 0 42z\"),wl(\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm96 328c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V176c0-8.8 7.2-16 16-16h160c8.8 0 16 7.2 16 16v160z\"),wl(\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\",{width:352,height:512})),es=wl(\"M34.52 239.03L228.87 44.69c9.37-9.37 24.57-9.37 33.94 0l22.67 22.67c9.36 9.36 9.37 24.52.04 33.9L131.49 256l154.02 154.75c9.34 9.38 9.32 24.54-.04 33.9l-22.67 22.67c-9.37 9.37-24.57 9.37-33.94 0L34.52 272.97c-9.37-9.37-9.37-24.57 0-33.94z\",{width:320,height:512,style:{marginLeft:\"-0.2rem\"},mirror:!0}),ts=wl(\"M464 0c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48H176c-26.51 0-48-21.49-48-48V48c0-26.51 21.49-48 48-48h288M176 416c-44.112 0-80-35.888-80-80V128H48c-26.51 0-48 21.49-48 48v288c0 26.51 21.49 48 48 48h288c26.51 0 48-21.49 48-48v-48H176z\",{mirror:!0}),ns=(wl(\"M11.553 22.894a.998.998 0 00.894 0s3.037-1.516 5.465-4.097C19.616 16.987 21 14.663 21 12V5a1 1 0 00-.649-.936l-8-3a.998.998 0 00-.702 0l-8 3A1 1 0 003 5v7c0 2.663 1.384 4.987 3.088 6.797 2.428 2.581 5.465 4.097 5.465 4.097zm-1.303-8.481l6.644-6.644a.856.856 0 111.212 1.212l-7.25 7.25a.856.856 0 01-1.212 0l-3.75-3.75a.856.856 0 111.212-1.212l3.144 3.144z\",{width:24}),wl(\"M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm32-48h224V288l-23.5-23.5c-4.7-4.7-12.3-4.7-17 0L176 352l-39.5-39.5c-4.7-4.7-12.3-4.7-17 0L80 352v64zm48-240c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z\",{width:384,height:512})),rs=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M25 26H111V111H25\",fill:yl(t)}),(0,_.jsx)(\"path\",{d:\"M25 111C25 80.2068 25 49.4135 25 26M25 26C48.6174 26 72.2348 26 111 26H25ZM25 26C53.3671 26 81.7343 26 111 26H25ZM111 26C111 52.303 111 78.606 111 111V26ZM111 26C111 51.2947 111 76.5893 111 111V26ZM111 111C87.0792 111 63.1585 111 25 111H111ZM111 111C87.4646 111 63.9293 111 25 111H111ZM25 111C25 81.1514 25 51.3028 25 26V111Z\",stroke:yl(t),strokeWidth:\"2\"}),(0,_.jsx)(\"path\",{d:\"M100 100H160V160H100\",fill:yl(t)}),(0,_.jsx)(\"path\",{d:\"M100 160C100 144.106 100 128.211 100 100M100 100C117.706 100 135.412 100 160 100H100ZM100 100C114.214 100 128.428 100 160 100H100ZM160 100C160 120.184 160 140.369 160 160V100ZM160 100C160 113.219 160 126.437 160 160V100ZM160 160C145.534 160 131.068 160 100 160H160ZM160 160C143.467 160 126.934 160 100 160H160ZM100 160C100 143.661 100 127.321 100 100V160Z\",stroke:yl(t),strokeWidth:\"2\"}),(0,_.jsxs)(\"g\",{fill:xl(t),stroke:yl(t),strokeWidth:\"6\",children:[(0,_.jsx)(\"rect\",{x:\"2.5\",y:\"2.5\",width:\"30\",height:\"30\"}),(0,_.jsx)(\"rect\",{x:\"2.5\",y:\"149.5\",width:\"30\",height:\"30\"}),(0,_.jsx)(\"rect\",{x:\"147.5\",y:\"149.5\",width:\"30\",height:\"30\"}),(0,_.jsx)(\"rect\",{x:\"147.5\",y:\"2.5\",width:\"30\",height:\"30\"})]})]}),{width:182,height:182,mirror:!0})})),os=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{d:\"M25 26H111V111H25\",fill:yl(t)}),(0,_.jsx)(\"path\",{d:\"M25 111C25 80.2068 25 49.4135 25 26M25 26C48.6174 26 72.2348 26 111 26H25ZM25 26C53.3671 26 81.7343 26 111 26H25ZM111 26C111 52.303 111 78.606 111 111V26ZM111 26C111 51.2947 111 76.5893 111 111V26ZM111 111C87.0792 111 63.1585 111 25 111H111ZM111 111C87.4646 111 63.9293 111 25 111H111ZM25 111C25 81.1514 25 51.3028 25 26V111Z\",stroke:yl(t),strokeWidth:\"2\"}),(0,_.jsx)(\"path\",{d:\"M100 100H160V160H100\",fill:yl(t)}),(0,_.jsx)(\"path\",{d:\"M100 160C100 144.106 100 128.211 100 100M100 100C117.706 100 135.412 100 160 100H100ZM100 100C114.214 100 128.428 100 160 100H100ZM160 100C160 120.184 160 140.369 160 160V100ZM160 100C160 113.219 160 126.437 160 160V100ZM160 160C145.534 160 131.068 160 100 160H160ZM160 160C143.467 160 126.934 160 100 160H160ZM100 160C100 143.661 100 127.321 100 100V160Z\",stroke:yl(t),strokeWidth:\"2\"}),(0,_.jsxs)(\"g\",{fill:xl(t),stroke:yl(t),strokeWidth:\"6\",children:[(0,_.jsx)(\"rect\",{x:\"2.5\",y:\"2.5\",width:\"30\",height:\"30\"}),(0,_.jsx)(\"rect\",{x:\"78.5\",y:\"149.5\",width:\"30\",height:\"30\"}),(0,_.jsx)(\"rect\",{x:\"147.5\",y:\"149.5\",width:\"30\",height:\"30\"}),(0,_.jsx)(\"rect\",{x:\"147.5\",y:\"78.5\",width:\"30\",height:\"30\"}),(0,_.jsx)(\"rect\",{x:\"105.5\",y:\"2.5\",width:\"30\",height:\"30\"}),(0,_.jsx)(\"rect\",{x:\"2.5\",y:\"102.5\",width:\"30\",height:\"30\"})]})]}),{width:182,height:182,mirror:!0})})),as=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{fillRule:\"evenodd\",clipRule:\"evenodd\",d:\"M20.101 16H28.0934L36 8.95989V4H33.5779L20.101 16ZM30.5704 4L17.0935 16H9.10101L22.5779 4H30.5704ZM19.5704 4L6.09349 16H4V10.7475L11.5779 4H19.5704ZM8.57036 4H4V8.06952L8.57036 4ZM36 11.6378L31.101 16H36V11.6378ZM2 2V18H38V2H2Z\",fill:yl(t)}),{width:40,height:20})})),is=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(\"g\",{fill:yl(t),fillRule:\"evenodd\",clipRule:\"evenodd\",children:[(0,_.jsx)(\"path\",{d:\"M20.101 16H28.0934L36 8.95989V4H33.5779L20.101 16ZM30.5704 4L17.0935 16H9.10101L22.5779 4H30.5704ZM19.5704 4L6.09349 16H4V10.7475L11.5779 4H19.5704ZM8.57036 4H4V8.06952L8.57036 4ZM36 11.6378L31.101 16H36V11.6378ZM2 2V18H38V2H2Z\"}),(0,_.jsx)(\"path\",{d:\"M14.0001 18L3.00006 4.00002L4.5727 2.76438L15.5727 16.7644L14.0001 18ZM25.0001 18L14.0001 4.00002L15.5727 2.76438L26.5727 16.7644L25.0001 18ZM36.0001 18L25.0001 4.00002L26.5727 2.76438L37.5727 16.7644L36.0001 18Z\"})]}),{width:40,height:20})})),ls=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M2 2H38V18H2V2Z\",fill:yl(t)}),{width:40,height:20})})),ss=s().memo((function(e){var t=e.theme,n=e.strokeWidth;return wl((0,_.jsx)(\"path\",{d:\"M6 10H32\",stroke:yl(t),strokeWidth:n,strokeLinecap:\"round\",fill:\"none\"}),{width:40,height:20})})),cs=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M6 10H34\",stroke:yl(t),strokeWidth:2,fill:\"none\",strokeLinecap:\"round\"}),{width:40,height:20})})),us=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M6 10H34\",stroke:yl(t),strokeWidth:2.5,strokeDasharray:\"10, 8\",fill:\"none\",strokeLinecap:\"round\"}),{width:40,height:20})})),ds=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M6 10H36\",stroke:yl(t),strokeWidth:2.5,strokeDasharray:\"2, 4.5\",fill:\"none\",strokeLinecap:\"round\"}),{width:40,height:20})})),ps=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M3.00098 16.1691C6.28774 13.9744 19.6399 2.8905 22.7215 3.00082C25.8041 3.11113 19.1158 15.5488 21.4962 16.8309C23.8757 18.1131 34.4155 11.7148 37.0001 10.6919\",stroke:yl(t),strokeWidth:2,strokeLinecap:\"round\",fill:\"none\"}),{width:40,height:20,mirror:!0})})),fs=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M3 17C6.68158 14.8752 16.1296 9.09849 22.0648 6.54922C28 3.99995 22.2896 13.3209 25 14C27.7104 14.6791 36.3757 9.6471 36.3757 9.6471M6.40706 15C13 11.1918 20.0468 1.51045 23.0234 3.0052C26 4.49995 20.457 12.8659 22.7285 16.4329C25 20 36.3757 13 36.3757 13\",stroke:yl(t),strokeWidth:2,strokeLinecap:\"round\",fill:\"none\"}),{width:40,height:20,mirror:!0})})),hs=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M3 15.6468C6.93692 13.5378 22.5544 2.81528 26.6206 3.00242C30.6877 3.18956 25.6708 15.3346 27.4009 16.7705C29.1309 18.2055 35.4001 12.4762 37 11.6177M3.97143 10.4917C6.61158 9.24563 16.3706 2.61886 19.8104 3.01724C23.2522 3.41472 22.0773 12.2013 24.6181 12.8783C27.1598 13.5536 33.3179 8.04068 35.0571 7.07244\",stroke:yl(t),strokeWidth:2,strokeLinecap:\"round\",fill:\"none\"}),{width:40,height:20,mirror:!0})})),ms=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M10 17L10 5L35 5\",stroke:yl(t),strokeWidth:2,strokeLinecap:\"round\",fill:\"none\"}),{width:40,height:20,mirror:!0})})),gs=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M10 17V15C10 8 13 5 21 5L33.5 5\",stroke:yl(t),strokeWidth:2,strokeLinecap:\"round\",fill:\"none\"}),{width:40,height:20,mirror:!0})})),vs=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M6 10H34\",stroke:yl(t),strokeWidth:2,fill:\"none\"}),{width:40,height:20})})),bs=s().memo((function(e){var t=e.theme,n=e.flip,r=void 0!==n&&n;return wl((0,_.jsxs)(\"g\",{transform:r?\"translate(40, 0) scale(-1, 1)\":\"\",stroke:yl(t),strokeWidth:2,fill:\"none\",children:[(0,_.jsx)(\"path\",{d:\"M34 10H6M34 10L27 5M34 10L27 15\"}),(0,_.jsx)(\"path\",{d:\"M27.5 5L34.5 10L27.5 15\"})]}),{width:40,height:20})})),ys=s().memo((function(e){var t=e.theme,n=e.flip,r=void 0!==n&&n;return wl((0,_.jsxs)(\"g\",{stroke:yl(t),fill:yl(t),transform:r?\"translate(40, 0) scale(-1, 1)\":\"\",children:[(0,_.jsx)(\"path\",{d:\"M32 10L6 10\",strokeWidth:2}),(0,_.jsx)(\"circle\",{r:\"4\",transform:\"matrix(-1 0 0 1 30 10)\"})]}),{width:40,height:20})})),xs=s().memo((function(e){var t=e.theme,n=e.flip,r=void 0!==n&&n;return wl((0,_.jsx)(\"g\",{transform:r?\"translate(40, 0) scale(-1, 1)\":\"\",children:(0,_.jsx)(\"path\",{d:\"M34 10H5.99996M34 10L34 5M34 10L34 15\",stroke:yl(t),strokeWidth:2,fill:\"none\"})}),{width:40,height:20})})),ws=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{fill:yl(t),d:\"M 0 69.092 L 0 55.03 A 124.24 124.24 0 0 0 4.706 57.02 Q 6.826 57.863 8.708 58.5 A 53.466 53.466 0 0 0 12.231 59.571 Q 17.236 60.889 21.387 60.889 A 20.909 20.909 0 0 0 24.265 60.704 Q 25.719 60.502 26.903 60.077 A 8.649 8.649 0 0 0 29.028 58.985 Q 31.689 57.08 31.689 53.321 Q 31.689 51.221 30.518 49.585 A 10.126 10.126 0 0 0 29.282 48.177 Q 28.352 47.287 27.075 46.436 A 23.719 23.719 0 0 0 25.752 45.627 Q 23.774 44.492 20.176 42.735 A 254.44 254.44 0 0 0 17.822 41.602 Q 11.503 38.631 8.236 35.888 A 19.742 19.742 0 0 1 8.008 35.694 A 22.18 22.18 0 0 1 2.783 29.102 Q 0.83 25.342 0.83 20.313 A 22.471 22.471 0 0 1 1.733 13.778 A 17.283 17.283 0 0 1 7.251 5.42 A 21.486 21.486 0 0 1 15.177 1.272 Q 18.361 0.338 22.166 0.09 A 43.573 43.573 0 0 1 25 0 A 42.399 42.399 0 0 1 34.349 1.01 A 39.075 39.075 0 0 1 35.62 1.319 A 67.407 67.407 0 0 1 42.108 3.382 A 83.357 83.357 0 0 1 46.191 5.03 L 41.309 16.797 Q 35.596 14.453 31.86 13.526 A 30.762 30.762 0 0 0 25.417 12.612 A 28.337 28.337 0 0 0 24.512 12.598 A 14.846 14.846 0 0 0 22.022 12.793 Q 19.498 13.224 17.92 14.6 Q 15.625 16.602 15.625 19.824 Q 15.625 21.826 16.553 23.316 Q 17.48 24.805 19.507 26.197 A 18.343 18.343 0 0 0 20.659 26.912 Q 22.596 28.035 26.516 29.953 A 299.99 299.99 0 0 0 29.102 31.201 Q 37.91 35.412 41.841 39.642 A 16.553 16.553 0 0 1 42.822 40.796 A 17.675 17.675 0 0 1 46.301 49.233 A 23.517 23.517 0 0 1 46.533 52.588 A 21.581 21.581 0 0 1 45.471 59.515 A 17.733 17.733 0 0 1 39.575 67.823 Q 33.745 72.486 24.094 73.243 A 49.683 49.683 0 0 1 20.215 73.389 A 51.712 51.712 0 0 1 9.448 72.315 A 40.672 40.672 0 0 1 0 69.092 Z\"}),{width:47,height:77})})),ks=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{fill:yl(t),d:\"M 44.092 71.387 L 30.225 71.387 L 13.037 15.381 L 12.598 15.381 A 1505.093 1505.093 0 0 1 12.959 22.313 Q 13.426 31.715 13.508 36.4 A 102.991 102.991 0 0 1 13.525 38.184 L 13.525 71.387 L 0 71.387 L 0 0 L 20.605 0 L 37.5 54.59 L 37.793 54.59 L 55.713 0 L 76.318 0 L 76.318 71.387 L 62.207 71.387 L 62.207 37.598 Q 62.207 35.205 62.28 32.08 A 160.703 160.703 0 0 1 62.326 30.544 Q 62.452 26.754 62.866 17.168 A 5390.536 5390.536 0 0 1 62.939 15.479 L 62.5 15.479 L 44.092 71.387 Z\"}),{width:77,height:75})})),Ss=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{fill:yl(t),d:\"M 44.092 71.387 L 0 71.387 L 0 0 L 15.137 0 L 15.137 58.887 L 44.092 58.887 L 44.092 71.387 Z\"}),{width:45,height:75})})),Es=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{fill:yl(t),d:\"M 42.578 35.4 L 66.699 71.387 L 49.414 71.387 L 32.813 44.385 L 16.211 71.387 L 0 71.387 L 23.682 34.57 L 1.514 0 L 18.213 0 L 33.594 25.684 L 48.682 0 L 64.99 0 L 42.578 35.4 Z M 119.775 71.387 L 75.684 71.387 L 75.684 0 L 90.82 0 L 90.82 58.887 L 119.775 58.887 L 119.775 71.387 Z\"}),{width:120,height:75})})),js=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{fill:yl(t),d:\"M290.74 93.24l128.02 128.02-277.99 277.99-114.14 12.6C11.35 513.54-1.56 500.62.14 485.34l12.7-114.22 277.9-277.88zm207.2-19.06l-60.11-60.11c-18.75-18.75-49.16-18.75-67.91 0l-56.55 56.55 128.02 128.02 56.55-56.55c18.75-18.76 18.75-49.16 0-67.91z\"}),{width:448,height:512})})),Cs=s().memo((function(e){var t=e.theme;return wl((0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"path\",{fill:yl(t),d:\"M 63.818 71.68 L 54.492 71.68 L 45.898 49.561 L 17.578 49.561 L 9.082 71.68 L 0 71.68 L 27.881 0 L 35.986 0 L 63.818 71.68 Z M 20.605 41.602 L 43.213 41.602 L 35.205 19.971 L 31.787 9.277 Q 30.322 15.137 28.711 19.971 L 20.605 41.602 Z\"}),(0,_.jsx)(\"path\",{fill:yl(t),d:\"M 68.994 71.68 L 52.686 71.68 L 47.51 54.688 L 21.484 54.688 L 16.309 71.68 L 0 71.68 L 25.195 0 L 43.701 0 L 68.994 71.68 Z M 25.293 41.992 L 43.896 41.992 A 27590.463 27590.463 0 0 1 42.2 36.532 Q 36.965 19.676 35.937 16.273 A 120.932 120.932 0 0 1 35.815 15.869 A 131.65 131.65 0 0 1 35.396 14.435 Q 34.951 12.879 34.675 11.741 A 34.866 34.866 0 0 1 34.521 11.084 A 141.762 141.762 0 0 1 33.706 14.075 Q 31.482 21.957 25.293 41.992 Z\"})]}),{width:70,height:78})})),Os=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(_.Fragment,{children:(0,_.jsx)(\"path\",{fill:yl(t),d:\"M278.9 511.5l-61-17.7c-6.4-1.8-10-8.5-8.2-14.9L346.2 8.7c1.8-6.4 8.5-10 14.9-8.2l61 17.7c6.4 1.8 10 8.5 8.2 14.9L293.8 503.3c-1.9 6.4-8.5 10.1-14.9 8.2zm-114-112.2l43.5-46.4c4.6-4.9 4.3-12.7-.8-17.2L117 256l90.6-79.7c5.1-4.5 5.5-12.3.8-17.2l-43.5-46.4c-4.5-4.8-12.1-5.1-17-.5L3.8 247.2c-5.1 4.7-5.1 12.8 0 17.5l144.1 135.1c4.9 4.6 12.5 4.4 17-.5zm327.2.6l144.1-135.1c5.1-4.7 5.1-12.8 0-17.5L492.1 112.1c-4.8-4.5-12.4-4.3-17 .5L431.6 159c-4.6 4.9-4.3 12.7.8 17.2L523 256l-90.6 79.7c-5.1 4.5-5.5 12.3-.8 17.2l43.5 46.4c4.5 4.9 12.1 5.1 17 .6z\"})}),{width:640,height:512})})),Ms=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M12.83 352h262.34A12.82 12.82 0 00288 339.17v-38.34A12.82 12.82 0 00275.17 288H12.83A12.82 12.82 0 000 300.83v38.34A12.82 12.82 0 0012.83 352zm0-256h262.34A12.82 12.82 0 00288 83.17V44.83A12.82 12.82 0 00275.17 32H12.83A12.82 12.82 0 000 44.83v38.34A12.82 12.82 0 0012.83 96zM432 160H16a16 16 0 00-16 16v32a16 16 0 0016 16h416a16 16 0 0016-16v-32a16 16 0 00-16-16zm0 256H16a16 16 0 00-16 16v32a16 16 0 0016 16h416a16 16 0 0016-16v-32a16 16 0 00-16-16z\",fill:yl(t),strokeLinecap:\"round\"}),{width:448,height:512})})),Is=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M432 160H16a16 16 0 00-16 16v32a16 16 0 0016 16h416a16 16 0 0016-16v-32a16 16 0 00-16-16zm0 256H16a16 16 0 00-16 16v32a16 16 0 0016 16h416a16 16 0 0016-16v-32a16 16 0 00-16-16zM108.1 96h231.81A12.09 12.09 0 00352 83.9V44.09A12.09 12.09 0 00339.91 32H108.1A12.09 12.09 0 0096 44.09V83.9A12.1 12.1 0 00108.1 96zm231.81 256A12.09 12.09 0 00352 339.9v-39.81A12.09 12.09 0 00339.91 288H108.1A12.09 12.09 0 0096 300.09v39.81a12.1 12.1 0 0012.1 12.1z\",fill:yl(t)}),{width:448,height:512})})),Ps=s().memo((function(e){var t=e.theme;return wl((0,_.jsx)(\"path\",{d:\"M16 224h416a16 16 0 0016-16v-32a16 16 0 00-16-16H16a16 16 0 00-16 16v32a16 16 0 0016 16zm416 192H16a16 16 0 00-16 16v32a16 16 0 0016 16h416a16 16 0 0016-16v-32a16 16 0 00-16-16zm3.17-384H172.83A12.82 12.82 0 00160 44.83v38.34A12.82 12.82 0 00172.83 96h262.34A12.82 12.82 0 00448 83.17V44.83A12.82 12.82 0 00435.17 32zm0 256H172.83A12.82 12.82 0 00160 300.83v38.34A12.82 12.82 0 00172.83 352h262.34A12.82 12.82 0 00448 339.17v-38.34A12.82 12.82 0 00435.17 288z\",fill:yl(t),strokeLinecap:\"round\"}),{width:448,height:512})})),Ts=[],As=function(e){return Ts=Ts.concat(e),e};function Ls(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ls(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ls(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ds=function(e,t){if(e.editingGroupId){var n=So(qi(t),e.editingGroupId);if(n.length)return _s(_s({},e),{},{selectedElementIds:V({},n[0].id,!0)})}return e},zs=As({name:\"deleteSelectedElements\",perform:function(e,t){if(t.editingLinearElement){var n=t.editingLinearElement,r=n.elementId,o=n.activePointIndex,a=n.startBindingElement,i=n.endBindingElement,l=ti.getElement(r);if(!l)return!1;if(null==o||-1===o||l.points.length<2){var s=e.filter((function(e){return e.id!==l.id}));return{elements:s,appState:_s(_s({},Ds(t,s)),{},{editingLinearElement:null}),commitToHistory:!1}}var c={startBindingElement:0===o?null:a,endBindingElement:o===l.points.length-1?null:i};return ti.movePoint(l,o,\"delete\"),{elements:e,appState:_s(_s({},t),{},{editingLinearElement:_s(_s(_s({},t.editingLinearElement),c),{},{activePointIndex:o>0?o-1:0})}),commitToHistory:!0}}var u=function(e,t){return{elements:e.map((function(e){return t.selectedElementIds[e.id]?io(e,{isDeleted:!0}):e})),appState:_s(_s({},t),{},{selectedElementIds:{}})}}(e,t),d=u.elements,p=u.appState;return Mi(d,e.filter((function(e){var n=e.id;return t.selectedElementIds[n]}))),{elements:d,appState:_s(_s({},p=Ds(p,d)),{},{elementType:\"selection\",multiElement:null}),commitToHistory:rl(qi(e),t)}},contextItemLabel:\"labels.delete\",keyTest:function(e){return e.key===on||e.key===sn},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{type:\"button\",icon:Ml,title:L(\"labels.delete\"),\"aria-label\":L(\"labels.delete\"),onClick:function(){return r(null)},visible:rl(qi(t),n)})}}),Bs=function(e,t){for(var n=[],r=[],o=null,a=-1;++a<e.length;)t.selectedElementIds[e[a].id]?(r.length&&(n=n.concat(r),r=[]),n.push(a),o=a+1):e[a].isDeleted&&o===a?(o=a+1,r.push(a)):r=[];return n},Hs=function(e,t,n,r){var o=t[n],a=function(t){return!t.isDeleted&&(!e.editingGroupId||t.groupIds.includes(e.editingGroupId))},i=\"left\"===r?function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.length-1;n<0&&(n=e.length+n);for(var r=(n=Math.min(e.length-1,Math.max(n,0)))+1;--r>-1;)if(t(e[r],r,e))return r;return-1}(t,a,Math.max(0,n-1)):function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;n<0&&(n=e.length+n);for(var r=(n=Math.min(e.length,Math.max(n,0)))-1;++r<e.length;)if(t(e[r],r,e))return r;return-1}(t,a,n+1),l=t[i];if(!l)return-1;if(e.editingGroupId){if((null==o?void 0:o.groupIds.join(\"\"))===(null==l?void 0:l.groupIds.join(\"\")))return i;if(null==l||!l.groupIds.includes(e.editingGroupId))return-1}if(!l.groupIds.length)return i;var s=e.editingGroupId?l.groupIds[l.groupIds.indexOf(e.editingGroupId)-1]:l.groupIds[l.groupIds.length-1],c=So(t,s);return c.length?\"left\"===r?t.indexOf(c[0]):t.indexOf(c[c.length-1]):i},Ns=function(e,t){return t.reduce((function(t,n){var r=e[n];return t[r.id]=r,t}),{})},Rs=function(e,t,n){var r,o,a=Bs(t,e),i=Ns(t,a),l=(o=0,(r=a).reduce((function(e,t,n){return n>0&&r[n-1]!==t-1&&(o=++o),(e[o]||(e[o]=[])).push(t),e}),[]));return\"right\"===n&&(l=l.reverse()),l.forEach((function(r,o){var a=r[0],i=r[r.length-1],l=\"left\"===n?a:i,s=Hs(e,t,l,n);if(-1!==s&&l!==s){var c=\"left\"===n?t.slice(0,s):t.slice(0,a),u=t.slice(a,i+1),d=\"left\"===n?t.slice(s,a):t.slice(i+1,s+1),p=\"left\"===n?t.slice(i+1):t.slice(s+1);t=\"left\"===n?[].concat(F(c),F(u),F(d),F(p)):[].concat(F(c),F(d),F(u),F(p))}})),t.map((function(e){return i[e.id]?lo(e):e}))},Fs=function(e,t,n){var r,o,a=Bs(e,t),i=Ns(e,a),l=[];if(\"left\"===n){if(t.editingGroupId){var s=So(e,t.editingGroupId);if(!s.length)return e;r=e.indexOf(s[0])}else r=0;o=a[a.length-1]}else{if(t.editingGroupId){var c=So(e,t.editingGroupId);if(!c.length)return e;o=e.indexOf(c[c.length-1])}else o=e.length-1;r=a[0]}for(var u=r;u<o+1;u++)a.includes(u)||l.push(e[u]);var d=Object.values(i).map((function(e){return lo(e)})),p=e.slice(0,r),f=e.slice(o+1);return\"left\"===n?[].concat(F(p),F(d),l,F(f)):[].concat(F(p),l,F(d),F(f))},Vs=function(e,t){return Rs(t,e,\"left\")},Gs=function(e,t){return Rs(t,e,\"right\")},Us=function(e,t){return Fs(e,t,\"left\")},Ks=function(e,t){return Fs(e,t,\"right\")},Ws=As({name:\"sendBackward\",perform:function(e,t){return{elements:Vs(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.sendBackward\",keyPriority:40,keyTest:function(e){return e[ln]&&!e.shiftKey&&e.code===Ht},PanelComponent:function(e){var t=e.updateData,n=e.appState;return(0,_.jsx)(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(){return t(null)},title:\"\".concat(L(\"labels.sendBackward\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd+[\")),children:(0,_.jsx)(Fl,{theme:n.theme})})}}),Zs=As({name:\"bringForward\",perform:function(e,t){return{elements:Gs(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.bringForward\",keyPriority:40,keyTest:function(e){return e[ln]&&!e.shiftKey&&e.code===Bt},PanelComponent:function(e){var t=e.updateData,n=e.appState;return(0,_.jsx)(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(){return t(null)},title:\"\".concat(L(\"labels.bringForward\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd+]\")),children:(0,_.jsx)(Rl,{theme:n.theme})})}}),Ys=As({name:\"sendToBack\",perform:function(e,t){return{elements:Us(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.sendToBack\",keyTest:function(e){return Pt?e[ln]&&e.altKey&&e.code===Ht:e[ln]&&e.shiftKey&&e.code===Ht},PanelComponent:function(e){var t=e.updateData,n=e.appState;return(0,_.jsx)(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(){return t(null)},title:\"\".concat(L(\"labels.sendToBack\"),\" \u2014 \").concat(Zn(Pt?\"CtrlOrCmd+Alt+[\":\"CtrlOrCmd+Shift+[\")),children:(0,_.jsx)(Gl,{theme:n.theme})})}}),Xs=As({name:\"bringToFront\",perform:function(e,t){return{elements:Ks(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.bringToFront\",keyTest:function(e){return Pt?e[ln]&&e.altKey&&e.code===Bt:e[ln]&&e.shiftKey&&e.code===Bt},PanelComponent:function(e){var t=e.updateData,n=e.appState;return(0,_.jsx)(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(e){return t(null)},title:\"\".concat(L(\"labels.bringToFront\"),\" \u2014 \").concat(Zn(Pt?\"CtrlOrCmd+Alt+]\":\"CtrlOrCmd+Shift+]\")),children:(0,_.jsx)(Vl,{theme:n.theme})})}});function qs(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function $s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?qs(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):qs(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Qs=As({name:\"selectAll\",perform:function(e,t){return!t.editingLinearElement&&{appState:wo($s($s({},t),{},{editingGroupId:null,selectedElementIds:e.reduce((function(e,t){return t.isDeleted||(e[t.id]=!0),e}),{})}),qi(e)),commitToHistory:!0}},contextItemLabel:\"labels.selectAll\",keyTest:function(e){return e[ln]&&e.key===hn}});function Js(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ec(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Js(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Js(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var tc=As({name:\"duplicateSelection\",perform:function(e,t){if(t.editingLinearElement){var n=t.editingLinearElement,r=n.activePointIndex,o=n.elementId,a=ti.getElement(o);if(!a||null===r)return!1;var i=a.points,l=i[r],s=i[r+1];return ao(a,{points:[].concat(F(i.slice(0,r+1)),[s?[(l[0]+s[0])\/2,(l[1]+s[1])\/2]:[l[0]+30,l[1]+30]],F(i.slice(r+1)))}),{appState:ec(ec({},t),{},{editingLinearElement:ec(ec({},t.editingLinearElement),{},{activePointIndex:r+1})}),elements:e,commitToHistory:!0}}return ec(ec({},nc(e,t)),{},{commitToHistory:!0})},contextItemLabel:\"labels.duplicateSelection\",keyTest:function(e){return e[ln]&&e.key===mn},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{type:\"button\",icon:ts,title:\"\".concat(L(\"labels.duplicateSelection\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd+D\")),\"aria-label\":L(\"labels.duplicateSelection\"),onClick:function(){return r(null)},visible:rl(qi(t),n)})}}),nc=function(e,t){for(var n=new Map,r=[],o=[],a=new Map,i=function(e){var i=Do(t.editingGroupId,n,e,{x:e.x+c.k\/2,y:e.y+c.k\/2});return a.set(e.id,i.id),o.push(e),r.push(i),i},l=[],s=0;s<e.length;){var u=e[s];if(t.selectedElementIds[u.id]){if(u.groupIds.length){var d=yo(t,u);if(d){var p=So(e,d);l.push.apply(l,F(p).concat(F(p.map((function(e){return i(e)}))))),s+=p.length;continue}}l.push(u,i(u))}else l.push(u);s++}return Ci(l,o,a),{elements:l,appState:wo(ec(ec({},t),{},{selectedGroupIds:{},selectedElementIds:r.reduce((function(e,t){return e[t.id]=!0,e}),{})}),qi(l))}},rc=function(e){var t=e.options,n=e.value,r=e.onChange,o=e.group;return(0,_.jsx)(\"div\",{className:\"buttonList buttonListIcon\",children:t.map((function(e){return(0,_.jsxs)(\"label\",{className:Ze({active:n===e.value}),title:e.text,children:[(0,_.jsx)(\"input\",{type:\"radio\",name:o,onChange:function(){return r(e.value)},checked:n===e.value}),e.icon]},e.text)}))})},oc=(n(4301),function(e){var t=e.children,n=e.left,r=e.top,o=e.onCloseRequest,a=e.fitInViewport,i=void 0!==a&&a,s=(0,l.useRef)(null);return(0,l.useLayoutEffect)((function(){if(i&&s.current){var e=s.current,t=e.getBoundingClientRect(),n=t.x,r=t.y,o=t.width,a=t.height,l=window.innerWidth;n+o>l&&(e.style.left=\"\".concat(l-o,\"px\"));var c=window.innerHeight;r+a>c&&(e.style.top=\"\".concat(c-a,\"px\"))}}),[i]),(0,l.useEffect)((function(){if(o){var e=function(e){var t;null!==(t=s.current)&&void 0!==t&&t.contains(e.target)||(0,It.unstable_batchedUpdates)((function(){return o(e)}))};return document.addEventListener(\"pointerdown\",e,!1),function(){return document.removeEventListener(\"pointerdown\",e,!1)}}}),[o]),(0,_.jsx)(\"div\",{className:\"popover\",style:{top:r,left:n},ref:s,children:t})}),ac=(n(4220),function(e){var t=(new Option).style;return t.color=e,!!t.color}),ic=[[\"1\",\"2\",\"3\",\"4\",\"5\"],[\"q\",\"w\",\"e\",\"r\",\"t\"],[\"a\",\"s\",\"d\",\"f\",\"g\"]].flat(),lc=function(e){var t=e.colors,n=e.color,r=e.onChange,o=e.onClose,a=e.label,i=e.showInput,l=void 0===i||i,c=e.type,u=s().useRef(),d=s().useRef(),p=s().useRef(),f=s().useRef();s().useEffect((function(){d.current?d.current.focus():f.current?f.current.focus():p.current&&p.current.focus()}),[]);return(0,_.jsxs)(\"div\",{className:\"color-picker color-picker-type-\".concat(c),role:\"dialog\",\"aria-modal\":\"true\",\"aria-label\":L(\"labels.colorPicker\"),onKeyDown:function(e){if(e.key===fn){var t,n=document.activeElement;if(e.shiftKey){if(n===u.current)null===(t=f.current)||void 0===t||t.focus(),e.preventDefault()}else if(n===f.current){var r;null===(r=u.current)||void 0===r||r.focus(),e.preventDefault()}}else if(In(e.key)){var a=document.activeElement,i=T().rtl,s=Array.prototype.indexOf.call(p.current.children,a);if(-1!==s){var c=p.current.children.length-(l?1:0),d=e.key===(i?tn:nn)?(s+1)%c:e.key===(i?nn:tn)?(c+s-1)%c:e.key===en?(s+5)%c:e.key===rn?(c+s-5)%c:s;p.current.children[d].focus()}e.preventDefault()}else if(ic.includes(e.key.toLowerCase())&&!Bn(e.target)){var h=ic.indexOf(e.key.toLowerCase());p.current.children[h].focus(),e.preventDefault()}else e.key!==un&&e.key!==cn||(e.preventDefault(),o());e.nativeEvent.stopImmediatePropagation(),e.stopPropagation()},children:[(0,_.jsx)(\"div\",{className:\"color-picker-triangle color-picker-triangle-shadow\"}),(0,_.jsx)(\"div\",{className:\"color-picker-triangle\"}),(0,_.jsxs)(\"div\",{className:\"color-picker-content\",ref:function(e){e&&(p.current=e)},tabIndex:0,children:[t.map((function(e,t){var o=e.replace(\"#\",\"\");return(0,_.jsxs)(\"button\",{className:\"color-picker-swatch\",onClick:function(t){t.currentTarget.focus(),r(e)},title:\"\".concat(L(\"colors.\".concat(o))).concat(tr(e)?\"\":\" (\".concat(e,\")\"),\" \u2014 \").concat(ic[t].toUpperCase()),\"aria-label\":L(\"colors.\".concat(o)),\"aria-keyshortcuts\":ic[t],style:{color:e},ref:function(r){r&&0===t&&(u.current=r),r&&e===n&&(d.current=r)},onFocus:function(){r(e)},children:[tr(e)?(0,_.jsx)(\"div\",{className:\"color-picker-transparent\"}):void 0,(0,_.jsx)(\"span\",{className:\"color-picker-keybinding\",children:ic[t]})]},e)})),l&&(0,_.jsx)(sc,{color:n,label:a,onChange:function(e){r(e)},ref:f})]})]})},sc=s().forwardRef((function(e,t){var n=e.color,r=e.onChange,o=e.label,a=R(s().useState(n),2),i=a[0],l=a[1],c=s().useRef(null);s().useEffect((function(){l(n)}),[n]),s().useImperativeHandle(t,(function(){return c.current}));var u=s().useCallback((function(e){var t=e.toLowerCase(),n=function(e){return tr(e)||ac(e)?e:ac(\"#\".concat(e))?\"#\".concat(e):null}(t);n&&r(n),l(t)}),[r]);return(0,_.jsxs)(\"label\",{className:\"color-input-container\",children:[(0,_.jsx)(\"div\",{className:\"color-picker-hash\",children:\"#\"}),(0,_.jsx)(\"input\",{spellCheck:!1,className:\"color-picker-input\",\"aria-label\":o,onChange:function(e){return u(e.target.value)},value:(i||\"\").replace(\/^#\/,\"\"),onBlur:function(){return l(n)},ref:c})]})})),cc=function(e){var t=e.type,n=e.color,r=e.onChange,o=e.label,a=e.isActive,i=e.setActive,l=s().useRef(null);return(0,_.jsxs)(\"div\",{children:[(0,_.jsxs)(\"div\",{className:\"color-picker-control-container\",children:[(0,_.jsx)(\"button\",{className:\"color-picker-label-swatch\",\"aria-label\":o,style:n?{\"--swatch-color\":n}:void 0,onClick:function(){return i(!a)},ref:l}),(0,_.jsx)(sc,{color:n,label:o,onChange:function(e){r(e)}})]}),(0,_.jsx)(s().Suspense,{fallback:\"\",children:a?(0,_.jsx)(oc,{onCloseRequest:function(e){return e.target!==l.current&&i(!1)},children:(0,_.jsx)(lc,{colors:Mt[t],color:n||null,onChange:function(e){r(e)},onClose:function(){var e;i(!1),null===(e=l.current)||void 0===e||e.focus()},label:o,showInput:!1,type:t})}):null})]})};n(7117);function uc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function dc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?uc(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):uc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function pc(e){var t=e.options,n=e.value,r=e.label,o=e.onChange,a=e.onClose,i=s().useRef(),l=s().useRef(),c=s().useRef(null);s().useEffect((function(){l.current?l.current.focus():c.current&&c.current.focus()}),[]);return(0,_.jsx)(\"div\",{className:\"picker\",role:\"dialog\",\"aria-modal\":\"true\",\"aria-label\":r,onKeyDown:function(e){var n=t.find((function(t){return t.keyBinding===e.key.toLowerCase()}));if(e.metaKey||e.altKey||e.ctrlKey||!n)if(e.key===fn)setTimeout((function(){l.current!==document.activeElement&&a()}),0);else if(In(e.key)){var r=document.activeElement,o=T().rtl,i=Array.prototype.indexOf.call(c.current.children,r);if(-1!==i){var s=t.length,u=i;switch(e.key){case o?tn:nn:case en:u=(i+1)%s;break;case o?nn:tn:case rn:u=(s+i-1)%s}c.current.children[u].focus()}e.preventDefault()}else e.key!==un&&e.key!==cn||(e.preventDefault(),a());else{var d=t.indexOf(n);c.current.children[d].focus(),e.preventDefault()}e.nativeEvent.stopImmediatePropagation(),e.stopPropagation()},children:(0,_.jsx)(\"div\",{className:\"picker-content\",ref:c,children:t.map((function(e,t){return(0,_.jsxs)(\"button\",{className:\"picker-option\",onClick:function(t){t.currentTarget.focus(),o(e.value)},title:\"\".concat(e.text,\" \u2014 \").concat(e.keyBinding.toUpperCase()),\"aria-label\":e.text||\"none\",\"aria-keyshortcuts\":e.keyBinding,ref:function(r){r&&0===t&&(i.current=r),r&&e.value===n&&(l.current=r)},onFocus:function(){o(e.value)},children:[e.icon,(0,_.jsx)(\"span\",{className:\"picker-keybinding\",children:e.keyBinding})]},e.text)}))})})}function fc(e){var t,n=e.value,r=e.label,o=e.options,a=e.onChange,i=e.group,l=void 0===i?\"\":i,c=R(s().useState(!1),2),u=c[0],d=c[1],p=s().useRef(null),f=T().rtl;return(0,_.jsxs)(\"label\",{className:\"picker-container\",children:[(0,_.jsx)(\"button\",{name:l,className:u?\"active\":\"\",\"aria-label\":r,onClick:function(){return d(!u)},ref:p,children:null===(t=o.find((function(e){return e.value===n})))||void 0===t?void 0:t.icon}),(0,_.jsx)(s().Suspense,{fallback:\"\",children:u?(0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(oc,dc(dc({onCloseRequest:function(e){return e.target!==p.current&&d(!1)}},f?{right:5.5}:{left:-5.5}),{},{children:(0,_.jsx)(pc,{options:o,value:n,label:r,onChange:a,onClose:function(){var e;d(!1),null===(e=p.current)||void 0===e||e.focus()}})})),(0,_.jsx)(\"div\",{className:\"picker-triangle\"})]}):null})]})}function hc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function mc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?hc(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):hc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var gc=function(e,t,n){return e.map((function(e){var r;return t.selectedElementIds[e.id]||e.id===(null===(r=t.editingElement)||void 0===r?void 0:r.id)?n(e):e}))},vc=function(e,t,n,r){var o,a,i=t.editingElement,l=qi(e);return null!==(o=null!==(a=i&&n(i))&&void 0!==a?a:rl(l,t)?function(e,t,n){var r=Array.from(new Set(ol(e,t).map((function(e){return n(e)}))));return 1===r.length?r[0]:null}(l,t,n):r)&&void 0!==o?o:null},bc=(As({name:\"changeStrokeColor\",perform:function(e,t,n){return mc(mc({},n.currentItemStrokeColor&&{elements:gc(e,t,(function(e){return io(e,{strokeColor:n.currentItemStrokeColor})}))}),{},{appState:mc(mc({},t),n),commitToHistory:!!n.currentItemStrokeColor})},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"h3\",{\"aria-hidden\":\"true\",children:L(\"labels.stroke\")}),(0,_.jsx)(cc,{type:\"elementStroke\",label:L(\"labels.stroke\"),color:vc(t,n,(function(e){return e.strokeColor}),n.currentItemStrokeColor),onChange:function(e){return r({currentItemStrokeColor:e})},isActive:\"strokeColorPicker\"===n.openPopup,setActive:function(e){return r({openPopup:e?\"strokeColorPicker\":null})}})]})}}),As({name:\"changeBackgroundColor\",perform:function(e,t,n){return mc(mc({},n.currentItemBackgroundColor&&{elements:gc(e,t,(function(e){return io(e,{backgroundColor:n.currentItemBackgroundColor})}))}),{},{appState:mc(mc({},t),n),commitToHistory:!!n.currentItemBackgroundColor})},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"h3\",{\"aria-hidden\":\"true\",children:L(\"labels.background\")}),(0,_.jsx)(cc,{type:\"elementBackground\",label:L(\"labels.background\"),color:vc(t,n,(function(e){return e.backgroundColor}),n.currentItemBackgroundColor),onChange:function(e){return r({currentItemBackgroundColor:e})},isActive:\"backgroundColorPicker\"===n.openPopup,setActive:function(e){return r({openPopup:e?\"backgroundColorPicker\":null})}})]})}}),As({name:\"changeFillStyle\",perform:function(e,t,n){return{elements:gc(e,t,(function(e){return io(e,{fillStyle:n})})),appState:mc(mc({},t),{},{currentItemFillStyle:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.fill\")}),(0,_.jsx)(rc,{options:[{value:\"hachure\",text:L(\"labels.hachure\"),icon:(0,_.jsx)(as,{theme:n.theme})},{value:\"cross-hatch\",text:L(\"labels.crossHatch\"),icon:(0,_.jsx)(is,{theme:n.theme})},{value:\"solid\",text:L(\"labels.solid\"),icon:(0,_.jsx)(ls,{theme:n.theme})}],group:\"fill\",value:vc(t,n,(function(e){return e.fillStyle}),n.currentItemFillStyle),onChange:function(e){r(e)}})]})}}),As({name:\"changeStrokeWidth\",perform:function(e,t,n){return{elements:gc(e,t,(function(e){return io(e,{strokeWidth:n})})),appState:mc(mc({},t),{},{currentItemStrokeWidth:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.strokeWidth\")}),(0,_.jsx)(rc,{group:\"stroke-width\",options:[{value:1,text:L(\"labels.thin\"),icon:(0,_.jsx)(ss,{theme:n.theme,strokeWidth:2})},{value:2,text:L(\"labels.bold\"),icon:(0,_.jsx)(ss,{theme:n.theme,strokeWidth:6})},{value:4,text:L(\"labels.extraBold\"),icon:(0,_.jsx)(ss,{theme:n.theme,strokeWidth:10})}],value:vc(t,n,(function(e){return e.strokeWidth}),n.currentItemStrokeWidth),onChange:function(e){return r(e)}})]})}}),As({name:\"changeSloppiness\",perform:function(e,t,n){return{elements:gc(e,t,(function(e){return io(e,{seed:to(),roughness:n})})),appState:mc(mc({},t),{},{currentItemRoughness:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.sloppiness\")}),(0,_.jsx)(rc,{group:\"sloppiness\",options:[{value:0,text:L(\"labels.architect\"),icon:(0,_.jsx)(ps,{theme:n.theme})},{value:1,text:L(\"labels.artist\"),icon:(0,_.jsx)(fs,{theme:n.theme})},{value:2,text:L(\"labels.cartoonist\"),icon:(0,_.jsx)(hs,{theme:n.theme})}],value:vc(t,n,(function(e){return e.roughness}),n.currentItemRoughness),onChange:function(e){return r(e)}})]})}}),As({name:\"changeStrokeStyle\",perform:function(e,t,n){return{elements:gc(e,t,(function(e){return io(e,{strokeStyle:n})})),appState:mc(mc({},t),{},{currentItemStrokeStyle:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.strokeStyle\")}),(0,_.jsx)(rc,{group:\"strokeStyle\",options:[{value:\"solid\",text:L(\"labels.strokeStyle_solid\"),icon:(0,_.jsx)(cs,{theme:n.theme})},{value:\"dashed\",text:L(\"labels.strokeStyle_dashed\"),icon:(0,_.jsx)(us,{theme:n.theme})},{value:\"dotted\",text:L(\"labels.strokeStyle_dotted\"),icon:(0,_.jsx)(ds,{theme:n.theme})}],value:vc(t,n,(function(e){return e.strokeStyle}),n.currentItemStrokeStyle),onChange:function(e){return r(e)}})]})}}),As({name:\"changeOpacity\",perform:function(e,t,n){return{elements:gc(e,t,(function(e){return io(e,{opacity:n})})),appState:mc(mc({},t),{},{currentItemOpacity:n}),commitToHistory:!0}},PanelComponent:function(e){var t,n=e.elements,r=e.appState,o=e.updateData;return(0,_.jsxs)(\"label\",{className:\"control-label\",children:[L(\"labels.opacity\"),(0,_.jsx)(\"input\",{type:\"range\",min:\"0\",max:\"100\",step:\"10\",onChange:function(e){return o(+e.target.value)},onWheel:function(e){e.stopPropagation();var t=+e.target.value;e.deltaY<0&&t<100?o(t+10):e.deltaY>0&&t>0&&o(t-10)},value:null!==(t=vc(n,r,(function(e){return e.opacity}),r.currentItemOpacity))&&void 0!==t?t:void 0})]})}}),As({name:\"changeFontSize\",perform:function(e,t,n){return{elements:gc(e,t,(function(e){if(Xe(e)){var t=io(e,{fontSize:n});return Ui(t),t}return e})),appState:mc(mc({},t),{},{currentItemFontSize:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.fontSize\")}),(0,_.jsx)(rc,{group:\"font-size\",options:[{value:16,text:L(\"labels.small\"),icon:(0,_.jsx)(ws,{theme:n.theme})},{value:20,text:L(\"labels.medium\"),icon:(0,_.jsx)(ks,{theme:n.theme})},{value:28,text:L(\"labels.large\"),icon:(0,_.jsx)(Ss,{theme:n.theme})},{value:36,text:L(\"labels.veryLarge\"),icon:(0,_.jsx)(Es,{theme:n.theme})}],value:vc(t,n,(function(e){return Xe(e)&&e.fontSize}),n.currentItemFontSize||c.n5),onChange:function(e){return r(e)}})]})}}),As({name:\"changeFontFamily\",perform:function(e,t,n){return{elements:gc(e,t,(function(e){if(Xe(e)){var t=io(e,{fontFamily:n});return Ui(t),t}return e})),appState:mc(mc({},t),{},{currentItemFontFamily:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,o=[{value:c.ut.Virgil,text:L(\"labels.handDrawn\"),icon:(0,_.jsx)(js,{theme:n.theme})},{value:c.ut.Helvetica,text:L(\"labels.normal\"),icon:(0,_.jsx)(Cs,{theme:n.theme})},{value:c.ut.Cascadia,text:L(\"labels.code\"),icon:(0,_.jsx)(Os,{theme:n.theme})}];return(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.fontFamily\")}),(0,_.jsx)(rc,{group:\"font-family\",options:o,value:vc(t,n,(function(e){return Xe(e)&&e.fontFamily}),n.currentItemFontFamily||c.rk),onChange:function(e){return r(e)}})]})}}),As({name:\"changeTextAlign\",perform:function(e,t,n){return{elements:gc(e,t,(function(e){if(Xe(e)){var t=io(e,{textAlign:n});return Ui(t),t}return e})),appState:mc(mc({},t),{},{currentItemTextAlign:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.textAlign\")}),(0,_.jsx)(rc,{group:\"text-align\",options:[{value:\"left\",text:L(\"labels.left\"),icon:(0,_.jsx)(Ms,{theme:n.theme})},{value:\"center\",text:L(\"labels.center\"),icon:(0,_.jsx)(Is,{theme:n.theme})},{value:\"right\",text:L(\"labels.right\"),icon:(0,_.jsx)(Ps,{theme:n.theme})}],value:vc(t,n,(function(e){return Xe(e)&&e.textAlign}),n.currentItemTextAlign),onChange:function(e){return r(e)}})]})}}),As({name:\"changeSharpness\",perform:function(e,t,n){var r=al(qi(e),t),o=r.length?r.every((function(e){return!Qe(e)})):!Je(t.elementType),a=r.length?r.every(Qe):Je(t.elementType);return{elements:gc(e,t,(function(e){return io(e,{strokeSharpness:n})})),appState:mc(mc({},t),{},{currentItemStrokeSharpness:o?n:t.currentItemStrokeSharpness,currentItemLinearStrokeSharpness:a?n:t.currentItemLinearStrokeSharpness}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.edges\")}),(0,_.jsx)(rc,{group:\"edges\",options:[{value:\"sharp\",text:L(\"labels.sharp\"),icon:(0,_.jsx)(ms,{theme:n.theme})},{value:\"round\",text:L(\"labels.round\"),icon:(0,_.jsx)(gs,{theme:n.theme})}],value:vc(t,n,(function(e){return e.strokeSharpness}),dl(n.elementType)&&(Je(n.elementType)?n.currentItemLinearStrokeSharpness:n.currentItemStrokeSharpness)||null),onChange:function(e){return r(e)}})]})}}),As({name:\"changeArrowhead\",perform:function(e,t,n){return{elements:gc(e,t,(function(e){if(Qe(e)){var t=n.position,r=n.type;if(\"start\"===t)return io(e,{startArrowhead:r});if(\"end\"===t)return io(e,{endArrowhead:r})}return e})),appState:mc(mc({},t),{},V({},\"start\"===n.position?\"currentItemStartArrowhead\":\"currentItemEndArrowhead\",n.type)),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,o=T().rtl;return(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.arrowheads\")}),(0,_.jsxs)(\"div\",{className:\"iconSelectList\",children:[(0,_.jsx)(fc,{label:\"arrowhead_start\",options:[{value:null,text:L(\"labels.arrowhead_none\"),icon:(0,_.jsx)(vs,{theme:n.theme}),keyBinding:\"q\"},{value:\"arrow\",text:L(\"labels.arrowhead_arrow\"),icon:(0,_.jsx)(bs,{theme:n.theme,flip:!o}),keyBinding:\"w\"},{value:\"bar\",text:L(\"labels.arrowhead_bar\"),icon:(0,_.jsx)(xs,{theme:n.theme,flip:!o}),keyBinding:\"e\"},{value:\"dot\",text:L(\"labels.arrowhead_dot\"),icon:(0,_.jsx)(ys,{theme:n.theme,flip:!o}),keyBinding:\"r\"}],value:vc(t,n,(function(e){return Qe(e)&&fl(e.type)?e.startArrowhead:n.currentItemStartArrowhead}),n.currentItemStartArrowhead),onChange:function(e){return r({position:\"start\",type:e})}}),(0,_.jsx)(fc,{label:\"arrowhead_end\",group:\"arrowheads\",options:[{value:null,text:L(\"labels.arrowhead_none\"),keyBinding:\"q\",icon:(0,_.jsx)(vs,{theme:n.theme})},{value:\"arrow\",text:L(\"labels.arrowhead_arrow\"),keyBinding:\"w\",icon:(0,_.jsx)(bs,{theme:n.theme,flip:o})},{value:\"bar\",text:L(\"labels.arrowhead_bar\"),keyBinding:\"e\",icon:(0,_.jsx)(xs,{theme:n.theme,flip:o})},{value:\"dot\",text:L(\"labels.arrowhead_dot\"),keyBinding:\"r\",icon:(0,_.jsx)(ys,{theme:n.theme,flip:o})}],value:vc(t,n,(function(e){return Qe(e)&&fl(e.type)?e.endArrowhead:n.currentItemEndArrowhead}),n.currentItemEndArrowhead),onChange:function(e){return r({position:\"end\",type:e})}})]})]})}}),function(e){var t=e.title||(\"dark\"===e.value?L(\"buttons.lightMode\"):L(\"buttons.darkMode\"));return(0,_.jsx)(vl,{type:\"icon\",icon:\"light\"===e.value?yc.MOON:yc.SUN,title:t,\"aria-label\":t,onClick:function(){return e.onChange(\"dark\"===e.value?\"light\":\"dark\")},\"data-testid\":\"toggle-dark-mode\"})}),yc={SUN:(0,_.jsx)(\"svg\",{width:\"512\",height:\"512\",className:\"rtl-mirror\",viewBox:\"0 0 512 512\",children:(0,_.jsx)(\"path\",{fill:\"currentColor\",d:\"M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z\"})}),MOON:(0,_.jsx)(\"svg\",{width:\"512\",height:\"512\",className:\"rtl-mirror\",viewBox:\"0 0 512 512\",children:(0,_.jsx)(\"path\",{fill:\"currentColor\",d:\"M283.211 512c78.962 0 151.079-35.925 198.857-94.792 7.068-8.708-.639-21.43-11.562-19.35-124.203 23.654-238.262-71.576-238.262-196.954 0-72.222 38.662-138.635 101.498-174.394 9.686-5.512 7.25-20.197-3.756-22.23A258.156 258.156 0 0 0 283.211 0c-141.309 0-256 114.511-256 256 0 141.309 114.511 256 256 256z\"})})},xc=(n(6781),function(){var e=document.querySelector(\".excalidraw-tooltip\");if(e)return e;var t=document.createElement(\"div\");return document.body.appendChild(t),t.classList.add(\"excalidraw-tooltip\"),t}),wc=function(e){var t=e.children,n=e.label,r=e.long,o=void 0!==r&&r;return(0,l.useEffect)((function(){return function(){return xc().classList.remove(\"excalidraw-tooltip--visible\")}}),[]),(0,_.jsx)(\"div\",{className:\"excalidraw-tooltip-wrapper\",onPointerEnter:function(e){return function(e,t,n,r){t.classList.add(\"excalidraw-tooltip--visible\"),t.style.minWidth=r?\"50ch\":\"10ch\",t.style.maxWidth=r?\"50ch\":\"15ch\",t.textContent=n;var o=e.getBoundingClientRect(),a=o.x,i=o.bottom,l=o.top,s=o.width,c=t.getBoundingClientRect(),u=c.width,d=c.height,p=window.innerWidth,f=a+s\/2-u\/2,h=f+u>=p?f+u-p:0,m=i+5,g=m+d>=window.innerHeight?i-l+d+10:0;Object.assign(t.style,{top:\"\".concat(m-g,\"px\"),left:\"\".concat(f-h,\"px\")})}(e.currentTarget,xc(),n,o)},onPointerLeave:function(){return xc().classList.remove(\"excalidraw-tooltip--visible\")},children:t})};function kc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Sc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?kc(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):kc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}As({name:\"changeViewBackgroundColor\",perform:function(e,t,n){return{appState:Sc(Sc({},t),n),commitToHistory:!!n.viewBackgroundColor}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,_.jsx)(\"div\",{style:{position:\"relative\"},children:(0,_.jsx)(cc,{label:L(\"labels.canvasBackground\"),type:\"canvasBackground\",color:t.viewBackgroundColor,onChange:function(e){return n({viewBackgroundColor:e})},isActive:\"canvasColorPicker\"===t.openPopup,setActive:function(e){return n({openPopup:e?\"canvasColorPicker\":null})},\"data-testid\":\"canvas-background-picker\"})})}}),As({name:\"clearCanvas\",perform:function(e,t){return{elements:e.map((function(e){return io(e,{isDeleted:!0})})),appState:Sc(Sc({},ir()),{},{theme:t.theme,elementLocked:t.elementLocked,exportBackground:t.exportBackground,exportEmbedScene:t.exportEmbedScene,gridSize:t.gridSize,showStats:t.showStats,pasteDialog:t.pasteDialog}),commitToHistory:!0}},PanelComponent:function(e){var t=e.updateData;return(0,_.jsx)(vl,{type:\"button\",icon:Ml,title:L(\"buttons.clearReset\"),\"aria-label\":L(\"buttons.clearReset\"),showAriaLabel:ah(),onClick:function(){window.confirm(L(\"alerts.clearReset\"))&&t(null)},\"data-testid\":\"clear-canvas-button\"})}}),As({name:\"zoomIn\",perform:function(e,t){var n=ml(gl(t.zoom.value+c.V4),t.zoom,{left:t.offsetLeft,top:t.offsetTop},{x:t.width\/2,y:t.height\/2});return{appState:Sc(Sc({},t),{},{zoom:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData;return(0,_.jsx)(vl,{type:\"button\",icon:Ll,title:\"\".concat(L(\"buttons.zoomIn\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd++\")),\"aria-label\":L(\"buttons.zoomIn\"),onClick:function(){t(null)},size:\"small\"})},keyTest:function(e){return(e.code===At||e.code===_t)&&(e[ln]||e.shiftKey)}}),As({name:\"zoomOut\",perform:function(e,t){var n=ml(gl(t.zoom.value-c.V4),t.zoom,{left:t.offsetLeft,top:t.offsetTop},{x:t.width\/2,y:t.height\/2});return{appState:Sc(Sc({},t),{},{zoom:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData;return(0,_.jsx)(vl,{type:\"button\",icon:_l,title:\"\".concat(L(\"buttons.zoomOut\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd+-\")),\"aria-label\":L(\"buttons.zoomOut\"),onClick:function(){t(null)},size:\"small\"})},keyTest:function(e){return(e.code===Lt||e.code===Dt)&&(e[ln]||e.shiftKey)}}),As({name:\"resetZoom\",perform:function(e,t){return{appState:Sc(Sc({},t),{},{zoom:ml(1,t.zoom,{left:t.offsetLeft,top:t.offsetTop},{x:t.width\/2,y:t.height\/2})}),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData,n=e.appState;return(0,_.jsx)(wc,{label:L(\"buttons.resetZoom\"),children:(0,_.jsxs)(vl,{type:\"button\",className:\"reset-zoom-button\",title:L(\"buttons.resetZoom\"),\"aria-label\":L(\"buttons.resetZoom\"),onClick:function(){t(null)},size:\"small\",children:[(100*n.zoom.value).toFixed(0),\"%\"]})})},keyTest:function(e){return(e.code===Gt||e.code===zt)&&(e[ln]||e.shiftKey)}});var Ec=function(e,t,n){var r=qi(e),o=ol(r,t),a=n&&o.length>0?St(o):St(r),i=function(e,t){var n=R(e,4),r=n[0],o=n[1],a=n[2],i=n[3],l=a-r,s=t.width\/l,u=i-o,d=t.height\/u,p=Math.min(s,d),f=Math.floor(p\/c.V4)*c.V4;return Math.min(Math.max(f,c.V4),1)}(a,{width:t.width,height:t.height}),l=ml(i,t.zoom,{left:t.offsetLeft,top:t.offsetTop}),s=R(a,4),u=s[0],d=s[1],p=(u+s[2])\/2,f=(d+s[3])\/2;return{appState:Sc(Sc(Sc({},t),il({scenePoint:{x:p,y:f},viewportDimensions:{width:t.width,height:t.height},zoom:l})),{},{zoom:l}),commitToHistory:!1}};As({name:\"zoomToSelection\",perform:function(e,t){return Ec(e,t,!0)},keyTest:function(e){return e.code===Rt&&e.shiftKey&&!e.altKey&&!e[ln]}}),As({name:\"zoomToFit\",perform:function(e,t){return Ec(e,t,!1)},keyTest:function(e){return e.code===Nt&&e.shiftKey&&!e.altKey&&!e[ln]}}),As({name:\"toggleTheme\",perform:function(e,t,n){return{appState:Sc(Sc({},t),{},{theme:n||(\"light\"===t.theme?\"dark\":\"light\")}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,_.jsx)(\"div\",{style:{marginInlineStart:\"0.25rem\"},children:(0,_.jsx)(bc,{value:t.theme,onChange:function(e){n(e)}})})},keyTest:function(e){return e.altKey&&e.shiftKey&&e.code===Wt}});function jc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Cc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?jc(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):jc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Oc,Mc,Ic,Pc=As({name:\"finalize\",perform:function(e,t,n,r){var o,a=r.canvas,i=r.focusContainer;if(t.editingLinearElement){var l=t.editingLinearElement,s=l.elementId,c=l.startBindingElement,u=l.endBindingElement,d=ti.getElement(s);if(d)return et(d)&&oi(d,c,u),{elements:d.points.length<2||so(d)?e.filter((function(e){return e.id!==d.id})):void 0,appState:Cc(Cc({},t),{},{editingLinearElement:null}),commitToHistory:!0}}var p=e;window.document.activeElement instanceof HTMLElement&&i();var f=t.multiElement?t.multiElement:\"freedraw\"===(null===(o=t.editingElement)||void 0===o?void 0:o.type)?t.editingElement:null;if(f){if(\"freedraw\"!==f.type&&\"touch\"!==t.lastPointerDownWith){var h=f.points,m=f.lastCommittedPoint;m&&h[h.length-1]===m||ao(f,{points:f.points.slice(0,-1)})}so(f)&&(p=p.slice(0,-1));var g=lt(f.points,t.zoom.value);if((\"line\"===f.type||\"freedraw\"===f.type)&&g){var v=f.points,b=v[0];ao(f,{points:v.map((function(e,t){return t===v.length-1?[b[0],b[1]]:e}))})}if(et(f)&&!g&&f.points.length>1){var y=R(ti.getPointAtIndexGlobalCoordinates(f,-1),2),x=y[0],w=y[1];si(f,t,Jr.getScene(f),{x:x,y:w})}t.elementLocked||\"freedraw\"===t.elementType||(t.selectedElementIds[f.id]=!0)}return(t.elementLocked||\"freedraw\"===t.elementType)&&f||Gn(a),{elements:p,appState:Cc(Cc({},t),{},{elementType:(t.elementLocked||\"freedraw\"===t.elementType)&&f?t.elementType:\"selection\",draggingElement:null,multiElement:null,editingElement:null,startBoundElement:null,suggestedBindings:[],selectedElementIds:f&&!t.elementLocked&&\"freedraw\"!==t.elementType?Cc(Cc({},t.selectedElementIds),{},V({},f.id,!0)):t.selectedElementIds}),commitToHistory:\"freedraw\"===t.elementType}},keyTest:function(e,t){return e.key===un&&(null!==t.editingLinearElement||!t.draggingElement&&null===t.multiElement)||(e.key===un||e.key===cn)&&null!==t.multiElement},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,_.jsx)(vl,{type:\"button\",icon:Dl,title:L(\"buttons.done\"),\"aria-label\":L(\"buttons.done\"),onClick:n,visible:null!=t.multiElement})}}),Tc=\"undefined\"!=typeof process&&null!==(Oc=process.env)&&void 0!==Oc&&Oc.REACT_APP_GOOGLE_ANALYTICS_ID&&\"undefined\"!=typeof window&&window.gtag?function(e,t,n,r){window.gtag(\"event\",t,{event_category:e,event_label:n,value:r})}:(\"undefined\"!=typeof process&&null!==(Mc=process.env)&&void 0!==Mc&&Mc.JEST_WORKER_ID,function(e,t,n,r){}),Ac=(n(518),n(9966),function(e){var t=lh().id,n=R((0,l.useState)(e.value),2),r=n[0],o=n[1];return(0,_.jsxs)(\"div\",{className:\"ProjectName\",children:[(0,_.jsx)(\"label\",{className:\"ProjectName-label\",htmlFor:\"filename\",children:\"\".concat(e.label).concat(e.isNameEditable?\"\":\":\")}),e.isNameEditable?(0,_.jsx)(\"input\",{className:\"TextInput\",onBlur:function(t){!function(e){for(var t=e.parentElement;t;){if(t.tabIndex>-1)return void t.focus();t=t.parentElement}}(t.target);var n=t.target.value;n!==e.value&&e.onChange(n)},onKeyDown:function(e){if(\"Enter\"===e.key){if(e.preventDefault(),e.nativeEvent.isComposing||229===e.keyCode)return;e.currentTarget.blur()}},id:\"\".concat(t,\"-filename\"),value:r,onChange:function(e){return o(e.target.value)}}):(0,_.jsx)(\"span\",{className:\"TextInput TextInput--readonly\",id:\"\".concat(t,\"-filename\"),children:e.value})]})}),Lc=function(e,t,n,r,o,a){e.beginPath(),e.moveTo(t+a,n),e.lineTo(t+r-a,n),e.quadraticCurveTo(t+r,n,t+r,n+a),e.lineTo(t+r,n+o-a),e.quadraticCurveTo(t+r,n+o,t+r-a,n+o),e.lineTo(t+a,n+o),e.quadraticCurveTo(t,n+o,t,n+o-a),e.lineTo(t,n+a),e.quadraticCurveTo(t,n,t+a,n),e.closePath(),e.fill(),e.stroke()},_c=function(e,t){if(null!=t&&t.collaborators){var n=t.collaborators.get(e);if(null!=n&&n.color)return n.color}var r=e.split(\"\").reduce((function(e,t){return e+t.charCodeAt(0)}),0),o=Mt.elementBackground.slice(1),a=Mt.elementStroke.slice(1);return{background:o[r%o.length],stroke:a[r%a.length]}};function Dc(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return zc(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return zc(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function zc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}!function(e){e.ACTIVE=\"active\",e.AWAY=\"away\",e.IDLE=\"idle\"}(Ic||(Ic={}));var Bc=function(){var e=document.createElement(\"canvas\").getContext(\"2d\");if(!e)return!1;return e.fillStyle=\"#f00\",e.textBaseline=\"top\",e.font=\"32px Arial\",e.fillText(\"\ud83d\ude00\",0,0),0!==e.getImageData(12,12,1,1).data[0]}(),Hc=function(e,t,n,r,o,a,i,l){var s=arguments.length>8&&void 0!==arguments[8]&&arguments[8];e.save(),e.translate(a,i),e.rotate(l),s&&e.fillRect(t-a,n-i,r,o),e.strokeRect(t-a,n-i,r,o),e.restore()},Nc=function(e,t,n,r){e.beginPath(),e.arc(t,n,r,0,2*Math.PI),e.fill(),e.stroke()},Rc=function(e,t,n,r,o,a){e.save(),e.strokeStyle=\"rgba(0,0,0,0.1)\",e.beginPath();for(var i=n;i<n+o+2*t;i+=t)e.moveTo(i,r-t),e.lineTo(i,r+a+2*t);for(var l=r;l<r+a+2*t;l+=t)e.moveTo(n-t,l),e.lineTo(n+o+2*t,l);e.stroke(),e.restore()},Fc=function(e,t,n,r){e.save(),e.translate(n.scrollX,n.scrollY),e.lineWidth=1\/n.zoom.value,ti.getPointsGlobalCoordinates(r).forEach((function(r,o){var a;e.strokeStyle=\"red\",e.setLineDash([]),e.fillStyle=(null===(a=t.editingLinearElement)||void 0===a?void 0:a.activePointIndex)===o?\"rgba(255, 127, 127, 0.9)\":\"rgba(255, 255, 255, 0.9)\";var i=ti.POINT_HANDLE_SIZE;Nc(e,r[0],r[1],i\/2\/n.zoom.value)})),e.restore()},Vc=function(e,t,n,r,o,a,i){var l=arguments.length>7&&void 0!==arguments[7]?arguments[7]:{},s=l.renderScrollbars,u=void 0===s||s,d=l.renderSelection,p=void 0===d||d,f=l.renderOptimizations,h=void 0!==f&&f,m=l.renderGrid,g=void 0===m||m;if(null===a)return{atLeastOneVisibleElement:!1};var v=a.getContext(\"2d\");v.setTransform(1,0,0,1,0,0),v.save(),v.scale(r,r);var b=a.width\/r,y=a.height\/r;if(i.exportWithDarkMode&&(v.filter=c.ZF),\"string\"==typeof i.viewBackgroundColor){var x=\"transparent\"===i.viewBackgroundColor||5===i.viewBackgroundColor.length||9===i.viewBackgroundColor.length||\/(hsla|rgba)\\(\/.test(i.viewBackgroundColor);x&&v.clearRect(0,0,b,y),v.save(),v.fillStyle=i.viewBackgroundColor,v.fillRect(0,0,b,y),v.restore()}else v.clearRect(0,0,b,y);var w=i.zoom.translation.x,k=i.zoom.translation.y;v.save(),v.translate(w,k),v.scale(i.zoom.value,i.zoom.value),g&&t.gridSize&&Rc(v,t.gridSize,-Math.ceil(w\/i.zoom.value\/t.gridSize)*t.gridSize+i.scrollX%t.gridSize,-Math.ceil(k\/i.zoom.value\/t.gridSize)*t.gridSize+i.scrollY%t.gridSize,b\/i.zoom.value,y\/i.zoom.value);var S,E=e.filter((function(e){return Yc(e,b,y,{zoom:i.zoom,offsetLeft:t.offsetLeft,offsetTop:t.offsetTop,scrollX:i.scrollX,scrollY:i.scrollY})}));if(E.forEach((function(e){try{Gr(e,o,v,h,i)}catch(e){console.error(e)}})),t.editingLinearElement){var j=ti.getElement(t.editingLinearElement.elementId);j&&Fc(v,t,i,j)}if(n)try{Gr(n,o,v,h,i)}catch(e){console.error(e)}if(ri(t)&&t.suggestedBindings.filter((function(e){return null!=e})).forEach((function(e){Kc(v,i,e)})),p&&!t.multiElement&&!t.editingLinearElement){var C,O=e.reduce((function(e,n){var r=[];if(t.selectedElementIds[n.id]&&!bo(t,n)&&r.push(Ct.black),i.remoteSelectedElementIds[n.id]&&r.push.apply(r,F(i.remoteSelectedElementIds[n.id].map((function(e){return _c(e,t).background})))),r.length){var o=R(gt(n),4),a=o[0],l=o[1],s=o[2],c=o[3];e.push({angle:n.angle,elementX1:a,elementY1:l,elementX2:s,elementY2:c,selectionColors:r})}return e}),[]),M=function(t){var n=So(e,t),r=R(St(n),4),o=r[0],a=r[1],i=r[2],l=r[3];O.push({angle:0,elementX1:o,elementX2:i,elementY1:a,elementY2:l,selectionColors:[Ct.black]})},I=Dc(xo(t));try{for(I.s();!(C=I.n()).done;){var P=C.value;M(P)}}catch(e){I.e(e)}finally{I.f()}t.editingGroupId&&M(t.editingGroupId),O.forEach((function(e){return Uc(v,i,e)}));var T=ol(e,t);if(v.save(),v.translate(i.scrollX,i.scrollY),1===T.length){v.fillStyle=Ct.white;var A=Go(T[0],i.zoom,\"mouse\");t.viewModeEnabled||Gc(v,i,A,T[0].angle)}else if(T.length>1&&!t.isRotating){var L=4\/i.zoom.value;v.fillStyle=Ct.white;var _=St(T),D=R(_,4),z=D[0],B=D[1],H=D[2],N=D[3],V=v.getLineDash();v.setLineDash([2\/i.zoom.value]);var G=v.lineWidth;v.lineWidth=1\/i.zoom.value,Hc(v,z-L,B-L,H-z+2*L,N-B+2*L,(z+H)\/2,(B+N)\/2,0),v.lineWidth=G,v.setLineDash(V);var U=Vo([z,B,H,N],0,i.zoom,\"mouse\",Bo);Gc(v,i,U,0)}v.restore()}for(var K in v.restore(),i.remotePointerViewportCoords){var W=i.remotePointerViewportCoords[K],Z=W.x,Y=W.y;Z-=t.offsetLeft,Y-=t.offsetTop;var X=9,q=14,$=Z<0||Z>b-X||Y<0||Y>y-q;Z=Math.max(Z,0),Z=Math.min(Z,b-X),Y=Math.max(Y,0),Y=Math.min(Y,y-q);var Q=_c(K,t),J=Q.background,ee=Q.stroke;v.save(),v.strokeStyle=ee,v.fillStyle=J;var te=i.remotePointerUserStates[K];($||te===Ic.AWAY)&&(v.globalAlpha=.48),i.remotePointerButton&&\"down\"===i.remotePointerButton[K]&&(v.beginPath(),v.arc(Z,Y,15,0,2*Math.PI,!1),v.lineWidth=3,v.strokeStyle=\"#ffffff88\",v.stroke(),v.closePath(),v.beginPath(),v.arc(Z,Y,15,0,2*Math.PI,!1),v.lineWidth=1,v.strokeStyle=ee,v.stroke(),v.closePath()),v.beginPath(),v.moveTo(Z,Y),v.lineTo(Z+1,Y+14),v.lineTo(Z+4,Y+9),v.lineTo(Z+9,Y+10),v.lineTo(Z,Y),v.fill(),v.stroke();var ne=i.remotePointerUsernames[K],re=\"\";te===Ic.AWAY?re=Bc?\"\u26ab\ufe0f\":\" (\".concat(Ic.AWAY,\")\"):te===Ic.IDLE?re=Bc?\"\ud83d\udca4\":\" (\".concat(Ic.IDLE,\")\"):te===Ic.ACTIVE&&(re=Bc?\"\ud83d\udfe2\":\"\");var oe=\"\".concat(ne?\"\".concat(ne,\" \"):\"\").concat(re);if(!$&&oe){var ae=Z+X,ie=Y+q,le=4,se=4,ce=v.measureText(oe),ue=ce.actualBoundingBoxDescent+ce.actualBoundingBoxAscent;v.fillStyle=ee,v.fillRect(ae-1,ie-1,ce.width+2*le+2,ue+2*se+2),v.fillStyle=J,v.fillRect(ae,ie,ce.width+2*le,ue+2*se),v.fillStyle=Ct.white,v.fillText(oe,ae+le,ie+se+ce.actualBoundingBoxAscent)}v.restore(),v.closePath()}return u&&(S=tl(e,b,y,i),v.save(),v.fillStyle=el,v.strokeStyle=\"rgba(255,255,255,0.8)\",[S.horizontal,S.vertical].forEach((function(e){e&&Lc(v,e.x,e.y,e.width,e.height,3)})),v.restore()),v.restore(),{atLeastOneVisibleElement:E.length>0,scrollBars:S}},Gc=function(e,t,n,r){Object.keys(n).forEach((function(o){var a=n[o];void 0!==a&&(e.save(),e.lineWidth=1\/t.zoom.value,\"rotation\"===o?Nc(e,a[0]+a[2]\/2,a[1]+a[3]\/2,a[2]\/2):Hc(e,a[0],a[1],a[2],a[3],a[0]+a[2]\/2,a[1]+a[3]\/2,r,!0),e.restore())}))},Uc=function(e,t,n){var r=n.angle,o=n.elementX1,a=n.elementY1,i=n.elementX2,l=n.elementY2,s=n.selectionColors,c=i-o,u=l-a,d=4\/t.zoom.value,p=8\/t.zoom.value,f=4\/t.zoom.value;e.save(),e.translate(t.scrollX,t.scrollY),e.lineWidth=1\/t.zoom.value;for(var h=s.length,m=0;m<h;++m)e.strokeStyle=s[m],e.setLineDash([p,f+(p+f)*(h-1)]),e.lineDashOffset=(p+f)*m,Hc(e,o-d,a-d,c+2*d,u+2*d,o+c\/2,a+u\/2,r);e.restore()},Kc=function(e,t,n){var r=Array.isArray(n)?Zc:Wc;e.save(),e.translate(t.scrollX,t.scrollY),r(e,n),e.restore()},Wc=function(e,t){var n=R(gt(t),4),r=n[0],o=n[1],a=n[2]-r,i=n[3]-o,l=xa(t,a,i);e.strokeStyle=\"rgba(0,0,0,.05)\",e.lineWidth=l-4;var s=2+l\/2;switch(t.type){case\"rectangle\":case\"text\":Hc(e,r-s,o-s,a+2*s,i+2*s,r+a\/2,o+i\/2,t.angle);break;case\"diamond\":var c=Math.hypot(a,i);!function(e,t,n,r,o,a){e.save(),e.translate(r,o),e.rotate(a),e.beginPath(),e.moveTo(0,n\/2),e.lineTo(t\/2,0),e.lineTo(0,-n\/2),e.lineTo(-t\/2,0),e.closePath(),e.stroke(),e.restore()}(e,a+2*(s*c\/i),i+2*(s*c\/a),r+a\/2,o+i\/2,t.angle);break;case\"ellipse\":!function(e,t,n,r,o,a){e.beginPath(),e.ellipse(r,o,t\/2,n\/2,a,0,2*Math.PI),e.stroke()}(e,a+2*s,i+2*s,r+a\/2,o+i\/2,t.angle)}},Zc=function(e,t){var n=R(t,3),r=n[0],o=n[1],a=n[2],i=xa(a,a.width,a.height);e.strokeStyle=\"rgba(0,0,0,0)\",e.fillStyle=\"rgba(0,0,0,.05)\",(\"both\"===o?[0,-1]:\"start\"===o?[0]:[-1]).forEach((function(t){var n=R(ti.getPointAtIndexGlobalCoordinates(r,t),2),o=n[0],a=n[1];Nc(e,o,a,i)}))},Yc=function(e,t,n,r){var o=R(kt(e),4),a=o[0],i=o[1],l=o[2],s=o[3],c=Yn({clientX:r.offsetLeft,clientY:r.offsetTop},r),u=Yn({clientX:r.offsetLeft+t,clientY:r.offsetTop+n},r);return c.x<=l&&c.y<=s&&u.x>=a&&u.y>=i},Xc=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=r.offsetX,a=void 0===o?0:o,i=r.offsetY,l=void 0===i?0:i;n&&e.forEach((function(e){if(!e.isDeleted)try{Kr(e,t,n,e.x+a,e.y+l)}catch(e){console.error(e)}}))};var qc=(()=>{if(\"undefined\"==typeof self)return!1;if(\"top\"in self&&self!==top)try{top.location}catch{return!1}else if(\"showOpenFilePicker\"in self)return\"showOpenFilePicker\";return!1})();const $c=qc?n.e(736).then(n.bind(n,6629)):n.e(736).then(n.bind(n,3112));qc?n.e(736).then(n.bind(n,5756)):n.e(736).then(n.bind(n,8396));const Qc=qc?n.e(736).then(n.bind(n,4868)):n.e(736).then(n.bind(n,6882));function Jc(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function eu(e,t,n){return(eu=Jc()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&m(o,n.prototype),o}).apply(null,arguments)}function tu(e){var t=\"function\"==typeof Map?new Map:void 0;return(tu=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf(\"[native code]\")))return e;var n;if(\"function\"!=typeof e)throw new TypeError(\"Super expression must either be null or a function\");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return eu(e,arguments,x(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),m(r,e)})(e)}function nu(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=x(e);if(t){var o=x(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return y(this,n)}}var ru=function(e){g(n,e);var t=nu(n);function n(){var e,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"Couldn't export canvas.\",o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"CANVAS_ERROR\";return p(this,n),(e=t.call(this)).name=o,e.message=r,e}return n}(tu(Error)),ou=function(e){g(n,e);var t=nu(n);function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"Request Aborted\";return p(this,n),t.call(this,e,\"AbortError\")}return n}(tu(DOMException)),au={jpg:\"image\/jpeg\",png:\"image\/png\",svg:\"image\/svg+xml\",json:\"application\/json\",excalidraw:c.LO.excalidraw,excalidrawlib:c.LO.excalidrawlib},iu=function(e){var t,n,r,o=null===(t=e.extensions)||void 0===t?void 0:t.reduce((function(e,t){return e.push(au[t]),e}),[]),a=null===(n=e.extensions)||void 0===n?void 0:n.reduce((function(e,t){return\"jpg\"===t?e.concat(\".jpg\",\".jpeg\"):e.concat(\".\".concat(t))}),[]);return async function(...e){return(await $c).default(...e)}({description:e.description,extensions:a,mimeTypes:o,multiple:null!==(r=e.multiple)&&void 0!==r&&r,legacySetup:function(t,n,r){var o=Fn(n,500),a=function(){i(),document.addEventListener(c.Ks.KEYUP,o),document.addEventListener(c.Ks.POINTER_UP,o),o()},i=function(){var n;if(null!==(n=r.files)&&void 0!==n&&n.length){var o=e.multiple?F(r.files):r.files[0];t(o)}};requestAnimationFrame((function(){window.addEventListener(c.Ks.FOCUS,a)}));var l=window.setInterval((function(){i()}),500);return function(e){clearInterval(l),o.cancel(),window.removeEventListener(c.Ks.FOCUS,a),document.removeEventListener(c.Ks.KEYUP,o),document.removeEventListener(c.Ks.POINTER_UP,o),e&&(console.warn(\"Opening the file was canceled (legacy-fs).\"),e(new ou))}}})},lu=function(e,t){return async function(...e){return(await Qc).default(...e)}(e,{fileName:\"\".concat(t.name,\".\").concat(t.extension),description:t.description,extensions:[\".\".concat(t.extension)]},t.fileHandle)};function su(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return cu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return cu(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function cu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function uu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function du(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?uu(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):uu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var pu={selection:!0,text:!0,rectangle:!0,diamond:!0,ellipse:!0,line:!0,arrow:!0,freedraw:!0},fu=function(e,t){var n,r,o,a,i,l,s,c,u,d,p,f,h={type:t.type||e.type,version:e.version||1,versionNonce:null!==(n=e.versionNonce)&&void 0!==n?n:0,isDeleted:null!==(r=e.isDeleted)&&void 0!==r&&r,id:e.id||no(),fillStyle:e.fillStyle||\"hachure\",strokeWidth:e.strokeWidth||1,strokeStyle:null!==(o=e.strokeStyle)&&void 0!==o?o:\"solid\",roughness:null!==(a=e.roughness)&&void 0!==a?a:1,opacity:null==e.opacity?100:e.opacity,angle:e.angle||0,x:null!==(i=null!==(l=t.x)&&void 0!==l?l:e.x)&&void 0!==i?i:0,y:null!==(s=null!==(c=t.y)&&void 0!==c?c:e.y)&&void 0!==s?s:0,strokeColor:e.strokeColor,backgroundColor:e.backgroundColor,width:e.width||0,height:e.height||0,seed:null!==(u=e.seed)&&void 0!==u?u:1,groupIds:null!==(d=e.groupIds)&&void 0!==d?d:[],strokeSharpness:null!==(p=e.strokeSharpness)&&void 0!==p?p:Je(e.type)?\"round\":\"sharp\",boundElementIds:null!==(f=e.boundElementIds)&&void 0!==f?f:[]};return du(du(du({},h),uo(h)),t)},hu=function(e){var t,n;switch(e.type){case\"text\":var r=e.fontSize,o=e.fontFamily;if(\"font\"in e){var a=R(e.font.split(\" \"),2),i=a[0],l=a[1];r=parseInt(i,10),n=l,o=Object.keys(c.ut).includes(n)?c.ut[n]:c.rk}return fu(e,{fontSize:r,fontFamily:o,text:null!==(t=e.text)&&void 0!==t?t:\"\",baseline:e.baseline,textAlign:e.textAlign||c.Hg,verticalAlign:e.verticalAlign||c.hs});case\"freedraw\":return fu(e,{points:e.points,lastCommittedPoint:null,simulatePressure:e.simulatePressure,pressures:e.pressures});case\"line\":case\"draw\":case\"arrow\":var s=e.startArrowhead,u=void 0===s?null:s,d=e.endArrowhead,p=void 0===d?\"arrow\"===e.type?\"arrow\":null:d,f=e.x,h=e.y,m=!Array.isArray(e.points)||e.points.length<2?[[0,0],[e.width,e.height]]:e.points;if(0!==m[0][0]||0!==m[0][1]){var g=ti.getNormalizedPoints(e);m=g.points,f=g.x,h=g.y}return fu(e,{type:\"draw\"===e.type?\"line\":e.type,startBinding:e.startBinding,endBinding:e.endBinding,lastCommittedPoint:null,startArrowhead:u,endArrowhead:p,points:m,x:f,y:h});case\"ellipse\":case\"rectangle\":case\"diamond\":return fu(e,{})}},mu=function(e,t){var n=t?Yi(t):null;return(e||[]).reduce((function(e,t){if(\"selection\"!==t.type&&!so(t)){var r=hu(t);if(r){var o=null==n?void 0:n[t.id];o&&o.version>r.version&&(r=lo(r,o.version)),e.push(r)}}return e}),[])},gu=function(e,t){e=e||{};var n,r=ir(),o={},a=su(Object.entries(r));try{for(a.s();!(n=a.n()).done;){var i=R(n.value,2),l=i[0],s=i[1],c=e[l],u=t?t[l]:void 0;o[l]=void 0!==c?c:void 0!==u?u:s}}catch(e){a.e(e)}finally{a.f()}return du(du({},o),{},{elementType:pu[o.elementType]?o.elementType:\"selection\",zoom:\"number\"==typeof e.zoom?{value:e.zoom,translation:r.zoom.translation}:e.zoom||r.zoom})},vu=function(e,t,n){return{elements:mu(null==e?void 0:e.elements,n),appState:gu(null==e?void 0:e.appState,t||null)}};function bu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function yu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?bu(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):bu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var xu=function(){var e=(0,d.Z)(k().mark((function e(t){var r;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(\"image\/png\"!==t.type){e.next=18;break}return e.prev=1,e.next=4,Promise.all([n.e(736),n.e(9)]).then(n.bind(n,8527));case 4:return e.next=6,e.sent.decodePngMetadata(t);case 6:return e.abrupt(\"return\",e.sent);case 9:if(e.prev=9,e.t0=e.catch(1),\"INVALID\"!==e.t0.message){e.next=15;break}throw new Error(L(\"alerts.imageDoesNotContainScene\"));case 15:throw new Error(L(\"alerts.cannotRestoreFromImage\"));case 16:e.next=43;break;case 18:if(!(\"text\"in Blob)){e.next=24;break}return e.next=21,t.text();case 21:r=e.sent,e.next=27;break;case 24:return e.next=26,new Promise((function(e){var n=new FileReader;n.readAsText(t,\"utf8\"),n.onloadend=function(){n.readyState===FileReader.DONE&&e(n.result)}}));case 26:r=e.sent;case 27:if(\"image\/svg+xml\"!==t.type){e.next=43;break}return e.prev=28,e.next=31,Promise.all([n.e(736),n.e(9)]).then(n.bind(n,8527));case 31:return e.next=33,e.sent.decodeSvgMetadata({svg:r});case 33:return e.abrupt(\"return\",e.sent);case 36:if(e.prev=36,e.t1=e.catch(28),\"INVALID\"!==e.t1.message){e.next=42;break}throw new Error(L(\"alerts.imageDoesNotContainScene\"));case 42:throw new Error(L(\"alerts.cannotRestoreFromImage\"));case 43:return e.abrupt(\"return\",r);case 44:case\"end\":return e.stop()}}),e,null,[[1,9],[28,36]])})));return function(t){return e.apply(this,arguments)}}(),wu=function(e){var t;return e&&(null===(t=e.name.match(\/\\.(json|excalidraw|png|svg)$\/))||void 0===t?void 0:t[1])||null},ku=function(e){var t=wu(e);return\"png\"===t||\"svg\"===t},Su=function(){var e=(0,d.Z)(k().mark((function e(t,n,r){var o,a,i;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,xu(t);case 2:if(o=e.sent,e.prev=3,a=JSON.parse(o),Iu(a)){e.next=7;break}throw new Error(L(\"alerts.couldNotLoadInvalidFile\"));case 7:return i=vu({elements:Ji(a.elements||[]),appState:yu(yu({theme:null==n?void 0:n.theme,fileHandle:t.handle||null},cr(a.appState||{})),n?ll(a.elements||[],n):{})},n,r),e.abrupt(\"return\",i);case 11:throw e.prev=11,e.t0=e.catch(3),console.error(e.t0.message),new Error(L(\"alerts.couldNotLoadInvalidFile\"));case 15:case\"end\":return e.stop()}}),e,null,[[3,11]])})));return function(t,n,r){return e.apply(this,arguments)}}(),Eu=function(){var e=(0,d.Z)(k().mark((function e(t){var n,r;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,xu(t);case 2:if(n=e.sent,(r=JSON.parse(n)).type===c.r8.excalidrawLibrary){e.next=6;break}throw new Error(L(\"alerts.couldNotLoadInvalidFile\"));case 6:return e.abrupt(\"return\",r);case 7:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),ju=function(){var e=(0,d.Z)(k().mark((function e(t){return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",new Promise((function(e,n){try{t.toBlob((function(t){if(!t)return n(new ru(L(\"canvasError.canvasTooBig\"),\"CANVAS_POSSIBLY_TOO_BIG\"));e(t)}))}catch(e){n(e)}})));case 1:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),Cu=function(e,t){var n={type:c.r8.excalidraw,version:2,source:c.pb,elements:Ji(e),appState:cr(t)};return JSON.stringify(n,null,2)},Ou=function(){var e=(0,d.Z)(k().mark((function e(t,n){var r,o,a;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=Cu(t,n),o=new Blob([r],{type:c.LO.excalidraw}),e.next=4,lu(o,{name:n.name,extension:\"excalidraw\",description:\"Excalidraw file\",fileHandle:ku(n.fileHandle)?null:n.fileHandle});case 4:return a=e.sent,e.abrupt(\"return\",{fileHandle:a});case 6:case\"end\":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),Mu=function(){var e=(0,d.Z)(k().mark((function e(t,n){var r;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,iu({description:\"Excalidraw files\"});case 2:return r=e.sent,e.abrupt(\"return\",Su(r,t,n));case 4:case\"end\":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),Iu=function(e){return(null==e?void 0:e.type)===c.r8.excalidraw&&(!e.elements||Array.isArray(e.elements)&&(!e.appState||\"object\"===v(e.appState)))},Pu=function(e){return\"object\"===v(e)&&e&&e.type===c.r8.excalidrawLibrary&&1===e.version},Tu=function(){var e=(0,d.Z)(k().mark((function e(t){var n,r,o;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.loadLibrary();case 2:return n=e.sent,r={type:c.r8.excalidrawLibrary,version:1,source:c.pb,library:n},o=JSON.stringify(r,null,2),e.next=7,lu(new Blob([o],{type:c.LO.excalidrawlib}),{name:\"library\",extension:\"excalidrawlib\",description:\"Excalidraw library file\"});case 7:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),Au=function(){var e=(0,d.Z)(k().mark((function e(t){var n;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,iu({description:\"Excalidraw library files\"});case 2:return n=e.sent,e.next=5,t.importLibrary(n);case 5:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),Lu=\"\\x3c!-- svg-source:excalidraw --\\x3e\",_u=function(e,t,n){var r=n.exportBackground,o=n.exportPadding,a=void 0===o?c.qy:o,i=n.viewBackgroundColor,l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(e,n){var r=document.createElement(\"canvas\");return r.width=e*t.exportScale,r.height=n*t.exportScale,{canvas:r,scale:t.exportScale}},s=zu(e,a),u=R(s,4),d=u[0],p=u[1],f=u[2],h=u[3],m=l(f,h),g=m.canvas,v=m.scale,b=void 0===v?1:v;return Vc(e,t,null,b,Ke.canvas(g),g,{viewBackgroundColor:r?i:null,exportWithDarkMode:t.exportWithDarkMode,scrollX:-d+a,scrollY:-p+a,zoom:ir().zoom,remotePointerViewportCoords:{},remoteSelectedElementIds:{},shouldCacheIgnoreZoom:!1,remotePointerUsernames:{},remotePointerUserStates:{}},{renderScrollbars:!1,renderSelection:!1,renderOptimizations:!1,renderGrid:!1}),g},Du=function(){var e=(0,d.Z)(k().mark((function e(t,r){var o,a,i,l,s,u,d,p,f,h,m,g,v,b,y,x;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o=r.exportPadding,a=void 0===o?c.qy:o,i=r.viewBackgroundColor,l=r.exportScale,s=void 0===l?1:l,u=r.exportEmbedScene,d=\"\",!u){e.next=14;break}return e.prev=3,e.next=6,Promise.all([n.e(736),n.e(9)]).then(n.bind(n,8527));case 6:return e.next=8,e.sent.encodeSvgMetadata({text:Cu(t,r)});case 8:d=e.sent,e.next=14;break;case 11:e.prev=11,e.t0=e.catch(3),console.error(e.t0);case 14:return p=zu(t,a),f=R(p,4),h=f[0],m=f[1],g=f[2],v=f[3],(b=document.createElementNS(Ln,\"svg\")).setAttribute(\"version\",\"1.1\"),b.setAttribute(\"xmlns\",Ln),b.setAttribute(\"viewBox\",\"0 0 \".concat(g,\" \").concat(v)),b.setAttribute(\"width\",\"\".concat(g*s)),b.setAttribute(\"height\",\"\".concat(v*s)),r.exportWithDarkMode&&b.setAttribute(\"filter\",c.ZF),b.innerHTML=\"\\n  \".concat(Lu,\"\\n  \").concat(d,'\\n  <defs>\\n    <style>\\n      @font-face {\\n        font-family: \"Virgil\";\\n        src: url(\"https:\/\/excalidraw.com\/Virgil.woff2\");\\n      }\\n      @font-face {\\n        font-family: \"Cascadia\";\\n        src: url(\"https:\/\/excalidraw.com\/Cascadia.woff2\");\\n      }\\n    <\/style>\\n  <\/defs>\\n  '),r.exportBackground&&i&&((y=b.ownerDocument.createElementNS(Ln,\"rect\")).setAttribute(\"x\",\"0\"),y.setAttribute(\"y\",\"0\"),y.setAttribute(\"width\",\"\".concat(g)),y.setAttribute(\"height\",\"\".concat(v)),y.setAttribute(\"fill\",i),b.appendChild(y)),x=Ke.svg(b),Xc(t,x,b,{offsetX:-h+a,offsetY:-m+a}),e.abrupt(\"return\",b);case 27:case\"end\":return e.stop()}}),e,null,[[3,11]])})));return function(t,n){return e.apply(this,arguments)}}(),zu=function(e,t){var n=R(St(e),4),r=n[0],o=n[1],a=n[2],i=n[3];return[r,o,Vn(r,a)+2*t,Vn(o,i)+t+t]};function Bu(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return Hu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return Hu(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function Hu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Nu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ru(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Nu(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Nu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Fu=32,Vu=12,Gu=256,Uu=\"NOT_SPREADSHEET\",Ku=\"VALID_SPREADSHEET\",Wu=function(e){var t=\/^[$\u20ac\u00a3\u00a5\u20a9]?([0-9,]+(\\.[0-9]+)?)$\/.exec(e);return t?parseFloat(t[1].replace(\/,\/g,\"\")):null},Zu=function(e,t){return e.slice(1).every((function(e){return null!==Wu(e[t])}))},Yu=function(e){var t=e[0].length;if(t>2)return{type:Uu,reason:\"More than 2 columns\"};if(1===t){if(!Zu(e,0))return{type:Uu,reason:\"Value is not numeric\"};var n=null===Wu(e[0][0]),r=(n?e.slice(1):e).map((function(e){return Wu(e[0])}));return r.length<2?{type:Uu,reason:\"Less than two rows\"}:{type:Ku,spreadsheet:{title:n?e[0][0]:null,labels:null,values:r}}}var o=Zu(e,0)?0:1;if(!Zu(e,o))return{type:Uu,reason:\"Value is not numeric\"};var a=(o+1)%2,i=null===Wu(e[0][o]),l=i?e.slice(1):e;return l.length<2?{type:Uu,reason:\"Less than 2 rows\"}:{type:Ku,spreadsheet:{title:i?e[0][o]:null,labels:l.map((function(e){return e[a]})),values:l.map((function(e){return Wu(e[o])}))}}},Xu=Mt.elementBackground.slice(2,Mt.elementBackground.length),qu={fillStyle:\"hachure\",fontFamily:c.rk,fontSize:c.n5,opacity:100,roughness:1,strokeColor:Mt.elementStroke[0],strokeSharpness:\"sharp\",strokeStyle:\"solid\",strokeWidth:1,verticalAlign:\"middle\"},$u=function(e){return{chartWidth:44*e.values.length+Vu,chartHeight:280}},Qu=function(e,t,n,r,o,a){var i=$u(e),l=i.chartWidth,s=i.chartHeight,u=e.title?To(Ru(Ru({backgroundColor:o,groupIds:[r]},qu),{},{text:e.title,x:t+l\/2,y:n-Gu-24-c.n5,strokeSharpness:\"sharp\",strokeStyle:\"solid\",textAlign:\"center\"})):null,d=a?Io(Ru(Ru({backgroundColor:o,groupIds:[r]},qu),{},{type:\"rectangle\",x:t,y:n-s,width:l,height:s,strokeColor:Mt.elementStroke[0],fillStyle:\"solid\",opacity:6})):null;return[].concat(F(d?[d]:[]),F(u?[u]:[]),F(function(e,t,n,r,o){var a;return(null===(a=e.labels)||void 0===a?void 0:a.map((function(e,a){return To(Ru(Ru({groupIds:[r],backgroundColor:o},qu),{},{text:e.length>8?\"\".concat(e.slice(0,5),\"...\"):e,x:t+44*a+24,y:n+6,width:Fu,angle:5.87,fontSize:16,textAlign:\"center\",verticalAlign:\"top\"}))})))||[]}(e,t,n,r,o)),F(function(e,t,n,r,o){var a=To(Ru(Ru({groupIds:[r],backgroundColor:o},qu),{},{x:t-Vu,y:n-Vu,text:\"0\",textAlign:\"right\"}));return[a,To(Ru(Ru({groupIds:[r],backgroundColor:o},qu),{},{x:t-Vu,y:n-Gu-a.height\/2,text:Math.max.apply(Math,F(e.values)).toLocaleString(),textAlign:\"right\"}))]}(e,t,n,r,o)),F(function(e,t,n,r,o){var a=$u(e),i=a.chartWidth,l=a.chartHeight;return[Lo(Ru(Ru({backgroundColor:o,groupIds:[r]},qu),{},{type:\"line\",x:t,y:n,startArrowhead:null,endArrowhead:null,width:i,points:[[0,0],[i,0]]})),Lo(Ru(Ru({backgroundColor:o,groupIds:[r]},qu),{},{type:\"line\",x:t,y:n,startArrowhead:null,endArrowhead:null,height:l,points:[[0,0],[0,-l]]})),Lo(Ru(Ru({backgroundColor:o,groupIds:[r]},qu),{},{type:\"line\",x:t,y:n-Gu-Vu,startArrowhead:null,endArrowhead:null,strokeStyle:\"dotted\",width:i,opacity:50,points:[[0,0],[i,0]]}))]}(e,t,n,r,o)))},Ju=function(e,t,n,r){return\"line\"===e?function(e,t,n){var r,o=Math.max.apply(Math,F(e.values)),a=no(),i=Xu[Math.floor(Math.random()*Xu.length)],l=0,s=[],u=Bu(e.values);try{for(u.s();!(r=u.n()).done;){var d=r.value,p=44*l,f=-d\/o*Gu;s.push([p,f]),l++}}catch(e){u.e(e)}finally{u.f()}var h=Math.max.apply(Math,F(s.map((function(e){return e[0]})))),m=Math.max.apply(Math,F(s.map((function(e){return e[1]})))),g=Math.min.apply(Math,F(s.map((function(e){return e[0]})))),v=Math.min.apply(Math,F(s.map((function(e){return e[1]})))),b=Lo(Ru(Ru({backgroundColor:i,groupIds:[a]},qu),{},{type:\"line\",x:t+Vu+16,y:n-Vu,startArrowhead:null,endArrowhead:null,height:m-v,width:h-g,strokeWidth:2,points:s})),y=e.values.map((function(e,r){var l=44*r+6,s=-e\/o*Gu+6;return Io(Ru(Ru({backgroundColor:i,groupIds:[a]},qu),{},{fillStyle:\"solid\",strokeWidth:2,type:\"ellipse\",x:t+l+16,y:n+s-24,width:Vu,height:Vu}))})),x=e.values.map((function(e,r){var l=44*r+6,s=e\/o*Gu+6+Vu;return Lo(Ru(Ru({backgroundColor:i,groupIds:[a]},qu),{},{type:\"line\",x:t+l+16+6,y:n-s,startArrowhead:null,endArrowhead:null,height:s,strokeStyle:\"dotted\",opacity:50,points:[[0,0],[0,s]]}))}));return[].concat(F(Qu(e,t,n,a,i,\"production\"===c.Vi.DEVELOPMENT)),[b],F(x),F(y))}(t,n,r):function(e,t,n){var r=Math.max.apply(Math,F(e.values)),o=no(),a=Xu[Math.floor(Math.random()*Xu.length)],i=e.values.map((function(e,i){var l=e\/r*Gu;return Io(Ru(Ru({backgroundColor:a,groupIds:[o]},qu),{},{type:\"rectangle\",x:t+44*i+Vu,y:n-l-Vu,width:Fu,height:l}))}));return[].concat(F(i),F(Qu(e,t,n,o,a,\"production\"===c.Vi.DEVELOPMENT)))}(t,n,r)},ed=\"\",td=!1,nd=\"clipboard\"in navigator&&\"readText\"in navigator.clipboard,rd=\"clipboard\"in navigator&&\"writeText\"in navigator.clipboard,od=\"clipboard\"in navigator&&\"write\"in navigator.clipboard&&\"ClipboardItem\"in window&&\"toBlob\"in HTMLCanvasElement.prototype,ad=function(){var e=(0,d.Z)(k().mark((function e(t,n){var r,o;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r={type:c.r8.excalidrawClipboard,elements:ol(t,n)},o=JSON.stringify(r),ed=o,e.prev=3,td=!1,e.next=7,dd(o);case 7:e.next=13;break;case 9:e.prev=9,e.t0=e.catch(3),td=!0,console.error(e.t0);case 13:case\"end\":return e.stop()}}),e,null,[[3,9]])})));return function(t,n){return e.apply(this,arguments)}}(),id=function(){if(!ed)return{};try{return JSON.parse(ed)}catch(e){return console.error(e),{}}},ld=function(e){var t=function(e){var t=e.trim().split(\"\\n\").map((function(e){return e.trim().split(\"\\t\")}));if(t.length&&2!==t[0].length&&(t=e.trim().split(\"\\n\").map((function(e){return e.trim().split(\",\")}))),0===t.length)return{type:Uu,reason:\"No values\"};var n=t[0].length;if(!t.every((function(e){return e.length===n})))return{type:Uu,reason:\"All rows don't have same number of columns\"};var r=Yu(t);if(r.type!==Ku){var o=Yu(function(e){for(var t=[],n=0;n<e[0].length;n++){for(var r=[],o=0;o<e.length;o++)r.push(e[o][n]);t.push(r)}return t}(t));if(o.type===Ku)return o}return r}(e);return t.type===Ku?{spreadsheet:t.spreadsheet}:null},sd=function(){var e=(0,d.Z)(k().mark((function e(t){var n,r;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,!t){e.next=5;break}e.t0=null===(n=t.clipboardData)||void 0===n?void 0:n.getData(\"text\/plain\").trim(),e.next=11;break;case 5:if(e.t1=nd,!e.t1){e.next=10;break}return e.next=9,navigator.clipboard.readText();case 9:e.t1=e.sent;case 10:e.t0=e.t1;case 11:return r=e.t0,e.abrupt(\"return\",r||\"\");case 15:return e.prev=15,e.t2=e.catch(0),e.abrupt(\"return\",\"\");case 18:case\"end\":return e.stop()}}),e,null,[[0,15]])})));return function(t){return e.apply(this,arguments)}}(),cd=function(){var e=(0,d.Z)(k().mark((function e(t){var n,r,o,a;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,sd(t);case 2:if((n=e.sent)&&!n.includes(Lu)){e.next=5;break}return e.abrupt(\"return\",id());case 5:if(!(r=ld(n))){e.next=8;break}return e.abrupt(\"return\",r);case 8:if(o=id(),e.prev=9,a=JSON.parse(n),i=a,![c.r8.excalidraw,c.r8.excalidrawClipboard].includes(null==i?void 0:i.type)||!Array.isArray(i.elements)){e.next=13;break}return e.abrupt(\"return\",{elements:a.elements});case 13:return e.abrupt(\"return\",o);case 16:return e.prev=16,e.t0=e.catch(9),e.abrupt(\"return\",td&&o.elements?o:{text:n});case 19:case\"end\":return e.stop()}var i}),e,null,[[9,16]])})));return function(t){return e.apply(this,arguments)}}(),ud=function(){var e=(0,d.Z)(k().mark((function e(t){return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,navigator.clipboard.write([new window.ClipboardItem({\"image\/png\":t})]);case 2:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),dd=function(){var e=(0,d.Z)(k().mark((function e(t){var n;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=!1,!rd){e.next=11;break}return e.prev=2,e.next=5,navigator.clipboard.writeText(t||\"\");case 5:n=!0,e.next=11;break;case 8:e.prev=8,e.t0=e.catch(2),console.error(e.t0);case 11:if(n||pd(t||\" \")){e.next=13;break}throw new Error(\"couldn't copy\");case 13:case\"end\":return e.stop()}}),e,null,[[2,8]])})));return function(t){return e.apply(this,arguments)}}(),pd=function(e){var t=\"rtl\"===document.documentElement.getAttribute(\"dir\"),n=document.createElement(\"textarea\");n.style.border=\"0\",n.style.padding=\"0\",n.style.margin=\"0\",n.style.position=\"absolute\",n.style[t?\"right\":\"left\"]=\"-9999px\";var r=window.pageYOffset||document.documentElement.scrollTop;n.style.top=\"\".concat(r,\"px\"),n.style.fontSize=\"12pt\",n.setAttribute(\"readonly\",\"\"),n.value=e,document.body.appendChild(n);var o=!1;try{n.select(),n.setSelectionRange(0,n.value.length),o=document.execCommand(\"copy\")}catch(e){console.error(e)}return n.remove(),o},fd=function(){var e=(0,d.Z)(k().mark((function e(t,r,o,a){var i,l,s,u,d,p,f,h,m,g;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i=a.exportBackground,l=a.exportPadding,s=void 0===l?c.qy:l,u=a.viewBackgroundColor,d=a.name,p=a.fileHandle,f=void 0===p?null:p,0!==r.length){e.next=3;break}throw new Error(L(\"alerts.cannotExportEmptyCanvas\"));case 3:if(\"svg\"!==t&&\"clipboard-svg\"!==t){e.next=17;break}return e.next=6,Du(r,{exportBackground:i,exportWithDarkMode:o.exportWithDarkMode,viewBackgroundColor:u,exportPadding:s,exportScale:o.exportScale,exportEmbedScene:o.exportEmbedScene&&\"svg\"===t});case 6:if(h=e.sent,\"svg\"!==t){e.next=13;break}return e.next=10,lu(new Blob([h.outerHTML],{type:\"image\/svg+xml\"}),{name:d,extension:\"svg\",fileHandle:f});case 10:return e.abrupt(\"return\",e.sent);case 13:if(\"clipboard-svg\"!==t){e.next=17;break}return e.next=16,dd(h.outerHTML);case 16:return e.abrupt(\"return\");case 17:return(m=_u(r,o,{exportBackground:i,viewBackgroundColor:u,exportPadding:s})).style.display=\"none\",document.body.appendChild(m),e.next=22,ju(m);case 22:if(g=e.sent,m.remove(),\"png\"!==t){e.next=36;break}if(!o.exportEmbedScene){e.next=31;break}return e.next=28,Promise.all([n.e(736),n.e(9)]).then(n.bind(n,8527));case 28:return e.next=30,e.sent.encodePngMetadata({blob:g,metadata:Cu(r,o)});case 30:g=e.sent;case 31:return e.next=33,lu(g,{name:d,extension:\"png\",fileHandle:f});case 33:return e.abrupt(\"return\",e.sent);case 36:if(\"clipboard\"!==t){e.next=47;break}return e.prev=37,e.next=40,ud(g);case 40:e.next=47;break;case 42:if(e.prev=42,e.t0=e.catch(37),\"CANVAS_POSSIBLY_TOO_BIG\"!==e.t0.name){e.next=46;break}throw e.t0;case 46:throw new Error(L(\"alerts.couldNotCopyToClipboard\"));case 47:case\"end\":return e.stop()}}),e,null,[[37,42]])})));return function(t,n,r,o){return e.apply(this,arguments)}}();function hd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function md(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?hd(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):hd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var gd=function(){var e=(0,d.Z)(k().mark((function e(t,n){var r,o,a,i,l,s;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o=(r=n).exportBackground,a=r.viewBackgroundColor,i=r.name,l=r.fileHandle,s=wu(l),l&&(\"png\"===(c=s)||\"svg\"===c)){e.next=4;break}throw new Error(\"fileHandle should exist and should be of type svg or png when resaving\");case 4:return n=md(md({},n),{},{exportEmbedScene:!0}),e.next=7,fd(s,qi(t),n,{exportBackground:o,viewBackgroundColor:a,name:i,fileHandle:l});case 7:return e.abrupt(\"return\",{fileHandle:l});case 8:case\"end\":return e.stop()}var c}),e)})));return function(t,n){return e.apply(this,arguments)}}(),vd=(n(7225),function(e){var t=e.children,n=e.checked,r=e.onChange;return(0,_.jsxs)(\"div\",{className:Ze(\"Checkbox\",{\"is-checked\":n}),onClick:function(e){r(!n),e.currentTarget.querySelector(\".Checkbox-box\").focus()},children:[(0,_.jsx)(\"button\",{className:\"Checkbox-box\",role:\"checkbox\",\"aria-checked\":n,children:kl}),(0,_.jsx)(\"div\",{className:\"Checkbox-label\",children:t})]})});n(4623);function bd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function yd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?bd(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):bd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var xd=function(e){var t=e.children,n=e.gap,r=e.align,o=e.justifyContent,a=e.className,i=e.style;return(0,_.jsx)(\"div\",{className:Ze(\"Stack Stack_horizontal\",a),style:yd({\"--gap\":n,alignItems:r,justifyContent:o},i),children:t})},wd=function(e){var t=e.children,n=e.gap,r=e.align,o=e.justifyContent,a=e.className;return(0,_.jsx)(\"div\",{className:Ze(\"Stack Stack_vertical\",a),style:{\"--gap\":n,justifyItems:r,justifyContent:o},children:t})},kd=(n(554),function(e){var t=e.fileName,n=e.onSave;return(0,_.jsxs)(xd,{className:\"ActiveFile\",gap:1,align:\"center\",children:[(0,_.jsxs)(\"span\",{className:\"ActiveFile__fileName\",children:[ns,(0,_.jsx)(\"span\",{children:t})]}),(0,_.jsx)(vl,{type:\"icon\",icon:El,title:L(\"buttons.save\"),\"aria-label\":L(\"buttons.save\"),onClick:n,\"data-testid\":\"save-button\"})]})});function Sd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ed(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Sd(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Sd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}As({name:\"changeProjectName\",perform:function(e,t,n){return Tc(\"change\",\"title\"),{appState:Ed(Ed({},t),{},{name:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData,r=e.appProps;return(0,_.jsx)(Ac,{label:L(\"labels.fileTitle\"),value:t.name||\"Unnamed\",onChange:function(e){return n(e)},isNameEditable:void 0===r.name&&!t.viewModeEnabled})}}),As({name:\"changeExportScale\",perform:function(e,t,n){return{appState:Ed(Ed({},t),{},{exportScale:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,o=qi(t),a=rl(o,n)?ol(o,n):o;return(0,_.jsx)(_.Fragment,{children:c.ZB.map((function(e){var t=function(e,t,n){var r=R(zu(e,t).map((function(e){return Math.trunc(e*n)})),4);return[r[2],r[3]]}(a,c.qy,e),o=R(t,2),i=o[0],l=o[1],s=\"\".concat(L(\"buttons.scale\"),\" \").concat(e,\"x (\").concat(i,\"x\").concat(l,\")\");return(0,_.jsx)(vl,{size:\"small\",type:\"radio\",icon:\"\".concat(e,\"x\"),name:\"export-canvas-scale\",title:s,\"aria-label\":s,id:\"export-canvas-scale\",checked:e===n.exportScale,onChange:function(){return r(e)}},e)}))})}}),As({name:\"changeExportBackground\",perform:function(e,t,n){return{appState:Ed(Ed({},t),{},{exportBackground:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,_.jsx)(vd,{checked:t.exportBackground,onChange:function(e){return n(e)},children:L(\"labels.withBackground\")})}}),As({name:\"changeExportEmbedScene\",perform:function(e,t,n){return{appState:Ed(Ed({},t),{},{exportEmbedScene:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,_.jsxs)(vd,{checked:t.exportEmbedScene,onChange:function(e){return n(e)},children:[L(\"labels.exportEmbedScene\"),(0,_.jsx)(wc,{label:L(\"labels.exportEmbedScene_details\"),long:!0,children:(0,_.jsx)(\"div\",{className:\"excalidraw-tooltip-icon\",children:Nl})})]})}}),As({name:\"saveToActiveFile\",perform:(jd=(0,d.Z)(k().mark((function e(t,n,r){var o,a,i;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o=!!n.fileHandle,e.prev=1,!ku(n.fileHandle)){e.next=8;break}return e.next=5,gd(t,n);case 5:e.t0=e.sent,e.next=11;break;case 8:return e.next=10,Ou(t,n);case 10:e.t0=e.sent;case 11:return a=e.t0,i=a.fileHandle,e.abrupt(\"return\",{commitToHistory:!1,appState:Ed(Ed({},n),{},{fileHandle:i,toastMessage:o?null!=i&&i.name?L(\"toast.fileSavedToFilename\").replace(\"{filename}\",'\"'.concat(i.name,'\"')):L(\"toast.fileSaved\"):null})});case 16:return e.prev=16,e.t1=e.catch(1),\"AbortError\"!==(null===e.t1||void 0===e.t1?void 0:e.t1.name)&&console.error(e.t1),e.abrupt(\"return\",{commitToHistory:!1});case 20:case\"end\":return e.stop()}}),e,null,[[1,16]])}))),function(e,t,n){return jd.apply(this,arguments)}),keyTest:function(e){return e.key===Sn&&e[ln]&&!e.shiftKey},PanelComponent:function(e){var t,n=e.updateData,r=e.appState;return(0,_.jsx)(kd,{onSave:function(){return n(null)},fileName:null===(t=r.fileHandle)||void 0===t?void 0:t.name})}});var jd,Cd,Od,Md=As({name:\"saveFileToDisk\",perform:(Cd=(0,d.Z)(k().mark((function e(t,n,r){var o,a;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,Ou(t,Ed(Ed({},n),{},{fileHandle:null}));case 3:return o=e.sent,a=o.fileHandle,e.abrupt(\"return\",{commitToHistory:!1,appState:Ed(Ed({},n),{},{fileHandle:a})});case 8:return e.prev=8,e.t0=e.catch(0),\"AbortError\"!==(null===e.t0||void 0===e.t0?void 0:e.t0.name)&&console.error(e.t0),e.abrupt(\"return\",{commitToHistory:!1});case 12:case\"end\":return e.stop()}}),e,null,[[0,8]])}))),function(e,t,n){return Cd.apply(this,arguments)}),keyTest:function(e){return e.key===Sn&&e.shiftKey&&e[ln]},PanelComponent:function(e){var t=e.updateData;return(0,_.jsx)(vl,{type:\"button\",icon:jl,title:L(\"buttons.saveAs\"),\"aria-label\":L(\"buttons.saveAs\"),showAriaLabel:ah(),hidden:!qc,onClick:function(){return t(null)},\"data-testid\":\"save-as-button\"})}});As({name:\"loadScene\",perform:(Od=(0,d.Z)(k().mark((function e(t,n){var r,o,a;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,Mu(n,t);case 3:return r=e.sent,o=r.elements,a=r.appState,e.abrupt(\"return\",{elements:o,appState:a,commitToHistory:!0});case 9:if(e.prev=9,e.t0=e.catch(0),\"AbortError\"!==(null===e.t0||void 0===e.t0?void 0:e.t0.name)){e.next=13;break}return e.abrupt(\"return\",!1);case 13:return e.abrupt(\"return\",{elements:t,appState:Ed(Ed({},n),{},{errorMessage:e.t0.message}),commitToHistory:!1});case 14:case\"end\":return e.stop()}}),e,null,[[0,9]])}))),function(e,t){return Od.apply(this,arguments)}),keyTest:function(e){return e[ln]&&e.key===yn},PanelComponent:function(e){var t=e.updateData;e.appState;return(0,_.jsx)(vl,{type:\"button\",icon:Cl,title:L(\"buttons.load\"),\"aria-label\":L(\"buttons.load\"),showAriaLabel:ah(),onClick:t,\"data-testid\":\"load-button\"})}}),As({name:\"exportWithDarkMode\",perform:function(e,t,n){return{appState:Ed(Ed({},t),{},{exportWithDarkMode:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,_.jsx)(\"div\",{style:{display:\"flex\",justifyContent:\"flex-end\",marginTop:\"-45px\",marginBottom:\"10px\"},children:(0,_.jsx)(bc,{value:t.exportWithDarkMode?\"dark\":\"light\",onChange:function(e){n(\"dark\"===e)},title:L(\"labels.toggleExportColorScheme\")})})}});function Id(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Pd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Id(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Id(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Td=\"{}\",Ad=As({name:\"copyStyles\",perform:function(e,t){var n=e.find((function(e){return t.selectedElementIds[e.id]}));return n&&(Td=JSON.stringify(n)),{appState:Pd(Pd({},t),{},{toastMessage:L(\"toast.copyStyles\")}),commitToHistory:!1}},contextItemLabel:\"labels.copyStyles\",keyTest:function(e){return e[ln]&&e.altKey&&e.code===Kt}}),Ld=As({name:\"pasteStyles\",perform:function(e,t){var n,r=JSON.parse(Td);return\"text\"!==(null==(n=r)?void 0:n.type)&&\"diamond\"!==(null==n?void 0:n.type)&&\"rectangle\"!==(null==n?void 0:n.type)&&\"ellipse\"!==(null==n?void 0:n.type)&&\"arrow\"!==(null==n?void 0:n.type)&&\"freedraw\"!==(null==n?void 0:n.type)&&\"line\"!==(null==n?void 0:n.type)?{elements:e,commitToHistory:!1}:{elements:e.map((function(e){if(t.selectedElementIds[e.id]){var n=io(e,{backgroundColor:null==r?void 0:r.backgroundColor,strokeWidth:null==r?void 0:r.strokeWidth,strokeColor:null==r?void 0:r.strokeColor,strokeStyle:null==r?void 0:r.strokeStyle,fillStyle:null==r?void 0:r.fillStyle,opacity:null==r?void 0:r.opacity,roughness:null==r?void 0:r.roughness});return Xe(n)&&(ao(n,{fontSize:(null==r?void 0:r.fontSize)||c.n5,fontFamily:(null==r?void 0:r.fontFamily)||c.rk,textAlign:(null==r?void 0:r.textAlign)||c.Hg}),Ui(n)),n}return e})),commitToHistory:!0}},contextItemLabel:\"labels.pasteStyles\",keyTest:function(e){return e[ln]&&e.altKey&&e.code===qt}}),_d=function(e){return(0,_.jsx)(\"button\",{className:\"help-icon\",onClick:e.onClick,type:\"button\",title:\"\".concat(e.title,\" \u2014 ?\"),\"aria-label\":e.title,children:Nl})};function Dd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function zd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Dd(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Dd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}As({name:\"toggleCanvasMenu\",perform:function(e,t){return{appState:zd(zd({},t),{},{openMenu:\"canvas\"===t.openMenu?null:\"canvas\"}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,_.jsx)(vl,{type:\"button\",icon:zl,\"aria-label\":L(\"buttons.menu\"),onClick:n,selected:\"canvas\"===t.openMenu})}}),As({name:\"toggleEditMenu\",perform:function(e,t){return{appState:zd(zd({},t),{},{openMenu:\"shape\"===t.openMenu?null:\"shape\"}),commitToHistory:!1}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{visible:Ki(n,qi(t)),type:\"button\",icon:Il,\"aria-label\":L(\"buttons.edit\"),onClick:r,selected:\"shape\"===n.openMenu})}}),As({name:\"toggleFullScreen\",perform:function(){return Wn()||document.documentElement.requestFullscreen(),Wn()&&document.exitFullscreen(),{commitToHistory:!1}},keyTest:function(e){return e.code===Yt&&!e[ln]}}),As({name:\"toggleShortcuts\",perform:function(e,t,n,r){var o=r.focusContainer;return t.showHelpDialog&&o(),{appState:zd(zd({},t),{},{showHelpDialog:!t.showHelpDialog}),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData;return(0,_.jsx)(_d,{title:L(\"helpDialog.title\"),onClick:t})},keyTest:function(e){return e.key===dn}});function Bd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Hd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Bd(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Bd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Nd(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return Rd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return Rd(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function Rd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Fd=function(e,t){var n=ol(qi(e),t);return n.length>=2&&!function(e){if(e.length>=2){var t,n=Nd(e[0].groupIds);try{var r=function(){var n=t.value;if(e.reduce((function(e,t){return e&&ko(t,n)}),!0))return{v:!0}};for(n.s();!(t=n.n()).done;){var o=r();if(\"object\"===v(o))return o.v}}catch(e){n.e(e)}finally{n.f()}}return!1}(n)},Vd=As({name:\"group\",perform:function(e,t){var n=ol(qi(e),t);if(n.length<2)return{appState:t,elements:e,commitToHistory:!1};var r=xo(t);if(1===r.length){var o=r[0],a=new Set(So(e,o).map((function(e){return e.id}))),i=new Set(n.map((function(e){return e.id})));if(new Set([].concat(F(Array.from(a)),F(Array.from(i)))).size===a.size)return{appState:t,elements:e,commitToHistory:!1}}var l=no(),s=e.map((function(e){return t.selectedElementIds[e.id]?io(e,{groupIds:Eo(e.groupIds,l,t.editingGroupId)}):e})),c=So(s,l),u=c[c.length-1],d=s.lastIndexOf(u),p=s.slice(d+1),f=s.slice(0,d).filter((function(e){return!ko(e,l)})),h=[].concat(F(f),F(c),F(p));return{appState:vo(l,Hd(Hd({},t),{},{selectedGroupIds:{}}),qi(h)),elements:h,commitToHistory:!0}},contextItemLabel:\"labels.group\",contextItemPredicate:function(e,t){return Fd(e,t)},keyTest:function(e){return!e.shiftKey&&e[ln]&&e.code===Zt},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{hidden:!Fd(t,n),type:\"button\",icon:(0,_.jsx)(rs,{theme:n.theme}),onClick:function(){return r(null)},title:\"\".concat(L(\"labels.group\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd+G\")),\"aria-label\":L(\"labels.group\"),visible:rl(qi(t),n)})}}),Gd=As({name:\"ungroup\",perform:function(e,t){if(0===xo(t).length)return{appState:t,elements:e,commitToHistory:!1};var n=e.map((function(e){var n=function(e,t){return e.filter((function(e){return!t[e]}))}(e.groupIds,t.selectedGroupIds);return n.length===e.groupIds.length?e:io(e,{groupIds:n})}));return{appState:wo(Hd(Hd({},t),{},{selectedGroupIds:{}}),qi(n)),elements:n,commitToHistory:!0}},keyTest:function(e){return e.shiftKey&&e[ln]&&e.code===Zt},contextItemLabel:\"labels.ungroup\",contextItemPredicate:function(e,t){return xo(t).length>0},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{type:\"button\",hidden:0===xo(n).length,icon:(0,_.jsx)(os,{theme:n.theme}),onClick:function(){return r(null)},title:\"\".concat(L(\"labels.ungroup\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd+Shift+G\")),\"aria-label\":L(\"labels.ungroup\"),visible:rl(qi(t),n)})}}),Ud=(n(2789),function(e){var t=e.children,n=e.color,r=e.border,o=e.onClick;return(0,_.jsx)(\"div\",{className:\"Avatar\",style:{background:n,border:\"1px solid \".concat(r)},onClick:o,children:t})});function Kd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Wd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Kd(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Kd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}As({name:\"goToCollaborator\",perform:function(e,t,n){var r=n;return r?{appState:Wd(Wd(Wd({},t),il({scenePoint:r,viewportDimensions:{width:t.width,height:t.height},zoom:t.zoom})),{},{openMenu:\"canvas\"===t.openMenu?null:t.openMenu}),commitToHistory:!1}:{appState:t,commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData,r=e.data,o=null==r?void 0:r.id;if(!o)return null;var a=t.collaborators.get(o);if(!a)return null;var i=_c(o,t),l=i.background,s=i.stroke,c=function(e){if(!e)return\"?\";var t=e.trim().split(\" \");if(t.length<2)return t[0].substring(0,2).toUpperCase();var n=t[0],r=t[t.length-1];return(n[0]+r[0]).toUpperCase()}(a.username);return(0,_.jsx)(Ud,{color:l,border:s,onClick:function(){return n(a.pointer)},children:c})}});var Zd=As({name:\"addToLibrary\",perform:function(e,t,n,r){var o=ol(qi(e),t);return r.library.loadLibrary().then((function(e){r.library.saveLibrary([].concat(F(e),[o.map(_o)]))})),!1},contextItemLabel:\"labels.addToLibrary\"});function Yd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Xd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Yd(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Yd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var qd=function(e){var t=new Map;return e.forEach((function(e){var n=0===e.groupIds.length?e.id:e.groupIds[e.groupIds.length-1],r=t.get(n)||[];t.set(n,[].concat(F(r),[e]))})),Array.from(t.values())},$d=function(e,t,n){var r=n.axis,o=n.position,a=Qd(e),i=R(\"x\"===r?[\"minX\",\"maxX\"]:[\"minY\",\"maxY\"],2),l=i[0],s=i[1],c={x:0,y:0};return Xd(Xd({},c),{},V({},r,\"start\"===o?t[l]-a[l]:\"end\"===o?t[s]-a[s]:(t[l]+t[s])\/2-(a[l]+a[s])\/2))},Qd=function(e){var t=R(St(e),4);return{minX:t[0],minY:t[1],maxX:t[2],maxY:t[3]}},Jd=function(e,t){return ol(qi(e),t).length>1},ep=function(e,t,n){var r=function(e,t){var n=qd(e),r=Qd(e);return n.flatMap((function(e){var n=$d(e,r,t);return e.map((function(e){return io(e,{x:e.x+n.x,y:e.y+n.y})}))}))}(ol(qi(e),t),n),o=Yi(r);return e.map((function(e){return o[e.id]||e}))};As({name:\"alignTop\",perform:function(e,t){return{appState:t,elements:ep(e,t,{position:\"start\",axis:\"y\"}),commitToHistory:!0}},keyTest:function(e){return e[ln]&&e.shiftKey&&e.key===rn},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{hidden:!Jd(t,n),type:\"button\",icon:(0,_.jsx)(Ul,{theme:n.theme}),onClick:function(){return r(null)},title:\"\".concat(L(\"labels.alignTop\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd+Shift+Up\")),\"aria-label\":L(\"labels.alignTop\"),visible:rl(qi(t),n)})}}),As({name:\"alignBottom\",perform:function(e,t){return{appState:t,elements:ep(e,t,{position:\"end\",axis:\"y\"}),commitToHistory:!0}},keyTest:function(e){return e[ln]&&e.shiftKey&&e.key===en},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{hidden:!Jd(t,n),type:\"button\",icon:(0,_.jsx)(Kl,{theme:n.theme}),onClick:function(){return r(null)},title:\"\".concat(L(\"labels.alignBottom\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd+Shift+Down\")),\"aria-label\":L(\"labels.alignBottom\"),visible:rl(qi(t),n)})}}),As({name:\"alignLeft\",perform:function(e,t){return{appState:t,elements:ep(e,t,{position:\"start\",axis:\"x\"}),commitToHistory:!0}},keyTest:function(e){return e[ln]&&e.shiftKey&&e.key===tn},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{hidden:!Jd(t,n),type:\"button\",icon:(0,_.jsx)(Wl,{theme:n.theme}),onClick:function(){return r(null)},title:\"\".concat(L(\"labels.alignLeft\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd+Shift+Left\")),\"aria-label\":L(\"labels.alignLeft\"),visible:rl(qi(t),n)})}}),As({name:\"alignRight\",perform:function(e,t){return{appState:t,elements:ep(e,t,{position:\"end\",axis:\"x\"}),commitToHistory:!0}},keyTest:function(e){return e[ln]&&e.shiftKey&&e.key===nn},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{hidden:!Jd(t,n),type:\"button\",icon:(0,_.jsx)(Zl,{theme:n.theme}),onClick:function(){return r(null)},title:\"\".concat(L(\"labels.alignRight\"),\" \u2014 \").concat(Zn(\"CtrlOrCmd+Shift+Right\")),\"aria-label\":L(\"labels.alignRight\"),visible:rl(qi(t),n)})}}),As({name:\"alignVerticallyCentered\",perform:function(e,t){return{appState:t,elements:ep(e,t,{position:\"center\",axis:\"y\"}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{hidden:!Jd(t,n),type:\"button\",icon:(0,_.jsx)(ql,{theme:n.theme}),onClick:function(){return r(null)},title:L(\"labels.centerVertically\"),\"aria-label\":L(\"labels.centerVertically\"),visible:rl(qi(t),n)})}}),As({name:\"alignHorizontallyCentered\",perform:function(e,t){return{appState:t,elements:ep(e,t,{position:\"center\",axis:\"x\"}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{hidden:!Jd(t,n),type:\"button\",icon:(0,_.jsx)($l,{theme:n.theme}),onClick:function(){return r(null)},title:L(\"labels.centerHorizontally\"),\"aria-label\":L(\"labels.centerHorizontally\"),visible:rl(qi(t),n)})}});function tp(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return np(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return np(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function np(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var rp=function(e){var t=new Map;return e.forEach((function(e){var n=0===e.groupIds.length?e.id:e.groupIds[e.groupIds.length-1],r=t.get(n)||[];t.set(n,[].concat(F(r),[e]))})),Array.from(t.values())},op=function(e){var t=R(St(e),4),n=t[0],r=t[1],o=t[2],a=t[3];return{minX:n,minY:r,maxX:o,maxY:a,width:o-n,height:a-r,midX:(n+o)\/2,midY:(r+a)\/2}},ap=function(e,t){return ol(qi(e),t).length>1},ip=function(e,t,n){var r=function(e,t){var n,r=R(\"x\"===t.axis?[\"minX\",\"midX\",\"maxX\",\"width\"]:[\"minY\",\"midY\",\"maxY\",\"height\"],4),o=r[0],a=r[1],i=r[2],l=r[3],s=op(e),c=rp(e).map((function(e){return[e,op(e)]})).sort((function(e,t){return e[1][a]-t[1][a]})),u=0,d=tp(c);try{for(d.s();!(n=d.n()).done;)u+=n.value[1][l]}catch(e){d.e(e)}finally{d.f()}var p=(s[l]-u)\/(c.length-1);if(p<0){var f=c.findIndex((function(e){return e[1][o]===s[o]})),h=c.findIndex((function(e){return e[1][i]===s[i]})),m=(c[h][1][a]-c[f][1][a])\/(c.length-1),g=c[f][1][a];return c.flatMap((function(e,n){var r=R(e,2),o=r[0],i=r[1],l={x:0,y:0};return n!==f&&n!==h&&(g+=m,l[t.axis]=g-i[a]),o.map((function(e){return io(e,{x:e.x+l.x,y:e.y+l.y})}))}))}var v=s[o];return c.flatMap((function(e){var n=R(e,2),r=n[0],a=n[1],i={x:0,y:0};return i[t.axis]=v-a[o],v+=p,v+=a[l],r.map((function(e){return io(e,{x:e.x+i.x,y:e.y+i.y})}))}))}(ol(qi(e),t),n),o=Yi(r);return e.map((function(e){return o[e.id]||e}))},lp=(As({name:\"distributeHorizontally\",perform:function(e,t){return{appState:t,elements:ip(e,t,{space:\"between\",axis:\"x\"}),commitToHistory:!0}},keyTest:function(e){return e.altKey&&e.code===Xt},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{hidden:!ap(t,n),type:\"button\",icon:(0,_.jsx)(Yl,{theme:n.theme}),onClick:function(){return r(null)},title:\"\".concat(L(\"labels.distributeHorizontally\"),\" \u2014 \").concat(Zn(\"Alt+H\")),\"aria-label\":L(\"labels.distributeHorizontally\"),visible:rl(qi(t),n)})}}),As({name:\"distributeVertically\",perform:function(e,t){return{appState:t,elements:ip(e,t,{space:\"between\",axis:\"y\"}),commitToHistory:!0}},keyTest:function(e){return e.altKey&&e.code===qt},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,_.jsx)(vl,{hidden:!ap(t,n),type:\"button\",icon:(0,_.jsx)(Xl,{theme:n.theme}),onClick:function(){return r(null)},title:\"\".concat(L(\"labels.distributeVertically\"),\" \u2014 \").concat(Zn(\"Alt+V\")),\"aria-label\":L(\"labels.distributeVertically\"),visible:rl(qi(t),n)})}}),As({name:\"flipHorizontal\",perform:function(e,t){return{elements:cp(e,t,\"horizontal\"),appState:t,commitToHistory:!0}},keyTest:function(e){return e.shiftKey&&\"KeyH\"===e.code},contextItemLabel:\"labels.flipHorizontal\",contextItemPredicate:function(e,t){return function(e,t){var n=ol(qi(e),t);return 1===n.length&&\"text\"!==n[0].type}(e,t)}})),sp=As({name:\"flipVertical\",perform:function(e,t){return{elements:cp(e,t,\"vertical\"),appState:t,commitToHistory:!0}},keyTest:function(e){return e.shiftKey&&\"KeyV\"===e.code},contextItemLabel:\"labels.flipVertical\",contextItemPredicate:function(e,t){return function(e,t){return 1===ol(qi(e),t).length}(e,t)}}),cp=function(e,t,n){var r=ol(qi(e),t);if(r.length>1)return e;var o=up(r,t,n),a=Yi(o);return e.map((function(e){return a[e.id]||e}))},up=function(e,t,n){for(var r=0;r<e.length;r++)dp(e[r],t),\"vertical\"===n&&pp(e[r],Math.PI);return e},dp=function(e,t){var n=e.x,r=e.y,o=e.width,a=e.height,i=Ai(e.angle),l=0;(Qe(e)||qe(e))&&(l=2*e.points.reduce((function(e,t){return Math.max(e,t[0])}),0)-e.width),ao(e,{angle:Ai(0)});var s=Go(e,t.zoom),c=!0,u=0,d=s.nw;if(d||(c=!1,d=s.ne)){if(Qe(e)){for(var p=1;p<e.points.length;p++)ti.movePoint(e,p,[-e.points[p][0],e.points[p][1]]);ti.normalizePoints(e)}else u=c?e.x+2*o:e.x-2*o,Hi(e,!0,e,c?\"nw\":\"ne\",!1,u,d[1]),ao(e,{width:o,height:a});var f=Ai(2*Math.PI-i);f<0&&(f=Ai(f+2*Math.PI)),ao(e,{angle:f}),ao(e,{x:n+l,y:r}),gi(e)}else ao(e,{angle:i})},pp=function(e,t){var n=e.x,r=e.y,o=Ai(e.angle+t);o<0&&(o=Ai(2*Math.PI+o)),ao(e,{angle:o}),ao(e,{x:n,y:r})};function fp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function hp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?fp(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):fp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var mp=As({name:\"copy\",perform:function(e,t){return ad(qi(e),t),{commitToHistory:!1}},contextItemLabel:\"labels.copy\",keyTest:void 0}),gp=As({name:\"cut\",perform:function(e,t,n,r){return mp.perform(e,t,n,r),zs.perform(e,t,n,r)},contextItemLabel:\"labels.cut\",keyTest:function(e){return e[ln]&&e.code===$t}}),vp=As({name:\"copyAsSvg\",perform:function(){var e=(0,d.Z)(k().mark((function e(t,n,r,o){var a;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o.canvas){e.next=2;break}return e.abrupt(\"return\",{commitToHistory:!1});case 2:return a=ol(qi(t),n),e.prev=3,e.next=6,fd(\"clipboard-svg\",a.length?a:qi(t),n,n);case 6:return e.abrupt(\"return\",{commitToHistory:!1});case 9:return e.prev=9,e.t0=e.catch(3),console.error(e.t0),e.abrupt(\"return\",{appState:hp(hp({},n),{},{errorMessage:e.t0.message}),commitToHistory:!1});case 13:case\"end\":return e.stop()}}),e,null,[[3,9]])})));return function(t,n,r,o){return e.apply(this,arguments)}}(),contextItemLabel:\"labels.copyAsSvg\"}),bp=As({name:\"copyAsPng\",perform:function(){var e=(0,d.Z)(k().mark((function e(t,n,r,o){var a;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o.canvas){e.next=2;break}return e.abrupt(\"return\",{commitToHistory:!1});case 2:return a=ol(qi(t),n),e.prev=3,e.next=6,fd(\"clipboard\",a.length?a:qi(t),n,n);case 6:return e.abrupt(\"return\",{appState:hp(hp({},n),{},{toastMessage:L(\"toast.copyToClipboardAsPng\",{exportSelection:a.length?L(\"toast.selection\"):L(\"toast.canvas\"),exportColorScheme:n.exportWithDarkMode?L(\"buttons.darkMode\"):L(\"buttons.lightMode\")})}),commitToHistory:!1});case 9:return e.prev=9,e.t0=e.catch(3),console.error(e.t0),e.abrupt(\"return\",{appState:hp(hp({},n),{},{errorMessage:e.t0.message}),commitToHistory:!1});case 13:case\"end\":return e.stop()}}),e,null,[[3,9]])})));return function(t,n,r,o){return e.apply(this,arguments)}}(),contextItemLabel:\"labels.copyAsPng\",keyTest:function(e){return e.code===Kt&&e.altKey&&e.shiftKey}});function yp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function xp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?yp(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):yp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var wp=As({name:\"gridMode\",perform:function(e,t){return Tc(\"view\",\"mode\",\"grid\"),{appState:xp(xp({},t),{},{gridSize:this.checked(t)?null:c.k}),commitToHistory:!1}},checked:function(e){return null!==e.gridSize},contextItemLabel:\"labels.showGrid\",keyTest:function(e){return e[ln]&&e.code===Vt}});function kp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Sp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?kp(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):kp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ep=As({name:\"zenMode\",perform:function(e,t){return Tc(\"view\",\"mode\",\"zen\"),{appState:Sp(Sp({},t),{},{zenModeEnabled:!this.checked(t)}),commitToHistory:!1}},checked:function(e){return e.zenModeEnabled},contextItemLabel:\"buttons.zenMode\",keyTest:function(e){return!e[ln]&&e.altKey&&e.code===Qt}});function jp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Cp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?jp(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):jp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Op=As({name:\"stats\",perform:function(e,t){return{appState:Cp(Cp({},t),{},{showStats:!this.checked(t)}),commitToHistory:!1}},checked:function(e){return e.showStats},contextItemLabel:\"stats.title\",keyTest:function(e){return!e[ln]&&e.altKey&&e.code===Ut}});function Mp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ip(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Mp(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Mp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Pp=function(e,t,n){var r=!1;if(!(t.multiElement||t.resizingElement||t.editingElement||t.draggingElement)){var o=n();if(null===o)return{commitToHistory:r};var a=Yi(e),i=o.elements,l=Yi(i),s=e.filter((function(e){return!l.hasOwnProperty(e.id)})),c=i.map((function(e){return io(a[e.id]||e,e)})).concat(s.map((function(e){return io(e,{isDeleted:!0})})));return Mi(c,s),{elements:c,appState:Ip(Ip({},t),o.appState),commitToHistory:r,syncHistory:!0}}return{commitToHistory:r}},Tp=function(){function e(t,n,r,o){var a=this;p(this,e),this.actions={},this.renderAction=function(e,t){var n=a.app.props.UIOptions.canvasActions;if(a.actions[e]&&\"PanelComponent\"in a.actions[e]&&(!(e in n)||n[e])){var r=a.actions[e],o=r.PanelComponent;return(0,_.jsx)(o,{elements:a.getElementsIncludingDeleted(),appState:a.getAppState(),updateData:function(e){a.updater(r.perform(a.getElementsIncludingDeleted(),a.getAppState(),e,a.app))},appProps:a.app.props,data:t})}return null},this.updater=function(e){if(!e||!(\"then\"in e))return t(e);e.then((function(e){return t(e)}))},this.getAppState=n,this.getElementsIncludingDeleted=r,this.app=o}return h(e,[{key:\"registerAction\",value:function(e){this.actions[e.name]=e}},{key:\"registerAll\",value:function(e){var t=this;e.forEach((function(e){return t.registerAction(e)}))}},{key:\"handleKeyDown\",value:function(e){var t=this,n=this.app.props.UIOptions.canvasActions,r=Object.values(this.actions).sort((function(e,t){return(t.keyPriority||0)-(e.keyPriority||0)})).filter((function(r){return(!(r.name in n)||n[r.name])&&r.keyTest&&r.keyTest(e,t.getAppState(),t.getElementsIncludingDeleted())}));return 0!==r.length&&(!(this.getAppState().viewModeEnabled&&!Object.values(c.EH).includes(r[0].name))&&(e.preventDefault(),this.updater(r[0].perform(this.getElementsIncludingDeleted(),this.getAppState(),null,this.app)),!0))}},{key:\"executeAction\",value:function(e){this.updater(e.perform(this.getElementsIncludingDeleted(),this.getAppState(),null,this.app))}}]),e}(),Ap=function(){function e(t){var n=this;p(this,e),this.libraryCache=null,this.resetLibrary=(0,d.Z)(k().mark((function e(){var t,r;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,null===(t=(r=n.app.props).onLibraryChange)||void 0===t?void 0:t.call(r,[]);case 2:n.libraryCache=[];case 3:case\"end\":return e.stop()}}),e)}))),this.restoreLibraryItem=function(e){var t=qi(mu(e,null));return t.length?t:null},this.loadLibrary=function(){return new Promise(function(){var e=(0,d.Z)(k().mark((function e(t){var r,o;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!n.libraryCache){e.next=2;break}return e.abrupt(\"return\",t(JSON.parse(JSON.stringify(n.libraryCache))));case 2:if(e.prev=2,r=n.app.libraryItemsFromStorage){e.next=6;break}return e.abrupt(\"return\",t([]));case 6:o=r.reduce((function(e,t){return n.restoreLibraryItem(t)&&e.push(t),e}),[]),n.libraryCache=JSON.parse(JSON.stringify(o)),t(o),e.next=15;break;case 11:e.prev=11,e.t0=e.catch(2),console.error(e.t0),t([]);case 15:case\"end\":return e.stop()}}),e,null,[[2,11]])})));return function(t){return e.apply(this,arguments)}}())},this.saveLibrary=function(){var e=(0,d.Z)(k().mark((function e(t){var r,o,a,i;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.libraryCache,e.prev=1,i=JSON.stringify(t),n.libraryCache=JSON.parse(i),e.next=6,null===(o=(a=n.app.props).onLibraryChange)||void 0===o?void 0:o.call(a,t);case 6:e.next=12;break;case 8:throw e.prev=8,e.t0=e.catch(1),n.libraryCache=r,e.t0;case 12:case\"end\":return e.stop()}}),e,null,[[1,8]])})));return function(t){return e.apply(this,arguments)}}(),this.app=t}var t;return h(e,[{key:\"importLibrary\",value:(t=(0,d.Z)(k().mark((function e(t){var n,r,o,a,i=this;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Eu(t);case 2:if((n=e.sent)&&n.library){e.next=5;break}return e.abrupt(\"return\");case 5:return r=function(e,t){return!e.find((function(e){return e.length===t.length&&e.every((function(e,n){return e.id===t[n].id&&e.versionNonce===t[n].versionNonce}))}))},e.next=8,this.loadLibrary();case 8:return o=e.sent,a=n.library.reduce((function(e,t){var n=i.restoreLibraryItem(t);return n&&r(o,n)&&e.push(n),e}),[]),e.next=12,this.saveLibrary([].concat(F(o),F(a)));case 12:case\"end\":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})}]),e}(),Lp=function(e){var t=Array.from(e.values());return{x:Dp(t,(function(e){return e.x}))\/t.length,y:Dp(t,(function(e){return e.y}))\/t.length}},_p=function(e){var t=R(e,2),n=t[0],r=t[1];return Math.hypot(n.x-r.x,n.y-r.y)},Dp=function(e,t){return e.reduce((function(e,n){return e+t(n)}),0)};function zp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Bp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?zp(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):zp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Hp=function(e){return{selectedElementIds:e.selectedElementIds,selectedGroupIds:e.selectedGroupIds,viewBackgroundColor:e.viewBackgroundColor,editingLinearElement:e.editingLinearElement,editingGroupId:e.editingGroupId,name:e.name}},Np=function(){function e(){var t=this;p(this,e),this.elementCache=new Map,this.recording=!0,this.stateHistory=[],this.redoStack=[],this.lastEntry=null,this.generateEntry=function(e,n){return t.dehydrateHistoryEntry({appState:Hp(e),elements:n.reduce((function(t,n){if(Qe(n)&&e.multiElement&&e.multiElement.id===n.id){if(e.multiElement&&e.multiElement.id===n.id&&n.points.length<2)return t;t.push(Bp(Bp({},n),{},{points:n.lastCommittedPoint!==n.points[n.points.length-1]?n.points.slice(0,-1):n.points}))}else t.push(n);return t}),[])})}}return h(e,[{key:\"hydrateHistoryEntry\",value:function(e){var t=this,n=e.appState,r=e.elements;return{appState:JSON.parse(n),elements:r.map((function(e){var n,r=null===(n=t.elementCache.get(e.id))||void 0===n?void 0:n.get(e.versionNonce);if(!r)throw new Error(\"Element not found: \".concat(e.id,\":\").concat(e.versionNonce));return r}))}}},{key:\"dehydrateHistoryEntry\",value:function(e){var t=this,n=e.appState,r=e.elements;return{appState:JSON.stringify(n),elements:r.map((function(e){t.elementCache.has(e.id)||t.elementCache.set(e.id,new Map);var n=t.elementCache.get(e.id);return n.has(e.versionNonce)||n.set(e.versionNonce,_o(e)),{id:e.id,versionNonce:e.versionNonce}}))}}},{key:\"getSnapshotForTest\",value:function(){var e=this;return{recording:this.recording,stateHistory:this.stateHistory.map((function(t){return e.hydrateHistoryEntry(t)})),redoStack:this.redoStack.map((function(t){return e.hydrateHistoryEntry(t)}))}}},{key:\"clear\",value:function(){this.stateHistory.length=0,this.redoStack.length=0,this.lastEntry=null,this.elementCache.clear()}},{key:\"shouldCreateEntry\",value:function(e){var t,n=this.lastEntry;if(!n)return!0;if(e.elements.length!==n.elements.length)return!0;for(var r=e.elements.length-1;r>-1;r--){var o=e.elements[r],a=n.elements[r];if(!o||!a||o.id!==a.id||o.versionNonce!==a.versionNonce)return!0}for(t in e.appState){var i,l;if(\"editingLinearElement\"===t)if((null===(i=e.appState[t])||void 0===i?void 0:i.elementId)===(null===(l=n.appState[t])||void 0===l?void 0:l.elementId))continue;if(\"selectedElementIds\"!==t&&\"selectedGroupIds\"!==t&&e.appState[t]!==n.appState[t])return!0}return!1}},{key:\"pushEntry\",value:function(e,t){var n=this.generateEntry(e,t),r=this.hydrateHistoryEntry(n);if(r){if(!this.shouldCreateEntry(r))return;this.stateHistory.push(n),this.lastEntry=r,this.clearRedoStack()}}},{key:\"clearRedoStack\",value:function(){this.redoStack.splice(0,this.redoStack.length)}},{key:\"redoOnce\",value:function(){if(0===this.redoStack.length)return null;var e=this.redoStack.pop();return void 0!==e?(this.stateHistory.push(e),this.hydrateHistoryEntry(e)):null}},{key:\"undoOnce\",value:function(){if(1===this.stateHistory.length)return null;var e=this.stateHistory.pop(),t=this.stateHistory[this.stateHistory.length-1];return void 0!==e?(this.redoStack.push(e),this.hydrateHistoryEntry(t)):null}},{key:\"setCurrentState\",value:function(e,t){this.lastEntry=this.hydrateHistoryEntry(this.generateEntry(e,t))}},{key:\"resumeRecording\",value:function(){this.recording=!0}},{key:\"record\",value:function(e,t){this.recording&&(this.pushEntry(e,t),this.recording=!1)}}]),e}(),Rp=[{icon:(0,_.jsx)(\"svg\",{viewBox:\"0 0 320 512\",className:\"\",children:(0,_.jsx)(\"path\",{d:\"M302.189 329.126H196.105l55.831 135.993c3.889 9.428-.555 19.999-9.444 23.999l-49.165 21.427c-9.165 4-19.443-.571-23.332-9.714l-53.053-129.136-86.664 89.138C18.729 472.71 0 463.554 0 447.977V18.299C0 1.899 19.921-6.096 30.277 5.443l284.412 292.542c11.472 11.179 3.007 31.141-12.5 31.141z\"})}),value:\"selection\",key:jn},{icon:(0,_.jsx)(\"svg\",{viewBox:\"0 0 448 512\",children:(0,_.jsx)(\"path\",{d:\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z\"})}),value:\"rectangle\",key:kn},{icon:(0,_.jsx)(\"svg\",{viewBox:\"0 0 223.646 223.646\",children:(0,_.jsx)(\"path\",{d:\"M111.823 0L16.622 111.823 111.823 223.646 207.025 111.823z\"})}),value:\"diamond\",key:mn},{icon:(0,_.jsx)(\"svg\",{viewBox:\"0 0 512 512\",children:(0,_.jsx)(\"path\",{d:\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z\"})}),value:\"ellipse\",key:gn},{icon:(0,_.jsx)(\"svg\",{viewBox:\"0 0 448 512\",className:\"rtl-mirror\",children:(0,_.jsx)(\"path\",{d:\"M313.941 216H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h301.941v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.569 0-33.941l-86.059-86.059c-15.119-15.119-40.971-4.411-40.971 16.971V216z\"})}),value:\"arrow\",key:hn},{icon:(0,_.jsx)(\"svg\",{viewBox:\"0 0 6 6\",children:(0,_.jsx)(\"line\",{x1:\"0\",y1:\"3\",x2:\"6\",y2:\"3\",stroke:\"currentColor\",strokeLinecap:\"round\"})}),value:\"line\",key:[xn,bn]},{icon:(0,_.jsx)(\"svg\",{viewBox:\"0 0 512 512\",children:(0,_.jsx)(\"path\",{fill:\"currentColor\",d:\"M290.74 93.24l128.02 128.02-277.99 277.99-114.14 12.6C11.35 513.54-1.56 500.62.14 485.34l12.7-114.22 277.9-277.88zm207.2-19.06l-60.11-60.11c-18.75-18.75-49.16-18.75-67.91 0l-56.55 56.55 128.02 128.02 56.55-56.55c18.75-18.76 18.75-49.16 0-67.91z\"})}),value:\"freedraw\",key:Cn},{icon:(0,_.jsx)(\"svg\",{viewBox:\"0 0 448 512\",children:(0,_.jsx)(\"path\",{d:\"M432 416h-23.41L277.88 53.69A32 32 0 0 0 247.58 32h-47.16a32 32 0 0 0-30.3 21.69L39.41 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-19.58l23.3-64h152.56l23.3 64H304a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM176.85 272L224 142.51 271.15 272z\"})}),value:\"text\",key:En}],Fp=(n(1292),{cut:[Zn(\"CtrlOrCmd+X\")],copy:[Zn(\"CtrlOrCmd+C\")],paste:[Zn(\"CtrlOrCmd+V\")],copyStyles:[Zn(\"CtrlOrCmd+Alt+C\")],pasteStyles:[Zn(\"CtrlOrCmd+Alt+V\")],selectAll:[Zn(\"CtrlOrCmd+A\")],deleteSelectedElements:[Zn(\"Del\")],duplicateSelection:[Zn(\"CtrlOrCmd+D\"),Zn(\"Alt+\".concat(L(\"helpDialog.drag\")))],sendBackward:[Zn(\"CtrlOrCmd+[\")],bringForward:[Zn(\"CtrlOrCmd+]\")],sendToBack:[Zn(Pt?\"CtrlOrCmd+Alt+[\":\"CtrlOrCmd+Shift+[\")],bringToFront:[Zn(Pt?\"CtrlOrCmd+Alt+]\":\"CtrlOrCmd+Shift+]\")],copyAsPng:[Zn(\"Shift+Alt+C\")],copyAsSvg:[],group:[Zn(\"CtrlOrCmd+G\")],ungroup:[Zn(\"CtrlOrCmd+Shift+G\")],gridMode:[Zn(\"CtrlOrCmd+'\")],zenMode:[Zn(\"Alt+Z\")],stats:[Zn(\"Alt+\/\")],addToLibrary:[],flipHorizontal:[Zn(\"Shift+H\")],flipVertical:[Zn(\"Shift+V\")],viewMode:[Zn(\"Alt+R\")]}),Vp=function(e){var t=e.options,n=e.onCloseRequest,r=e.top,o=e.left,a=e.actionManager,i=e.appState;return(0,_.jsx)(oc,{onCloseRequest:n,top:r,left:o,fitInViewport:!0,children:(0,_.jsx)(\"ul\",{className:\"context-menu\",onContextMenu:function(e){return e.preventDefault()},children:t.map((function(e,t){var r;if(\"separator\"===e)return(0,_.jsx)(\"hr\",{className:\"context-menu-option-separator\"},t);var o,l,s=e.name,c=e.contextItemLabel?L(e.contextItemLabel):\"\";return(0,_.jsx)(\"li\",{\"data-testid\":s,onClick:n,children:(0,_.jsxs)(\"button\",{className:Ze(\"context-menu-option\",{dangerous:\"deleteSelectedElements\"===s,checkmark:null===(r=e.checked)||void 0===r?void 0:r.call(e,i)}),onClick:function(){return a.executeAction(e)},children:[(0,_.jsx)(\"div\",{className:\"context-menu-option__label\",children:c}),(0,_.jsx)(\"kbd\",{className:\"context-menu-option__shortcut\",children:s?(o=s,l=Fp[o],l&&l.length>0?l[0]:\"\"):\"\"})]})},t)}))})})},Gp=new WeakMap,Up=function(e){var t,n,r=Array.of();e.options.forEach((function(e){e&&r.push(e)})),r.length&&(0,It.render)((0,_.jsx)(Vp,{top:e.top,left:e.left,options:r,onCloseRequest:function(){return t=e.container,void((n=Gp.get(t))&&((0,It.unmountComponentAtNode)(n),n.remove(),Gp.delete(t)));var t,n},actionManager:e.actionManager,appState:e.appState}),(t=e.container,(n=Gp.get(t))||(n=document.createElement(\"div\"),t.querySelector(\".excalidraw-contextMenuContainer\").appendChild(n),Gp.set(t,n),n)))},Kp=function(e){var t=e.appState,n=e.elements,r=e.renderAction,o=e.elementType,a=al(qi(n),t),i=Boolean(t.editingElement),l=ah(),s=\"rtl\"===document.documentElement.getAttribute(\"dir\"),c=sl(o)||a.some((function(e){return sl(e.type)&&!tr(e.backgroundColor)})),u=sl(o)||a.some((function(e){return sl(e.type)}));return(0,_.jsxs)(\"div\",{className:\"panelColumn\",children:[r(\"changeStrokeColor\"),u&&r(\"changeBackgroundColor\"),c&&r(\"changeFillStyle\"),(cl(o)||a.some((function(e){return cl(e.type)})))&&r(\"changeStrokeWidth\"),(\"freedraw\"===o||a.some((function(e){return\"freedraw\"===e.type})))&&r(\"changeStrokeShape\"),(ul(o)||a.some((function(e){return ul(e.type)})))&&(0,_.jsxs)(_.Fragment,{children:[r(\"changeStrokeStyle\"),r(\"changeSloppiness\")]}),(dl(o)||a.some((function(e){return dl(e.type)})))&&(0,_.jsx)(_.Fragment,{children:r(\"changeSharpness\")}),(pl(o)||a.some((function(e){return pl(e.type)})))&&(0,_.jsxs)(_.Fragment,{children:[r(\"changeFontSize\"),r(\"changeFontFamily\"),r(\"changeTextAlign\")]}),(fl(o)||a.some((function(e){return fl(e.type)})))&&(0,_.jsx)(_.Fragment,{children:r(\"changeArrowhead\")}),r(\"changeOpacity\"),(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.layers\")}),(0,_.jsxs)(\"div\",{className:\"buttonList\",children:[r(\"sendToBack\"),r(\"sendBackward\"),r(\"bringToFront\"),r(\"bringForward\")]})]}),a.length>1&&(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.align\")}),(0,_.jsxs)(\"div\",{className:\"buttonList\",children:[s?(0,_.jsxs)(_.Fragment,{children:[r(\"alignRight\"),r(\"alignHorizontallyCentered\"),r(\"alignLeft\")]}):(0,_.jsxs)(_.Fragment,{children:[r(\"alignLeft\"),r(\"alignHorizontallyCentered\"),r(\"alignRight\")]}),a.length>2&&r(\"distributeHorizontally\"),(0,_.jsxs)(\"div\",{className:\"iconRow\",children:[r(\"alignTop\"),r(\"alignVerticallyCentered\"),r(\"alignBottom\"),a.length>2&&r(\"distributeVertically\")]})]})]}),!l&&!i&&a.length>0&&(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.actions\")}),(0,_.jsxs)(\"div\",{className:\"buttonList\",children:[r(\"duplicateSelection\"),r(\"deleteSelectedElements\"),r(\"group\"),r(\"ungroup\")]})]})]})},Wp=function(e){var t=e.canvas,n=e.elementType,r=e.setAppState;return(0,_.jsx)(_.Fragment,{children:Rp.map((function(e,o){var a=e.value,i=e.icon,l=e.key,s=L(\"toolBar.\".concat(a)),c=\"string\"==typeof l?l:l[0],u=\"\".concat(zn(c),\" \").concat(L(\"helpDialog.or\"),\" \").concat(o+1);return(0,_.jsx)(vl,{className:\"Shape\",type:\"radio\",icon:i,checked:n===a,name:\"editor-current-shape\",title:\"\".concat(zn(s),\" \u2014 \").concat(u),keyBindingLabel:\"\".concat(o+1),\"aria-label\":zn(s),\"aria-keyshortcuts\":u,\"data-testid\":a,onChange:function(){r({elementType:a,multiElement:null,selectedElementIds:{}}),Kn(t,a),r({})}},a)}))})},Zp=function(e){var t=e.renderAction;e.zoom;return(0,_.jsx)(wd,{gap:1,children:(0,_.jsxs)(xd,{gap:1,align:\"center\",children:[t(\"zoomOut\"),t(\"zoomIn\"),t(\"resetZoom\")]})})},Yp=function(e){e.appState,e.setAppState;var t=e.actionManager,n=e.showThemeBtn;return(0,_.jsxs)(\"div\",{style:{display:\"flex\"},children:[t.renderAction(\"changeViewBackgroundColor\"),n&&t.renderAction(\"toggleTheme\")]})},Xp=(n(778),function(e){var t=e.isCollaborating,n=e.collaboratorCount,r=e.onClick;return(0,_.jsx)(_.Fragment,{children:(0,_.jsx)(vl,{className:Ze(\"CollabButton\",{\"is-collaborating\":t}),onClick:r,icon:Ql,type:\"button\",title:L(\"labels.liveCollaboration\"),\"aria-label\":L(\"labels.liveCollaboration\"),showAriaLabel:ah(),children:n>0&&(0,_.jsx)(\"div\",{className:\"CollabButton-collaborators\",children:n})})})});n(196),n(1106);function qp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function $p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?qp(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):qp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Qp=s().forwardRef((function(e,t){var n=e.children,r=e.padding,o=e.className,a=e.style;return(0,_.jsx)(\"div\",{className:Ze(\"Island\",o),style:$p({\"--padding\":r},a),ref:t,children:n})})),Jp=(n(8328),function(e){var t=e.theme,n=ef(void 0===t?\"light\":t);if(!n)return null;return(0,It.createPortal)((0,_.jsxs)(\"div\",{className:Ze(\"Modal\",e.className),role:\"dialog\",\"aria-modal\":\"true\",onKeyDown:function(t){t.key===un&&(t.nativeEvent.stopImmediatePropagation(),t.stopPropagation(),e.onCloseRequest())},\"aria-labelledby\":e.labelledBy,children:[(0,_.jsx)(\"div\",{className:\"Modal__background\",onClick:e.onCloseRequest}),(0,_.jsx)(\"div\",{className:\"Modal__content\",style:{\"--max-width\":\"\".concat(e.maxWidth,\"px\")},tabIndex:0,children:e.children})]}),n)}),ef=function(e){var t=R((0,l.useState)(null),2),n=t[0],r=t[1],o=ah(),a=(0,l.useRef)(o);a.current=o;var i=lh().container;return(0,l.useLayoutEffect)((function(){n&&n.classList.toggle(\"excalidraw--mobile\",o)}),[n,o]),(0,l.useLayoutEffect)((function(){var t=!(null==i||!i.classList.contains(\"theme--dark\"))||\"dark\"===e,n=document.createElement(\"div\");return n.classList.add(\"excalidraw\",\"excalidraw-modal-container\"),n.classList.toggle(\"excalidraw--mobile\",a.current),t&&(n.classList.add(\"theme--dark\"),n.classList.add(\"theme--dark-background-none\")),document.body.appendChild(n),r(n),function(){document.body.removeChild(n)}}),[i,e]),n},tf=function(e){var t=function(){var e=R((0,l.useState)(null),2),t=e[0],n=e[1];return[t,(0,l.useCallback)((function(e){return n(e)}),[])]}(),n=R(t,2),r=n[0],o=n[1],a=R((0,l.useState)(document.activeElement),1)[0],i=lh().id;(0,l.useEffect)((function(){if(r){var t=s(r);t.length>0&&!1!==e.autofocus&&(t[1]||t[0]).focus();var n=function(e){if(e.key===fn){var t=s(r),n=document.activeElement,o=t.findIndex((function(e){return e===n}));0===o&&e.shiftKey?(t[t.length-1].focus(),e.preventDefault()):o!==t.length-1||e.shiftKey||(t[0].focus(),e.preventDefault())}};return r.addEventListener(\"keydown\",n),function(){return r.removeEventListener(\"keydown\",n)}}}),[r,e.autofocus]);var s=function(e){var t=e.querySelectorAll(\"button, a, input, select, textarea, div[tabindex]\");return t?Array.from(t):[]},c=function(){a.focus(),e.onCloseRequest()};return(0,_.jsx)(Jp,{className:Ze(\"Dialog\",e.className),labelledBy:\"dialog-title\",maxWidth:e.small?550:800,onCloseRequest:c,theme:e.theme,children:(0,_.jsxs)(Qp,{ref:o,children:[(0,_.jsxs)(\"h2\",{id:\"\".concat(i,\"-dialog-title\"),className:\"Dialog__title\",children:[(0,_.jsx)(\"span\",{className:\"Dialog__titleContent\",children:e.title}),(0,_.jsx)(\"button\",{className:\"Modal__close\",onClick:c,\"aria-label\":L(\"buttons.close\"),children:ah()?es:Jl})]}),(0,_.jsx)(\"div\",{className:\"Dialog__content\",children:e.children})]})})},nf=function(e){var t=e.message,n=e.onClose,r=R((0,l.useState)(!!t),2),o=r[0],a=r[1],i=lh().container,c=s().useCallback((function(){a(!1),n&&n(),null==i||i.focus()}),[n,i]);return(0,_.jsx)(_.Fragment,{children:o&&(0,_.jsx)(tf,{small:!0,onCloseRequest:c,title:L(\"errorDialog.title\"),children:(0,_.jsx)(\"div\",{style:{whiteSpace:\"pre-wrap\"},children:t})})})},rf=(n(2205),\"filter\"in document.createElement(\"canvas\").getContext(\"2d\")),of=function(){return(0,_.jsxs)(\"div\",{children:[(0,_.jsx)(\"h3\",{children:L(\"canvasError.cannotShowPreview\")}),(0,_.jsx)(\"p\",{children:(0,_.jsx)(\"span\",{children:L(\"canvasError.canvasTooBig\")})}),(0,_.jsxs)(\"em\",{children:[\"(\",L(\"canvasError.canvasTooBigTip\"),\")\"]})]})},af=function(e,t){(0,It.unmountComponentAtNode)(t),t.innerHTML=\"\",e instanceof HTMLCanvasElement?t.appendChild(e):(0,It.render)((0,_.jsx)(of,{}),t)},lf=function(e){var t,n=e.children,r=e.title,o=e.onClick,a=e.color,i=e.shade,l=void 0===i?6:i;return(0,_.jsx)(\"button\",{className:\"ExportDialog-imageExportButton\",style:(t={},V(t,\"--button-color\",Ct[a][l]),V(t,\"--button-color-darker\",Ct[a][l+1]),V(t,\"--button-color-darkest\",Ct[a][l+2]),t),title:r,\"aria-label\":r,onClick:o,children:n})},sf=function(e){var t=e.elements,n=e.appState,r=e.exportPadding,o=void 0===r?c.qy:r,a=e.actionManager,i=e.onExportToPng,s=e.onExportToSvg,u=e.onExportToClipboard,d=rl(t,n),p=R((0,l.useState)(d),2),f=p[0],h=p[1],m=(0,l.useRef)(null),g=n.exportBackground,v=n.viewBackgroundColor,b=f?ol(t,n):t;return(0,l.useEffect)((function(){h(d)}),[d]),(0,l.useEffect)((function(){var e=m.current;if(e)try{var t=_u(b,n,{exportBackground:g,viewBackgroundColor:v,exportPadding:o});ju(t).then((function(){af(t,e)})).catch((function(t){console.error(t),af(new ru,e)}))}catch(t){console.error(t),af(new ru,e)}}),[n,b,g,o,v]),(0,_.jsxs)(\"div\",{className:\"ExportDialog\",children:[(0,_.jsx)(\"div\",{className:\"ExportDialog__preview\",ref:m}),rf&&a.renderAction(\"exportWithDarkMode\"),(0,_.jsx)(\"div\",{style:{display:\"grid\",gridTemplateColumns:\"1fr\"},children:(0,_.jsxs)(\"div\",{style:{display:\"grid\",gridTemplateColumns:\"repeat(auto-fit, minmax(190px, 1fr))\",overflow:\"hidden\"},children:[a.renderAction(\"changeExportBackground\"),d&&(0,_.jsx)(vd,{checked:f,onChange:function(e){return h(e)},children:L(\"labels.onlySelected\")}),a.renderAction(\"changeExportEmbedScene\")]})}),(0,_.jsxs)(\"div\",{style:{display:\"flex\",alignItems:\"center\",marginTop:\".6em\"},children:[(0,_.jsx)(xd,{gap:2,children:a.renderAction(\"changeExportScale\")}),(0,_.jsx)(\"p\",{style:{marginLeft:\"1em\",userSelect:\"none\"},children:\"Scale\"})]}),(0,_.jsx)(\"div\",{style:{display:\"flex\",alignItems:\"center\",justifyContent:\"center\",margin:\".6em 0\"},children:!qc&&a.renderAction(\"changeProjectName\")}),(0,_.jsxs)(xd,{gap:2,justifyContent:\"center\",style:{margin:\"2em 0\"},children:[(0,_.jsx)(lf,{color:\"indigo\",title:L(\"buttons.exportToPng\"),\"aria-label\":L(\"buttons.exportToPng\"),onClick:function(){return i(b)},children:\"PNG\"}),(0,_.jsx)(lf,{color:\"red\",title:L(\"buttons.exportToSvg\"),\"aria-label\":L(\"buttons.exportToSvg\"),onClick:function(){return s(b)},children:\"SVG\"}),od&&(0,_.jsx)(lf,{title:L(\"buttons.copyPngToClipboard\"),onClick:function(){return u(b)},color:\"gray\",shade:7,children:Ol})]})]})},cf=function(e){var t=e.elements,n=e.appState,r=e.exportPadding,o=void 0===r?c.qy:r,a=e.actionManager,i=e.onExportToPng,u=e.onExportToSvg,d=e.onExportToClipboard,p=R((0,l.useState)(!1),2),f=p[0],h=p[1],m=s().useCallback((function(){h(!1)}),[]);return(0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(vl,{onClick:function(){h(!0)},\"data-testid\":\"image-export-button\",icon:Tl,type:\"button\",\"aria-label\":L(\"buttons.exportImage\"),showAriaLabel:ah(),title:L(\"buttons.exportImage\")}),f&&(0,_.jsx)(tf,{onCloseRequest:m,title:L(\"buttons.exportImage\"),children:(0,_.jsx)(sf,{elements:t,appState:n,exportPadding:o,actionManager:a,onExportToPng:i,onExportToSvg:u,onExportToClipboard:d,onCloseRequest:m})})]})},uf=(n(1310),function(e){var t=e.children,n=e.side,r=e.className;return(0,_.jsx)(\"div\",{className:Ze(\"FixedSideContainer\",\"FixedSideContainer_side_\".concat(n),r),children:t})}),df=(n(7096),function(e){var t=function(e){var t=e.appState,n=e.elements,r=t.elementType,o=t.isResizing,a=t.isRotating,i=t.lastPointerDownWith,l=null!==t.multiElement;if(\"arrow\"===r||\"line\"===r)return L(l?\"hints.linearElementMulti\":\"hints.linearElement\");if(\"freedraw\"===r)return L(\"hints.freeDraw\");if(\"text\"===r)return L(\"hints.text\");var s=ol(n,t);if(o&&\"mouse\"===i&&1===s.length){var c=s[0];return Qe(c)&&2===c.points.length?L(\"hints.lockAngle\"):L(\"hints.resize\")}return a&&\"mouse\"===i?L(\"hints.rotate\"):1===s.length&&Qe(s[0])?t.editingLinearElement?t.editingLinearElement.activePointIndex?L(\"hints.lineEditor_pointSelected\"):L(\"hints.lineEditor_nothingSelected\"):L(\"hints.lineEditor_info\"):1===s.length&&Xe(s[0])?L(\"hints.text_selected\"):t.editingElement&&Xe(t.editingElement)?L(\"hints.text_editing\"):null}({appState:e.appState,elements:e.elements});return t?(t=Zn(t),(0,_.jsx)(\"div\",{className:\"HintViewer\",children:(0,_.jsx)(\"span\",{children:t})})):null});n(3336),n(694);function pf(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return ff(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return ff(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function ff(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var hf=(0,_.jsx)(\"svg\",{viewBox:\"0 0 1792 1792\",children:(0,_.jsx)(\"path\",{fill:\"currentColor\",d:\"M1600 736v192q0 40-28 68t-68 28h-416v416q0 40-28 68t-68 28h-192q-40 0-68-28t-28-68v-416h-416q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h416v-416q0-40 28-68t68-28h192q40 0 68 28t28 68v416h416q40 0 68 28t28 68z\"})}),mf=function(e){var t=e.elements,n=e.pendingElements,r=e.onRemoveFromLibrary,o=e.onClick,a=(0,l.useRef)(null);(0,l.useEffect)((function(){var e=t||n;if(e){var r,o=a.current;return(0,d.Z)(k().mark((function t(){var n,i,l;return k().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Du(e,{exportBackground:!1,viewBackgroundColor:Ct.white});case 2:r=t.sent,n=pf(a.current.children),t.prev=4,n.s();case 6:if((i=n.n()).done){t.next=13;break}if(\"svg\"===(l=i.value).tagName){t.next=10;break}return t.abrupt(\"continue\",11);case 10:o.removeChild(l);case 11:t.next=6;break;case 13:t.next=18;break;case 15:t.prev=15,t.t0=t.catch(4),n.e(t.t0);case 18:return t.prev=18,n.f(),t.finish(18);case 21:o.appendChild(r);case 22:case\"end\":return t.stop()}}),t,null,[[4,15,18,21]])})))(),function(){r&&o.removeChild(r)}}}),[t,n]);var i=R((0,l.useState)(!1),2),s=i[0],u=i[1],p=ah(),f=(s||p)&&n&&(0,_.jsx)(\"div\",{className:\"library-unit__adder\",children:hf});return(0,_.jsxs)(\"div\",{className:Ze(\"library-unit\",{\"library-unit__active\":t||n}),onMouseEnter:function(){return u(!0)},onMouseLeave:function(){return u(!1)},children:[(0,_.jsx)(\"div\",{className:Ze(\"library-unit__dragger\",{\"library-unit__pulse\":!!n}),ref:a,draggable:!!t,onClick:t||n?o:void 0,onDragStart:function(e){u(!1),e.dataTransfer.setData(c.LO.excalidrawlib,JSON.stringify(t))}}),f,t&&(s||p)&&(0,_.jsx)(\"button\",{className:\"library-unit__removeFromLibrary\",\"aria-label\":L(\"labels.removeFromLibrary\"),onClick:r,children:Jl})]})},gf={CHECKED:(0,_.jsx)(\"svg\",{width:\"1792\",height:\"1792\",viewBox:\"0 0 1792 1792\",xmlns:\"http:\/\/www.w3.org\/2000\/svg\",children:(0,_.jsx)(\"path\",{d:\"M640 768h512v-192q0-106-75-181t-181-75-181 75-75 181v192zm832 96v576q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-576q0-40 28-68t68-28h32v-192q0-184 132-316t316-132 316 132 132 316v192h32q40 0 68 28t28 68z\"})}),UNCHECKED:(0,_.jsx)(\"svg\",{width:\"1792\",height:\"1792\",viewBox:\"0 0 1792 1792\",xmlns:\"http:\/\/www.w3.org\/2000\/svg\",className:\"unlocked-icon rtl-mirror\",children:(0,_.jsx)(\"path\",{d:\"M1728 576v256q0 26-19 45t-45 19h-64q-26 0-45-19t-19-45v-256q0-106-75-181t-181-75-181 75-75 181v192h96q40 0 68 28t28 68v576q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-576q0-40 28-68t68-28h672v-192q0-185 131.5-316.5t316.5-131.5 316.5 131.5 131.5 316.5z\"})})},vf=function(e){return(0,_.jsxs)(\"label\",{className:Ze(\"ToolIcon ToolIcon__lock ToolIcon_type_floating zen-mode-visibility\",\"ToolIcon_size_\".concat(\"medium\"),{\"zen-mode-visibility--hidden\":e.zenModeEnabled}),title:\"\".concat(e.title,\" \u2014 Q\"),children:[(0,_.jsx)(\"input\",{className:\"ToolIcon_type_checkbox\",type:\"checkbox\",name:e.name,onChange:e.onChange,checked:e.checked,\"aria-label\":e.title}),(0,_.jsx)(\"div\",{className:\"ToolIcon__icon\",children:e.checked?gf.CHECKED:gf.UNCHECKED})]})},bf=[\"heading\",\"children\"];function yf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function xf(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?yf(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):yf(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var wf=function(e){var t=e.heading,n=e.children,r=po(e,bf),o=lh().id,a=(0,_.jsx)(\"h2\",{className:\"visually-hidden\",id:\"\".concat(o,\"-\").concat(t,\"-title\"),children:L(\"headings.\".concat(t))});return(0,_.jsx)(\"section\",xf(xf({},r),{},{\"aria-labelledby\":\"\".concat(o,\"-\").concat(t,\"-title\"),children:\"function\"==typeof n?n(a):(0,_.jsxs)(_.Fragment,{children:[a,n]})}))},kf=(n(580),function(e){var t=e.children,n=e.className,r=e.mobile;return(0,_.jsx)(\"div\",{className:Ze(\"UserList\",n,{UserList_mobile:r}),children:t})}),Sf=(0,_.jsx)(\"svg\",{viewBox:\"0 0 576 512\",children:(0,_.jsx)(\"path\",{fill:\"currentColor\",d:\"M542.22 32.05c-54.8 3.11-163.72 14.43-230.96 55.59-4.64 2.84-7.27 7.89-7.27 13.17v363.87c0 11.55 12.63 18.85 23.28 13.49 69.18-34.82 169.23-44.32 218.7-46.92 16.89-.89 30.02-14.43 30.02-30.66V62.75c.01-17.71-15.35-31.74-33.77-30.7zM264.73 87.64C197.5 46.48 88.58 35.17 33.78 32.05 15.36 31.01 0 45.04 0 62.75V400.6c0 16.24 13.13 29.78 30.02 30.66 49.49 2.6 149.59 12.11 218.77 46.95 10.62 5.35 23.21-1.94 23.21-13.46V100.63c0-5.29-2.62-10.14-7.27-12.99z\"})}),Ef=function(e){var t=e.appState,n=e.setAppState;return(0,_.jsxs)(\"label\",{className:Ze(\"ToolIcon ToolIcon_type_floating ToolIcon__library zen-mode-visibility\",\"ToolIcon_size_medium\",{\"zen-mode-visibility--hidden\":t.zenModeEnabled}),title:\"\".concat(zn(L(\"toolBar.library\")),\" \u2014 9\"),style:{marginInlineStart:\"var(--space-factor)\"},children:[(0,_.jsx)(\"input\",{className:\"ToolIcon_type_checkbox\",type:\"checkbox\",name:\"editor-library\",onChange:function(e){n({isLibraryOpen:e.target.checked})},checked:t.isLibraryOpen,\"aria-label\":zn(L(\"toolBar.library\")),\"aria-keyshortcuts\":\"9\"}),(0,_.jsx)(\"div\",{className:\"ToolIcon__icon\",children:Sf})]})};function jf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Cf=function(e){var t=e.appState,n=e.elements,r=e.libraryMenu,o=e.actionManager,a=e.renderJSONExportDialog,i=e.renderImageExportDialog,l=e.setAppState,c=e.onCollabButtonClick,u=e.onLockToggle,d=e.canvas,p=e.isCollaborating,f=e.renderCustomFooter,h=e.viewModeEnabled,m=e.showThemeBtn;return(0,_.jsxs)(_.Fragment,{children:[!h&&(0,_.jsxs)(uf,{side:\"top\",className:\"App-top-bar\",children:[(0,_.jsx)(wf,{heading:\"shapes\",children:function(e){return(0,_.jsxs)(wd,{gap:4,align:\"center\",children:[(0,_.jsxs)(xd,{gap:1,children:[(0,_.jsxs)(Qp,{padding:1,children:[e,(0,_.jsx)(xd,{gap:1,children:(0,_.jsx)(Wp,{canvas:d,elementType:t.elementType,setAppState:l})})]}),(0,_.jsx)(vf,{checked:t.elementLocked,onChange:u,title:L(\"toolBar.lock\")}),(0,_.jsx)(Ef,{appState:t,setAppState:l})]}),r]})}}),(0,_.jsx)(df,{appState:t,elements:n})]}),(0,_.jsx)(\"div\",{className:\"App-bottom-bar\",style:{marginBottom:14,marginLeft:14,marginRight:14},children:(0,_.jsxs)(Qp,{padding:0,children:[\"canvas\"===t.openMenu?(0,_.jsx)(wf,{className:\"App-mobile-menu\",heading:\"canvasActions\",children:(0,_.jsx)(\"div\",{className:\"panelColumn\",children:(0,_.jsxs)(wd,{gap:4,children:[h?(0,_.jsxs)(_.Fragment,{children:[a(),i()]}):(0,_.jsxs)(_.Fragment,{children:[o.renderAction(\"clearCanvas\"),o.renderAction(\"loadScene\"),a(),i(),c&&(0,_.jsx)(Xp,{isCollaborating:p,collaboratorCount:t.collaborators.size,onClick:c}),(0,_.jsx)(Yp,{actionManager:o,appState:t,setAppState:l,showThemeBtn:m})]}),null==f?void 0:f(!0,t),t.collaborators.size>0&&(0,_.jsxs)(\"fieldset\",{children:[(0,_.jsx)(\"legend\",{children:L(\"labels.collaborators\")}),(0,_.jsx)(kf,{mobile:!0,children:Array.from(t.collaborators).filter((function(e){var t=R(e,2),n=(t[0],t[1]);return 0!==Object.keys(n).length})).map((function(e){var t=R(e,2),n=t[0];t[1];return(0,_.jsx)(s().Fragment,{children:o.renderAction(\"goToCollaborator\",{id:n})},n)}))})]})]})})}):\"shape\"===t.openMenu&&!h&&Ki(t,n)?(0,_.jsx)(wf,{className:\"App-mobile-menu\",heading:\"selectedShapeActions\",children:(0,_.jsx)(Kp,{appState:t,elements:n,renderAction:o.renderAction,elementType:t.elementType})}):null,(0,_.jsxs)(\"footer\",{className:\"App-toolbar\",children:[h?(0,_.jsx)(\"div\",{className:\"App-toolbar-content\",children:o.renderAction(\"toggleCanvasMenu\")}):(0,_.jsxs)(\"div\",{className:\"App-toolbar-content\",children:[o.renderAction(\"toggleCanvasMenu\"),o.renderAction(\"toggleEditMenu\"),o.renderAction(\"undo\"),o.renderAction(\"redo\"),o.renderAction(t.multiElement?\"finalize\":\"duplicateSelection\"),o.renderAction(\"deleteSelectedElements\")]}),t.scrolledOutside&&!t.openMenu&&(0,_.jsx)(\"button\",{className:\"scroll-back-to-content\",onClick:function(){l(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?jf(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):jf(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},ll(n,t)))},children:L(\"buttons.scrollBackToContent\")})]})]})})]})},Of=(n(8051),function(e){var t=(0,l.useRef)(null),n=R((0,l.useState)(null),2),r=n[0],o=n[1];return(0,l.useLayoutEffect)((function(){if(e.spreadsheet){var n,r=Ju(e.chartType,e.spreadsheet,0,0);o(r);var a=t.current;return(0,d.Z)(k().mark((function t(){return k().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Du(r,{exportBackground:!1,viewBackgroundColor:Ct.white});case 2:n=t.sent,a.appendChild(n),e.selected&&a.parentNode.focus();case 5:case\"end\":return t.stop()}}),t)})))(),function(){a.removeChild(n)}}}),[e.spreadsheet,e.chartType,e.selected]),(0,_.jsx)(\"button\",{className:\"ChartPreview\",onClick:function(){r&&e.onClick(e.chartType,r)},children:(0,_.jsx)(\"div\",{ref:t})})}),Mf=function(e){var t=e.setAppState,n=e.appState,r=e.onClose,o=e.onInsertChart,a=s().useCallback((function(){r&&r()}),[r]),i=function(e,n){o(n),Tc(\"magic\",\"chart\",e),t({currentChartType:e,pasteDialog:{shown:!1,data:null}})};return(0,_.jsx)(tf,{small:!0,onCloseRequest:a,title:L(\"labels.pasteCharts\"),className:\"PasteChartDialog\",autofocus:!1,children:(0,_.jsxs)(\"div\",{className:\"container\",children:[(0,_.jsx)(Of,{chartType:\"bar\",spreadsheet:n.pasteDialog.data,selected:\"bar\"===n.currentChartType,onClick:i}),(0,_.jsx)(Of,{chartType:\"line\",spreadsheet:n.pasteDialog.data,selected:\"line\"===n.currentChartType,onClick:i})]})})};n(3922);function If(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Pf=function(){return(0,_.jsxs)(\"div\",{className:\"HelpDialog--header\",children:[(0,_.jsx)(\"a\",{className:\"HelpDialog--btn\",href:\"https:\/\/github.com\/excalidraw\/excalidraw#documentation\",target:\"_blank\",rel:\"noopener noreferrer\",children:L(\"helpDialog.documentation\")}),(0,_.jsx)(\"a\",{className:\"HelpDialog--btn\",href:\"https:\/\/blog.excalidraw.com\",target:\"_blank\",rel:\"noopener noreferrer\",children:L(\"helpDialog.blog\")}),(0,_.jsx)(\"a\",{className:\"HelpDialog--btn\",href:\"https:\/\/github.com\/excalidraw\/excalidraw\/issues\",target:\"_blank\",rel:\"noopener noreferrer\",children:L(\"helpDialog.github\")})]})},Tf=function(e){return(0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"h3\",{children:e.title}),e.children]})},Af=function(e){return(0,_.jsx)(\"div\",{style:{display:\"flex\",flexDirection:\"row\",flexWrap:\"wrap\",justifyContent:\"space-between\"},children:e.children})},Lf=function(e){return(0,_.jsx)(\"div\",{style:{width:\"49%\"},children:e.children})},_f=function(e){return(0,_.jsxs)(\"div\",{className:\"HelpDialog--island\",children:[(0,_.jsx)(\"h3\",{className:\"HelpDialog--island-title\",children:e.caption}),e.children]})},Df=function(e){return(0,_.jsx)(\"div\",{className:\"HelpDialog--shortcut\",children:(0,_.jsxs)(\"div\",{style:{display:\"flex\",margin:\"0\",padding:\"4px 8px\",alignItems:\"center\"},children:[(0,_.jsx)(\"div\",{style:{lineHeight:1.4},children:e.label}),(0,_.jsx)(\"div\",{style:{display:\"flex\",flex:\"0 0 auto\",justifyContent:\"flex-end\",marginInlineStart:\"auto\",minWidth:\"30%\"},children:e.shortcuts.map((function(t,n){return(0,_.jsxs)(s().Fragment,{children:[(0,_.jsx)(zf,{children:t}),e.isOr&&n!==e.shortcuts.length-1&&L(\"helpDialog.or\")]},n)}))})]})})};Df.defaultProps={isOr:!0};var zf=function(e){return(0,_.jsx)(\"kbd\",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?If(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):If(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({className:\"HelpDialog--key\"},e))},Bf=function(e){var t=e.onClose,n=s().useCallback((function(){t&&t()}),[t]);return(0,_.jsx)(_.Fragment,{children:(0,_.jsxs)(tf,{onCloseRequest:n,title:L(\"helpDialog.title\"),className:\"HelpDialog\",children:[(0,_.jsx)(Pf,{}),(0,_.jsx)(Tf,{title:L(\"helpDialog.shortcuts\"),children:(0,_.jsxs)(Af,{children:[(0,_.jsxs)(Lf,{children:[(0,_.jsxs)(_f,{caption:L(\"helpDialog.shapes\"),children:[(0,_.jsx)(Df,{label:L(\"toolBar.selection\"),shortcuts:[\"V\",\"1\"]}),(0,_.jsx)(Df,{label:L(\"toolBar.rectangle\"),shortcuts:[\"R\",\"2\"]}),(0,_.jsx)(Df,{label:L(\"toolBar.diamond\"),shortcuts:[\"D\",\"3\"]}),(0,_.jsx)(Df,{label:L(\"toolBar.ellipse\"),shortcuts:[\"E\",\"4\"]}),(0,_.jsx)(Df,{label:L(\"toolBar.arrow\"),shortcuts:[\"A\",\"5\"]}),(0,_.jsx)(Df,{label:L(\"toolBar.line\"),shortcuts:[\"P\",\"6\"]}),(0,_.jsx)(Df,{label:L(\"toolBar.freedraw\"),shortcuts:[\"Shift+P\",\"7\"]}),(0,_.jsx)(Df,{label:L(\"toolBar.text\"),shortcuts:[\"T\",\"8\"]}),(0,_.jsx)(Df,{label:L(\"helpDialog.editSelectedShape\"),shortcuts:[Zn(\"Enter\"),L(\"helpDialog.doubleClick\")]}),(0,_.jsx)(Df,{label:L(\"helpDialog.textNewLine\"),shortcuts:[Zn(\"Enter\"),Zn(\"Shift+Enter\")]}),(0,_.jsx)(Df,{label:L(\"helpDialog.textFinish\"),shortcuts:[Zn(\"Esc\"),Zn(\"CtrlOrCmd+Enter\")]}),(0,_.jsx)(Df,{label:L(\"helpDialog.curvedArrow\"),shortcuts:[\"A\",L(\"helpDialog.click\"),L(\"helpDialog.click\"),L(\"helpDialog.click\")],isOr:!1}),(0,_.jsx)(Df,{label:L(\"helpDialog.curvedLine\"),shortcuts:[\"L\",L(\"helpDialog.click\"),L(\"helpDialog.click\"),L(\"helpDialog.click\")],isOr:!1}),(0,_.jsx)(Df,{label:L(\"toolBar.lock\"),shortcuts:[\"Q\"]}),(0,_.jsx)(Df,{label:L(\"helpDialog.preventBinding\"),shortcuts:[Zn(\"CtrlOrCmd\")]})]}),(0,_.jsxs)(_f,{caption:L(\"helpDialog.view\"),children:[(0,_.jsx)(Df,{label:L(\"buttons.zoomIn\"),shortcuts:[Zn(\"CtrlOrCmd++\")]}),(0,_.jsx)(Df,{label:L(\"buttons.zoomOut\"),shortcuts:[Zn(\"CtrlOrCmd+-\")]}),(0,_.jsx)(Df,{label:L(\"buttons.resetZoom\"),shortcuts:[Zn(\"CtrlOrCmd+0\")]}),(0,_.jsx)(Df,{label:L(\"helpDialog.zoomToFit\"),shortcuts:[\"Shift+1\"]}),(0,_.jsx)(Df,{label:L(\"helpDialog.zoomToSelection\"),shortcuts:[\"Shift+2\"]}),(0,_.jsx)(Df,{label:L(\"buttons.fullScreen\"),shortcuts:[\"F\"]}),(0,_.jsx)(Df,{label:L(\"buttons.zenMode\"),shortcuts:[Zn(\"Alt+Z\")]}),(0,_.jsx)(Df,{label:L(\"labels.showGrid\"),shortcuts:[Zn(\"CtrlOrCmd+'\")]}),(0,_.jsx)(Df,{label:L(\"labels.viewMode\"),shortcuts:[Zn(\"Alt+R\")]}),(0,_.jsx)(Df,{label:L(\"labels.toggleTheme\"),shortcuts:[Zn(\"Alt+Shift+D\")]}),(0,_.jsx)(Df,{label:L(\"stats.title\"),shortcuts:[Zn(\"Alt+\/\")]})]})]}),(0,_.jsx)(Lf,{children:(0,_.jsxs)(_f,{caption:L(\"helpDialog.editor\"),children:[(0,_.jsx)(Df,{label:L(\"labels.selectAll\"),shortcuts:[Zn(\"CtrlOrCmd+A\")]}),(0,_.jsx)(Df,{label:L(\"labels.multiSelect\"),shortcuts:[Zn(\"Shift+\".concat(L(\"helpDialog.click\")))]}),(0,_.jsx)(Df,{label:L(\"labels.moveCanvas\"),shortcuts:[Zn(\"Space+\".concat(L(\"helpDialog.drag\"))),Zn(\"Wheel+\".concat(L(\"helpDialog.drag\")))],isOr:!0}),(0,_.jsx)(Df,{label:L(\"labels.cut\"),shortcuts:[Zn(\"CtrlOrCmd+X\")]}),(0,_.jsx)(Df,{label:L(\"labels.copy\"),shortcuts:[Zn(\"CtrlOrCmd+C\")]}),(0,_.jsx)(Df,{label:L(\"labels.paste\"),shortcuts:[Zn(\"CtrlOrCmd+V\")]}),(0,_.jsx)(Df,{label:L(\"labels.copyAsPng\"),shortcuts:[Zn(\"Shift+Alt+C\")]}),(0,_.jsx)(Df,{label:L(\"labels.copyStyles\"),shortcuts:[Zn(\"CtrlOrCmd+Alt+C\")]}),(0,_.jsx)(Df,{label:L(\"labels.pasteStyles\"),shortcuts:[Zn(\"CtrlOrCmd+Alt+V\")]}),(0,_.jsx)(Df,{label:L(\"labels.delete\"),shortcuts:[Zn(\"Del\")]}),(0,_.jsx)(Df,{label:L(\"labels.sendToBack\"),shortcuts:[Zn(Pt?\"CtrlOrCmd+Alt+[\":\"CtrlOrCmd+Shift+[\")]}),(0,_.jsx)(Df,{label:L(\"labels.bringToFront\"),shortcuts:[Zn(Pt?\"CtrlOrCmd+Alt+]\":\"CtrlOrCmd+Shift+]\")]}),(0,_.jsx)(Df,{label:L(\"labels.sendBackward\"),shortcuts:[Zn(\"CtrlOrCmd+[\")]}),(0,_.jsx)(Df,{label:L(\"labels.bringForward\"),shortcuts:[Zn(\"CtrlOrCmd+]\")]}),(0,_.jsx)(Df,{label:L(\"labels.alignTop\"),shortcuts:[Zn(\"CtrlOrCmd+Shift+Up\")]}),(0,_.jsx)(Df,{label:L(\"labels.alignBottom\"),shortcuts:[Zn(\"CtrlOrCmd+Shift+Down\")]}),(0,_.jsx)(Df,{label:L(\"labels.alignLeft\"),shortcuts:[Zn(\"CtrlOrCmd+Shift+Left\")]}),(0,_.jsx)(Df,{label:L(\"labels.alignRight\"),shortcuts:[Zn(\"CtrlOrCmd+Shift+Right\")]}),(0,_.jsx)(Df,{label:L(\"labels.duplicateSelection\"),shortcuts:[Zn(\"CtrlOrCmd+D\"),Zn(\"Alt+\".concat(L(\"helpDialog.drag\")))]}),(0,_.jsx)(Df,{label:L(\"buttons.undo\"),shortcuts:[Zn(\"CtrlOrCmd+Z\")]}),(0,_.jsx)(Df,{label:L(\"buttons.redo\"),shortcuts:Tt?[Zn(\"CtrlOrCmd+Y\"),Zn(\"CtrlOrCmd+Shift+Z\")]:[Zn(\"CtrlOrCmd+Shift+Z\")]}),(0,_.jsx)(Df,{label:L(\"labels.group\"),shortcuts:[Zn(\"CtrlOrCmd+G\")]}),(0,_.jsx)(Df,{label:L(\"labels.ungroup\"),shortcuts:[Zn(\"CtrlOrCmd+Shift+G\")]}),(0,_.jsx)(Df,{label:L(\"labels.flipHorizontal\"),shortcuts:[Zn(\"Shift+H\")]}),(0,_.jsx)(Df,{label:L(\"labels.flipVertical\"),shortcuts:[Zn(\"Shift+V\")]}),(0,_.jsx)(Df,{label:L(\"labels.showStroke\"),shortcuts:[Zn(\"S\")]}),(0,_.jsx)(Df,{label:L(\"labels.showBackground\"),shortcuts:[Zn(\"G\")]})]})})]})})]})})},Hf=(n(5080),function(e){var t,n=e.children,r=e.color;return(0,_.jsx)(\"div\",{className:\"Card\",style:(t={},V(t,\"--card-color\",Ct[r][7]),V(t,\"--card-color-darker\",Ct[r][8]),V(t,\"--card-color-darkest\",Ct[r][9]),t),children:n})}),Nf=function(e){var t=e.elements,n=e.appState,r=e.actionManager,o=e.exportOpts,a=e.canvas,i=o.onExportToBackend;return(0,_.jsx)(\"div\",{className:\"ExportDialog ExportDialog--json\",children:(0,_.jsxs)(\"div\",{className:\"ExportDialog-cards\",children:[o.saveFileToDisk&&(0,_.jsxs)(Hf,{color:\"lime\",children:[(0,_.jsx)(\"div\",{className:\"Card-icon\",children:Al}),(0,_.jsx)(\"h2\",{children:L(\"exportDialog.disk_title\")}),(0,_.jsxs)(\"div\",{className:\"Card-details\",children:[L(\"exportDialog.disk_details\"),!qc&&r.renderAction(\"changeProjectName\")]}),(0,_.jsx)(vl,{className:\"Card-button\",type:\"button\",title:L(\"exportDialog.disk_button\"),\"aria-label\":L(\"exportDialog.disk_button\"),showAriaLabel:!0,onClick:function(){r.executeAction(Md)}})]}),i&&(0,_.jsxs)(Hf,{color:\"pink\",children:[(0,_.jsx)(\"div\",{className:\"Card-icon\",children:Sl}),(0,_.jsx)(\"h2\",{children:L(\"exportDialog.link_title\")}),(0,_.jsx)(\"div\",{className:\"Card-details\",children:L(\"exportDialog.link_details\")}),(0,_.jsx)(vl,{className:\"Card-button\",type:\"button\",title:L(\"exportDialog.link_button\"),\"aria-label\":L(\"exportDialog.link_button\"),showAriaLabel:!0,onClick:function(){return i(t,n,a)}})]}),o.renderCustomUI&&o.renderCustomUI(t,n,a)]})})},Rf=function(e){var t=e.elements,n=e.appState,r=e.actionManager,o=e.exportOpts,a=e.canvas,i=R((0,l.useState)(!1),2),c=i[0],u=i[1],d=s().useCallback((function(){u(!1)}),[]);return(0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(vl,{onClick:function(){u(!0)},\"data-testid\":\"json-export-button\",icon:Pl,type:\"button\",\"aria-label\":L(\"buttons.export\"),showAriaLabel:ah(),title:L(\"buttons.export\")}),c&&(0,_.jsx)(tf,{onCloseRequest:d,title:L(\"buttons.export\"),children:(0,_.jsx)(Nf,{elements:t,appState:n,actionManager:r,onCloseRequest:d,exportOpts:o,canvas:a})})]})},Ff=[\"suggestedBindings\",\"startBoundElement\"];function Vf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Gf=function(e){var t=e.libraryItems,n=e.onRemoveFromLibrary,r=e.onAddToLibrary,o=e.onInsertShape,a=e.pendingElements,i=e.theme,l=e.setAppState,s=e.setLibraryItems,c=e.libraryReturnUrl,u=e.focusContainer,d=e.library,p=e.id,f=ah(),h=t.length+(a.length>0?1:0),m=f?4:6,g=Math.max(1,Math.ceil(h\/m)),v=[],b=!1,y=c||window.location.origin+window.location.pathname;v.push((0,_.jsxs)(\"div\",{className:\"layer-ui__library-header\",children:[(0,_.jsx)(vl,{type:\"button\",title:L(\"buttons.load\"),\"aria-label\":L(\"buttons.load\"),icon:Cl,onClick:function(){Au(d).then((function(){l({isLibraryOpen:!1}),l({isLibraryOpen:!0})})).catch(er).catch((function(e){l({errorMessage:e.message})}))}},\"import\"),!!t.length&&(0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(vl,{type:\"button\",title:L(\"buttons.export\"),\"aria-label\":L(\"buttons.export\"),icon:Pl,onClick:function(){Tu(d).catch(er).catch((function(e){l({errorMessage:e.message})}))}},\"export\"),(0,_.jsx)(vl,{type:\"button\",title:L(\"buttons.resetLibrary\"),\"aria-label\":L(\"buttons.resetLibrary\"),icon:Ml,onClick:function(){window.confirm(L(\"alerts.resetLibrary\"))&&(d.resetLibrary(),s([]),u())}},\"reset\")]}),(0,_.jsx)(\"a\",{href:\"https:\/\/libraries.excalidraw.com?target=\".concat(window.name||\"_blank\",\"&referrer=\").concat(y,\"&useHash=true&token=\").concat(p,\"&theme=\").concat(i),target:\"_excalidraw_libraries\",children:L(\"labels.libraries\")})]},\"library-header\"));for(var x=0;x<g;x++){for(var w=m*x,k=[],S=0;S<m;S++){var E=a.length>0&&!b&&w+S>=t.length;b=b||E,k.push((0,_.jsx)(wd,{children:(0,_.jsx)(mf,{elements:t[w+S],pendingElements:E?a:void 0,onRemoveFromLibrary:n.bind(null,w+S),onClick:E?r.bind(null,a):o.bind(null,t[w+S])})},S))}v.push((0,_.jsx)(xd,{align:\"center\",gap:1,children:k},x))}return(0,_.jsx)(wd,{align:\"start\",gap:1,className:\"layer-ui__library-items\",children:v})},Uf=function(e){var t=e.onClickOutside,n=e.onInsertShape,r=e.pendingElements,o=e.onAddToLibrary,a=e.theme,i=e.setAppState,s=e.libraryReturnUrl,c=e.focusContainer,u=e.library,p=e.id,f=(0,l.useRef)(null);!function(e,t){(0,l.useEffect)((function(){var n=function(n){e.current&&(n.target instanceof Element&&(e.current.contains(n.target)||!document.body.contains(n.target))||t(n))};return document.addEventListener(\"pointerdown\",n,!1),function(){document.removeEventListener(\"pointerdown\",n)}}),[e,t])}(f,(function(e){e.target.closest(\".ToolIcon_type_button__library\")||t(e)}));var h=R((0,l.useState)([]),2),m=h[0],g=h[1],v=R((0,l.useState)(\"preloading\"),2),b=v[0],y=v[1],x=(0,l.useRef)(null);(0,l.useEffect)((function(){return Promise.race([new Promise((function(e){x.current=setTimeout((function(){e(\"loading\")}),100)})),u.loadLibrary().then((function(e){g(e),y(\"ready\")}))]).then((function(e){\"loading\"===e&&y(\"loading\")})),function(){clearTimeout(x.current)}}),[u]);var w=(0,l.useCallback)(function(){var e=(0,d.Z)(k().mark((function e(t){var n,r;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,u.loadLibrary();case 2:n=e.sent,r=n.filter((function(e,n){return n!==t})),u.saveLibrary(r).catch((function(e){g(n),i({errorMessage:L(\"alerts.errorRemovingFromLibrary\")})})),g(r);case 6:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),[u,i]),S=(0,l.useCallback)(function(){var e=(0,d.Z)(k().mark((function e(t){var n,r;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,u.loadLibrary();case 2:n=e.sent,r=[].concat(F(n),[t]),o(),u.saveLibrary(r).catch((function(e){g(n),i({errorMessage:L(\"alerts.errorAddingToLibrary\")})})),g(r);case 7:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),[o,u,i]);return\"preloading\"===b?null:(0,_.jsx)(Qp,{padding:1,ref:f,className:\"layer-ui__library\",children:\"loading\"===b?(0,_.jsx)(\"div\",{className:\"layer-ui__library-message\",children:L(\"labels.libraryLoadingMessage\")}):(0,_.jsx)(Gf,{libraryItems:m,onRemoveFromLibrary:w,onAddToLibrary:S,onInsertShape:n,pendingElements:r,setAppState:i,setLibraryItems:g,libraryReturnUrl:s,focusContainer:c,library:u,theme:a,id:p})})},Kf=function(e){var t,n=e.actionManager,r=e.appState,o=e.setAppState,a=e.canvas,i=e.elements,s=e.onCollabButtonClick,u=e.onLockToggle,p=e.onInsertElements,f=e.zenModeEnabled,h=e.showExitZenModeBtn,m=e.showThemeBtn,g=e.toggleZenMode,v=e.isCollaborating,b=e.renderTopRightUI,y=e.renderCustomFooter,x=e.viewModeEnabled,w=e.libraryReturnUrl,S=e.UIOptions,E=e.focusContainer,j=e.library,C=e.id,O=ah(),M=function(){return S.canvasActions.export?(0,_.jsx)(Rf,{elements:i,appState:r,actionManager:n,exportOpts:S.canvasActions.export,canvas:a}):null},I=function(){if(!S.canvasActions.saveAsImage)return null;var e=function(e){return function(){var t=(0,d.Z)(k().mark((function t(n){var a;return k().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fd(e,n,r,{exportBackground:r.exportBackground,name:r.name,viewBackgroundColor:r.viewBackgroundColor}).catch(er).catch((function(e){console.error(e),o({errorMessage:e.message})}));case 2:a=t.sent,r.exportEmbedScene&&a&&ku(a)&&o({fileHandle:a});case 4:case\"end\":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()};return(0,_.jsx)(cf,{elements:i,appState:r,actionManager:n,onExportToPng:e(\"png\"),onExportToSvg:e(\"svg\"),onExportToClipboard:e(\"clipboard\")})},P=function(){return(0,_.jsx)(\"div\",{style:{width:\".625em\"}})},T=(0,l.useCallback)((function(e){o({isLibraryOpen:!1})}),[o]),A=(0,l.useCallback)((function(){o({selectedElementIds:{},selectedGroupIds:{}})}),[o]),z=r.isLibraryOpen?(0,_.jsx)(Uf,{pendingElements:ol(i,r),onClickOutside:T,onInsertShape:p,onAddToLibrary:A,setAppState:o,libraryReturnUrl:w,focusContainer:E,library:j,theme:r.theme,id:C}):null,B=(0,_.jsxs)(_.Fragment,{children:[r.isLoading&&(0,_.jsx)(D,{}),r.errorMessage&&(0,_.jsx)(nf,{message:r.errorMessage,onClose:function(){return o({errorMessage:null})}}),r.showHelpDialog&&(0,_.jsx)(Bf,{onClose:function(){o({showHelpDialog:!1})}}),r.pasteDialog.shown&&(0,_.jsx)(Mf,{setAppState:o,appState:r,onInsertChart:p,onClose:function(){return o({pasteDialog:{shown:!1,data:null}})}})]});return O?(0,_.jsxs)(_.Fragment,{children:[B,(0,_.jsx)(Cf,{appState:r,elements:i,actionManager:n,libraryMenu:z,renderJSONExportDialog:M,renderImageExportDialog:I,setAppState:o,onCollabButtonClick:s,onLockToggle:u,canvas:a,isCollaborating:v,renderCustomFooter:y,viewModeEnabled:x,showThemeBtn:m})]}):(0,_.jsxs)(\"div\",{className:Ze(\"layer-ui__wrapper\",{\"disable-pointerEvents\":r.draggingElement||r.resizingElement||r.editingElement&&!Xe(r.editingElement)}),children:[B,(t=Ki(r,i),(0,_.jsx)(uf,{side:\"top\",children:(0,_.jsxs)(\"div\",{className:\"App-menu App-menu_top\",children:[(0,_.jsxs)(wd,{gap:4,className:Ze({\"disable-pointerEvents\":f}),children:[x?(0,_.jsx)(wf,{heading:\"canvasActions\",className:Ze(\"zen-mode-transition\",{\"transition-left\":f}),children:(0,_.jsx)(Qp,{padding:2,style:{zIndex:1},children:(0,_.jsx)(wd,{gap:4,children:(0,_.jsxs)(xd,{gap:1,justifyContent:\"space-between\",children:[M(),I()]})})})}):(0,_.jsx)(wf,{heading:\"canvasActions\",className:Ze(\"zen-mode-transition\",{\"transition-left\":f}),children:(0,_.jsx)(Qp,{padding:2,style:{zIndex:1},children:(0,_.jsxs)(wd,{gap:4,children:[(0,_.jsxs)(xd,{gap:1,justifyContent:\"space-between\",children:[n.renderAction(\"clearCanvas\"),(0,_.jsx)(P,{}),n.renderAction(\"loadScene\"),M(),I(),(0,_.jsx)(P,{}),s&&(0,_.jsx)(Xp,{isCollaborating:v,collaboratorCount:r.collaborators.size,onClick:s})]}),(0,_.jsx)(Yp,{actionManager:n,appState:r,setAppState:o,showThemeBtn:m}),r.fileHandle&&(0,_.jsx)(_.Fragment,{children:n.renderAction(\"saveToActiveFile\")})]})})}),t&&(0,_.jsx)(wf,{heading:\"selectedShapeActions\",className:Ze(\"zen-mode-transition\",{\"transition-left\":f}),children:(0,_.jsx)(Qp,{className:c.$C.SHAPE_ACTIONS_MENU,padding:2,style:{maxHeight:\"\".concat(r.height-(r.fileHandle?248:200),\"px\")},children:(0,_.jsx)(Kp,{appState:r,elements:i,renderAction:n.renderAction,elementType:r.elementType})})})]}),!x&&(0,_.jsx)(wf,{heading:\"shapes\",children:function(e){return(0,_.jsxs)(wd,{gap:4,align:\"start\",children:[(0,_.jsxs)(xd,{gap:1,children:[(0,_.jsx)(vf,{zenModeEnabled:f,checked:r.elementLocked,onChange:u,title:L(\"toolBar.lock\")}),(0,_.jsxs)(Qp,{padding:1,className:Ze({\"zen-mode\":f}),children:[(0,_.jsx)(df,{appState:r,elements:i}),e,(0,_.jsx)(xd,{gap:1,children:(0,_.jsx)(Wp,{canvas:a,elementType:r.elementType,setAppState:o})})]}),(0,_.jsx)(Ef,{appState:r,setAppState:o})]}),z]})}}),(0,_.jsxs)(\"div\",{className:Ze(\"layer-ui__wrapper__top-right zen-mode-transition\",{\"transition-right\":f}),children:[(0,_.jsx)(kf,{children:r.collaborators.size>0&&Array.from(r.collaborators).filter((function(e){var t=R(e,2),n=(t[0],t[1]);return 0!==Object.keys(n).length})).map((function(e){var t=R(e,2),r=t[0],o=t[1];return(0,_.jsx)(wc,{label:o.username||\"Unknown user\",children:n.renderAction(\"goToCollaborator\",{id:r})},r)}))}),null==b?void 0:b(O,r)]})]})})),(0,_.jsxs)(\"footer\",{role:\"contentinfo\",className:\"layer-ui__wrapper__footer App-menu App-menu_bottom\",children:[(0,_.jsx)(\"div\",{className:Ze(\"layer-ui__wrapper__footer-left zen-mode-transition\",{\"layer-ui__wrapper__footer-left--transition-left\":f}),children:(0,_.jsx)(wd,{gap:2,children:(0,_.jsxs)(wf,{heading:\"canvasActions\",children:[(0,_.jsx)(Qp,{padding:1,children:(0,_.jsx)(Zp,{renderAction:n.renderAction,zoom:r.zoom})}),!x&&(0,_.jsxs)(\"div\",{className:Ze(\"undo-redo-buttons zen-mode-transition\",{\"layer-ui__wrapper__footer-left--transition-bottom\":f}),children:[n.renderAction(\"undo\",{size:\"small\"}),n.renderAction(\"redo\",{size:\"small\"})]})]})})}),(0,_.jsx)(\"div\",{className:Ze(\"layer-ui__wrapper__footer-center zen-mode-transition\",{\"layer-ui__wrapper__footer-left--transition-bottom\":f}),children:null==y?void 0:y(!1,r)}),(0,_.jsx)(\"div\",{className:Ze(\"layer-ui__wrapper__footer-right zen-mode-transition\",{\"transition-right disable-pointerEvents\":f}),children:n.renderAction(\"toggleShortcuts\")}),(0,_.jsx)(\"button\",{className:Ze(\"disable-zen-mode\",{\"disable-zen-mode--visible\":h}),onClick:g,children:L(\"buttons.exitZenMode\")})]}),r.scrolledOutside&&(0,_.jsx)(\"button\",{className:\"scroll-back-to-content\",onClick:function(){o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Vf(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Vf(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},ll(i,r)))},children:L(\"buttons.scrollBackToContent\")})]})},Wf=function(e,t){var n=function(e){e.suggestedBindings,e.startBoundElement;return po(e,Ff)},r=n(e.appState),o=n(t.appState),a=Object.keys(r);return e.renderCustomFooter===t.renderCustomFooter&&e.langCode===t.langCode&&e.elements===t.elements&&a.every((function(e){return r[e]===o[e]}))},Zf=s().memo(Kf,Wf),Yf=(n(1528),function(e){var t,n=ah(),r=St(e.elements),o=al(e.elements,e.appState),a=St(o);return n&&e.appState.openMenu?null:(0,_.jsx)(\"div\",{className:\"Stats\",children:(0,_.jsxs)(Qp,{padding:2,children:[(0,_.jsx)(\"div\",{className:\"close\",onClick:e.onClose,children:Jl}),(0,_.jsx)(\"h3\",{children:L(\"stats.title\")}),(0,_.jsx)(\"table\",{children:(0,_.jsxs)(\"tbody\",{children:[(0,_.jsx)(\"tr\",{children:(0,_.jsx)(\"th\",{colSpan:2,children:L(\"stats.scene\")})}),(0,_.jsxs)(\"tr\",{children:[(0,_.jsx)(\"td\",{children:L(\"stats.elements\")}),(0,_.jsx)(\"td\",{children:e.elements.length})]}),(0,_.jsxs)(\"tr\",{children:[(0,_.jsx)(\"td\",{children:L(\"stats.width\")}),(0,_.jsx)(\"td\",{children:Math.round(r[2])-Math.round(r[0])})]}),(0,_.jsxs)(\"tr\",{children:[(0,_.jsx)(\"td\",{children:L(\"stats.height\")}),(0,_.jsx)(\"td\",{children:Math.round(r[3])-Math.round(r[1])})]}),1===o.length&&(0,_.jsx)(\"tr\",{children:(0,_.jsx)(\"th\",{colSpan:2,children:L(\"stats.element\")})}),o.length>1&&(0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(\"tr\",{children:(0,_.jsx)(\"th\",{colSpan:2,children:L(\"stats.selected\")})}),(0,_.jsxs)(\"tr\",{children:[(0,_.jsx)(\"td\",{children:L(\"stats.elements\")}),(0,_.jsx)(\"td\",{children:o.length})]})]}),o.length>0&&(0,_.jsxs)(_.Fragment,{children:[(0,_.jsxs)(\"tr\",{children:[(0,_.jsx)(\"td\",{children:\"x\"}),(0,_.jsx)(\"td\",{children:Math.round(a[0])})]}),(0,_.jsxs)(\"tr\",{children:[(0,_.jsx)(\"td\",{children:\"y\"}),(0,_.jsx)(\"td\",{children:Math.round(a[1])})]}),(0,_.jsxs)(\"tr\",{children:[(0,_.jsx)(\"td\",{children:L(\"stats.width\")}),(0,_.jsx)(\"td\",{children:Math.round(a[2]-a[0])})]}),(0,_.jsxs)(\"tr\",{children:[(0,_.jsx)(\"td\",{children:L(\"stats.height\")}),(0,_.jsx)(\"td\",{children:Math.round(a[3]-a[1])})]})]}),1===o.length&&(0,_.jsxs)(\"tr\",{children:[(0,_.jsx)(\"td\",{children:L(\"stats.angle\")}),(0,_.jsx)(\"td\",{children:\"\".concat(Math.round(180*o[0].angle\/Math.PI),\"\u00b0\")})]}),null===(t=e.renderCustomStats)||void 0===t?void 0:t.call(e,e.elements,e.appState)]})})]})})}),Xf=(n(9757),function(e){var t=e.message,n=e.clearToast,r=(0,l.useRef)(0),o=(0,l.useCallback)((function(){return r.current=window.setTimeout((function(){return n()}),c.Lg)}),[n]);return(0,l.useEffect)((function(){return o(),function(){return clearTimeout(r.current)}}),[o,t]),(0,_.jsx)(\"div\",{className:\"Toast\",onMouseEnter:function(){return clearTimeout(null==r?void 0:r.current)},onMouseLeave:o,children:(0,_.jsx)(\"p\",{className:\"Toast__message\",children:t})})});function qf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function $f(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?qf(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):qf(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Qf=As({name:\"viewMode\",perform:function(e,t){return Tc(\"view\",\"mode\",\"view\"),{appState:$f($f({},t),{},{viewModeEnabled:!this.checked(t)}),commitToHistory:!1}},checked:function(e){return e.viewModeEnabled},contextItemLabel:\"labels.viewMode\",keyTest:function(e){return!e[ln]&&e.altKey&&e.code===Jt}});function Jf(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return eh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return eh(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}function eh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function th(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function nh(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?th(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):th(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function rh(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=x(e);if(t){var o=x(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return y(this,n)}}var oh=s().createContext(!1),ah=function(){return(0,l.useContext)(oh)},ih=s().createContext({container:null,id:null}),lh=function(){return(0,l.useContext)(ih)},sh=!1,ch=0,uh=0,dh=0,ph=!1,fh=!1,hh=!1,mh={horizontal:null,vertical:null},gh=0,vh=!1,bh=null,yh={pointers:new Map,lastCenter:null,initialDistance:null,initialScale:null},xh=function(e){g(o,e);var t,n,r=rh(o);function o(e){var t;p(this,o),t=r.call(this,e),wh.call(b(t));var n,a,i,l,s=ir(),u=e.excalidrawRef,d=e.viewModeEnabled,f=void 0!==d&&d,h=e.zenModeEnabled,m=void 0!==h&&h,g=e.gridModeEnabled,v=void 0!==g&&g,y=e.theme,x=void 0===y?s.theme:y,w=e.name,k=void 0===w?s.name:w;if(t.state=nh(nh(nh({},s),{},{theme:x,isLoading:!0},t.getCanvasOffsets()),{},{viewModeEnabled:f,zenModeEnabled:m,gridSize:v?c.k:null,name:k,width:window.innerWidth,height:window.innerHeight}),t.id=Ye(),u){var S,E=\"current\"in u&&(null===(S=u.current)||void 0===S?void 0:S.readyPromise)||((i=new Promise((function(e,t){n=e,a=t}))).resolve=n,i.reject=a,i),j={ready:!0,readyPromise:E,updateScene:t.updateScene,resetScene:t.resetScene,getSceneElementsIncludingDeleted:t.getSceneElementsIncludingDeleted,history:{clear:t.resetHistory},scrollToContent:t.scrollToContent,getSceneElements:t.getSceneElements,getAppState:function(){return t.state},refresh:t.refresh,importLibrary:t.importLibraryFromUrl,setToastMessage:t.setToastMessage,id:t.id};\"function\"==typeof u?u(j):u.current=j,E.resolve(j)}return t.excalidrawContainerValue={container:t.excalidrawContainerRef.current,id:t.id},t.scene=new Jr,t.library=new Ap(b(t)),t.history=new Np,t.actionManager=new Tp(t.syncActionResult,(function(){return t.state}),(function(){return t.scene.getElementsIncludingDeleted()}),b(t)),t.actionManager.registerAll(Ts),t.actionManager.registerAction((l=t.history,{name:\"undo\",perform:function(e,t){return Pp(e,t,(function(){return l.undoOnce()}))},keyTest:function(e){return e[ln]&&e.key.toLowerCase()===Mn&&!e.shiftKey},PanelComponent:function(e){var t=e.updateData,n=e.data;return(0,_.jsx)(vl,{type:\"button\",icon:Bl,\"aria-label\":L(\"buttons.undo\"),onClick:t,size:(null==n?void 0:n.size)||\"medium\"})},commitToHistory:function(){return!1}})),t.actionManager.registerAction(function(e){return{name:\"redo\",perform:function(t,n){return Pp(t,n,(function(){return e.redoOnce()}))},keyTest:function(e){return e[ln]&&e.shiftKey&&e.key.toLowerCase()===Mn||Tt&&e.ctrlKey&&!e.shiftKey&&e.key===On},PanelComponent:function(e){var t=e.updateData,n=e.data;return(0,_.jsx)(vl,{type:\"button\",icon:Hl,\"aria-label\":L(\"buttons.redo\"),onClick:t,size:(null==n?void 0:n.size)||\"medium\"})},commitToHistory:function(){return!1}}}(t.history)),t}return h(o,[{key:\"renderCanvas\",value:function(){var e=window.devicePixelRatio,t=this.state,n=t.width,r=t.height,o=n*e,a=r*e;return t.viewModeEnabled?(0,_.jsx)(\"canvas\",{className:\"excalidraw__canvas\",style:{width:n,height:r,cursor:c.oc.GRAB},width:o,height:a,ref:this.handleCanvasRef,onContextMenu:this.handleCanvasContextMenu,onPointerMove:this.handleCanvasPointerMove,onPointerUp:this.removePointer,onPointerCancel:this.removePointer,onTouchMove:this.handleTouchMove,onPointerDown:this.handleCanvasPointerDown,children:L(\"labels.drawingCanvas\")}):(0,_.jsx)(\"canvas\",{className:\"excalidraw__canvas\",style:{width:n,height:r},width:o,height:a,ref:this.handleCanvasRef,onContextMenu:this.handleCanvasContextMenu,onPointerDown:this.handleCanvasPointerDown,onDoubleClick:this.handleCanvasDoubleClick,onPointerMove:this.handleCanvasPointerMove,onPointerUp:this.removePointer,onPointerCancel:this.removePointer,onTouchMove:this.handleTouchMove,children:L(\"labels.drawingCanvas\")})}},{key:\"render\",value:function(){var e,t,n=this,r=this.state,o=r.zenModeEnabled,a=r.viewModeEnabled,i=this.props,l=i.onCollabButtonClick,s=i.renderTopRightUI,c=i.renderFooter,u=i.renderCustomStats;return(0,_.jsx)(\"div\",{className:Ze(\"excalidraw excalidraw-container\",{\"excalidraw--view-mode\":a,\"excalidraw--mobile\":this.isMobile}),ref:this.excalidrawContainerRef,onDrop:this.handleAppOnDrop,tabIndex:0,onKeyDown:this.props.handleKeyboardGlobally?void 0:this.onKeyDown,children:(0,_.jsx)(ih.Provider,{value:this.excalidrawContainerValue,children:(0,_.jsxs)(oh.Provider,{value:this.isMobile,children:[(0,_.jsx)(Zf,{canvas:this.canvas,appState:this.state,setAppState:this.setAppState,actionManager:this.actionManager,elements:this.scene.getElements(),onCollabButtonClick:l,onLockToggle:this.toggleLock,onInsertElements:function(e){return n.addElementsFromPasteOrLibrary({elements:e,position:\"center\"})},zenModeEnabled:o,toggleZenMode:this.toggleZenMode,langCode:T().code,isCollaborating:this.props.isCollaborating||!1,renderTopRightUI:s,renderCustomFooter:c,viewModeEnabled:a,showExitZenModeBtn:void 0===(null===(e=this.props)||void 0===e?void 0:e.zenModeEnabled)&&o,showThemeBtn:void 0===(null===(t=this.props)||void 0===t?void 0:t.theme)&&this.props.UIOptions.canvasActions.theme,libraryReturnUrl:this.props.libraryReturnUrl,UIOptions:this.props.UIOptions,focusContainer:this.focusContainer,library:this.library,id:this.id}),(0,_.jsx)(\"div\",{className:\"excalidraw-textEditorContainer\"}),(0,_.jsx)(\"div\",{className:\"excalidraw-contextMenuContainer\"}),this.state.showStats&&(0,_.jsx)(Yf,{appState:this.state,setAppState:this.setAppState,elements:this.scene.getElements(),onClose:this.toggleStats,renderCustomStats:u}),null!==this.state.toastMessage&&(0,_.jsx)(Xf,{message:this.state.toastMessage,clearToast:this.clearToast}),(0,_.jsx)(\"main\",{children:this.renderCanvas()})]})})})}},{key:\"componentDidMount\",value:(n=(0,d.Z)(k().mark((function e(){var t,n,r,o,a=this;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:this.excalidrawContainerValue.container=this.excalidrawContainerRef.current,\"production\"!==c.Vi.TEST&&\"production\"!==c.Vi.DEVELOPMENT||(this.setState.bind(this),Object.defineProperties(window.h,{state:{configurable:!0,get:function(){return a.state}},setState:{configurable:!0,value:function(){return a.setState.apply(a,arguments)}},app:{configurable:!0,value:this},history:{configurable:!0,value:this.history}})),this.scene.addCallback(this.onSceneUpdated),this.addEventListeners(),this.excalidrawContainerRef.current&&this.focusContainer(),\"ResizeObserver\"in window&&null!==(t=this.excalidrawContainerRef)&&void 0!==t&&t.current?(this.resizeObserver=new ResizeObserver((function(){var e=a.excalidrawContainerRef.current.getBoundingClientRect(),t=e.width,n=e.height;a.isMobile=t<c.kV||n<c.Yx&&t<c.sS,a.updateDOMRect()})),null===(n=this.resizeObserver)||void 0===n||n.observe(this.excalidrawContainerRef.current)):window.matchMedia&&(r=window.matchMedia(\"(max-width: \".concat(c.kV,\"px), (max-height: \").concat(c.Yx,\"px) and (max-width: \").concat(c.sS,\"px)\")),o=function(){return a.isMobile=r.matches},r.addListener(o),this.detachIsMobileMqHandler=function(){return r.removeListener(o)}),new URLSearchParams(window.location.search.slice(1)).has(\"web-share-target\")?this.restoreFileFromShare():this.updateDOMRect(this.initializeScene);case 8:case\"end\":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)})},{key:\"componentWillUnmount\",value:function(){var e;null===(e=this.resizeObserver)||void 0===e||e.disconnect(),this.unmounted=!0,this.removeEventListeners(),this.scene.destroy(),clearTimeout(gh),gh=0}},{key:\"removeEventListeners\",value:function(){var e,t;document.removeEventListener(c.Ks.POINTER_UP,this.removePointer),document.removeEventListener(c.Ks.COPY,this.onCopy),document.removeEventListener(c.Ks.PASTE,this.pasteFromClipboard),document.removeEventListener(c.Ks.CUT,this.onCut),null===(e=this.nearestScrollableContainer)||void 0===e||e.removeEventListener(c.Ks.SCROLL,this.onScroll),document.removeEventListener(c.Ks.KEYDOWN,this.onKeyDown,!1),document.removeEventListener(c.Ks.MOUSE_MOVE,this.updateCurrentCursorPosition,!1),document.removeEventListener(c.Ks.KEYUP,this.onKeyUp),window.removeEventListener(c.Ks.RESIZE,this.onResize,!1),window.removeEventListener(c.Ks.UNLOAD,this.onUnload,!1),window.removeEventListener(c.Ks.BLUR,this.onBlur,!1),window.removeEventListener(c.Ks.DRAG_OVER,this.disableEvent,!1),window.removeEventListener(c.Ks.DROP,this.disableEvent,!1),document.removeEventListener(c.Ks.GESTURE_START,this.onGestureStart,!1),document.removeEventListener(c.Ks.GESTURE_CHANGE,this.onGestureChange,!1),document.removeEventListener(c.Ks.GESTURE_END,this.onGestureEnd,!1),null===(t=this.detachIsMobileMqHandler)||void 0===t||t.call(this)}},{key:\"addEventListeners\",value:function(){var e,t;this.removeEventListeners(),document.addEventListener(c.Ks.POINTER_UP,this.removePointer),document.addEventListener(c.Ks.COPY,this.onCopy),this.props.handleKeyboardGlobally&&document.addEventListener(c.Ks.KEYDOWN,this.onKeyDown,!1),document.addEventListener(c.Ks.KEYUP,this.onKeyUp,{passive:!0}),document.addEventListener(c.Ks.MOUSE_MOVE,this.updateCurrentCursorPosition),null===(e=document.fonts)||void 0===e||null===(t=e.addEventListener)||void 0===t||t.call(e,\"loadingdone\",this.onFontLoaded),document.addEventListener(c.Ks.GESTURE_START,this.onGestureStart,!1),document.addEventListener(c.Ks.GESTURE_CHANGE,this.onGestureChange,!1),document.addEventListener(c.Ks.GESTURE_END,this.onGestureEnd,!1),this.state.viewModeEnabled||(document.addEventListener(c.Ks.PASTE,this.pasteFromClipboard),document.addEventListener(c.Ks.CUT,this.onCut),this.props.detectScroll&&(this.nearestScrollableContainer=function(e){for(var t=e.parentElement;t;){if(t===document.body)return document;var n=window.getComputedStyle(t).overflowY;if(t.scrollHeight>t.clientHeight&&(\"auto\"===n||\"scroll\"===n))return t;t=t.parentElement}return document}(this.excalidrawContainerRef.current),this.nearestScrollableContainer.addEventListener(c.Ks.SCROLL,this.onScroll)),window.addEventListener(c.Ks.RESIZE,this.onResize,!1),window.addEventListener(c.Ks.UNLOAD,this.onUnload,!1),window.addEventListener(c.Ks.BLUR,this.onBlur,!1),window.addEventListener(c.Ks.DRAG_OVER,this.disableEvent,!1),window.addEventListener(c.Ks.DROP,this.disableEvent,!1))}},{key:\"componentDidUpdate\",value:function(e,t){var n,r,o=this;e.langCode!==this.props.langCode&&this.updateLanguage(),e.viewModeEnabled!==this.props.viewModeEnabled&&this.setState({viewModeEnabled:!!this.props.viewModeEnabled}),t.viewModeEnabled!==this.state.viewModeEnabled&&(this.addEventListeners(),this.deselectElements()),e.zenModeEnabled!==this.props.zenModeEnabled&&this.setState({zenModeEnabled:!!this.props.zenModeEnabled}),e.theme!==this.props.theme&&this.props.theme&&this.setState({theme:this.props.theme}),e.gridModeEnabled!==this.props.gridModeEnabled&&this.setState({gridSize:this.props.gridModeEnabled?c.k:null}),this.props.name&&e.name!==this.props.name&&this.setState({name:this.props.name}),null===(n=this.excalidrawContainerRef.current)||void 0===n||n.classList.toggle(\"theme--dark\",\"dark\"===this.state.theme),this.state.editingLinearElement&&!this.state.selectedElementIds[this.state.editingLinearElement.elementId]&&setTimeout((function(){o.actionManager.executeAction(Pc)}));var a=t.multiElement;t.elementType!==this.state.elementType&&null!=a&&ri(this.state)&&et(a)&&si(a,this.state,this.scene,Jn(ti.getPointAtIndexGlobalCoordinates(a,-1)));var i={},l={},s={},u={},d={};this.state.collaborators.forEach((function(e,t){if(e.selectedElementIds)for(var n=0,r=Object.keys(e.selectedElementIds);n<r.length;n++){var a=r[n];a in s||(s[a]=[]),s[a].push(t)}e.pointer&&(e.username&&(u[t]=e.username),e.userState&&(d[t]=e.userState),l[t]=Xn({sceneX:e.pointer.x,sceneY:e.pointer.y},o.state),i[t]=e.button)}));var p=this.scene.getElements(),f=Vc(p.filter((function(e){return!o.state.editingElement||\"text\"!==o.state.editingElement.type||e.id!==o.state.editingElement.id})),this.state,this.state.selectionElement,window.devicePixelRatio,this.rc,this.canvas,{scrollX:this.state.scrollX,scrollY:this.state.scrollY,viewBackgroundColor:this.state.viewBackgroundColor,zoom:this.state.zoom,remotePointerViewportCoords:l,remotePointerButton:i,remoteSelectedElementIds:s,remotePointerUsernames:u,remotePointerUserStates:d,shouldCacheIgnoreZoom:this.state.shouldCacheIgnoreZoom},{renderOptimizations:!0,renderScrollbars:!this.isMobile}),h=f.atLeastOneVisibleElement,m=f.scrollBars;m&&(mh=m);var g,v,b=\"text\"!==(null===(r=this.state.editingElement)||void 0===r?void 0:r.type)&&(!h&&p.length>0);(this.state.scrolledOutside!==b&&this.setState({scrolledOutside:b}),this.history.record(this.state,this.scene.getElementsIncludingDeleted()),this.state.isLoading)||(null===(g=(v=this.props).onChange)||void 0===g||g.call(v,this.scene.getElementsIncludingDeleted(),this.state))}},{key:\"addTextFromPaste\",value:function(e){var t=Yn({clientX:uh,clientY:dh},this.state),n=t.x,r=t.y,o=To({x:n,y:r,strokeColor:this.state.currentItemStrokeColor,backgroundColor:this.state.currentItemBackgroundColor,fillStyle:this.state.currentItemFillStyle,strokeWidth:this.state.currentItemStrokeWidth,strokeStyle:this.state.currentItemStrokeStyle,roughness:this.state.currentItemRoughness,opacity:this.state.currentItemOpacity,strokeSharpness:this.state.currentItemStrokeSharpness,text:e,fontSize:this.state.currentItemFontSize,fontFamily:this.state.currentItemFontFamily,textAlign:this.state.currentItemTextAlign,verticalAlign:c.hs});this.scene.replaceAllElements([].concat(F(this.scene.getElementsIncludingDeleted()),[o])),this.setState({selectedElementIds:V({},o.id,!0)}),this.history.resumeRecording()}},{key:\"selectShapeTool\",value:function(e){var t;ph||Kn(this.canvas,e),(t=document.activeElement)instanceof HTMLElement&&t.className.includes(\"ToolIcon\")&&this.focusContainer(),Je(e)||this.setState({suggestedBindings:[]}),\"selection\"!==e?this.setState({elementType:e,selectedElementIds:{},selectedGroupIds:{},editingGroupId:null}):this.setState({elementType:e})}},{key:\"handleTextWysiwyg\",value:function(e,t){var n=this,r=t.isExistingElement,o=void 0!==r&&r,a=function(t){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];n.scene.replaceAllElements(F(n.scene.getElementsIncludingDeleted().map((function(n){return n.id===e.id&&Xe(n)?Ao(n,{text:t,isDeleted:r}):n}))))};!function(e){var t=e.id,n=e.appState,r=e.onChange,o=e.onSubmit,a=e.getViewportCoords,i=e.element,l=e.canvas,s=e.excalidrawContainer,u=function(){var e,r=null===(e=Jr.getScene(i))||void 0===e?void 0:e.getElement(t);if(r&&Xe(r)){var o=R(a(r.x,r.y),2),l=o[0],c=o[1],u=r.textAlign,p=r.angle;d.value=r.text;var f=r.text.replace(\/\\r\\n?\/g,\"\\n\").split(\"\\n\"),h=r.height\/f.length,m=(n.offsetLeft+n.width-l-8)\/n.zoom.value-Number(getComputedStyle(null==s?void 0:s.parentNode).marginRight.slice(0,-2));Object.assign(d.style,{font:Nn(r),lineHeight:\"\".concat(h,\"px\"),width:\"\".concat(r.width,\"px\"),height:\"\".concat(r.height,\"px\"),left:\"\".concat(l,\"px\"),top:\"\".concat(c,\"px\"),transform:Gi(r.width,r.height,p,n,m),textAlign:u,color:r.strokeColor,opacity:r.opacity\/100,filter:\"var(--theme-filter)\",maxWidth:\"\".concat(m,\"px\")})}},d=document.createElement(\"textarea\");d.dir=\"auto\",d.tabIndex=0,d.dataset.type=\"wysiwyg\",d.wrap=\"off\",Object.assign(d.style,{position:\"absolute\",display:\"inline-block\",minHeight:\"1em\",backfaceVisibility:\"hidden\",margin:0,padding:0,border:0,outline:0,resize:\"none\",background:\"transparent\",overflow:\"hidden\",whiteSpace:\"pre\",zIndex:\"var(--zIndex-wysiwyg)\"}),u(),r&&(d.oninput=function(){r(Vi(d.value))}),d.onkeydown=function(e){if(e.stopPropagation(),e.key===un)e.preventDefault(),b=!0,y();else if(e.key===cn&&e[ln]){if(e.preventDefault(),e.isComposing||229===e.keyCode)return;b=!0,y()}else(e.key===fn||e[ln]&&(e.code===Ht||e.code===Bt))&&(e.preventDefault(),e.shiftKey||e.code===Ht?m():h(),d.dispatchEvent(new Event(\"input\")))};var p=\" \".repeat(4),f=new RegExp(\"^ {1,\".concat(4,\"}\")),h=function(){var e=d.selectionStart,t=d.selectionEnd,n=g(),r=d.value;n.forEach((function(e){var t=r.slice(0,e),n=r.slice(e);r=\"\".concat(t).concat(p).concat(n)})),d.value=r,d.selectionStart=e+4,d.selectionEnd=t+4*n.length},m=function(){var e=d.selectionStart,t=d.selectionEnd,n=g(),r=[],o=d.value;n.forEach((function(e){var t=o.slice(e,e+4).match(f);if(t){var n=o.slice(0,e),a=o.slice(e+t[0].length);o=\"\".concat(n).concat(a),r.push(e)}})),d.value=o,r.length&&(e>r[r.length-1]?d.selectionStart=Math.max(e-4,r[r.length-1]):d.selectionStart=e,d.selectionEnd=Math.max(d.selectionStart,t-4*r.length))},g=function(){var e=d.selectionStart,t=d.selectionEnd,n=d.value,r=n.slice(0,e).match(\/[^\\n]*$\/)[0].length;return e-=r,n.slice(e,t).split(\"\\n\").reduce((function(t,n,r,o){return t.concat(r?t[r-1]+o[r-1].length+1:e)}),[]).reverse()},v=function(e){e.preventDefault(),e.stopPropagation()},b=!1,y=function(){x(),o({text:Vi(d.value),viaKeyboard:b})},x=function(){E||(E=!0,d.onblur=null,d.oninput=null,d.onkeydown=null,j&&j.disconnect(),window.removeEventListener(\"resize\",u),window.removeEventListener(\"wheel\",v,!0),window.removeEventListener(\"pointerdown\",k),window.removeEventListener(\"pointerup\",w),window.removeEventListener(\"blur\",y),S(),d.remove())},w=function e(){window.removeEventListener(\"pointerup\",e),setTimeout((function(){d.onblur=y,d.focus()}))},k=function(e){(e.target instanceof HTMLElement||e.target instanceof SVGElement)&&e.target.closest(\".\".concat(c.$C.SHAPE_ACTIONS_MENU))&&!Bn(e.target)&&(d.onblur=null,window.addEventListener(\"pointerup\",w),window.addEventListener(\"blur\",y))},S=Jr.getScene(i).addCallback((function(){u(),d.focus()})),E=!1;d.select(),w();var j=null;l&&\"ResizeObserver\"in window?(j=new window.ResizeObserver((function(){u()}))).observe(l):window.addEventListener(\"resize\",u),window.addEventListener(\"pointerdown\",k),window.addEventListener(\"wheel\",v,{passive:!1,capture:!0}),null==s||s.querySelector(\".excalidraw-textEditorContainer\").appendChild(d)}({id:e.id,appState:this.state,canvas:this.canvas,getViewportCoords:function(e,t){var r=Xn({sceneX:e,sceneY:t},n.state),o=r.x,a=r.y;return[o-n.state.offsetLeft,a-n.state.offsetTop]},onChange:nr((function(t){a(t),$i(e)&&gi(e)})),onSubmit:nr((function(t){var r=t.text,i=t.viaKeyboard,l=!r.trim();a(r,l),!l&&i&&n.setState((function(t){return{selectedElementIds:nh(nh({},t.selectedElementIds),{},V({},e.id,!0))}})),l&&Mi(n.scene.getElements(),[e]),l&&!o||n.history.resumeRecording(),n.setState({draggingElement:null,editingElement:null}),n.state.elementLocked&&Kn(n.canvas,n.state.elementType),n.focusContainer()})),element:e,excalidrawContainer:this.excalidrawContainerRef.current}),this.deselectElements(),a(e.text)}},{key:\"deselectElements\",value:function(){this.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})}},{key:\"getTextElementAtPosition\",value:function(e,t){var n=this.getElementAtPosition(e,t);return n&&Xe(n)&&!n.isDeleted?n:null}},{key:\"getElementAtPosition\",value:function(e,t,n){var r=this.getElementsAtPosition(e,t);if(r.length>1){if(null!=n&&n.preferSelected)for(var o=r.length-1;o>-1;o--)if(this.state.selectedElementIds[r[o].id])return r[o];var a=r[r.length-1];return ma(a,this.state,e,t)?r[r.length-2]:a}return 1===r.length?r[0]:null}},{key:\"getElementsAtPosition\",value:function(e,t){var n,r,o=this;return n=this.scene.getElements(),r=function(n){return function(e,t,n,r){var o=10\/t.zoom.value,a=[n,r];return va(t,e)?ba(e,a,o):ga(e,t,a)}(n,o.state,e,t)},n.filter((function(e){return!e.isDeleted&&r(e)}))}},{key:\"maybeCleanupAfterMissingPointerUp\",value:function(e){null!==bh&&bh(e)}},{key:\"updateGestureOnPointerDown\",value:function(e){yh.pointers.set(e.pointerId,{x:e.clientX,y:e.clientY}),2===yh.pointers.size&&(yh.lastCenter=Lp(yh.pointers),yh.initialScale=this.state.zoom.value,yh.initialDistance=_p(Array.from(yh.pointers.values())))}},{key:\"initialPointerDownState\",value:function(e){var t=Yn(e,this.state),n=ol(this.scene.getElements(),this.state),r=R(St(n),4),o=r[0],a=r[1],i=r[2],l=r[3];return{origin:t,withCmdOrCtrl:e[ln],originInGrid:Jn(pt(t.x,t.y,this.state.gridSize)),scrollbars:nl(mh,e.clientX-this.state.offsetLeft,e.clientY-this.state.offsetTop),lastCoords:nh({},t),originalElements:this.scene.getElements().reduce((function(e,t){return e.set(t.id,_o(t)),e}),new Map),resize:{handleType:!1,isResizing:!1,offset:{x:0,y:0},arrowDirection:\"origin\",center:{x:(i+o)\/2,y:(l+a)\/2}},hit:{element:null,allHitElements:[],wasAddedToSelection:!1,hasBeenDuplicated:!1,hasHitCommonBoundingBoxOfSelectedElements:this.isHittingCommonBoundingBoxOfSelectedElements(t,n)},drag:{hasOccurred:!1,offset:null},eventListeners:{onMove:null,onUp:null,onKeyUp:null,onKeyDown:null}}}},{key:\"handleDraggingScrollBar\",value:function(e,t){var n=this;if(!t.scrollbars.isOverEither||this.state.multiElement)return!1;hh=!0,t.lastCoords.x=e.clientX,t.lastCoords.y=e.clientY;var r=nr((function(e){e.target instanceof HTMLElement&&n.handlePointerMoveOverScrollbars(e,t)})),o=nr((function(){hh=!1,Kn(n.canvas,n.state.elementType),bh=null,n.setState({cursorButton:\"up\"}),n.savePointer(e.clientX,e.clientY,\"up\"),window.removeEventListener(c.Ks.POINTER_MOVE,r),window.removeEventListener(c.Ks.POINTER_UP,o)}));return bh=o,window.addEventListener(c.Ks.POINTER_MOVE,r),window.addEventListener(c.Ks.POINTER_UP,o),!0}},{key:\"isASelectedElement\",value:function(e){return null!=e&&this.state.selectedElementIds[e.id]}},{key:\"isHittingCommonBoundingBoxOfSelectedElements\",value:function(e,t){if(t.length<2)return!1;var n=10\/this.state.zoom.value,r=R(St(t),4),o=r[0],a=r[1],i=r[2],l=r[3];return e.x>o-n&&e.x<i+n&&e.y>a-n&&e.y<l+n}},{key:\"onKeyDownFromPointerDownHandler\",value:function(e){var t=this;return nr((function(n){t.maybeHandleResize(e,n)||t.maybeDragNewGenericElement(e,n)}))}},{key:\"onKeyUpFromPointerDownHandler\",value:function(e){var t=this;return nr((function(n){n.key===an&&n.preventDefault(),t.maybeHandleResize(e,n)||t.maybeDragNewGenericElement(e,n)}))}},{key:\"onPointerMoveFromPointerDownHandler\",value:function(e){var t=this;return nr((function(n){if(null===e.drag.offset&&(e.drag.offset=Jn(function(e,t,n){var r=R(St(e),2);return[t-r[0],n-r[1]]}(ol(t.scene.getElements(),t.state),e.origin.x,e.origin.y))),n.target instanceof HTMLElement&&!t.handlePointerMoveOverScrollbars(n,e)){var r=Yn(n,t.state),o=R(pt(r.x,r.y,t.state.gridSize),2),a=o[0],i=o[1];if(e.drag.hasOccurred||\"arrow\"!==t.state.elementType&&\"line\"!==t.state.elementType||!(it(r.x,r.y,e.origin.x,e.origin.y)<c.f)){if(e.resize.isResizing&&(e.lastCoords.x=r.x,e.lastCoords.y=r.y,t.maybeHandleResize(e,n)))return!0;if(t.state.editingLinearElement)if(ti.handlePointDragging(t.state,(function(e){return t.setState(e)}),r.x,r.y,(function(e,n){t.maybeSuggestBindingForLinearElementAtCursor(e,n,r)})))return e.lastCoords.x=r.x,void(e.lastCoords.y=r.y);if(e.hit.allHitElements.some((function(e){return t.isASelectedElement(e)}))||e.hit.hasHitCommonBoundingBoxOfSelectedElements){e.drag.hasOccurred=!0;var l=ol(t.scene.getElements(),t.state);if(l.length>0&&!e.withCmdOrCtrl){var s=R(pt(r.x-e.drag.offset.x,r.y-e.drag.offset.y,t.state.gridSize),2),u=s[0],d=s[1],p=[Math.abs(r.x-e.origin.x),Math.abs(r.y-e.origin.y)],f=p[0],h=p[1],m=n.shiftKey;if(function(e,t,n,r,o){var a=arguments.length>5&&void 0!==arguments[5]&&arguments[5],i=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,l=arguments.length>7&&void 0!==arguments[7]?arguments[7]:0,s=R(St(t),2),c=s[0],u=s[1],d={x:n-c,y:r-u};t.forEach((function(n){var r,o;if(a){var s=a&&i<l,c=a&&i>l,u=e.originalElements.get(n.id);r=s&&u?u.x:n.x+d.x,o=c&&u?u.y:n.y+d.y}else r=n.x+d.x,o=n.y+d.y;ao(n,{x:r,y:o}),gi(n,{simultaneouslyUpdated:t})}))}(e,l,u,d,t.scene,m,f,h),t.maybeSuggestBindingForAll(l),n.altKey&&!e.hit.hasBeenDuplicated){e.hit.hasBeenDuplicated=!0;var g,v=[],b=[],y=new Map,x=new Map,w=e.hit.element,k=Jf(t.scene.getElementsIncludingDeleted());try{for(k.s();!(g=k.n()).done;){var S=g.value;if(t.state.selectedElementIds[S.id]||S.id===(null==w?void 0:w.id)&&e.hit.wasAddedToSelection){var E=Do(t.state.editingGroupId,y,S),j=R(pt(e.origin.x-e.drag.offset.x,e.origin.y-e.drag.offset.y,t.state.gridSize),2),C=j[0],O=j[1];ao(E,{x:E.x+(C-u),y:E.y+(O-d)}),v.push(E),b.push(S),x.set(S.id,E.id)}else v.push(S)}}catch(e){k.e(e)}finally{k.f()}var M=[].concat(v,b);Ci(M,b,x,\"duplicatesServeAsOld\"),t.scene.replaceAllElements(M)}return}}var I=t.state.draggingElement;if(I){if(\"freedraw\"===I.type){var P=I.points,T=r.x-I.x,A=r.y-I.y,L=I.simulatePressure?I.pressures:[].concat(F(I.pressures),[n.pressure]);ao(I,{points:[].concat(F(P),[[T,A]]),pressures:L})}else if(Qe(I)){e.drag.hasOccurred=!0;var _=I.points,D=a-I.x,z=i-I.y;if(An(n)&&2===_.length){var B=co(t.state.elementType,D,z);D=B.width,z=B.height}1===_.length?ao(I,{points:[].concat(F(_),[[D,z]])}):_.length>1&&ao(I,{points:[].concat(F(_.slice(0,-1)),[[D,z]])}),et(I)&&t.maybeSuggestBindingForLinearElementAtCursor(I,\"end\",r,t.state.startBoundElement)}else e.lastCoords.x=r.x,e.lastCoords.y=r.y,t.maybeDragNewGenericElement(e,n);if(\"selection\"===t.state.elementType){var H=t.scene.getElements();!n.shiftKey&&rl(H,t.state)&&(e.withCmdOrCtrl&&e.hit.element?t.setState((function(n){return wo(nh(nh({},n),{},{selectedElementIds:V({},e.hit.element.id,!0)}),t.scene.getElements())})):t.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null}));var N=function(e,t){var n=R(gt(t),4),r=n[0],o=n[1],a=n[2],i=n[3];return e.filter((function(e){var t=R(kt(e),4),n=t[0],l=t[1],s=t[2],c=t[3];return\"selection\"!==e.type&&r<=n&&o<=l&&a>=s&&i>=c}))}(H,I);t.setState((function(n){return wo(nh(nh({},n),{},{selectedElementIds:nh(nh(nh({},n.selectedElementIds),N.reduce((function(e,t){return e[t.id]=!0,e}),{})),e.hit.element?V({},e.hit.element.id,!N.length):null)}),t.scene.getElements())}))}}}}}))}},{key:\"handlePointerMoveOverScrollbars\",value:function(e,t){if(t.scrollbars.isOverHorizontal){var n=e.clientX,r=n-t.lastCoords.x;return this.setState({scrollX:this.state.scrollX-r\/this.state.zoom.value}),t.lastCoords.x=n,!0}if(t.scrollbars.isOverVertical){var o=e.clientY,a=o-t.lastCoords.y;return this.setState({scrollY:this.state.scrollY-a\/this.state.zoom.value}),t.lastCoords.y=o,!0}return!1}},{key:\"onPointerUpFromPointerDownHandler\",value:function(e){var t=this;return nr((function(n){var r=t.state,o=r.draggingElement,a=r.resizingElement,i=r.multiElement,l=r.elementType,s=r.elementLocked,u=r.isResizing,d=r.isRotating;if(t.setState({isResizing:!1,isRotating:!1,resizingElement:null,selectionElement:null,cursorButton:\"up\",editingElement:i||Xe(t.state.editingElement)?t.state.editingElement:null}),t.savePointer(n.clientX,n.clientY,\"up\"),t.state.editingLinearElement){var p=ti.handlePointerUp(n,t.state.editingLinearElement,t.state);p!==t.state.editingLinearElement&&t.setState({editingLinearElement:p,suggestedBindings:[]})}if(bh=null,window.removeEventListener(c.Ks.POINTER_MOVE,e.eventListeners.onMove),window.removeEventListener(c.Ks.POINTER_UP,e.eventListeners.onUp),window.removeEventListener(c.Ks.KEYDOWN,e.eventListeners.onKeyDown),window.removeEventListener(c.Ks.KEYUP,e.eventListeners.onKeyUp),\"freedraw\"===(null==o?void 0:o.type)){var f=Yn(n,t.state),h=o.points,m=f.x-o.x,g=f.y-o.y;m===h[0][0]&&g===h[0][1]&&(g+=1e-4,m+=1e-4);var v=o.simulatePressure?[]:[].concat(F(o.pressures),[n.pressure]);return ao(o,{points:[].concat(F(h),[[m,g]]),pressures:v}),void t.actionManager.executeAction(Pc)}if(Qe(o)){o.points.length>1&&t.history.resumeRecording();var b=Yn(n,t.state);e.drag.hasOccurred||!o||i?e.drag.hasOccurred&&!i&&(ri(t.state)&&et(o)&&si(o,t.state,t.scene,b),t.setState({suggestedBindings:[],startBoundElement:null}),s?t.setState((function(e){return{draggingElement:null,selectedElementIds:nh(nh({},e.selectedElementIds),{},V({},t.state.draggingElement.id,!0))}})):(Gn(t.canvas),t.setState((function(e){return{draggingElement:null,elementType:\"selection\",selectedElementIds:nh(nh({},e.selectedElementIds),{},V({},t.state.draggingElement.id,!0))}})))):(ao(o,{points:[].concat(F(o.points),[[b.x-o.x,b.y-o.y]])}),t.setState({multiElement:o,editingElement:t.state.draggingElement}))}else{if(\"selection\"!==l&&o&&so(o))return t.scene.replaceAllElements(t.scene.getElementsIncludingDeleted().slice(0,-1)),void t.setState({draggingElement:null});o&&ao(o,uo(o)),a&&t.history.resumeRecording(),a&&so(a)&&t.scene.replaceAllElements(t.scene.getElementsIncludingDeleted().filter((function(e){return e.id!==a.id})));var y=e.hit.element;if(y&&!e.drag.hasOccurred&&!e.hit.wasAddedToSelection)if(n.shiftKey)if(t.state.selectedElementIds[y.id])if(bo(t.state,y)){var x=y.groupIds.flatMap((function(e){return So(t.scene.getElements(),e)})).map((function(e){return V({},e.id,!1)})).reduce((function(e,t){return nh(nh({},e),t)}),{});t.setState((function(e){return{selectedGroupIds:nh(nh({},e.selectedElementIds),y.groupIds.map((function(e){return V({},e,!1)})).reduce((function(e,t){return nh(nh({},e),t)}),{})),selectedElementIds:nh(nh({},e.selectedElementIds),x)}}))}else t.setState((function(e){return wo(nh(nh({},e),{},{selectedElementIds:nh(nh({},e.selectedElementIds),{},V({},y.id,!1))}),t.scene.getElements())}));else t.setState((function(e){return{selectedElementIds:nh(nh({},e.selectedElementIds),{},V({},y.id,!0))}}));else t.setState((function(e){return nh({},wo(nh(nh({},e),{},{selectedElementIds:V({},y.id,!0)}),t.scene.getElements()))}));t.state.editingLinearElement||e.drag.hasOccurred||t.state.isResizing||!(y&&ma(y,t.state,e.origin.x,e.origin.y)||!y&&e.hit.hasHitCommonBoundingBoxOfSelectedElements)?(!s&&\"freedraw\"!==l&&o&&t.setState((function(e){return{selectedElementIds:nh(nh({},e.selectedElementIds),{},V({},o.id,!0))}})),(\"selection\"!==l||rl(t.scene.getElements(),t.state))&&t.history.resumeRecording(),(e.drag.hasOccurred||u||d)&&(ri(t.state)?ii:pi)(ol(t.scene.getElements(),t.state)),s||\"freedraw\"===l?t.setState({draggingElement:null,suggestedBindings:[]}):(Gn(t.canvas),t.setState({draggingElement:null,suggestedBindings:[],elementType:\"selection\"}))):t.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})}}))}},{key:\"maybeSuggestBindingForAll\",value:function(e){var t,n,r=(t=e,n=new Set(t.map((function(e){return e.id}))),t.flatMap((function(e){return et(e)?wi(e).filter((function(e){return!n.has(e.id)})):nt(e)?Ei(e).filter((function(e){return!n.has(e[0].id)})):[]})));this.setState({suggestedBindings:r})}},{key:\"clearSelection\",value:function(e){this.setState((function(t){return{selectedElementIds:{},selectedGroupIds:{},editingGroupId:t.editingGroupId&&null!=e&&ko(e,t.editingGroupId)?t.editingGroupId:null}})),this.setState({selectedElementIds:{},previousSelectedElementIds:this.state.selectedElementIds})}},{key:\"getTextWysiwygSnappedToCenterPosition\",value:function(e,t,n,r,o){var a=function(e,t,n){for(var r=null,o=e.length-1;o>=0;--o)if(!e[o].isDeleted){var a=R(gt(e[o]),4),i=a[0],l=a[1],s=a[2],c=a[3];if(i<t&&t<s&&l<n&&n<c){r=e[o];break}}return r}(this.scene.getElementsIncludingDeleted().filter((function(e){return!Xe(e)})),e,t);if(a){var i=a.x+a.width\/2,l=a.y+a.height\/2;if(Math.hypot(e-i,t-l)<c.wZ){var s=Xn({sceneX:i,sceneY:l},n);return{viewportX:s.x,viewportY:s.y,elementCenterX:i,elementCenterY:l}}}}},{key:\"getCanvasOffsets\",value:function(){var e;if(null!==(e=this.excalidrawContainerRef)&&void 0!==e&&e.current){var t=this.excalidrawContainerRef.current.getBoundingClientRect();return{offsetLeft:t.left,offsetTop:t.top}}return{offsetLeft:0,offsetTop:0}}},{key:\"updateLanguage\",value:(t=(0,d.Z)(k().mark((function e(){var t,n=this;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=C.find((function(e){return e.code===n.props.langCode}))||j,e.next=3,P(t);case 3:this.setAppState({});case 4:case\"end\":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}],[{key:\"resetTapTwice\",value:function(){sh=!1}}]),o}(s().Component);xh.defaultProps={UIOptions:c.cW};var wh=function(){var e=this;this.canvas=null,this.rc=null,this.unmounted=!1,this.isMobile=!1,this.excalidrawContainerRef=s().createRef(),this.focusContainer=function(){var t;e.props.autoFocus&&(null===(t=e.excalidrawContainerRef.current)||void 0===t||t.focus())},this.getSceneElementsIncludingDeleted=function(){return e.scene.getElementsIncludingDeleted()},this.getSceneElements=function(){return e.scene.getElements()},this.syncActionResult=nr((function(t){if(!e.unmounted&&!1!==t){var n=null;if(t.elements&&(t.elements.forEach((function(t){var r;(null===(r=e.state.editingElement)||void 0===r?void 0:r.id)===t.id&&e.state.editingElement!==t&&$i(t)&&(n=t)})),e.scene.replaceAllElements(t.elements),t.commitToHistory&&e.history.resumeRecording()),t.appState||n){var r,o,a,i,l,s;t.commitToHistory&&e.history.resumeRecording();var u=(null==t||null===(r=t.appState)||void 0===r?void 0:r.viewModeEnabled)||!1,d=(null==t||null===(o=t.appState)||void 0===o?void 0:o.zenModeEnabled)||!1,p=(null==t||null===(a=t.appState)||void 0===a?void 0:a.gridSize)||null,f=(null==t||null===(i=t.appState)||void 0===i?void 0:i.theme)||\"light\",h=null!==(l=null==t||null===(s=t.appState)||void 0===s?void 0:s.name)&&void 0!==l?l:e.state.name;void 0!==e.props.viewModeEnabled&&(u=e.props.viewModeEnabled),void 0!==e.props.zenModeEnabled&&(d=e.props.zenModeEnabled),void 0!==e.props.gridModeEnabled&&(p=e.props.gridModeEnabled?c.k:null),void 0!==e.props.theme&&(f=e.props.theme),void 0!==e.props.name&&(h=e.props.name),e.setState((function(e){var r;return Object.assign(t.appState||{},{editingElement:n||(null===(r=t.appState)||void 0===r?void 0:r.editingElement)||null,viewModeEnabled:u,zenModeEnabled:d,gridSize:p,theme:f,name:h})}),(function(){t.syncHistory&&e.history.setCurrentState(e.state,e.scene.getElementsIncludingDeleted())}))}}})),this.onBlur=nr((function(){ph=!1,e.setState({isBindingEnabled:!0})})),this.onUnload=function(){e.onBlur()},this.disableEvent=function(e){e.preventDefault()},this.onFontLoaded=function(){e.scene.getElementsIncludingDeleted().forEach((function(e){Xe(e)&&Hr(e)})),e.onSceneUpdated()},this.importLibraryFromUrl=function(){var t=(0,d.Z)(k().mark((function t(n,r){var o,a,i,l,s;return k().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return window.location.hash.includes(c.ah.addLibrary)?((o=new URLSearchParams(window.location.hash.slice(1))).delete(c.ah.addLibrary),window.history.replaceState({},c.iC,\"#\".concat(o.toString()))):window.location.search.includes(c.UO.addLibrary)&&((a=new URLSearchParams(window.location.search)).delete(c.UO.addLibrary),window.history.replaceState({},c.iC,\"?\".concat(a.toString()))),t.prev=1,t.next=4,fetch(decodeURIComponent(n));case 4:return i=t.sent,t.next=7,i.blob();case 7:return l=t.sent,t.t0=JSON,t.next=11,l.text();case 11:if(t.t1=t.sent,s=t.t0.parse.call(t.t0,t.t1),Pu(s)){t.next=15;break}throw new Error;case 15:if(r!==e.id&&!window.confirm(L(\"alerts.confirmAddLibrary\",{numShapes:s.library.length}))){t.next=20;break}return t.next=18,e.library.importLibrary(l);case 18:e.state.isLibraryOpen&&e.setState({isLibraryOpen:!1}),e.setState({isLibraryOpen:!0});case 20:t.next=26;break;case 22:t.prev=22,t.t2=t.catch(1),window.alert(L(\"alerts.errorLoadingLibrary\")),console.error(t.t2);case 26:return t.prev=26,e.focusContainer(),t.finish(26);case 29:case\"end\":return t.stop()}}),t,null,[[1,22,26,29]])})));return function(e,n){return t.apply(this,arguments)}}(),this.resetHistory=function(){e.history.clear()},this.resetScene=nr((function(t){e.scene.replaceAllElements([]),e.setState((function(n){return nh(nh({},ir()),{},{isLoading:(null==t||!t.resetLoadingState)&&n.isLoading,theme:e.state.theme})})),e.resetHistory()})),this.initializeScene=(0,d.Z)(k().mark((function t(){var n,r,o,a,i;return k().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return\"launchQueue\"in window&&\"LaunchParams\"in window&&window.launchQueue.setConsumer(function(){var t=(0,d.Z)(k().mark((function t(n){var r,o;return k().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n.files.length){t.next=2;break}return t.abrupt(\"return\");case 2:return r=n.files[0],t.next=5,r.getFile();case 5:(o=t.sent).handle=r,Su(o,e.state,e.scene.getElementsIncludingDeleted()).then((function(t){var n=t.elements,r=t.appState;return e.syncActionResult({elements:n,appState:nh(nh({},r||e.state),{},{isLoading:!1}),commitToHistory:!0})})).catch((function(t){e.setState({isLoading:!1,errorMessage:t.message})}));case 8:case\"end\":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),e.state.isLoading||e.setState({isLoading:!0}),r=null,t.prev=3,t.next=6,e.props.initialData;case 6:if(t.t0=t.sent,t.t0){t.next=9;break}t.t0=null;case 9:r=t.t0,null!==(o=r)&&void 0!==o&&o.libraryItems&&(e.libraryItemsFromStorage=r.libraryItems),t.next=17;break;case 13:t.prev=13,t.t1=t.catch(3),console.error(t.t1),r={appState:{errorMessage:t.t1.message||\"Encountered an error during importing or restoring scene data\"}};case 17:if((a=vu(r,null,null)).appState=nh(nh({},a.appState),{},{isLoading:!1}),null!==(n=r)&&void 0!==n&&n.scrollToContent&&(a.appState=nh(nh({},a.appState),ll(a.elements,nh(nh({},a.appState),{},{width:e.state.width,height:e.state.height,offsetTop:e.state.offsetTop,offsetLeft:e.state.offsetLeft})))),e.resetHistory(),e.syncActionResult(nh(nh({},a),{},{commitToHistory:!0})),!(i=new URLSearchParams(window.location.hash.slice(1)).get(c.ah.addLibrary)||new URLSearchParams(window.location.search).get(c.UO.addLibrary))){t.next=26;break}return t.next=26,e.importLibraryFromUrl(i);case 26:case\"end\":return t.stop()}}),t,null,[[3,13]])}))),this.onResize=nr((function(){e.scene.getElementsIncludingDeleted().forEach((function(e){return Hr(e)})),e.setState({})})),this.onScroll=Fn((function(){var t=e.getCanvasOffsets(),n=t.offsetTop,r=t.offsetLeft;e.setState((function(e){return e.offsetLeft===r&&e.offsetTop===n?null:{offsetTop:n,offsetLeft:r}}))}),c.HM),this.onCut=nr((function(t){var n;(null===(n=e.excalidrawContainerRef.current)||void 0===n?void 0:n.contains(document.activeElement))&&!Bn(t.target)&&(e.cutAll(),t.preventDefault())})),this.onCopy=nr((function(t){var n;(null===(n=e.excalidrawContainerRef.current)||void 0===n?void 0:n.contains(document.activeElement))&&!Bn(t.target)&&(e.copyAll(),t.preventDefault())})),this.cutAll=function(){e.copyAll(),e.actionManager.executeAction(zs)},this.copyAll=function(){ad(e.scene.getElements(),e.state)},this.onTapStart=function(t){if(!sh)return sh=!0,clearTimeout(ch),void(ch=window.setTimeout(xh.resetTapTwice,c.Gj));if(sh&&1===t.touches.length){var n=R(t.touches,1)[0];e.handleCanvasDoubleClick({clientX:n.clientX,clientY:n.clientY}),sh=!1,clearTimeout(ch)}t.preventDefault(),2===t.touches.length&&e.setState({selectedElementIds:{}})},this.onTapEnd=function(t){t.touches.length>0&&e.setState({previousSelectedElementIds:{},selectedElementIds:e.state.previousSelectedElementIds})},this.pasteFromClipboard=nr(function(){var t=(0,d.Z)(k().mark((function t(n){var r,o,a,i;return k().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(o=document.activeElement,null===(r=e.excalidrawContainerRef.current)||void 0===r?void 0:r.contains(o)){t.next=4;break}return t.abrupt(\"return\");case 4:if(a=document.elementFromPoint(uh,dh),!n||a instanceof HTMLCanvasElement&&!Bn(o)){t.next=7;break}return t.abrupt(\"return\");case 7:return t.next=9,cd(n);case 9:if(i=t.sent,!e.props.onPaste){t.next=22;break}return t.prev=11,t.next=14,e.props.onPaste(i,n);case 14:if(t.t0=t.sent,!1!==t.t0){t.next=17;break}return t.abrupt(\"return\");case 17:t.next=22;break;case 19:t.prev=19,t.t1=t.catch(11),console.error(t.t1);case 22:i.errorMessage?e.setState({errorMessage:i.errorMessage}):i.spreadsheet?e.setState({pasteDialog:{data:i.spreadsheet,shown:!0}}):i.elements?e.addElementsFromPasteOrLibrary({elements:i.elements,position:\"cursor\"}):i.text&&e.addTextFromPaste(i.text),e.selectShapeTool(\"selection\"),null==n||n.preventDefault();case 25:case\"end\":return t.stop()}}),t,null,[[11,19]])})));return function(e){return t.apply(this,arguments)}}()),this.addElementsFromPasteOrLibrary=function(t){var n=mu(t.elements,null),r=R(St(n),4),o=r[0],a=r[1],i=r[2],l=r[3],s=Vn(o,i)\/2,c=Vn(a,l)\/2,u=\"object\"===v(t.position)?t.position.clientX:\"cursor\"===t.position?uh:e.state.width\/2+e.state.offsetLeft,d=\"object\"===v(t.position)?t.position.clientY:\"cursor\"===t.position?dh:e.state.height\/2+e.state.offsetTop,p=Yn({clientX:u,clientY:d},e.state),f=p.x-s,h=p.y-c,m=new Map,g=R(pt(f,h,e.state.gridSize),2),b=g[0],y=g[1],x=new Map,w=n.map((function(t){var n=Do(e.state.editingGroupId,m,t,{x:t.x+b-o,y:t.y+y-a});return x.set(t.id,n.id),n})),k=[].concat(F(e.scene.getElementsIncludingDeleted()),F(w));Ci(k,n,x),e.scene.replaceAllElements(k),e.history.resumeRecording(),e.setState(wo(nh(nh({},e.state),{},{isLibraryOpen:!1,selectedElementIds:w.reduce((function(e,t){return e[t.id]=!0,e}),{}),selectedGroupIds:{}}),e.scene.getElements())),e.selectShapeTool(\"selection\")},this.setAppState=function(t){e.setState(t)},this.removePointer=function(e){\"touch\"===e.pointerType&&gh&&(clearTimeout(gh),gh=0,vh=!1),yh.pointers.delete(e.pointerId)},this.toggleLock=function(){e.setState((function(e){return{elementLocked:!e.elementLocked,elementType:e.elementLocked?\"selection\":e.elementType}}))},this.toggleZenMode=function(){e.actionManager.executeAction(Ep)},this.toggleStats=function(){e.state.showStats||Tc(\"dialog\",\"stats\"),e.actionManager.executeAction(Op)},this.scrollToContent=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.scene.getElements();e.setState(nh({},ll(Array.isArray(t)?t:[t],e.state,e.canvas)))},this.clearToast=function(){e.setState({toastMessage:null})},this.setToastMessage=function(t){e.setState({toastMessage:t})},this.restoreFileFromShare=(0,d.Z)(k().mark((function t(){var n,r,o;return k().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,caches.open(\"web-share-target\");case 3:return n=t.sent,t.next=6,n.match(\"shared-file\");case 6:if(!(r=t.sent)){t.next=15;break}return t.next=10,r.blob();case 10:return o=t.sent,e.loadFileToCanvas(o),t.next=14,n.delete(\"shared-file\");case 14:window.history.replaceState(null,c.iC,window.location.pathname);case 15:t.next=20;break;case 17:t.prev=17,t.t0=t.catch(0),e.setState({errorMessage:t.t0.message});case 20:case\"end\":return t.stop()}}),t,null,[[0,17]])}))),this.updateScene=nr((function(t){t.commitToHistory&&e.history.resumeRecording(),t.appState&&e.setState(t.appState),t.elements&&e.scene.replaceAllElements(t.elements),t.collaborators&&e.setState({collaborators:t.collaborators})})),this.onSceneUpdated=function(){e.setState({})},this.updateCurrentCursorPosition=nr((function(e){uh=e.clientX,dh=e.clientY})),this.onKeyDown=nr((function(t){var n;if((\"Proxy\"in window&&(!t.shiftKey&&\/^[A-Z]$\/.test(t.key)||t.shiftKey&&\/^[a-z]$\/.test(t.key))&&(t=new Proxy(t,{get:function(e,n){var r=e[n];return\"function\"==typeof r?r.bind(e):\"key\"===n?t.shiftKey?e.key.toUpperCase():e.key.toLowerCase():r}})),!(Bn(t.target)&&t.key!==un||In(t.key)&&(n=t.target,n instanceof HTMLElement&&\"wysiwyg\"===n.dataset.type||n instanceof HTMLBRElement||n instanceof HTMLInputElement||n instanceof HTMLTextAreaElement||n instanceof HTMLSelectElement)))&&(t.key===dn&&e.setState({showHelpDialog:!0}),!e.actionManager.handleKeyDown(t)&&!e.state.viewModeEnabled)){if(t[ln]&&e.state.isBindingEnabled&&e.setState({isBindingEnabled:!1}),t.code===Ft&&e.setState({isLibraryOpen:!e.state.isLibraryOpen}),In(t.key)){var r=e.state.gridSize&&(t.shiftKey?c.$e:e.state.gridSize)||(t.shiftKey?c.Iw:c.$e),o=e.scene.getElements().filter((function(t){return e.state.selectedElementIds[t.id]})),a=0,i=0;t.key===tn?a=-r:t.key===nn?a=r:t.key===rn?i=-r:t.key===en&&(i=r),o.forEach((function(e){ao(e,{x:e.x+a,y:e.y+i}),gi(e,{simultaneouslyUpdated:o})})),e.maybeSuggestBindingForAll(o),t.preventDefault()}else if(t.key===cn){var l=ol(e.scene.getElements(),e.state);if(1===l.length&&Qe(l[0]))e.state.editingLinearElement&&e.state.editingLinearElement.elementId===l[0].id||(e.history.resumeRecording(),e.setState({editingLinearElement:new ti(l[0],e.scene)}));else if(1===l.length&&!Qe(l[0])){var s=l[0];return e.startTextEditing({sceneX:s.x+s.width\/2,sceneY:s.y+s.height\/2}),void t.preventDefault()}}else if(!t.ctrlKey&&!t.altKey&&!t.metaKey&&null===e.state.draggingElement){var u=function(e){var t=Rp.find((function(t,n){return e===(n+1).toString()||(\"string\"==typeof t.key?t.key===e:t.key.includes(e))}));return(null==t?void 0:t.value)||null}(t.key);u?e.selectShapeTool(u):t.key===wn&&e.toggleLock()}if(t.key===pn&&0===yh.pointers.size&&(ph=!0,Un(e.canvas,c.oc.GRABBING)),t.key===vn||t.key===Sn){var d=ol(e.scene.getElements(),e.state);if(\"selection\"===e.state.elementType&&!d.length)return;t.key===vn&&(sl(e.state.elementType)||d.some((function(e){return sl(e.type)})))&&e.setState({openPopup:\"backgroundColorPicker\"}),t.key===Sn&&e.setState({openPopup:\"strokeColorPicker\"})}}})),this.onKeyUp=nr((function(t){if(t.key===pn&&(e.state.viewModeEnabled?Un(e.canvas,c.oc.GRAB):\"selection\"===e.state.elementType?Gn(e.canvas):(Kn(e.canvas,e.state.elementType),e.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})),ph=!1),t[ln]||e.state.isBindingEnabled||e.setState({isBindingEnabled:!0}),In(t.key)){var n=ol(e.scene.getElements(),e.state);ri(e.state)?ii(n):pi(n),e.setState({suggestedBindings:[]})}})),this.onGestureStart=nr((function(t){t.preventDefault(),e.setState({selectedElementIds:{}}),yh.initialScale=e.state.zoom.value})),this.onGestureChange=nr((function(t){if(t.preventDefault(),2!==yh.pointers.size){var n=yh.initialScale;n&&e.setState((function(e){var r=e.zoom,o=e.offsetLeft,a=e.offsetTop;return{zoom:ml(gl(n*t.scale),r,{left:o,top:a},{x:uh,y:dh})}}))}})),this.onGestureEnd=nr((function(t){t.preventDefault(),e.setState({previousSelectedElementIds:{},selectedElementIds:e.state.previousSelectedElementIds}),yh.initialScale=null})),this.startTextEditing=function(t){var n=t.sceneX,r=t.sceneY,o=t.insertAtParentCenter,a=void 0===o||o,i=e.getTextElementAtPosition(n,r),l=a&&e.getTextWysiwygSnappedToCenterPosition(n,r,e.state,e.canvas,window.devicePixelRatio),s=i||To({x:l?l.elementCenterX:n,y:l?l.elementCenterY:r,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,strokeSharpness:e.state.currentItemStrokeSharpness,text:\"\",fontSize:e.state.currentItemFontSize,fontFamily:e.state.currentItemFontFamily,textAlign:l?\"center\":e.state.currentItemTextAlign,verticalAlign:l?\"middle\":c.hs});e.setState({editingElement:s}),i?l&&\"center\"===s.textAlign||ao(s,{verticalAlign:c.hs}):(e.scene.replaceAllElements([].concat(F(e.scene.getElementsIncludingDeleted()),[s])),l||ao(s,{y:s.y-s.baseline\/2})),e.setState({editingElement:s}),e.handleTextWysiwyg(s,{isExistingElement:!!i})},this.handleCanvasDoubleClick=function(t){if(!e.state.multiElement&&\"selection\"===e.state.elementType){var n=ol(e.scene.getElements(),e.state);if(1===n.length&&Qe(n[0]))e.state.editingLinearElement&&e.state.editingLinearElement.elementId===n[0].id||(e.history.resumeRecording(),e.setState({editingLinearElement:new ti(n[0],e.scene)}));else{Gn(e.canvas);var r=Yn(t,e.state),o=r.x,a=r.y;if(xo(e.state).length>0){var i=e.getElementAtPosition(o,a),l=i&&function(e,t){return e.groupIds.find((function(e){return t[e]}))}(i,e.state.selectedGroupIds);if(l)return void e.setState((function(t){return wo(nh(nh({},t),{},{editingGroupId:l,selectedElementIds:V({},i.id,!0),selectedGroupIds:{}}),e.scene.getElements())}))}Gn(e.canvas),t[ln]||e.state.viewModeEnabled||e.startTextEditing({sceneX:o,sceneY:a,insertAtParentCenter:!t.altKey})}}},this.handleCanvasPointerMove=function(t){e.savePointer(t.clientX,t.clientY,e.state.cursorButton),yh.pointers.has(t.pointerId)&&yh.pointers.set(t.pointerId,{x:t.clientX,y:t.clientY});var n=yh.initialScale;if(2===yh.pointers.size&&yh.lastCenter&&n&&yh.initialDistance){var r=Lp(yh.pointers),o=r.x-yh.lastCenter.x,a=r.y-yh.lastCenter.y;yh.lastCenter=r;var i=_p(Array.from(yh.pointers.values()))\/yh.initialDistance;e.setState((function(e){var t=e.zoom,l=e.scrollX,s=e.scrollY,c=e.offsetLeft,u=e.offsetTop;return{scrollX:l+o\/t.value,scrollY:s+a\/t.value,zoom:ml(gl(n*i),t,{left:c,top:u},r),shouldCacheIgnoreZoom:!0}})),e.resetShouldCacheIgnoreZoomDebounced()}else yh.lastCenter=yh.initialDistance=yh.initialScale=null;if(!(ph||fh||hh)){var l=nl(mh,t.clientX-e.state.offsetLeft,t.clientY-e.state.offsetTop).isOverEither;e.state.draggingElement||e.state.multiElement||(l?Gn(e.canvas):Kn(e.canvas,e.state.elementType));var s=Yn(t,e.state),u=s.x,d=s.y;if(e.state.editingLinearElement&&!e.state.editingLinearElement.isDragging){var p=ti.handlePointerMove(t,u,d,e.state.editingLinearElement,e.state.gridSize);p!==e.state.editingLinearElement&&e.setState({editingLinearElement:p}),null!=p.lastUncommittedPoint?e.maybeSuggestBindingAtCursor(s):e.setState({suggestedBindings:[]})}if(tt(e.state.elementType)){var f=e.state.draggingElement;et(f)?e.maybeSuggestBindingForLinearElementAtCursor(f,\"end\",s,e.state.startBoundElement):e.maybeSuggestBindingAtCursor(s)}if(e.state.multiElement){var h=e.state.multiElement,m=h.x,g=h.y,v=h.points,b=h.lastCommittedPoint,y=v[v.length-1];return Kn(e.canvas,e.state.elementType),void(y===b?it(u-m,d-g,y[0],y[1])>=c.qx?ao(h,{points:[].concat(F(v),[[u-m,d-g]])}):Un(e.canvas,c.oc.POINTER):v.length>2&&b&&it(u-m,d-g,b[0],b[1])<c.qx?(Un(e.canvas,c.oc.POINTER),ao(h,{points:v.slice(0,-1)})):(lt(v,e.state.zoom.value)&&Un(e.canvas,c.oc.POINTER),ao(h,{points:[].concat(F(v.slice(0,-1)),[[u-m,d-g]])})))}if(!(Boolean(t.buttons)||\"selection\"!==e.state.elementType&&\"text\"!==e.state.elementType)){var x=e.scene.getElements(),w=ol(x,e.state);if(1!==w.length||l||e.state.editingLinearElement){if(w.length>1&&!l){var k=qa(St(w),u,d,e.state.zoom,t.pointerType);if(k)return void Un(e.canvas,Qa({transformHandleType:k}))}}else{var S=Xa(x,e.state,u,d,e.state.zoom,t.pointerType);if(S&&S.transformHandleType)return void Un(e.canvas,Qa(S))}var E=e.getElementAtPosition(s.x,s.y);\"text\"===e.state.elementType?Un(e.canvas,Xe(E)?c.oc.TEXT:c.oc.CROSSHAIR):e.state.viewModeEnabled?Un(e.canvas,c.oc.GRAB):l||t[ln]||!E&&!e.isHittingCommonBoundingBoxOfSelectedElements(s,w)?Un(e.canvas,c.oc.AUTO):Un(e.canvas,c.oc.MOVE)}}},this.handleTouchMove=function(e){vh=!0},this.handleCanvasPointerDown=function(t){var n=document.getSelection();if(null!=n&&n.anchorNode&&n.removeAllRanges(),e.maybeOpenContextMenuAfterPointerDownOnTouchDevices(t),e.maybeCleanupAfterMissingPointerUp(t),!fh&&(e.setState({lastPointerDownWith:t.pointerType,cursorButton:\"down\"}),e.savePointer(t.clientX,t.clientY,\"down\"),!e.handleCanvasPanUsingWheelOrSpaceDrag(t)&&!(t.button!==c.Oh.MAIN&&t.button!==c.Oh.TOUCH||(e.updateGestureOnPointerDown(t),yh.pointers.size>1)))){var r=e.initialPointerDownState(t);if(!e.handleDraggingScrollBar(t,r)&&(e.clearSelectionIfNotUsingSelection(),e.updateBindingEnabledOnPointerMove(t),!e.handleSelectionOnPointerDown(t,r)))if(\"text\"!==e.state.elementType){\"arrow\"===e.state.elementType||\"line\"===e.state.elementType?e.handleLinearElementOnPointerDown(t,e.state.elementType,r):\"freedraw\"===e.state.elementType?e.handleFreeDrawElementOnPointerDown(t,e.state.elementType,r):e.createGenericElementOnPointerDown(e.state.elementType,r);var o=e.onPointerMoveFromPointerDownHandler(r),a=e.onPointerUpFromPointerDownHandler(r),i=e.onKeyDownFromPointerDownHandler(r),l=e.onKeyUpFromPointerDownHandler(r);bh=a,e.state.viewModeEnabled||(window.addEventListener(c.Ks.POINTER_MOVE,o),window.addEventListener(c.Ks.POINTER_UP,a),window.addEventListener(c.Ks.KEYDOWN,i),window.addEventListener(c.Ks.KEYUP,l),r.eventListeners.onMove=o,r.eventListeners.onUp=a,r.eventListeners.onKeyUp=l,r.eventListeners.onKeyDown=i)}else e.handleTextOnPointerDown(t,r)}},this.maybeOpenContextMenuAfterPointerDownOnTouchDevices=function(t){\"touch\"===t.pointerType&&(vh=!1,gh?vh=!0:gh=window.setTimeout((function(){gh=0,vh||e.handleCanvasContextMenu(t)}),c.nM))},this.handleCanvasPanUsingWheelOrSpaceDrag=function(t){if(0!==yh.pointers.size||!(t.button===c.Oh.WHEEL||t.button===c.Oh.MAIN&&ph||e.state.viewModeEnabled))return!1;fh=!0;var n=!1,r=\/Linux\/.test(window.navigator.platform);Un(e.canvas,c.oc.GRABBING);var o=t.clientX,a=t.clientY,i=nr((function(t){var i=o-t.clientX,l=a-t.clientY;if(o=t.clientX,a=t.clientY,r&&!n&&(Math.abs(i)>1||Math.abs(l)>1)){n=!0;var s=function e(t){document.body.removeEventListener(c.Ks.PASTE,e),t.stopPropagation()};document.body.addEventListener(c.Ks.PASTE,s),window.addEventListener(c.Ks.POINTER_UP,(function e(){setTimeout((function(){document.body.removeEventListener(c.Ks.PASTE,s),window.removeEventListener(c.Ks.POINTER_UP,e)}),100)}))}e.setState({scrollX:e.state.scrollX-i\/e.state.zoom.value,scrollY:e.state.scrollY-l\/e.state.zoom.value})})),l=nr(bh=function(){bh=null,fh=!1,ph||(e.state.viewModeEnabled?Un(e.canvas,c.oc.GRAB):Kn(e.canvas,e.state.elementType)),e.setState({cursorButton:\"up\"}),e.savePointer(t.clientX,t.clientY,\"up\"),window.removeEventListener(c.Ks.POINTER_MOVE,i),window.removeEventListener(c.Ks.POINTER_UP,l),window.removeEventListener(c.Ks.BLUR,l)});return window.addEventListener(c.Ks.BLUR,l),window.addEventListener(c.Ks.POINTER_MOVE,i,{passive:!0}),window.addEventListener(c.Ks.POINTER_UP,l),!0},this.clearSelectionIfNotUsingSelection=function(){\"selection\"!==e.state.elementType&&e.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})},this.handleSelectionOnPointerDown=function(t,n){if(\"selection\"===e.state.elementType){var r=e.scene.getElements(),o=ol(r,e.state);if(1!==o.length||e.state.editingLinearElement)o.length>1&&(n.resize.handleType=qa(St(o),n.origin.x,n.origin.y,e.state.zoom,t.pointerType));else{var a=Xa(r,e.state,n.origin.x,n.origin.y,e.state.zoom,t.pointerType);null!=a&&(e.setState({resizingElement:a.element}),n.resize.handleType=a.transformHandleType)}if(n.resize.handleType)Un(e.canvas,Qa({transformHandleType:n.resize.handleType})),n.resize.isResizing=!0,n.resize.offset=Jn(function(e,t,n,r){var o=R(1===t.length?gt(t[0]):St(t),4),a=o[0],i=o[1],l=o[2],s=o[3],c=(a+l)\/2,u=(i+s)\/2,d=1===t.length?t[0].angle:0,p=R(rt(n,r,c,u,-d),2);switch(n=p[0],r=p[1],e){case\"n\":return rt(n-(a+l)\/2,r-i,0,0,d);case\"s\":return rt(n-(a+l)\/2,r-s,0,0,d);case\"w\":return rt(n-a,r-(i+s)\/2,0,0,d);case\"e\":return rt(n-l,r-(i+s)\/2,0,0,d);case\"nw\":return rt(n-a,r-i,0,0,d);case\"ne\":return rt(n-l,r-i,0,0,d);case\"sw\":return rt(n-a,r-s,0,0,d);case\"se\":return rt(n-l,r-s,0,0,d);default:return[0,0]}}(n.resize.handleType,o,n.origin.x,n.origin.y)),1===o.length&&Qe(o[0])&&2===o[0].points.length&&(n.resize.arrowDirection=(u=n.resize.handleType,d=o[0],p=R(d.points,2),f=R(p[1],2),h=f[0],m=f[1],\"nw\"===u&&(h<0||m<0)||\"ne\"===u&&h>=0||\"sw\"===u&&h<=0||\"se\"===u&&(h>0||m>0)?\"end\":\"origin\"));else{var i;if(e.state.editingLinearElement){var l=ti.handlePointerDown(t,e.state,(function(t){return e.setState(t)}),e.history,n.origin);if(l.hitElement&&(n.hit.element=l.hitElement),l.didAddPoint)return!0}n.hit.element=null!==(i=n.hit.element)&&void 0!==i?i:e.getElementAtPosition(n.origin.x,n.origin.y),n.hit.allHitElements=e.getElementsAtPosition(n.origin.x,n.origin.y);var s=n.hit.element,c=n.hit.allHitElements.some((function(t){return e.isASelectedElement(t)}));if(null!==s&&c||t.shiftKey||n.hit.hasHitCommonBoundingBoxOfSelectedElements||e.clearSelection(s),null!=s){if(t[ln])return e.state.selectedElementIds[s.id]||(n.hit.wasAddedToSelection=!0),e.setState((function(t){return nh(nh({},function(e,t){return go(go({},e),{},{editingGroupId:t.groupIds.length?t.groupIds[0]:null,selectedGroupIds:{},selectedElementIds:V({},t.id,!0)})}(t,s)),{},{previousSelectedElementIds:e.state.selectedElementIds})})),!1;e.state.selectedElementIds[s.id]||(e.state.editingGroupId&&!ko(s,e.state.editingGroupId)&&e.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null}),c||n.hit.hasHitCommonBoundingBoxOfSelectedElements||(e.setState((function(t){return wo(nh(nh({},t),{},{selectedElementIds:nh(nh({},t.selectedElementIds),{},V({},s.id,!0))}),e.scene.getElements())})),n.hit.wasAddedToSelection=!0))}e.setState({previousSelectedElementIds:e.state.selectedElementIds})}}var u,d,p,f,h,m;return!1},this.handleTextOnPointerDown=function(t,n){var r;\"text\"!==(null===(r=e.state.editingElement)||void 0===r?void 0:r.type)&&(e.startTextEditing({sceneX:n.origin.x,sceneY:n.origin.y,insertAtParentCenter:!t.altKey}),Gn(e.canvas),e.state.elementLocked||e.setState({elementType:\"selection\"}))},this.handleFreeDrawElementOnPointerDown=function(t,n,r){var o,a=R(pt(r.origin.x,r.origin.y,null),2),i=a[0],l=a[1],s=(o={type:n,x:i,y:l,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,strokeSharpness:e.state.currentItemLinearStrokeSharpness,simulatePressure:.5===t.pressure},Oo(Oo({},Mo(o.type,o)),{},{points:o.points||[],pressures:[],simulatePressure:o.simulatePressure,lastCommittedPoint:null}));e.setState((function(e){return{selectedElementIds:nh(nh({},e.selectedElementIds),{},V({},s.id,!1))}}));var c=s.simulatePressure?s.pressures:[].concat(F(s.pressures),[t.pressure]);ao(s,{points:[[0,0]],pressures:c});var u=hi(r.origin,e.scene);e.scene.replaceAllElements([].concat(F(e.scene.getElementsIncludingDeleted()),[s])),e.setState({draggingElement:s,editingElement:s,startBoundElement:u,suggestedBindings:[]})},this.handleLinearElementOnPointerDown=function(t,n,r){if(e.state.multiElement){var o=e.state.multiElement;if(\"line\"===o.type&&lt(o.points,e.state.zoom.value))return ao(o,{lastCommittedPoint:o.points[o.points.length-1]}),void e.actionManager.executeAction(Pc);var a=o.x,i=o.y,l=o.lastCommittedPoint;if(o.points.length>1&&l&&it(r.origin.x-a,r.origin.y-i,l[0],l[1])<c.qx)return void e.actionManager.executeAction(Pc);e.setState((function(e){return{selectedElementIds:nh(nh({},e.selectedElementIds),{},V({},o.id,!0))}})),ao(o,{lastCommittedPoint:o.points[o.points.length-1]}),Un(e.canvas,c.oc.POINTER)}else{var s=R(pt(r.origin.x,r.origin.y,e.state.gridSize),2),u=s[0],d=s[1],p=e.state,f=p.currentItemStartArrowhead,h=p.currentItemEndArrowhead,m=R(\"arrow\"===n?[f,h]:[null,null],2),g=m[0],v=m[1],b=Lo({type:n,x:u,y:d,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,strokeSharpness:e.state.currentItemLinearStrokeSharpness,startArrowhead:g,endArrowhead:v});e.setState((function(e){return{selectedElementIds:nh(nh({},e.selectedElementIds),{},V({},b.id,!1))}})),ao(b,{points:[].concat(F(b.points),[[0,0]])});var y=hi(r.origin,e.scene);e.scene.replaceAllElements([].concat(F(e.scene.getElementsIncludingDeleted()),[b])),e.setState({draggingElement:b,editingElement:b,startBoundElement:y,suggestedBindings:[]})}},this.createGenericElementOnPointerDown=function(t,n){var r=R(pt(n.origin.x,n.origin.y,e.state.gridSize),2),o=r[0],a=r[1],i=Io({type:t,x:o,y:a,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,strokeSharpness:e.state.currentItemStrokeSharpness});\"selection\"===i.type?e.setState({selectionElement:i,draggingElement:i}):(e.scene.replaceAllElements([].concat(F(e.scene.getElementsIncludingDeleted()),[i])),e.setState({multiElement:null,draggingElement:i,editingElement:i}))},this.updateBindingEnabledOnPointerMove=function(t){var n=function(e){return!e[ln]}(t);e.state.isBindingEnabled!==n&&e.setState({isBindingEnabled:n})},this.maybeSuggestBindingAtCursor=function(t){var n=hi(t,e.scene);e.setState({suggestedBindings:null!=n?[n]:[]})},this.maybeSuggestBindingForLinearElementAtCursor=function(t,n,r,o){var a=hi(r,e.scene);e.setState({suggestedBindings:null==a||di(t,null==o?void 0:o.id,a)?[]:[a]})},this.handleCanvasRef=function(t){var n,r,o;null!==t?(e.canvas=t,e.rc=Ke.canvas(e.canvas),e.canvas.addEventListener(c.Ks.WHEEL,e.handleWheel,{passive:!1}),e.canvas.addEventListener(c.Ks.TOUCH_START,e.onTapStart),e.canvas.addEventListener(c.Ks.TOUCH_END,e.onTapEnd)):(null===(n=e.canvas)||void 0===n||n.removeEventListener(c.Ks.WHEEL,e.handleWheel),null===(r=e.canvas)||void 0===r||r.removeEventListener(c.Ks.TOUCH_START,e.onTapStart),null===(o=e.canvas)||void 0===o||o.removeEventListener(c.Ks.TOUCH_END,e.onTapEnd))},this.handleAppOnDrop=function(){var t=(0,d.Z)(k().mark((function t(n){var r,o,a,i,l,s,u,d,p,f;return k().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(t.prev=0,\"image\/png\"!==(null==(a=n.dataTransfer.files[0])?void 0:a.type)&&\"image\/svg+xml\"!==(null==a?void 0:a.type)){t.next=21;break}if(!qc){t.next=14;break}return t.prev=4,i=n.dataTransfer.items[0],t.next=8,i.getAsFileSystemHandle();case 8:a.handle=t.sent,t.next=14;break;case 11:t.prev=11,t.t0=t.catch(4),console.warn(t.t0.name,t.t0.message);case 14:return t.next=16,Su(a,e.state,e.scene.getElementsIncludingDeleted());case 16:return l=t.sent,s=l.elements,u=l.appState,e.syncActionResult({elements:s,appState:nh(nh({},u||e.state),{},{isLoading:!1}),commitToHistory:!0}),t.abrupt(\"return\");case 21:t.next=26;break;case 23:return t.prev=23,t.t1=t.catch(0),t.abrupt(\"return\",e.setState({isLoading:!1,errorMessage:t.t1.message}));case 26:if(\"\"===(d=n.dataTransfer.getData(c.LO.excalidrawlib))){t.next=30;break}return e.addElementsFromPasteOrLibrary({elements:JSON.parse(d),position:n}),t.abrupt(\"return\");case 30:if(!((null==(p=null===(r=n.dataTransfer)||void 0===r?void 0:r.files[0])?void 0:p.type)===c.LO.excalidrawlib||null!=p&&null!==(o=p.name)&&void 0!==o&&o.endsWith(\".excalidrawlib\"))){t.next=35;break}e.library.importLibrary(p).then((function(){e.setState({isLibraryOpen:!1}),e.setState({isLibraryOpen:!0})})).catch((function(t){return e.setState({isLoading:!1,errorMessage:t.message})})),t.next=49;break;case 35:if(e.setState({isLoading:!0}),!qc){t.next=47;break}return t.prev=37,f=n.dataTransfer.items[0],t.next=41,f.getAsFileSystemHandle();case 41:p.handle=t.sent,t.next=47;break;case 44:t.prev=44,t.t2=t.catch(37),console.warn(t.t2.name,t.t2.message);case 47:return t.next=49,e.loadFileToCanvas(p);case 49:case\"end\":return t.stop()}}),t,null,[[0,23],[4,11],[37,44]])})));return function(e){return t.apply(this,arguments)}}(),this.loadFileToCanvas=function(t){Su(t,e.state,e.scene.getElementsIncludingDeleted()).then((function(t){var n=t.elements,r=t.appState;return e.syncActionResult({elements:n,appState:nh(nh({},r||e.state),{},{isLoading:!1}),commitToHistory:!0})})).catch((function(t){e.setState({isLoading:!1,errorMessage:t.message})}))},this.handleCanvasContextMenu=function(t){t.preventDefault();var n=Yn(t,e.state),r=n.x,o=n.y,a=e.getElementAtPosition(r,o,{preferSelected:!0}),i=a?\"element\":\"canvas\",l=e.excalidrawContainerRef.current.getBoundingClientRect(),s=l.top,c=l.left,u=t.clientX-c,d=t.clientY-s;a&&!e.state.selectedElementIds[a.id]?e.setState({selectedElementIds:V({},a.id,!0)},(function(){e._openContextMenu({top:d,left:u},i)})):e._openContextMenu({top:d,left:u},i)},this.maybeDragNewGenericElement=function(t,n){var r=e.state.draggingElement,o=t.lastCoords;if(r)if(\"selection\"===r.type)Fi(r,e.state.elementType,t.origin.x,t.origin.y,o.x,o.y,Vn(t.origin.x,o.x),Vn(t.origin.y,o.y),Tn(n),Pn(n));else{var a=R(pt(o.x,o.y,e.state.gridSize),2),i=a[0],l=a[1];Fi(r,e.state.elementType,t.originInGrid.x,t.originInGrid.y,i,l,Vn(t.originInGrid.x,i),Vn(t.originInGrid.y,l),Tn(n),Pn(n)),e.maybeSuggestBindingForAll([r])}},this.maybeHandleResize=function(t,n){var r=ol(e.scene.getElements(),e.state),o=t.resize.handleType;e.setState({isResizing:o&&\"rotation\"!==o,isRotating:\"rotation\"===o});var a=t.lastCoords,i=R(pt(a.x-t.resize.offset.x,a.y-t.resize.offset.y,e.state.gridSize),2),l=i[0],s=i[1];return!!function(e,t,n,r,o,a,i,l,s,c,u){if(1===n.length){var d=R(n,1)[0];return\"rotation\"===t?(Li(d,l,s,o),gi(d)):!Qe(d)||2!==d.points.length||\"nw\"!==t&&\"ne\"!==t&&\"sw\"!==t&&\"se\"!==t?!Xe(d)||\"nw\"!==t&&\"ne\"!==t&&\"sw\"!==t&&\"se\"!==t?t&&Hi(e.originalElements.get(d.id),i,d,t,a,l,s):(Bi(d,t,a,l,s),gi(d)):_i(d,r,o,l,s),!0}if(n.length>1){if(\"rotation\"===t)return Ri(e,n,l,s,o,c,u),!0;if(\"nw\"===t||\"ne\"===t||\"sw\"===t||\"se\"===t)return Ni(n,t,l,s),!0}return!1}(t,o,r,t.resize.arrowDirection,An(n),Pn(n),Tn(n),l,s,t.resize.center.x,t.resize.center.y)&&(e.maybeSuggestBindingForAll(r),!0)},this._openContextMenu=function(t,n){var r=t.left,o=t.top,a=Vd.contextItemPredicate(e.actionManager.getElementsIncludingDeleted(),e.actionManager.getAppState()),i=Gd.contextItemPredicate(e.actionManager.getElementsIncludingDeleted(),e.actionManager.getAppState()),l=lp.contextItemPredicate(e.actionManager.getElementsIncludingDeleted(),e.actionManager.getAppState()),s=sp.contextItemPredicate(e.actionManager.getElementsIncludingDeleted(),e.actionManager.getAppState()),c=\"separator\",u=e.scene.getElements(),d=[];if(od&&u.length>0&&d.push(bp),rd&&u.length>0&&d.push(vp),\"canvas\"===n){var p=[].concat(d,[void 0===e.props.gridModeEnabled&&wp,void 0===e.props.zenModeEnabled&&Ep,void 0===e.props.viewModeEnabled&&Qf,Op]);e.state.viewModeEnabled?Up({options:p,top:o,left:r,actionManager:e.actionManager,appState:e.state,container:e.excalidrawContainerRef.current}):Up({options:[e.isMobile&&navigator.clipboard&&{name:\"paste\",perform:function(t,n){return e.pasteFromClipboard(null),{commitToHistory:!1}},contextItemLabel:\"labels.paste\"},e.isMobile&&navigator.clipboard&&c,od&&u.length>0&&bp,rd&&u.length>0&&vp,(od&&u.length>0||rd&&u.length>0)&&c,Qs,c,void 0===e.props.gridModeEnabled&&wp,void 0===e.props.zenModeEnabled&&Ep,void 0===e.props.viewModeEnabled&&Qf,Op],top:o,left:r,actionManager:e.actionManager,appState:e.state,container:e.excalidrawContainerRef.current})}else\"element\"===n&&(e.state.viewModeEnabled?Up({options:[navigator.clipboard&&mp].concat(d),top:o,left:r,actionManager:e.actionManager,appState:e.state,container:e.excalidrawContainerRef.current}):Up({options:[e.isMobile&&gp,e.isMobile&&navigator.clipboard&&mp,e.isMobile&&navigator.clipboard&&{name:\"paste\",perform:function(t,n){return e.pasteFromClipboard(null),{commitToHistory:!1}},contextItemLabel:\"labels.paste\"},e.isMobile&&c].concat(d,[c,Ad,Ld,c,a&&Vd,i&&Gd,(a||i)&&c,Zd,c,Ws,Zs,Ys,Xs,c,l&&lp,s&&sp,(l||s)&&c,tc,zs]),top:o,left:r,actionManager:e.actionManager,appState:e.state,container:e.excalidrawContainerRef.current}))},this.handleWheel=nr((function(t){if(t.preventDefault(),!fh){var n=t.deltaX,r=t.deltaY,o=e.state,a=o.selectedElementIds,i=o.previousSelectedElementIds;if(t.metaKey||t.ctrlKey){var l=Math.sign(r),s=Math.abs(r);s>10&&(s=10),s*=l,0!==Object.keys(i).length&&setTimeout((function(){e.setState({selectedElementIds:i,previousSelectedElementIds:{}})}),1e3);var u=e.state.zoom.value-s\/100;return u+=Math.log10(Math.max(1,e.state.zoom.value))*-l,u=Math.round(u*c.V4*100)\/(100*c.V4),e.setState((function(e){var t=e.zoom,n=e.offsetLeft,r=e.offsetTop;return{zoom:ml(gl(u),t,{left:n,top:r},{x:uh,y:dh}),selectedElementIds:{},previousSelectedElementIds:0!==Object.keys(a).length?a:i,shouldCacheIgnoreZoom:!0}})),void e.resetShouldCacheIgnoreZoomDebounced()}t.shiftKey?e.setState((function(e){var t=e.zoom;return{scrollX:e.scrollX-(r||n)\/t.value}})):e.setState((function(e){var t=e.zoom,o=e.scrollX,a=e.scrollY;return{scrollX:o-n\/t.value,scrollY:a-r\/t.value}}))}})),this.savePointer=function(t,n,r){var o,a;if(t&&n){var i=Yn({clientX:t,clientY:n},e.state);isNaN(i.x)||isNaN(i.y),null===(o=(a=e.props).onPointerUpdate)||void 0===o||o.call(a,{pointer:i,button:r,pointersMap:yh.pointers})}},this.resetShouldCacheIgnoreZoomDebounced=Fn((function(){e.unmounted||e.setState({shouldCacheIgnoreZoom:!1})}),300),this.updateDOMRect=function(t){var n;if(null!==(n=e.excalidrawContainerRef)&&void 0!==n&&n.current){var r=e.excalidrawContainerRef.current.getBoundingClientRect(),o=r.width,a=r.height,i=r.left,l=r.top,s=e.state,c=s.width,u=s.height,d=s.offsetTop,p=s.offsetLeft;if(o===c&&a===u&&i===p&&l===d)return void(t&&t());e.setState({width:o,height:a,offsetLeft:i,offsetTop:l},(function(){t&&t()}))}},this.refresh=function(){e.setState(nh({},e.getCanvasOffsets()))}};\"production\"!==c.Vi.TEST&&\"production\"!==c.Vi.DEVELOPMENT||(window.h=window.h||{},Object.defineProperties(window.h,{elements:{configurable:!0,get:function(){return this.app.scene.getElementsIncludingDeleted()},set:function(e){return this.app.scene.replaceAllElements(e)}}}));var kh=xh;n(4285),n(3313);function Sh(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Eh(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Sh(Object(n),!0).forEach((function(t){V(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Sh(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var jh=function(e){var t=e.elements,n=e.appState,r=e.getDimensions,o=void 0===r?function(e,t){return{width:e,height:t,scale:1}}:r,a=vu({elements:t,appState:n},null,null),i=a.elements,l=a.appState,s=l.exportBackground,c=l.viewBackgroundColor;return _u(qi(i),Eh(Eh({},l),{},{offsetTop:0,offsetLeft:0,width:0,height:0}),{exportBackground:s,viewBackgroundColor:c},(function(e,t){var n=document.createElement(\"canvas\"),r=o(e,t);return n.width=r.width,n.height=r.height,{canvas:n,scale:r.scale}}))},Ch=function(e){var t=jh(e),n=e.mimeType,r=void 0===n?\"image\/png\":n,o=e.quality;return\"image\/png\"===r&&\"number\"==typeof o&&console.warn('\"quality\" will be ignored for \"image\/png\" mimeType'),\"image\/jpg\"===r&&(r=\"image\/jpeg\"),o=o||(\/image\\\/jpe?g\/.test(r)?.92:.8),new Promise((function(e){t.toBlob((function(t){e(t)}),r,o)}))},Oh=function(){var e=(0,d.Z)(k().mark((function e(t){var n,r,o,a,i,l,s;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.elements,r=t.appState,o=void 0===r?ir():r,a=t.exportPadding,i=vu({elements:n,appState:o},null,null),l=i.elements,s=i.appState,e.abrupt(\"return\",Du(qi(l),Eh(Eh({},s),{},{exportPadding:a})));case 3:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),Mh=[\"initialData\",\"UIOptions\"],Ih=[\"initialData\",\"UIOptions\"];function Ph(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Th(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ph(Object(n),!0).forEach((function(t){i()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ph(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ah=function(e){var t,n,r=e.onChange,o=e.initialData,a=e.excalidrawRef,i=e.onCollabButtonClick,s=e.isCollaborating,u=e.onPointerUpdate,d=e.renderTopRightUI,p=e.renderFooter,f=e.langCode,h=void 0===f?j.code:f,m=e.viewModeEnabled,g=e.zenModeEnabled,v=e.gridModeEnabled,b=e.libraryReturnUrl,y=e.theme,x=e.name,w=e.renderCustomStats,k=e.onPaste,S=e.detectScroll,E=void 0===S||S,C=e.handleKeyboardGlobally,O=void 0!==C&&C,M=e.onLibraryChange,I=e.autoFocus,P=void 0!==I&&I,T=null===(t=e.UIOptions)||void 0===t?void 0:t.canvasActions,A={canvasActions:Th(Th({},c.cW.canvasActions),T)};null!=T&&T.export&&(A.canvasActions.export.saveFileToDisk=(null===(n=T.export)||void 0===n?void 0:n.saveFileToDisk)||c.cW.canvasActions.export.saveFileToDisk);return(0,l.useEffect)((function(){var e=function(e){\"number\"==typeof e.scale&&1!==e.scale&&e.preventDefault()};return document.addEventListener(\"touchmove\",e,{passive:!1}),function(){document.removeEventListener(\"touchmove\",e)}}),[]),(0,_.jsx)(B,{langCode:h,children:(0,_.jsx)(kh,{onChange:r,initialData:o,excalidrawRef:a,onCollabButtonClick:i,isCollaborating:s,onPointerUpdate:u,renderTopRightUI:d,renderFooter:p,langCode:h,viewModeEnabled:m,zenModeEnabled:g,gridModeEnabled:v,libraryReturnUrl:b,theme:y,name:x,renderCustomStats:w,UIOptions:A,onPaste:k,detectScroll:E,handleKeyboardGlobally:O,onLibraryChange:M,autoFocus:P})})},Lh=function(e,t){e.initialData;var n=e.UIOptions,r=void 0===n?{}:n,a=o()(e,Mh),i=(t.initialData,t.UIOptions),l=void 0===i?{}:i,s=o()(t,Ih),c=Object.keys(r),u=Object.keys(l);if(c.length!==u.length)return!1;var d=c.every((function(e){\"canvasActions\"===e&&Object.keys(r.canvasActions).every((function(e){var t,n,o,a;return\"export\"===e&&null!=r&&null!==(t=r.canvasActions)&&void 0!==t&&t.export&&null!=l&&null!==(n=l.canvasActions)&&void 0!==n&&n.export?r.canvasActions.export.saveFileToDisk===l.canvasActions.export.saveFileToDisk:(null==r||null===(o=r.canvasActions)||void 0===o?void 0:o[e])===(null==l||null===(a=l.canvasActions)||void 0===a?void 0:a[e])}));return!0})),p=Object.keys(e),f=Object.keys(t);return d&&p.length===f.length&&p.every((function(e){return a[e]===s[e]}))},_h=(0,l.forwardRef)((function(e,t){return(0,_.jsx)(Ah,Th(Th({},e),{},{excalidrawRef:t}))})),Dh=s().memo(_h,Lh),zh=(n(8336),Dh)},4698:function(t){\"use strict\";t.exports=e},6207:function(e){\"use strict\";e.exports=t},8950:function(e,t,n){\"use strict\";function r(e,t,n,r,o,a,i){try{var l=e[a](i),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function o(e){return function(){var t=this,n=arguments;return new Promise((function(o,a){var i=e.apply(t,n);function l(e){r(i,o,a,l,s,\"next\",e)}function s(e){r(i,o,a,l,s,\"throw\",e)}l(void 0)}))}}n.d(t,{Z:function(){return o}})},1463:function(e){\"use strict\";e.exports=JSON.parse('{\"labels\":{\"paste\":\"Paste\",\"pasteCharts\":\"Paste charts\",\"selectAll\":\"Select all\",\"multiSelect\":\"Add element to selection\",\"moveCanvas\":\"Move canvas\",\"cut\":\"Cut\",\"copy\":\"Copy\",\"copyAsPng\":\"Copy to clipboard as PNG\",\"copyAsSvg\":\"Copy to clipboard as SVG\",\"bringForward\":\"Bring forward\",\"sendToBack\":\"Send to back\",\"bringToFront\":\"Bring to front\",\"sendBackward\":\"Send backward\",\"delete\":\"Delete\",\"copyStyles\":\"Copy styles\",\"pasteStyles\":\"Paste styles\",\"stroke\":\"Stroke\",\"background\":\"Background\",\"fill\":\"Fill\",\"strokeWidth\":\"Stroke width\",\"strokeShape\":\"Stroke shape\",\"strokeShape_gel\":\"Gel pen\",\"strokeShape_fountain\":\"Fountain pen\",\"strokeShape_brush\":\"Brush pen\",\"strokeStyle\":\"Stroke style\",\"strokeStyle_solid\":\"Solid\",\"strokeStyle_dashed\":\"Dashed\",\"strokeStyle_dotted\":\"Dotted\",\"sloppiness\":\"Sloppiness\",\"opacity\":\"Opacity\",\"textAlign\":\"Text align\",\"edges\":\"Edges\",\"sharp\":\"Sharp\",\"round\":\"Round\",\"arrowheads\":\"Arrowheads\",\"arrowhead_none\":\"None\",\"arrowhead_arrow\":\"Arrow\",\"arrowhead_bar\":\"Bar\",\"arrowhead_dot\":\"Dot\",\"fontSize\":\"Font size\",\"fontFamily\":\"Font family\",\"onlySelected\":\"Only selected\",\"withBackground\":\"Background\",\"exportEmbedScene\":\"Embed scene\",\"exportEmbedScene_details\":\"Scene data will be saved into the exported PNG\/SVG file so that the scene can be restored from it.\\\\nWill increase exported file size.\",\"addWatermark\":\"Add \\\\\"Made with Excalidraw\\\\\"\",\"handDrawn\":\"Hand-drawn\",\"normal\":\"Normal\",\"code\":\"Code\",\"small\":\"Small\",\"medium\":\"Medium\",\"large\":\"Large\",\"veryLarge\":\"Very large\",\"solid\":\"Solid\",\"hachure\":\"Hachure\",\"crossHatch\":\"Cross-hatch\",\"thin\":\"Thin\",\"bold\":\"Bold\",\"left\":\"Left\",\"center\":\"Center\",\"right\":\"Right\",\"extraBold\":\"Extra bold\",\"architect\":\"Architect\",\"artist\":\"Artist\",\"cartoonist\":\"Cartoonist\",\"fileTitle\":\"File name\",\"colorPicker\":\"Color picker\",\"canvasBackground\":\"Canvas background\",\"drawingCanvas\":\"Drawing canvas\",\"layers\":\"Layers\",\"actions\":\"Actions\",\"language\":\"Language\",\"liveCollaboration\":\"Live collaboration\",\"duplicateSelection\":\"Duplicate\",\"untitled\":\"Untitled\",\"name\":\"Name\",\"yourName\":\"Your name\",\"madeWithExcalidraw\":\"Made with Excalidraw\",\"group\":\"Group selection\",\"ungroup\":\"Ungroup selection\",\"collaborators\":\"Collaborators\",\"showGrid\":\"Show grid\",\"addToLibrary\":\"Add to library\",\"removeFromLibrary\":\"Remove from library\",\"libraryLoadingMessage\":\"Loading library\u2026\",\"libraries\":\"Browse libraries\",\"loadingScene\":\"Loading scene\u2026\",\"align\":\"Align\",\"alignTop\":\"Align top\",\"alignBottom\":\"Align bottom\",\"alignLeft\":\"Align left\",\"alignRight\":\"Align right\",\"centerVertically\":\"Center vertically\",\"centerHorizontally\":\"Center horizontally\",\"distributeHorizontally\":\"Distribute horizontally\",\"distributeVertically\":\"Distribute vertically\",\"flipHorizontal\":\"Flip horizontal\",\"flipVertical\":\"Flip vertical\",\"viewMode\":\"View mode\",\"toggleExportColorScheme\":\"Toggle export color scheme\",\"share\":\"Share\",\"showStroke\":\"Show stroke color picker\",\"showBackground\":\"Show background color picker\",\"toggleTheme\":\"Toggle theme\"},\"buttons\":{\"clearReset\":\"Reset the canvas\",\"exportJSON\":\"Export to file\",\"exportImage\":\"Save as image\",\"export\":\"Export\",\"exportToPng\":\"Export to PNG\",\"exportToSvg\":\"Export to SVG\",\"copyToClipboard\":\"Copy to clipboard\",\"copyPngToClipboard\":\"Copy PNG to clipboard\",\"scale\":\"Scale\",\"save\":\"Save to current file\",\"saveAs\":\"Save as\",\"load\":\"Load\",\"getShareableLink\":\"Get shareable link\",\"close\":\"Close\",\"selectLanguage\":\"Select language\",\"scrollBackToContent\":\"Scroll back to content\",\"zoomIn\":\"Zoom in\",\"zoomOut\":\"Zoom out\",\"resetZoom\":\"Reset zoom\",\"menu\":\"Menu\",\"done\":\"Done\",\"edit\":\"Edit\",\"undo\":\"Undo\",\"redo\":\"Redo\",\"resetLibrary\":\"Reset library\",\"createNewRoom\":\"Create new room\",\"fullScreen\":\"Full screen\",\"darkMode\":\"Dark mode\",\"lightMode\":\"Light mode\",\"zenMode\":\"Zen mode\",\"exitZenMode\":\"Exit zen mode\"},\"alerts\":{\"clearReset\":\"This will clear the whole canvas. Are you sure?\",\"couldNotCreateShareableLink\":\"Couldn\\'t create shareable link.\",\"couldNotCreateShareableLinkTooBig\":\"Couldn\\'t create shareable link: the scene is too big\",\"couldNotLoadInvalidFile\":\"Couldn\\'t load invalid file\",\"importBackendFailed\":\"Importing from backend failed.\",\"cannotExportEmptyCanvas\":\"Cannot export empty canvas.\",\"couldNotCopyToClipboard\":\"Couldn\\'t copy to clipboard. Try using Chrome browser.\",\"decryptFailed\":\"Couldn\\'t decrypt data.\",\"uploadedSecurly\":\"The upload has been secured with end-to-end encryption, which means that Excalidraw server and third parties can\\'t read the content.\",\"loadSceneOverridePrompt\":\"Loading external drawing will replace your existing content. Do you wish to continue?\",\"collabStopOverridePrompt\":\"Stopping the session will overwrite your previous, locally stored drawing. Are you sure?\\\\n\\\\n(If you want to keep your local drawing, simply close the browser tab instead.)\",\"errorLoadingLibrary\":\"There was an error loading the third party library.\",\"errorAddingToLibrary\":\"Couldn\\'t add item to the library\",\"errorRemovingFromLibrary\":\"Couldn\\'t remove item from the library\",\"confirmAddLibrary\":\"This will add {{numShapes}} shape(s) to your library. Are you sure?\",\"imageDoesNotContainScene\":\"Importing images isn\\'t supported at the moment.\\\\n\\\\nDid you want to import a scene? This image does not seem to contain any scene data. Have you enabled this during export?\",\"cannotRestoreFromImage\":\"Scene couldn\\'t be restored from this image file\",\"invalidSceneUrl\":\"Couldn\\'t import scene from the supplied URL. It\\'s either malformed, or doesn\\'t contain valid Excalidraw JSON data.\",\"resetLibrary\":\"This will clear your library. Are you sure?\",\"invalidEncryptionKey\":\"Encryption key must be of 22 characters. Live collaboration is disabled.\"},\"toolBar\":{\"selection\":\"Selection\",\"rectangle\":\"Rectangle\",\"diamond\":\"Diamond\",\"ellipse\":\"Ellipse\",\"arrow\":\"Arrow\",\"line\":\"Line\",\"freedraw\":\"Draw\",\"text\":\"Text\",\"library\":\"Library\",\"lock\":\"Keep selected tool active after drawing\"},\"headings\":{\"canvasActions\":\"Canvas actions\",\"selectedShapeActions\":\"Selected shape actions\",\"shapes\":\"Shapes\"},\"hints\":{\"linearElement\":\"Click to start multiple points, drag for single line\",\"freeDraw\":\"Click and drag, release when you\\'re finished\",\"text\":\"Tip: you can also add text by double-clicking anywhere with the selection tool\",\"text_selected\":\"Double-click or press ENTER to edit text\",\"text_editing\":\"Press Escape or CtrlOrCmd+ENTER to finish editing\",\"linearElementMulti\":\"Click on last point or press Escape or Enter to finish\",\"lockAngle\":\"You can constrain angle by holding SHIFT\",\"resize\":\"You can constrain proportions by holding SHIFT while resizing,\\\\nhold ALT to resize from the center\",\"rotate\":\"You can constrain angles by holding SHIFT while rotating\",\"lineEditor_info\":\"Double-click or press Enter to edit points\",\"lineEditor_pointSelected\":\"Press Delete to remove point, CtrlOrCmd+D to duplicate, or drag to move\",\"lineEditor_nothingSelected\":\"Select a point to move or remove, or hold Alt and click to add new points\"},\"canvasError\":{\"cannotShowPreview\":\"Cannot show preview\",\"canvasTooBig\":\"The canvas may be too big.\",\"canvasTooBigTip\":\"Tip: try moving the farthest elements a bit closer together.\"},\"errorSplash\":{\"headingMain_pre\":\"Encountered an error. Try \",\"headingMain_button\":\"reloading the page.\",\"clearCanvasMessage\":\"If reloading doesn\\'t work, try \",\"clearCanvasMessage_button\":\"clearing the canvas.\",\"clearCanvasCaveat\":\" This will result in loss of work \",\"trackedToSentry_pre\":\"The error with identifier \",\"trackedToSentry_post\":\" was tracked on our system.\",\"openIssueMessage_pre\":\"We were very cautious not to include your scene information on the error. If your scene is not private, please consider following up on our \",\"openIssueMessage_button\":\"bug tracker.\",\"openIssueMessage_post\":\" Please include information below by copying and pasting into the GitHub issue.\",\"sceneContent\":\"Scene content:\"},\"roomDialog\":{\"desc_intro\":\"You can invite people to your current scene to collaborate with you.\",\"desc_privacy\":\"Don\\'t worry, the session uses end-to-end encryption, so whatever you draw will stay private. Not even our server will be able to see what you come up with.\",\"button_startSession\":\"Start session\",\"button_stopSession\":\"Stop session\",\"desc_inProgressIntro\":\"Live-collaboration session is now in progress.\",\"desc_shareLink\":\"Share this link with anyone you want to collaborate with:\",\"desc_exitSession\":\"Stopping the session will disconnect you from the room, but you\\'ll be able to continue working with the scene, locally. Note that this won\\'t affect other people, and they\\'ll still be able to collaborate on their version.\",\"shareTitle\":\"Join a live collaboration session on Excalidraw\"},\"errorDialog\":{\"title\":\"Error\"},\"exportDialog\":{\"disk_title\":\"Save to disk\",\"disk_details\":\"Export the scene data to a file from which you can import later.\",\"disk_button\":\"Save to file\",\"link_title\":\"Shareable link\",\"link_details\":\"Export as a read-only link.\",\"link_button\":\"Export to Link\",\"excalidrawplus_description\":\"Save the scene to your Excalidraw+ workspace.\",\"excalidrawplus_button\":\"Export\",\"excalidrawplus_exportError\":\"Couldn\\'t export to Excalidraw+ at this moment...\"},\"helpDialog\":{\"blog\":\"Read our blog\",\"click\":\"click\",\"curvedArrow\":\"Curved arrow\",\"curvedLine\":\"Curved line\",\"documentation\":\"Documentation\",\"doubleClick\":\"double-click\",\"drag\":\"drag\",\"editor\":\"Editor\",\"editSelectedShape\":\"Edit selected shape (text\/arrow\/line)\",\"github\":\"Found an issue? Submit\",\"howto\":\"Follow our guides\",\"or\":\"or\",\"preventBinding\":\"Prevent arrow binding\",\"shapes\":\"Shapes\",\"shortcuts\":\"Keyboard shortcuts\",\"textFinish\":\"Finish editing (text editor)\",\"textNewLine\":\"Add new line (text editor)\",\"title\":\"Help\",\"view\":\"View\",\"zoomToFit\":\"Zoom to fit all elements\",\"zoomToSelection\":\"Zoom to selection\"},\"encrypted\":{\"tooltip\":\"Your drawings are end-to-end encrypted so Excalidraw\\'s servers will never see them.\",\"link\":\"Blog post on end-to-end encryption in Excalidraw\"},\"stats\":{\"angle\":\"Angle\",\"element\":\"Element\",\"elements\":\"Elements\",\"height\":\"Height\",\"scene\":\"Scene\",\"selected\":\"Selected\",\"storage\":\"Storage\",\"title\":\"Stats for nerds\",\"total\":\"Total\",\"version\":\"Version\",\"versionCopy\":\"Click to copy\",\"versionNotAvailable\":\"Version not available\",\"width\":\"Width\"},\"toast\":{\"copyStyles\":\"Copied styles.\",\"copyToClipboard\":\"Copied to clipboard.\",\"copyToClipboardAsPng\":\"Copied {{exportSelection}} to clipboard as PNG\\\\n({{exportColorScheme}})\",\"fileSaved\":\"File saved.\",\"fileSavedToFilename\":\"Saved to {filename}\",\"canvas\":\"canvas\",\"selection\":\"selection\"},\"colors\":{\"495057\":\"Gray 7\",\"ffffff\":\"White\",\"f8f9fa\":\"Gray 0\",\"f1f3f5\":\"Gray 1\",\"fff5f5\":\"Red 0\",\"fff0f6\":\"Pink 0\",\"f8f0fc\":\"Grape 0\",\"f3f0ff\":\"Violet 0\",\"edf2ff\":\"Indigo 0\",\"e7f5ff\":\"Blue 0\",\"e3fafc\":\"Cyan 0\",\"e6fcf5\":\"Teal 0\",\"ebfbee\":\"Green 0\",\"f4fce3\":\"Lime 0\",\"fff9db\":\"Yellow 0\",\"fff4e6\":\"Orange 0\",\"transparent\":\"Transparent\",\"ced4da\":\"Gray 4\",\"868e96\":\"Gray 6\",\"fa5252\":\"Red 6\",\"e64980\":\"Pink 6\",\"be4bdb\":\"Grape 6\",\"7950f2\":\"Violet 6\",\"4c6ef5\":\"Indigo 6\",\"228be6\":\"Blue 6\",\"15aabf\":\"Cyan 6\",\"12b886\":\"Teal 6\",\"40c057\":\"Green 6\",\"82c91e\":\"Lime 6\",\"fab005\":\"Yellow 6\",\"fd7e14\":\"Orange 6\",\"000000\":\"Black\",\"343a40\":\"Gray 8\",\"c92a2a\":\"Red 9\",\"a61e4d\":\"Pink 9\",\"862e9c\":\"Grape 9\",\"5f3dc4\":\"Violet 9\",\"364fc7\":\"Indigo 9\",\"1864ab\":\"Blue 9\",\"0b7285\":\"Cyan 9\",\"087f5b\":\"Teal 9\",\"2b8a3e\":\"Green 9\",\"5c940d\":\"Lime 9\",\"e67700\":\"Yellow 9\",\"d9480f\":\"Orange 9\"}}')},4451:function(e){\"use strict\";e.exports=JSON.parse('{\"ar-SA\":100,\"bg-BG\":68,\"ca-ES\":84,\"cs-CZ\":29,\"da-DK\":20,\"de-DE\":100,\"el-GR\":74,\"en\":100,\"es-ES\":100,\"fa-IR\":77,\"fi-FI\":100,\"fr-FR\":100,\"he-IL\":99,\"hi-IN\":67,\"hu-HU\":60,\"id-ID\":100,\"it-IT\":100,\"ja-JP\":100,\"kab-KAB\":93,\"kk-KZ\":26,\"ko-KR\":68,\"lv-LV\":14,\"my-MM\":56,\"nb-NO\":100,\"nl-NL\":100,\"nn-NO\":74,\"oc-FR\":100,\"pa-IN\":99,\"pl-PL\":70,\"pt-BR\":100,\"pt-PT\":99,\"ro-RO\":100,\"ru-RU\":99,\"sk-SK\":100,\"sv-SE\":100,\"tr-TR\":78,\"uk-UA\":80,\"zh-CN\":100,\"zh-TW\":100}')}},l={};function s(e){var t=l[e];if(void 0!==t)return t.exports;var n=l[e]={id:e,exports:{}};return i[e](n,n.exports,s),n.exports}return s.m=i,s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,{a:t}),t},r=Object.getPrototypeOf?function(e){return Object.getPrototypeOf(e)}:function(e){return e.__proto__},s.t=function(e,t){if(1&t&&(e=this(e)),8&t)return e;if(\"object\"==typeof e&&e){if(4&t&&e.__esModule)return e;if(16&t&&\"function\"==typeof e.then)return e}var o=Object.create(null);s.r(o);var a={};n=n||[null,r({}),r([]),r(r)];for(var i=2&t&&e;\"object\"==typeof i&&!~n.indexOf(i);i=r(i))Object.getOwnPropertyNames(i).forEach((function(t){a[t]=function(){return e[t]}}));return a.default=function(){return e},s.d(o,a),o},s.d=function(e,t){for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.f={},s.e=function(e){return Promise.all(Object.keys(s.f).reduce((function(t,n){return s.f[n](e,t),t}),[]))},s.u=function(e){return\"excalidraw-assets\/\"+{9:\"image\",43:\"i18n-de-DE-json\",60:\"i18n-ko-KR-json\",62:\"i18n-zh-TW-json\",137:\"i18n-ja-JP-json\",149:\"i18n-pt-PT-json\",164:\"i18n-kab-KAB-json\",196:\"i18n-nl-NL-json\",213:\"i18n-tr-TR-json\",242:\"i18n-my-MM-json\",246:\"i18n-nb-NO-json\",262:\"i18n-he-IL-json\",280:\"i18n-pa-IN-json\",304:\"i18n-zh-CN-json\",317:\"i18n-es-ES-json\",351:\"i18n-ca-ES-json\",364:\"i18n-fr-FR-json\",381:\"i18n-pt-BR-json\",384:\"i18n-bg-BG-json\",387:\"i18n-cs-CZ-json\",401:\"i18n-sk-SK-json\",465:\"i18n-it-IT-json\",472:\"i18n-fi-FI-json\",491:\"i18n-id-ID-json\",526:\"i18n-el-GR-json\",558:\"i18n-ar-SA-json\",565:\"i18n-oc-FR-json\",583:\"i18n-uk-UA-json\",617:\"i18n-da-DK-json\",649:\"i18n-kk-KZ-json\",661:\"i18n-hu-HU-json\",698:\"i18n-sv-SE-json\",710:\"i18n-fa-IR-json\",736:\"vendor\",752:\"i18n-ro-RO-json\",852:\"i18n-pl-PL-json\",869:\"i18n-ru-RU-json\",899:\"i18n-lv-LV-json\",920:\"i18n-nn-NO-json\",933:\"i18n-hi-IN-json\"}[e]+\"-\"+{9:\"02a1f3ecd6baf42daaa6\",43:\"2984c3ea70efb6a7673c\",60:\"530261d88e915f413822\",62:\"93a8203eb30054101fcc\",137:\"10da607a92dd9ee4b6b1\",149:\"fb8bc9b15f2d232ce452\",164:\"72dfe5e520fb843a911e\",196:\"220f20ddbd7092a3a948\",213:\"60da00067a54eacae6ea\",242:\"9c8f0251105b94363a8f\",246:\"102950eb1c0d17b2be82\",262:\"c22c852f5d1007b76cfd\",280:\"b7ad703689a54409b91a\",304:\"9b20d01d442a9938174a\",317:\"770832e8199e76bcea31\",351:\"6f613ec62c184eed761c\",364:\"7e2c395dc072fbeb4dc8\",381:\"5eb00d985874b4016992\",384:\"63af3f6053ca50d0c1a3\",387:\"c485bdbc1ad44e51f1f1\",401:\"4fc55e97187d84b3e35f\",465:\"55de4a420bc2799d63ac\",472:\"1856fe5f0aa5f6733c71\",491:\"36ef4139fdc39bd473e9\",526:\"ef1babaff2ea7b0ca48c\",558:\"a98b3a07a69a56aa6ddc\",565:\"3fb584025bb45201012f\",583:\"3398bd8076ace43903a4\",617:\"fdc74fe43abb7f09253d\",649:\"72a00814a5ea1bc1bd4d\",661:\"2173dae4a84d3f943a3d\",698:\"5fd1ff062cab18b6c3ec\",710:\"5d17bed42e8aa3e26778\",736:\"881ef50682618d9bd3d3\",752:\"dc651de2037f6a904212\",852:\"589514e9da02be71829e\",869:\"1620932d8cf3b49dbac7\",899:\"efdf3550b88b63639a73\",920:\"5b64fbe09ec2fdc5c686\",933:\"3577c3ff017e2af147ee\"}[e]+\".js\"},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o={},a=\"Excalidraw:\",s.l=function(e,t,n,r){if(o[e])o[e].push(t);else{var i,l;if(void 0!==n)for(var c=document.getElementsByTagName(\"script\"),u=0;u<c.length;u++){var d=c[u];if(d.getAttribute(\"src\")==e||d.getAttribute(\"data-webpack\")==a+n){i=d;break}}i||(l=!0,(i=document.createElement(\"script\")).charset=\"utf-8\",i.timeout=120,s.nc&&i.setAttribute(\"nonce\",s.nc),i.setAttribute(\"data-webpack\",a+n),i.src=e),o[e]=[t];var p=function(t,n){i.onerror=i.onload=null,clearTimeout(f);var r=o[e];if(delete o[e],i.parentNode&&i.parentNode.removeChild(i),r&&r.forEach((function(e){return e(n)})),t)return t(n)},f=setTimeout(p.bind(null,void 0,{type:\"timeout\",target:i}),12e4);i.onerror=p.bind(null,i.onerror),i.onload=p.bind(null,i.onload),l&&document.head.appendChild(i)}},s.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},s.p=\"\",function(){var e={388:0};s.f.j=function(t,n){var r=s.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var o=new Promise((function(n,o){r=e[t]=[n,o]}));n.push(r[2]=o);var a=s.p+s.u(t),i=new Error;s.l(a,(function(n){if(s.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var o=n&&(\"load\"===n.type?\"missing\":n.type),a=n&&n.target&&n.target.src;i.message=\"Loading chunk \"+t+\" failed.\\n(\"+o+\": \"+a+\")\",i.name=\"ChunkLoadError\",i.type=o,i.request=a,r[1](i)}}),\"chunk-\"+t,t)}};var t=function(t,n){var r,o,a=n[0],i=n[1],l=n[2],c=0;for(r in i)s.o(i,r)&&(s.m[r]=i[r]);if(l)l(s);for(t&&t(n);c<a.length;c++)o=a[c],s.o(e,o)&&e[o]&&e[o][0](),e[a[c]]=0},n=self.webpackChunkExcalidraw=self.webpackChunkExcalidraw||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))}(),s(21)}()}));\n};","(ns frontend.rum\n  (:require [clojure.string :as s]\n            [clojure.set :as set]\n            [clojure.walk :as w]\n            [rum.core :refer [use-state use-effect!] :as rum]\n            [daiquiri.interpreter :as interpreter]\n            [cljs-bean.core :as bean]))\n\n;; copy from https:\/\/github.com\/priornix\/antizer\/blob\/35ba264cf48b84e6597743e28b3570d8aa473e74\/src\/antizer\/core.cljs\n\n(defn kebab-case->camel-case\n  \"Converts from kebab case to camel case, eg: on-click to onClick\"\n  [input]\n  (let [words (s\/split input #\"-\")\n        capitalize (->> (rest words)\n                        (map #(apply str (s\/upper-case (first %)) (rest %))))]\n    (apply str (first words) capitalize)))\n\n(defn map-keys->camel-case\n  \"Stringifys all the keys of a cljs hashmap and converts them\n   from kebab case to camel case. If :html-props option is specified,\n   then rename the html properties values to their dom equivalent\n   before conversion\"\n  [data & {:keys [html-props]}]\n  (let [convert-to-camel (fn [[key value]]\n                           [(kebab-case->camel-case (name key)) value])]\n    (w\/postwalk (fn [x]\n                  (if (map? x)\n                    (let [new-map (if html-props\n                                    (set\/rename-keys x {:class :className :for :htmlFor})\n                                    x)]\n                      (into {} (map convert-to-camel new-map)))\n                    x))\n                data)))\n\n;; adapted from https:\/\/github.com\/tonsky\/rum\/issues\/20\n(defn adapt-class\n  ([react-class]\n   (adapt-class react-class false))\n  ([react-class skip-opts-transform?]\n   (fn [& args]\n    (let [[opts children] (if (map? (first args))\n                            [(first args) (rest args)]\n                            [{} args])\n          type# (first children)\n          ;; we have to make sure to check if the children is sequential\n          ;; as a list can be returned, eg: from a (for)\n          new-children (if (sequential? type#)\n                         (let [result (interpreter\/interpret children)]\n                           (if (sequential? result)\n                             result\n                             [result]))\n                         children)\n          ;; convert any options key value to a react element, if\n          ;; a valid html element tag is used, using sablono\n          vector->react-elems (fn [[key val]]\n                                (if (sequential? val)\n                                  [key (daiquiri.interpreter\/interpret val)]\n                                  [key val]))\n          new-options (into {}\n                            (if skip-opts-transform?\n                              opts\n                              (map vector->react-elems opts)))]\n      (apply js\/React.createElement react-class\n        ;; sablono html-to-dom-attrs does not work for nested hashmaps\n        (bean\/->js (map-keys->camel-case new-options :html-props true))\n        new-children)))))\n\n(defn use-atom-fn\n  [a getter-fn setter-fn]\n  (let [[val set-val] (use-state (getter-fn @a))]\n    (use-effect!\n      (fn []\n        (let [id (str (random-uuid))]\n          (add-watch a id (fn [_ _ prev-state next-state]\n                            (let [prev-value (getter-fn prev-state)\n                                  next-value (getter-fn next-state)]\n                              (when-not (= prev-value next-value)\n                                (set-val next-value)))))\n          #(remove-watch a id)))\n      [])\n    [val #(swap! a setter-fn %)]))\n\n(defn use-atom\n  \"(use-atom my-atom)\"\n  [a]\n  (use-atom-fn a identity (fn [_ v] v)))\n\n(defn use-mounted\n  []\n  (let [*mounted (rum\/use-ref false)]\n    (use-effect!\n      (fn []\n         (rum\/set-ref! *mounted true)\n         #(rum\/set-ref! *mounted false))\n       [])\n    #(rum\/deref *mounted)))\n","\/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n *\/\n\n\/**\n * @fileoverview Utilities for manipulating objects\/maps\/hashes.\n *\/\ngoog.module('goog.object');\ngoog.module.declareLegacyNamespace();\n\n\/**\n * Calls a function for each element in an object\/map\/hash.\n * @param {?Object<K,V>} obj The object over which to iterate.\n * @param {function(this:T,V,?,?Object<K,V>):?} f The function to call for every\n *     element. This function takes 3 arguments (the value, the key and the\n *     object) and the return value is ignored.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {void}\n * @template T,K,V\n *\/\nfunction forEach(obj, f, opt_obj) {\n  for (const key in obj) {\n    f.call(\/** @type {?} *\/ (opt_obj), obj[key], key, obj);\n  }\n}\n\n\/**\n * Calls a function for each element in an object\/map\/hash. If that call returns\n * true, adds the element to a new object.\n * @param {?Object<K,V>} obj The object over which to iterate.\n * @param {function(this:T,V,?,?Object<K,V>):boolean} f The function to call for\n *     every element. This function takes 3 arguments (the value, the key and\n *     the object) and should return a boolean. If the return value is true the\n *     element is added to the result object. If it is false the element is not\n *     included.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {!Object<K,V>} a new object in which only elements that passed the\n *     test are present.\n * @template T,K,V\n *\/\nfunction filter(obj, f, opt_obj) {\n  const res = {};\n  for (const key in obj) {\n    if (f.call(\/** @type {?} *\/ (opt_obj), obj[key], key, obj)) {\n      res[key] = obj[key];\n    }\n  }\n  return res;\n}\n\n\/**\n * For every element in an object\/map\/hash calls a function and inserts the\n * result into a new object.\n * @param {?Object<K,V>} obj The object over which to iterate.\n * @param {function(this:T,V,?,?Object<K,V>):R} f The function to call for every\n *     element. This function takes 3 arguments (the value, the key and the\n *     object) and should return something. The result will be inserted into a\n *     new object.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {!Object<K,R>} a new object with the results from f.\n * @template T,K,V,R\n *\/\nfunction map(obj, f, opt_obj) {\n  const res = {};\n  for (const key in obj) {\n    res[key] = f.call(\/** @type {?} *\/ (opt_obj), obj[key], key, obj);\n  }\n  return res;\n}\n\n\/**\n * Calls a function for each element in an object\/map\/hash. If any\n * call returns true, returns true (without checking the rest). If\n * all calls return false, returns false.\n * @param {?Object<K,V>} obj The object to check.\n * @param {function(this:T,V,?,?Object<K,V>):boolean} f The function to call for\n *     every element. This function takes 3 arguments (the value, the key and\n *     the object) and should return a boolean.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {boolean} true if any element passes the test.\n * @template T,K,V\n *\/\nfunction some(obj, f, opt_obj) {\n  for (const key in obj) {\n    if (f.call(\/** @type {?} *\/ (opt_obj), obj[key], key, obj)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n\/**\n * Calls a function for each element in an object\/map\/hash. If\n * all calls return true, returns true. If any call returns false, returns\n * false at this point and does not continue to check the remaining elements.\n * @param {?Object<K,V>} obj The object to check.\n * @param {?function(this:T,V,?,?Object<K,V>):boolean} f The function to call\n *     for every element. This function takes 3 arguments (the value, the key\n *     and the object) and should return a boolean.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {boolean} false if any element fails the test.\n * @template T,K,V\n *\/\nfunction every(obj, f, opt_obj) {\n  for (const key in obj) {\n    if (!f.call(\/** @type {?} *\/ (opt_obj), obj[key], key, obj)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\/**\n * Returns the number of key-value pairs in the object map.\n * @param {?Object} obj The object for which to get the number of key-value\n *     pairs.\n * @return {number} The number of key-value pairs in the object map.\n *\/\nfunction getCount(obj) {\n  let rv = 0;\n  for (const key in obj) {\n    rv++;\n  }\n  return rv;\n}\n\n\/**\n * Returns one key from the object map, if any exists.\n * For map literals the returned key will be the first one in most of the\n * browsers (a know exception is Konqueror).\n * @param {?Object} obj The object to pick a key from.\n * @return {string|undefined} The key or undefined if the object is empty.\n *\/\nfunction getAnyKey(obj) {\n  for (const key in obj) {\n    return key;\n  }\n}\n\n\/**\n * Returns one value from the object map, if any exists.\n * For map literals the returned value will be the first one in most of the\n * browsers (a know exception is Konqueror).\n * @param {?Object<K,V>} obj The object to pick a value from.\n * @return {V|undefined} The value or undefined if the object is empty.\n * @template K,V\n *\/\nfunction getAnyValue(obj) {\n  for (const key in obj) {\n    return obj[key];\n  }\n}\n\n\/**\n * Whether the object\/hash\/map contains the given object as a value.\n * An alias for containsValue(obj, val).\n * @param {?Object<K,V>} obj The object in which to look for val.\n * @param {V} val The object for which to check.\n * @return {boolean} true if val is present.\n * @template K,V\n *\/\nfunction contains(obj, val) {\n  return containsValue(obj, val);\n}\n\n\/**\n * Returns the values of the object\/map\/hash.\n * @param {?Object<K,V>} obj The object from which to get the values.\n * @return {!Array<V>} The values in the object\/map\/hash.\n * @template K,V\n *\/\nfunction getValues(obj) {\n  const res = [];\n  let i = 0;\n  for (const key in obj) {\n    res[i++] = obj[key];\n  }\n  return res;\n}\n\n\/**\n * Returns the keys of the object\/map\/hash.\n * @param {?Object} obj The object from which to get the keys.\n * @return {!Array<string>} Array of property keys.\n *\/\nfunction getKeys(obj) {\n  const res = [];\n  let i = 0;\n  for (const key in obj) {\n    res[i++] = key;\n  }\n  return res;\n}\n\n\/**\n * Get a value from an object multiple levels deep.  This is useful for\n * pulling values from deeply nested objects, such as JSON responses.\n * Example usage: getValueByKeys(jsonObj, 'foo', 'entries', 3)\n * @param {?Object} obj An object to get the value from. Can be array-like.\n * @param {...(string|number|!IArrayLike<number|string>)} var_args A number of\n *     keys (as strings, or numbers, for array-like objects). Can also be\n *     specified as a single array of keys.\n * @return {*} The resulting value. If, at any point, the value for a key in the\n *     current object is null or undefined, returns undefined.\n *\/\nfunction getValueByKeys(obj, var_args) {\n  const isArrayLike = goog.isArrayLike(var_args);\n  const keys = isArrayLike ?\n      \/** @type {!IArrayLike<number|string>} *\/ (var_args) :\n      arguments;\n\n  \/\/ Start with the 2nd parameter for the variable parameters syntax.\n  for (let i = isArrayLike ? 0 : 1; i < keys.length; i++) {\n    if (obj == null) return undefined;\n    obj = obj[keys[i]];\n  }\n\n  return obj;\n}\n\n\/**\n * Whether the object\/map\/hash contains the given key.\n * @param {?Object} obj The object in which to look for key.\n * @param {?} key The key for which to check.\n * @return {boolean} true If the map contains the key.\n *\/\nfunction containsKey(obj, key) {\n  return obj !== null && key in obj;\n}\n\n\/**\n * Whether the object\/map\/hash contains the given value. This is O(n).\n * @param {?Object<K,V>} obj The object in which to look for val.\n * @param {V} val The value for which to check.\n * @return {boolean} true If the map contains the value.\n * @template K,V\n *\/\nfunction containsValue(obj, val) {\n  for (const key in obj) {\n    if (obj[key] == val) {\n      return true;\n    }\n  }\n  return false;\n}\n\n\/**\n * Searches an object for an element that satisfies the given condition and\n * returns its key.\n * @param {?Object<K,V>} obj The object to search in.\n * @param {function(this:T,V,string,?Object<K,V>):boolean} f The function to\n *     call for every element. Takes 3 arguments (the value, the key and the\n *     object) and should return a boolean.\n * @param {T=} thisObj An optional \"this\" context for the function.\n * @return {string|undefined} The key of an element for which the function\n *     returns true or undefined if no such element is found.\n * @template T,K,V\n *\/\nfunction findKey(obj, f, thisObj = undefined) {\n  for (const key in obj) {\n    if (f.call(\/** @type {?} *\/ (thisObj), obj[key], key, obj)) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\n\/**\n * Searches an object for an element that satisfies the given condition and\n * returns its value.\n * @param {?Object<K,V>} obj The object to search in.\n * @param {function(this:T,V,string,?Object<K,V>):boolean} f The function to\n *     call for every element. Takes 3 arguments (the value, the key and the\n *     object) and should return a boolean.\n * @param {T=} thisObj An optional \"this\" context for the function.\n * @return {V} The value of an element for which the function returns true or\n *     undefined if no such element is found.\n * @template T,K,V\n *\/\nfunction findValue(obj, f, thisObj = undefined) {\n  const key = findKey(obj, f, thisObj);\n  return key && obj[key];\n}\n\n\/**\n * Whether the object\/map\/hash is empty.\n * @param {?Object} obj The object to test.\n * @return {boolean} true if obj is empty.\n *\/\nfunction isEmpty(obj) {\n  for (const key in obj) {\n    return false;\n  }\n  return true;\n}\n\n\/**\n * Removes all key value pairs from the object\/map\/hash.\n * @param {?Object} obj The object to clear.\n * @return {void}\n *\/\nfunction clear(obj) {\n  for (const i in obj) {\n    delete obj[i];\n  }\n}\n\n\/**\n * Removes a key-value pair based on the key.\n * @param {?Object} obj The object from which to remove the key.\n * @param {?} key The key to remove.\n * @return {boolean} Whether an element was removed.\n *\/\nfunction remove(obj, key) {\n  let rv;\n  if (rv = key in \/** @type {!Object} *\/ (obj)) {\n    delete obj[key];\n  }\n  return rv;\n}\n\n\/**\n * Adds a key-value pair to the object. Throws an exception if the key is\n * already in use. Use set if you want to change an existing pair.\n * @param {?Object<K,V>} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {V} val The value to add.\n * @return {void}\n * @template K,V\n *\/\nfunction add(obj, key, val) {\n  if (obj !== null && key in obj) {\n    throw new Error(`The object already contains the key \"${key}\"`);\n  }\n  set(obj, key, val);\n}\n\n\/**\n * Returns the value for the given key.\n * @param {?Object<K,V>} obj The object from which to get the value.\n * @param {string} key The key for which to get the value.\n * @param {R=} val The value to return if no item is found for the given key\n *     (default is undefined).\n * @return {V|R|undefined} The value for the given key.\n * @template K,V,R\n *\/\nfunction get(obj, key, val = undefined) {\n  if (obj !== null && key in obj) {\n    return obj[key];\n  }\n  return val;\n}\n\n\/**\n * Adds a key-value pair to the object\/map\/hash.\n * @param {?Object<K,V>} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {V} value The value to add.\n * @template K,V\n * @return {void}\n *\/\nfunction set(obj, key, value) {\n  obj[key] = value;\n}\n\n\/**\n * Adds a key-value pair to the object\/map\/hash if it doesn't exist yet.\n * @param {?Object<K,V>} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {V} value The value to add if the key wasn't present.\n * @return {V} The value of the entry at the end of the function.\n * @template K,V\n *\/\nfunction setIfUndefined(obj, key, value) {\n  return key in \/** @type {!Object} *\/ (obj) ? obj[key] : (obj[key] = value);\n}\n\n\/**\n * Sets a key and value to an object if the key is not set. The value will be\n * the return value of the given function. If the key already exists, the\n * object will not be changed and the function will not be called (the function\n * will be lazily evaluated -- only called if necessary).\n * This function is particularly useful when used with an `Object` which is\n * acting as a cache.\n * @param {?Object<K,V>} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {function():V} f The value to add if the key wasn't present.\n * @return {V} The value of the entry at the end of the function.\n * @template K,V\n *\/\nfunction setWithReturnValueIfNotSet(obj, key, f) {\n  if (key in obj) {\n    return obj[key];\n  }\n\n  const val = f();\n  obj[key] = val;\n  return val;\n}\n\n\/**\n * Compares two objects for equality using === on the values.\n * @param {!Object<K,V>} a\n * @param {!Object<K,V>} b\n * @return {boolean}\n * @template K,V\n *\/\nfunction equals(a, b) {\n  for (const k in a) {\n    if (!(k in b) || a[k] !== b[k]) {\n      return false;\n    }\n  }\n  for (const k in b) {\n    if (!(k in a)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\/**\n * Returns a shallow clone of the object.\n * @param {?Object<K,V>} obj Object to clone.\n * @return {!Object<K,V>} Clone of the input object.\n * @template K,V\n *\/\nfunction clone(obj) {\n  const res = {};\n  for (const key in obj) {\n    res[key] = obj[key];\n  }\n  return res;\n}\n\n\/**\n * Clones a value. The input may be an Object, Array, or basic type. Objects and\n * arrays will be cloned recursively.\n * WARNINGS:\n * <code>unsafeClone<\/code> does not detect reference loops. Objects\n * that refer to themselves will cause infinite recursion.\n * <code>unsafeClone<\/code> is unaware of unique identifiers, and\n * copies UIDs created by <code>getUid<\/code> into cloned results.\n * @param {T} obj The value to clone.\n * @return {T} A clone of the input value.\n * @template T\n *\/\nfunction unsafeClone(obj) {\n  if (!obj || typeof obj !== 'object') return obj;\n  if (typeof obj.clone === 'function') return obj.clone();\n  if (typeof Map !== 'undefined' && obj instanceof Map) {\n    return new Map(obj);\n  } else if (typeof Set !== 'undefined' && obj instanceof Set) {\n    return new Set(obj);\n  }\n  const clone = Array.isArray(obj) ? [] :\n      typeof ArrayBuffer === 'function' &&\n          typeof ArrayBuffer.isView === 'function' && ArrayBuffer.isView(obj) &&\n          !(obj instanceof DataView) ?\n                                     new obj.constructor(obj.length) :\n                                     {};\n  for (const key in obj) {\n    clone[key] = unsafeClone(obj[key]);\n  }\n  return clone;\n}\n\n\/**\n * Returns a new object in which all the keys and values are interchanged\n * (keys become values and values become keys). If multiple keys map to the\n * same value, the chosen transposed value is implementation-dependent.\n * @param {?Object} obj The object to transpose.\n * @return {!Object} The transposed object.\n *\/\nfunction transpose(obj) {\n  const transposed = {};\n  for (const key in obj) {\n    transposed[obj[key]] = key;\n  }\n  return transposed;\n}\n\n\/**\n * The names of the fields that are defined on Object.prototype.\n * @type {!Array<string>}\n *\/\nconst PROTOTYPE_FIELDS = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf',\n];\n\n\/**\n * Extends an object with another object.\n * This operates 'in-place'; it does not create a new Object.\n * Example:\n * var o = {};\n * extend(o, {a: 0, b: 1});\n * o; \/\/ {a: 0, b: 1}\n * extend(o, {b: 2, c: 3});\n * o; \/\/ {a: 0, b: 2, c: 3}\n * @param {?Object} target The object to modify. Existing properties will be\n *     overwritten if they are also present in one of the objects in `var_args`.\n * @param {...(?Object|undefined)} var_args The objects from which values\n *     will be copied.\n * @return {void}\n * @deprecated Prefer Object.assign\n *\/\nfunction extend(target, var_args) {\n  let key;\n  let source;\n  for (let i = 1; i < arguments.length; i++) {\n    source = arguments[i];\n    for (key in source) {\n      target[key] = source[key];\n    }\n\n    \/\/ For IE the for-in-loop does not contain any properties that are not\n    \/\/ enumerable on the prototype object (for example isPrototypeOf from\n    \/\/ Object.prototype) and it will also not include 'replace' on objects that\n    \/\/ extend String and change 'replace' (not that it is common for anyone to\n    \/\/ extend anything except Object).\n\n    for (let j = 0; j < PROTOTYPE_FIELDS.length; j++) {\n      key = PROTOTYPE_FIELDS[j];\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n}\n\n\/**\n * Creates a new object built from the key-value pairs provided as arguments.\n * @param {...*} var_args If only one argument is provided and it is an array\n *     then this is used as the arguments, otherwise even arguments are used as\n *     the property names and odd arguments are used as the property values.\n * @return {!Object} The new object.\n * @throws {!Error} If there are uneven number of arguments or there is only one\n *     non array argument.\n *\/\nfunction create(var_args) {\n  const argLength = arguments.length;\n  if (argLength == 1 && Array.isArray(arguments[0])) {\n    return create.apply(null, arguments[0]);\n  }\n\n  if (argLength % 2) {\n    throw new Error('Uneven number of arguments');\n  }\n\n  const rv = {};\n  for (let i = 0; i < argLength; i += 2) {\n    rv[arguments[i]] = arguments[i + 1];\n  }\n  return rv;\n}\n\n\/**\n * Creates a new object where the property names come from the arguments but\n * the value is always set to true\n * @param {...*} var_args If only one argument is provided and it is an array\n *     then this is used as the arguments, otherwise the arguments are used as\n *     the property names.\n * @return {!Object} The new object.\n *\/\nfunction createSet(var_args) {\n  const argLength = arguments.length;\n  if (argLength == 1 && Array.isArray(arguments[0])) {\n    return createSet.apply(null, arguments[0]);\n  }\n\n  const rv = {};\n  for (let i = 0; i < argLength; i++) {\n    rv[arguments[i]] = true;\n  }\n  return rv;\n}\n\n\/**\n * Creates an immutable view of the underlying object, if the browser\n * supports immutable objects.\n * In default mode, writes to this view will fail silently. In strict mode,\n * they will throw an error.\n * @param {!Object<K,V>} obj An object.\n * @return {!Object<K,V>} An immutable view of that object, or the original\n *     object if this browser does not support immutables.\n * @template K,V\n *\/\nfunction createImmutableView(obj) {\n  let result = obj;\n  if (Object.isFrozen && !Object.isFrozen(obj)) {\n    result = Object.create(obj);\n    Object.freeze(result);\n  }\n  return result;\n}\n\n\/**\n * @param {!Object} obj An object.\n * @return {boolean} Whether this is an immutable view of the object.\n *\/\nfunction isImmutableView(obj) {\n  return !!Object.isFrozen && Object.isFrozen(obj);\n}\n\n\/**\n * Get all properties names on a given Object regardless of enumerability.\n * <p> If the browser does not support `Object.getOwnPropertyNames` nor\n * `Object.getPrototypeOf` then this is equivalent to using\n * `getKeys`\n * @param {?Object} obj The object to get the properties of.\n * @param {boolean=} includeObjectPrototype Whether properties defined on\n *     `Object.prototype` should be included in the result.\n * @param {boolean=} includeFunctionPrototype Whether properties defined on\n *     `Function.prototype` should be included in the result.\n * @return {!Array<string>}\n * @public\n *\/\nfunction getAllPropertyNames(\n    obj, includeObjectPrototype = undefined,\n    includeFunctionPrototype = undefined) {\n  if (!obj) {\n    return [];\n  }\n\n  \/\/ Naively use a for..in loop to get the property names if the browser doesn't\n  \/\/ support any other APIs for getting it.\n  if (!Object.getOwnPropertyNames || !Object.getPrototypeOf) {\n    return getKeys(obj);\n  }\n\n  const visitedSet = {};\n\n  \/\/ Traverse the prototype chain and add all properties to the visited set.\n  let proto = obj;\n  while (proto && (proto !== Object.prototype || !!includeObjectPrototype) &&\n         (proto !== Function.prototype || !!includeFunctionPrototype)) {\n    const names = Object.getOwnPropertyNames(proto);\n    for (let i = 0; i < names.length; i++) {\n      visitedSet[names[i]] = true;\n    }\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return getKeys(visitedSet);\n}\n\n\/**\n * Given a ES5 or ES6 class reference, return its super class \/ super\n * constructor.\n * This should be used in rare cases where you need to walk up the inheritance\n * tree (this is generally a bad idea). But this work with ES5 and ES6 classes,\n * unlike relying on the superClass_ property.\n * Note: To start walking up the hierarchy from an instance call this with its\n * `constructor` property; e.g. `getSuperClass(instance.constructor)`.\n * @param {function(new: ?)} constructor\n * @return {?Object}\n *\/\nfunction getSuperClass(constructor) {\n  const proto = Object.getPrototypeOf(constructor.prototype);\n  return proto && proto.constructor;\n}\n\nexports = {\n  add,\n  clear,\n  clone,\n  contains,\n  containsKey,\n  containsValue,\n  create,\n  createImmutableView,\n  createSet,\n  equals,\n  every,\n  extend,\n  filter,\n  findKey,\n  findValue,\n  forEach,\n  get,\n  getAllPropertyNames,\n  getAnyKey,\n  getAnyValue,\n  getCount,\n  getKeys,\n  getSuperClass,\n  getValueByKeys,\n  getValues,\n  isEmpty,\n  isImmutableView,\n  map,\n  remove,\n  set,\n  setIfUndefined,\n  setWithReturnValueIfNotSet,\n  some,\n  transpose,\n  unsafeClone,\n};\n",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http:\/\/opensource.org\/licenses\/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.core\n  (:require goog.math.Long\n            goog.math.Integer\n            [goog.string :as gstring]\n            [goog.object :as gobject]\n            [goog.array :as garray]\n            [goog.Uri])\n  (:import [goog.string StringBuffer]))\n\n;; next line is auto-generated by the build-script - Do not edit!\n(def *clojurescript-version* \"1.10.891\")\n\n;; Setting of these Vars is in ClojureScript code is associated with intrinsics\n;; that affect compilation state, but otherwise turn into no-ops in the emitted\n;; JavaScript.\n\n;; The scope of *unchecked-if* is controlled by balanced pairs of set! calls.\n(def *unchecked-if* false)\n;; The scope of *unchecked-arrays* is file-scope: In JVM ClojureScript its side-\n;; effect is to set same-named analyzer dynamic Var, which is unset via binding\n;; scopes. In self-hosted it is cleared via cljs.js\/post-file-side-effects.\n(def *unchecked-arrays* false)\n;; The scope of *warn-on-infer* is file-scope: Its side effect is to set the\n;; cljs.analyzer\/*cljs-warnings* dynamic Var, which is unset via binding scopes.\n(def *warn-on-infer* false)\n\n(set! *unchecked-arrays* true)\n\n(defonce PROTOCOL_SENTINEL #js {})\n\n(def MODULE_URIS nil) ;; set by compiler\n(def MODULE_INFOS nil) ;; set by compiler\n\n(goog-define\n  ^{:dynamic true\n    :doc \"Var bound to the name value of the compiler build :target option.\n  For example, if the compiler build :target is :nodejs, *target* will be bound\n  to \\\"nodejs\\\". *target* is a Google Closure define and can be set by compiler\n  :closure-defines option.\"}\n  *target* \"default\")\n\n(goog-define\n  ^{:dynamic true\n    :doc \"Manually set the JavaScript global context. Only \\\"window\\\", \\\"self\\\"\n  , and \\\"global\\\" supported. \"}\n  *global* \"default\")\n\n(def\n  ^{:dynamic true\n    :doc \"Var bound to the current namespace. Only used for bootstrapping.\"\n    :jsdoc [\"@type {*}\"]}\n  *ns* nil)\n\n(def\n  ^{:dynamic true\n    :jsdoc [\"@type {*}\"]}\n  *out* nil)\n\n(def\n  ^{:dynamic true}\n  *assert* true)\n\n(defonce\n  ^{:doc \"Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.\" :dynamic true}\n  *print-fn* nil)\n\n(declare boolean)\n\n(defn ^{:doc \"Arranges to have tap functions executed via the supplied f, a\n  function of no arguments. Returns true if successful, false otherwise.\" :dynamic true}\n  *exec-tap-fn*\n  [f]\n  (and\n    (exists? js\/setTimeout)\n    ;; See CLJS-3274 - workaround for recent WebKit releases\n    (boolean (js\/setTimeout f 0))))\n\n(defonce\n  ^{:doc \"Each runtime environment provides a different way to print error output.\n  Whatever function *print-err-fn* is bound to will be passed any\n  Strings which should be printed.\" :dynamic true}\n  *print-err-fn* nil)\n\n(defn set-print-fn!\n  \"Set *print-fn* to f.\"\n  [f] (set! *print-fn* f))\n\n(defn set-print-err-fn!\n  \"Set *print-err-fn* to f.\"\n  [f] (set! *print-err-fn* f))\n\n(def\n  ^{:dynamic true\n    :doc \"When set to true, output will be flushed whenever a newline is printed.\n\n  Defaults to true.\"}\n  *flush-on-newline* true)\n\n(def\n  ^{:dynamic true\n    :doc \"When set to logical false will drop newlines from printing calls.\n  This is to work around the implicit newlines emitted by standard JavaScript\n  console objects.\"}\n  *print-newline* true)\n\n(def\n  ^{:dynamic true\n    :doc \"When set to logical false, strings and characters will be printed with\n  non-alphanumeric characters converted to the appropriate escape sequences.\n\n  Defaults to true\"}\n  *print-readably* true)\n\n(def\n  ^{:dynamic true\n    :doc \"If set to logical true, when printing an object, its metadata will also\n  be printed in a form that can be read back by the reader.\n\n  Defaults to false.\"}\n  *print-meta* false)\n\n(def\n  ^{:dynamic true\n    :doc \"When set to logical true, objects will be printed in a way that preserves\n  their type when read in later.\n\n  Defaults to false.\"}\n  *print-dup* false)\n\n(def\n  ^{:dynamic true\n    :doc \"*print-namespace-maps* controls whether the printer will print\n  namespace map literal syntax.\n\n  Defaults to false, but the REPL binds it to true.\"}\n  *print-namespace-maps* false)\n\n(def\n  ^{:dynamic true\n    :doc \"*print-length* controls how many items of each collection the\n  printer will print. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  number of items of each collection to print. If a collection contains\n  more items, the printer will print items up to the limit followed by\n  '...' to represent the remaining items. The root binding is nil\n  indicating no limit.\"\n    :jsdoc [\"@type {null|number}\"]}\n  *print-length* nil)\n\n(def\n  ^{:dynamic true\n    :doc \"*print-level* controls how many levels deep the printer will\n  print nested objects. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  level to print. Each argument to print is at level 0; if an argument is a\n  collection, its items are at level 1; and so on. If an object is a\n  collection and is at a level greater than or equal to the value bound to\n  *print-level*, the printer prints '#' to represent it. The root binding\n  is nil indicating no limit.\"\n    :jsdoc [\"@type {null|number}\"]}\n  *print-level* nil)\n\n(def\n  ^{:dynamic true\n    :doc \"*print-fns-bodies* controls whether functions print their source or\n    only their names.\"}\n  *print-fn-bodies* false)\n\n(defonce\n  ^{:dynamic true\n    :jsdoc [\"@type {*}\"]}\n  *loaded-libs* nil)\n\n(defn- pr-opts []\n  {:flush-on-newline *flush-on-newline*\n   :readably *print-readably*\n   :meta *print-meta*\n   :dup *print-dup*\n   :print-length *print-length*})\n\n(declare into-array)\n\n(defn enable-console-print!\n  \"Set *print-fn* to console.log\"\n  []\n  (set! *print-newline* false)\n  (set-print-fn!\n    (fn []\n      (let [xs (js-arguments)]\n        (.apply (.-log js\/console) js\/console (garray\/clone xs)))))\n  (set-print-err-fn!\n    (fn []\n      (let [xs (js-arguments)]\n        (.apply (.-error js\/console) js\/console (garray\/clone xs)))))\n  nil)\n\n(def\n  ^{:doc \"bound in a repl thread to the most recent value printed\"}\n  *1)\n\n(def\n  ^{:doc \"bound in a repl thread to the second most recent value printed\"}\n  *2)\n\n(def\n  ^{:doc \"bound in a repl thread to the third most recent value printed\"}\n  *3)\n\n(def\n  ^{:doc \"bound in a repl thread to the most recent exception caught by the repl\"}\n  *e)\n\n(defn truth_\n  \"Internal - do not use!\"\n  [x]\n  (cljs.core\/truth_ x))\n\n(def not-native nil)\n\n(declare instance? Keyword)\n\n(defn ^boolean identical?\n  \"Tests if 2 arguments are the same object\"\n  [x y]\n  (cljs.core\/identical? x y))\n\n(defn ^boolean nil?\n  \"Returns true if x is nil, false otherwise.\"\n  [x]\n  (coercive-= x nil))\n\n(defn ^boolean array?\n  \"Returns true if x is a JavaScript array.\"\n  [x]\n  (if (identical? *target* \"nodejs\")\n    (.isArray js\/Array x)\n    (instance? js\/Array x)))\n\n(defn ^boolean number?\n  \"Returns true if x is a JavaScript number.\"\n  [x]\n  (cljs.core\/number? x))\n\n(defn not\n  \"Returns true if x is logical false, false otherwise.\"\n  [x]\n  (cond\n    (nil? x) true\n    (false? x) true\n    :else false))\n\n(defn ^boolean some?\n  \"Returns true if x is not nil, false otherwise.\"\n  [x] (not (nil? x)))\n\n(defn object?\n  \"Returns true if x's constructor is Object\"\n  [x]\n  (if-not (nil? x)\n    (identical? (.-constructor x) js\/Object)\n    false))\n\n(defn ^boolean string?\n  \"Returns true if x is a JavaScript string.\"\n  [x]\n  (identical? \"string\" (goog\/typeOf x)))\n\n(defn char?\n  \"Returns true if x is a JavaScript string of length one.\"\n  [x]\n  (and (string? x) (== 1 (.-length x))))\n\n(defn any?\n  \"Returns true if given any argument.\"\n  [x] true)\n\n(set! *unchecked-if* true)\n(defn native-satisfies?\n  \"Internal - do not use!\"\n  [p x]\n  (let [x (if (nil? x) nil x)]\n    (cond\n     (unchecked-get p (goog\/typeOf x)) true\n     (unchecked-get p \"_\") true\n     :else false)))\n(set! *unchecked-if* false)\n\n(defn is_proto_\n  [x]\n  (identical? (.-prototype (.-constructor x)) x))\n\n(def\n  ^{:doc \"When compiled for a command-line target, whatever function\n  *main-cli-fn* is set to will be called with the command-line\n  argv as arguments\"}\n  *main-cli-fn* nil)\n\n(def\n  ^{:doc \"A sequence of the supplied command line arguments, or nil if\n  none were supplied\"}\n  *command-line-args* nil)\n\n(defn type\n  \"Return x's constructor.\"\n  [x]\n  (when-not (nil? x)\n    (.-constructor x)))\n\n(defn missing-protocol [proto obj]\n  (let [ty (type obj)\n        ty (if (and ty (.-cljs$lang$type ty))\n             (.-cljs$lang$ctorStr ty)\n             (goog\/typeOf obj))]\n   (js\/Error.\n     (.join (array \"No protocol method \" proto\n                   \" defined for type \" ty \": \" obj) \"\"))))\n\n(defn type->str [ty]\n  (if-let [s (.-cljs$lang$ctorStr ty)]\n    s\n    (str ty)))\n\n;; INTERNAL - do not use, only for Node.js\n(defn load-file [file]\n  (when-not js\/COMPILED\n    (cljs.core\/load-file* file)))\n\n(if (and (exists? js\/Symbol)\n         (identical? (goog\/typeOf js\/Symbol) \"function\"))\n  (def ITER_SYMBOL (.-iterator js\/Symbol))\n  (def ITER_SYMBOL \"@@iterator\"))\n\n(def ^{:jsdoc [\"@enum {string}\"]}\n  CHAR_MAP\n  #js {\"-\"    \"_\"\n       \":\"    \"_COLON_\"\n       \"+\"    \"_PLUS_\"\n       \">\"    \"_GT_\"\n       \"<\"    \"_LT_\"\n       \"=\"    \"_EQ_\"\n       \"~\"    \"_TILDE_\"\n       \"!\"    \"_BANG_\"\n       \"@\"    \"_CIRCA_\"\n       \"#\"    \"_SHARP_\"\n       \"'\"    \"_SINGLEQUOTE_\"\n       \"\\\\\\\"\" \"_DOUBLEQUOTE_\"\n       \"%\"    \"_PERCENT_\"\n       \"^\"    \"_CARET_\"\n       \"&\"    \"_AMPERSAND_\"\n       \"*\"    \"_STAR_\"\n       \"|\"    \"_BAR_\"\n       \"{\"    \"_LBRACE_\"\n       \"}\"    \"_RBRACE_\"\n       \"[\"    \"_LBRACK_\"\n       \"]\"    \"_RBRACK_\"\n       \"\/\"    \"_SLASH_\"\n       \"\\\\\\\\\" \"_BSLASH_\"\n       \"?\"    \"_QMARK_\"})\n\n(def ^{:jsdoc [\"@enum {string}\"]}\n  DEMUNGE_MAP\n  #js {\"_\"             \"-\"\n       \"_COLON_\"       \":\"\n       \"_PLUS_\"        \"+\"\n       \"_GT_\"          \">\"\n       \"_LT_\"          \"<\"\n       \"_EQ_\"          \"=\"\n       \"_TILDE_\"       \"~\"\n       \"_BANG_\"        \"!\"\n       \"_CIRCA_\"       \"@\"\n       \"_SHARP_\"       \"#\"\n       \"_SINGLEQUOTE_\" \"'\"\n       \"_DOUBLEQUOTE_\" \"\\\\\\\"\"\n       \"_PERCENT_\"     \"%\"\n       \"_CARET_\"       \"^\"\n       \"_AMPERSAND_\"   \"&\"\n       \"_STAR_\"        \"*\"\n       \"_BAR_\"         \"|\"\n       \"_LBRACE_\"      \"{\"\n       \"_RBRACE_\"      \"}\"\n       \"_LBRACK_\"      \"[\"\n       \"_RBRACK_\"      \"]\"\n       \"_SLASH_\"       \"\/\"\n       \"_BSLASH_\"      \"\\\\\\\\\"\n       \"_QMARK_\"       \"?\"})\n\n(def DEMUNGE_PATTERN nil)\n\n(defn system-time\n  \"Returns highest resolution time offered by host in milliseconds.\"\n  []\n  (cond\n    (and (exists? js\/performance)\n         (not (nil? (. js\/performance -now))))\n    (.now js\/performance)\n\n    (and (exists? js\/process)\n         (not (nil? (. js\/process -hrtime))))\n    (let [t (.hrtime js\/process)]\n      (\/ (+ (* (aget t 0) 1e9) (aget t 1)) 1e6))\n\n    :else (.getTime (js\/Date.))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; arrays ;;;;;;;;;;;;;;;;\n\n(declare apply)\n\n(defn ^array make-array\n  \"Construct a JavaScript array of the specified dimensions. Accepts ignored\n  type argument for compatibility with Clojure. Note that there is no efficient\n  way to allocate multi-dimensional arrays in JavaScript; as such, this function\n  will run in polynomial time when called with 3 or more arguments.\"\n  ([size]\n     (js\/Array. size))\n  ([type size]\n     (make-array size))\n  ([type size & more-sizes]\n    (let [dims more-sizes\n          dimarray (make-array size)]\n      (dotimes [i (alength dimarray)]\n        (aset dimarray i (apply make-array nil dims)))\n      dimarray)))\n\n(defn aclone\n  \"Returns a javascript array, cloned from the passed in array\"\n  [arr]\n  (let [len (alength arr)\n        new-arr (make-array len)]\n    (dotimes [i len]\n      (aset new-arr i (aget arr i)))\n    new-arr))\n\n(defn ^array array\n  \"Creates a new javascript array.\n@param {...*} var_args\" ;;array is a special case, don't emulate this doc string\n  [var-args]            ;; [& items]\n  (let [a (js\/Array. (alength (cljs.core\/js-arguments)))]\n    (loop [i 0]\n      (if (< i (alength a))\n        (do\n          (aset a i (aget (cljs.core\/js-arguments) i))\n          (recur (inc i)))\n        a))))\n\n(defn- maybe-warn\n  [e]\n  (when *print-err-fn*\n    (*print-err-fn* e)))\n\n(defn- checked-aget\n  ([array idx]\n   (when-assert\n     (try\n       (assert (or (array? array) (goog\/isArrayLike array)))\n       (assert (number? idx))\n       (assert (not (neg? idx)))\n       (assert (< idx (alength array)))\n       (catch :default e\n         (maybe-warn e))))\n   (unchecked-get array idx))\n  ([array idx & idxs]\n   (apply checked-aget (checked-aget array idx) idxs)))\n\n(defn- checked-aset\n  ([array idx val]\n   (when-assert\n     (try\n       (assert (or (array? array) (goog\/isArrayLike array)))\n       (assert (number? idx))\n       (assert (not (neg? idx)))\n       (assert (< idx (alength array)))\n       (catch :default e\n         (maybe-warn e))))\n   (unchecked-set array idx val))\n  ([array idx idx2 & idxv]\n   (apply checked-aset (checked-aget array idx) idx2 idxv)))\n\n(defn- checked-aget'\n  ([array idx]\n   {:pre [(or (array? array) (goog\/isArrayLike array))\n          (number? idx) (not (neg? idx)) (< idx (alength array))]}\n   (unchecked-get array idx))\n  ([array idx & idxs]\n   (apply checked-aget' (checked-aget' array idx) idxs)))\n\n(defn- checked-aset'\n  ([array idx val]\n   {:pre [(or (array? array) (goog\/isArrayLike array))\n          (number? idx) (not (neg? idx)) (< idx (alength array))]}\n   (unchecked-set array idx val))\n  ([array idx idx2 & idxv]\n   (apply checked-aset' (checked-aget' array idx) idx2 idxv)))\n\n(defn aget\n  \"Returns the value at the index\/indices. Works on JavaScript arrays.\"\n  ([array idx]\n     (cljs.core\/aget array idx))\n  ([array idx & idxs]\n     (apply aget (aget array idx) idxs)))\n\n(defn aset\n  \"Sets the value at the index\/indices. Works on JavaScript arrays.\n  Returns val.\"\n  ([array idx val]\n    (cljs.core\/aset array idx val))\n  ([array idx idx2 & idxv]\n    (apply aset (aget array idx) idx2 idxv)))\n\n(defn ^number alength\n  \"Returns the length of the array. Works on arrays of all types.\"\n  [array]\n  (cljs.core\/alength array))\n\n(declare reduce)\n\n(defn ^array into-array\n  \"Returns an array with components set to the values in aseq. Optional type\n  argument accepted for compatibility with Clojure.\"\n  ([aseq]\n     (into-array nil aseq))\n  ([type aseq]\n     (reduce (fn [a x] (.push a x) a) (array) aseq)))\n\n(defn js-invoke\n  \"Invoke JavaScript object method via string. Needed when the\n  string is not a valid unquoted property name.\"\n  [obj s & args]\n  (.apply (unchecked-get obj s) obj (into-array args)))\n\n(defn js-symbol?\n  \"Returns true if x is an instance of Symbol\"\n  [x]\n  (or (identical? (goog\/typeOf x) \"symbol\")\n      (and (exists? js\/Symbol)\n           (instance? js\/Symbol x))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;; core protocols ;;;;;;;;;;;;;\n\n(defprotocol Fn\n  \"Marker protocol\")\n\n(defprotocol IFn\n  \"Protocol for adding the ability to invoke an object as a function.\n  For example, a vector can also be used to look up a value:\n  ([1 2 3 4] 1) => 2\"\n  (-invoke\n    [this]\n    [this a]\n    [this a b]\n    [this a b c]\n    [this a b c d]\n    [this a b c d e]\n    [this a b c d e f]\n    [this a b c d e f g]\n    [this a b c d e f g h]\n    [this a b c d e f g h i]\n    [this a b c d e f g h i j]\n    [this a b c d e f g h i j k]\n    [this a b c d e f g h i j k l]\n    [this a b c d e f g h i j k l m]\n    [this a b c d e f g h i j k l m n]\n    [this a b c d e f g h i j k l m n o]\n    [this a b c d e f g h i j k l m n o p]\n    [this a b c d e f g h i j k l m n o p q]\n    [this a b c d e f g h i j k l m n o p q r]\n    [this a b c d e f g h i j k l m n o p q r s]\n    [this a b c d e f g h i j k l m n o p q r s t]\n    [this a b c d e f g h i j k l m n o p q r s t rest]))\n\n(defprotocol ICloneable\n  \"Protocol for cloning a value.\"\n  (^clj -clone [value]\n    \"Creates a clone of value.\"))\n\n(defprotocol ICounted\n  \"Protocol for adding the ability to count a collection in constant time.\"\n  (^number -count [coll]\n    \"Calculates the count of coll in constant time. Used by cljs.core\/count.\"))\n\n(defprotocol IEmptyableCollection\n  \"Protocol for creating an empty collection.\"\n  (-empty [coll]\n    \"Returns an empty collection of the same category as coll. Used\n     by cljs.core\/empty.\"))\n\n(defprotocol ICollection\n  \"Protocol for adding to a collection.\"\n  (^clj -conj [coll o]\n    \"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)\"))\n\n#_(defprotocol IOrdinal\n    (-index [coll]))\n\n(defprotocol IIndexed\n  \"Protocol for collections to provide indexed-based access to their items.\"\n  (-nth [coll n] [coll n not-found]\n    \"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied.\"))\n\n(defprotocol ASeq\n  \"Marker protocol indicating an array sequence.\")\n\n(defprotocol ISeq\n  \"Protocol for collections to provide access to their items as sequences.\"\n  (-first [coll]\n    \"Returns the first item in the collection coll. Used by cljs.core\/first.\")\n  (^clj -rest [coll]\n    \"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()\"))\n\n(defprotocol INext\n  \"Protocol for accessing the next items of a collection.\"\n  (^clj-or-nil -next [coll]\n    \"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil\"))\n\n(defprotocol ILookup\n  \"Protocol for looking up a value in a data structure.\"\n  (-lookup [o k] [o k not-found]\n    \"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned.\"))\n\n(defprotocol IAssociative\n  \"Protocol for adding associativity to collections.\"\n  (^boolean -contains-key? [coll k]\n    \"Returns true if k is a key in coll.\")\n  #_(-entry-at [coll k])\n  (^clj -assoc [coll k v]\n    \"Returns a new collection of coll with a mapping from key k to\n     value v added to it.\"))\n\n(defprotocol IFind\n  \"Protocol for implementing entry finding in collections.\"\n  (-find [coll k] \"Returns the map entry for key, or nil if key not present.\"))\n\n(defprotocol IMap\n  \"Protocol for adding mapping functionality to collections.\"\n  #_(-assoc-ex [coll k v])\n  (^clj -dissoc [coll k]\n    \"Returns a new collection of coll without the mapping for key k.\"))\n\n(defprotocol IMapEntry\n  \"Protocol for examining a map entry.\"\n  (-key [coll]\n    \"Returns the key of the map entry.\")\n  (-val [coll]\n    \"Returns the value of the map entry.\"))\n\n(defprotocol ISet\n  \"Protocol for adding set functionality to a collection.\"\n  (^clj -disjoin [coll v]\n    \"Returns a new collection of coll that does not contain v.\"))\n\n(defprotocol IStack\n  \"Protocol for collections to provide access to their items as stacks. The top\n  of the stack should be accessed in the most efficient way for the different\n  data structures.\"\n  (-peek [coll]\n    \"Returns the item from the top of the stack. Is used by cljs.core\/peek.\")\n  (^clj -pop [coll]\n    \"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core\/pop.\"))\n\n(defprotocol IVector\n  \"Protocol for adding vector functionality to collections.\"\n  (^clj -assoc-n [coll n val]\n    \"Returns a new vector with value val added at position n.\"))\n\n(defprotocol IDeref\n  \"Protocol for adding dereference functionality to a reference.\"\n  (-deref [o]\n    \"Returns the value of the reference o.\"))\n\n(defprotocol IDerefWithTimeout\n  (-deref-with-timeout [o msec timeout-val]))\n\n(defprotocol IMeta\n  \"Protocol for accessing the metadata of an object.\"\n  (^clj-or-nil -meta [o]\n    \"Returns the metadata of object o.\"))\n\n(defprotocol IWithMeta\n  \"Protocol for adding metadata to an object.\"\n  (^clj -with-meta [o meta]\n    \"Returns a new object with value of o and metadata meta added to it.\"))\n\n(defprotocol IReduce\n  \"Protocol for seq types that can reduce themselves.\n  Called by cljs.core\/reduce.\"\n  (-reduce [coll f] [coll f start]\n    \"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc.\"))\n\n(defprotocol IKVReduce\n  \"Protocol for associative types that can reduce themselves\n  via a function of key and val. Called by cljs.core\/reduce-kv.\"\n  (-kv-reduce [coll f init]\n    \"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments.\"))\n\n(defprotocol IEquiv\n  \"Protocol for adding value comparison functionality to a type.\"\n  (^boolean -equiv [o other]\n    \"Returns true if o and other are equal, false otherwise.\"))\n\n(defprotocol IHash\n  \"Protocol for adding hashing functionality to a type.\"\n  (-hash [o]\n    \"Returns the hash code of o.\"))\n\n(defprotocol ISeqable\n  \"Protocol for adding the ability to a type to be transformed into a sequence.\"\n  (^clj-or-nil -seq [o]\n    \"Returns a seq of o, or nil if o is empty.\"))\n\n(defprotocol ISequential\n  \"Marker interface indicating a persistent collection of sequential items\")\n\n(defprotocol IList\n  \"Marker interface indicating a persistent list\")\n\n(defprotocol IRecord\n  \"Marker interface indicating a record object\")\n\n(defprotocol IReversible\n  \"Protocol for reversing a seq.\"\n  (^clj -rseq [coll]\n    \"Returns a seq of the items in coll in reversed order.\"))\n\n(defprotocol ISorted\n  \"Protocol for a collection which can represent their items\n  in a sorted manner. \"\n  (^clj -sorted-seq [coll ascending?]\n    \"Returns a sorted seq from coll in either ascending or descending order.\")\n  (^clj -sorted-seq-from [coll k ascending?]\n    \"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)\")\n  (-entry-key [coll entry]\n    \"Returns the key for entry.\")\n  (-comparator [coll]\n    \"Returns the comparator for coll.\"))\n\n(defprotocol IWriter\n  \"Protocol for writing. Currently only implemented by StringBufferWriter.\"\n  (-write [writer s]\n    \"Writes s with writer and returns the result.\")\n  (-flush [writer]\n    \"Flush writer.\"))\n\n(defprotocol IPrintWithWriter\n  \"The old IPrintable protocol's implementation consisted of building a giant\n   list of strings to concatenate.  This involved lots of concat calls,\n   intermediate vectors, and lazy-seqs, and was very slow in some older JS\n   engines.  IPrintWithWriter implements printing via the IWriter protocol, so it\n   be implemented efficiently in terms of e.g. a StringBuffer append.\"\n  (-pr-writer [o writer opts]))\n\n(defprotocol IPending\n  \"Protocol for types which can have a deferred realization. Currently only\n  implemented by Delay and LazySeq.\"\n  (^boolean -realized? [x]\n    \"Returns true if a value for x has been produced, false otherwise.\"))\n\n(defprotocol IWatchable\n  \"Protocol for types that can be watched. Currently only implemented by Atom.\"\n  (-notify-watches [this oldval newval]\n    \"Calls all watchers with this, oldval and newval.\")\n  (-add-watch [this key f]\n    \"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch.\")\n  (-remove-watch [this key]\n    \"Removes watcher that corresponds to key from this.\"))\n\n(defprotocol IEditableCollection\n  \"Protocol for collections which can transformed to transients.\"\n  (^clj -as-transient [coll]\n    \"Returns a new, transient version of the collection, in constant time.\"))\n\n(defprotocol ITransientCollection\n  \"Protocol for adding basic functionality to transient collections.\"\n  (^clj -conj! [tcoll val]\n    \"Adds value val to tcoll and returns tcoll.\")\n  (^clj -persistent! [tcoll]\n    \"Creates a persistent data structure from tcoll and returns it.\"))\n\n(defprotocol ITransientAssociative\n  \"Protocol for adding associativity to transient collections.\"\n  (^clj -assoc! [tcoll key val]\n    \"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it.\"))\n\n(defprotocol ITransientMap\n  \"Protocol for adding mapping functionality to transient collections.\"\n  (^clj -dissoc! [tcoll key]\n    \"Returns a new transient collection of tcoll without the mapping for key.\"))\n\n(defprotocol ITransientVector\n  \"Protocol for adding vector functionality to transient collections.\"\n  (^clj -assoc-n! [tcoll n val]\n    \"Returns tcoll with value val added at position n.\")\n  (^clj -pop! [tcoll]\n    \"Returns tcoll with the last item removed from it.\"))\n\n(defprotocol ITransientSet\n  \"Protocol for adding set functionality to a transient collection.\"\n  (^clj -disjoin! [tcoll v]\n    \"Returns tcoll without v.\"))\n\n(defprotocol IComparable\n  \"Protocol for values that can be compared.\"\n  (^number -compare [x y]\n    \"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y.\"))\n\n(defprotocol IChunk\n  \"Protocol for accessing the items of a chunk.\"\n  (-drop-first [coll]\n    \"Return a new chunk of coll with the first item removed.\"))\n\n(defprotocol IChunkedSeq\n  \"Protocol for accessing a collection as sequential chunks.\"\n  (-chunked-first [coll]\n    \"Returns the first chunk in coll.\")\n  (-chunked-rest [coll]\n    \"Return a new collection of coll with the first chunk removed.\"))\n\n(defprotocol IChunkedNext\n  \"Protocol for accessing the chunks of a collection.\"\n  (-chunked-next [coll]\n    \"Returns a new collection of coll without the first chunk.\"))\n\n(defprotocol INamed\n  \"Protocol for adding a name.\"\n  (^string -name [x]\n    \"Returns the name String of x.\")\n  ( ^{:tag #{string clj-nil}}-namespace [x]\n    \"Returns the namespace String of x.\"))\n\n(defprotocol IAtom\n  \"Marker protocol indicating an atom.\")\n\n(defprotocol IReset\n  \"Protocol for adding resetting functionality.\"\n  (-reset! [o new-value]\n    \"Sets the value of o to new-value.\"))\n\n(defprotocol ISwap\n  \"Protocol for adding swapping functionality.\"\n  (-swap! [o f] [o f a] [o f a b] [o f a b xs]\n    \"Swaps the value of o to be (apply f current-value-of-atom args).\"))\n\n(defprotocol IVolatile\n  \"Protocol for adding volatile functionality.\"\n  (-vreset! [o new-value]\n    \"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value.\"))\n\n(defprotocol IIterable\n  \"Protocol for iterating over a collection.\"\n  (-iterator [coll]\n    \"Returns an iterator for coll.\"))\n\n;; Printing support\n\n(deftype StringBufferWriter [sb]\n  IWriter\n  (-write [_ s] (.append sb s))\n  (-flush [_] nil))\n\n(defn pr-str*\n  \"Support so that collections can implement toString without\n   loading all the printing machinery.\"\n  [^not-native obj]\n  (let [sb (StringBuffer.)\n        writer (StringBufferWriter. sb)]\n    (-pr-writer obj writer (pr-opts))\n    (-flush writer)\n    (str sb)))\n\n;;;;;;;;;;;;;;;;;;; Murmur3 ;;;;;;;;;;;;;;;\n\n;;http:\/\/hg.openjdk.java.net\/jdk7u\/jdk7u6\/jdk\/file\/8c2c5d63a17e\/src\/share\/classes\/java\/lang\/Integer.java\n(defn ^number int-rotate-left [x n]\n  (bit-or\n    (bit-shift-left x n)\n    (unsigned-bit-shift-right x (- n))))\n\n;; http:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Math\/imul\n(if (and (exists? Math\/imul)\n         (not (zero? (Math\/imul 0xffffffff 5))))\n  (defn ^number imul [a b] (Math\/imul a b))\n  (defn ^number imul [a b]\n    (let [ah (bit-and (unsigned-bit-shift-right a 16) 0xffff)\n          al (bit-and a 0xffff)\n          bh (bit-and (unsigned-bit-shift-right b 16) 0xffff)\n          bl (bit-and b 0xffff)]\n      (bit-or\n        (+ (* al bl)\n           (unsigned-bit-shift-right\n             (bit-shift-left (+ (* ah bl) (* al bh)) 16) 0)) 0))))\n\n;; http:\/\/smhasher.googlecode.com\/svn\/trunk\/MurmurHash3.cpp\n(def m3-seed 0)\n(def m3-C1 (int 0xcc9e2d51))\n(def m3-C2 (int 0x1b873593))\n\n(defn ^number m3-mix-K1 [k1]\n  (-> (int k1) (imul m3-C1) (int-rotate-left 15) (imul m3-C2)))\n\n(defn ^number m3-mix-H1 [h1 k1]\n  (int (-> (int h1) (bit-xor (int k1)) (int-rotate-left 13) (imul 5) (+ (int 0xe6546b64)))))\n\n(defn ^number m3-fmix [h1 len]\n  (as-> (int h1) h1\n    (bit-xor h1 len)\n    (bit-xor h1 (unsigned-bit-shift-right h1 16))\n    (imul h1 (int 0x85ebca6b))\n    (bit-xor h1 (unsigned-bit-shift-right h1 13))\n    (imul h1 (int 0xc2b2ae35))\n    (bit-xor h1 (unsigned-bit-shift-right h1 16))))\n\n(defn ^number m3-hash-int [in]\n  (if (zero? in)\n    in\n    (let [k1 (m3-mix-K1 in)\n          h1 (m3-mix-H1 m3-seed k1)]\n      (m3-fmix h1 4))))\n\n(defn ^number m3-hash-unencoded-chars [in]\n  (let [h1 (loop [i 1 h1 m3-seed]\n             (if (< i (.-length in))\n               (recur (+ i 2)\n                 (m3-mix-H1 h1\n                   (m3-mix-K1\n                     (bit-or (.charCodeAt in (dec i))\n                       (bit-shift-left (.charCodeAt in i) 16)))))\n               h1))\n        h1 (if (== (bit-and (.-length in) 1) 1)\n             (bit-xor h1 (m3-mix-K1 (.charCodeAt in (dec (.-length in)))))\n             h1)]\n    (m3-fmix h1 (imul 2 (.-length in)))))\n\n;;;;;;;;;;;;;;;;;;; symbols ;;;;;;;;;;;;;;;\n\n(declare list Symbol = compare)\n\n;; Simple caching of string hashcode\n(def string-hash-cache (js-obj))\n(def string-hash-cache-count 0)\n\n;;http:\/\/hg.openjdk.java.net\/jdk7u\/jdk7u6\/jdk\/file\/8c2c5d63a17e\/src\/share\/classes\/java\/lang\/String.java\n(defn hash-string* [s]\n  (if-not (nil? s)\n    (let [len (.-length s)]\n      (if (pos? len)\n        (loop [i 0 hash 0]\n          (if (< i len)\n            (recur (inc i) (+ (imul 31 hash) (.charCodeAt s i)))\n            hash))\n        0))\n    0))\n\n(defn add-to-string-hash-cache [k]\n  (let [h (hash-string* k)]\n    (gobject\/set string-hash-cache k h)\n    (set! string-hash-cache-count (inc string-hash-cache-count))\n    h))\n\n(defn hash-string [k]\n  (when (> string-hash-cache-count 255)\n    (set! string-hash-cache (js-obj))\n    (set! string-hash-cache-count 0))\n  (if (nil? k)\n    0\n    (let [h (unchecked-get string-hash-cache k)]\n      (if (number? h)\n        h\n        (add-to-string-hash-cache k)))))\n\n(defn hash\n  \"Returns the hash code of its argument. Note this is the hash code\n   consistent with =.\"\n  [o]\n  (cond\n    (implements? IHash o)\n    (bit-xor (-hash o) 0)\n\n    (number? o)\n    (if (js\/isFinite o)\n      (js-mod (Math\/floor o) 2147483647)\n      (case o\n        ##Inf\n        2146435072\n        ##-Inf\n        -1048576\n        2146959360))\n\n    ;; note: mirrors Clojure's behavior on the JVM, where the hashCode is\n    ;; 1231 for true and 1237 for false\n    ;; http:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/lang\/Boolean.html#hashCode%28%29\n    (true? o) 1231\n\n    (false? o) 1237\n\n    (string? o)\n    (m3-hash-int (hash-string o))\n\n    (instance? js\/Date o)\n    (bit-xor (.valueOf o) 0)\n\n    (nil? o) 0\n\n    :else\n    (bit-xor (-hash o) 0)))\n\n(defn hash-combine [seed hash]\n  ; a la boost\n  (bit-xor seed\n    (+ hash 0x9e3779b9\n      (bit-shift-left seed 6)\n      (bit-shift-right seed 2))))\n\n(defn ^boolean instance?\n  \"Evaluates x and tests if it is an instance of the type\n  c. Returns true or false\"\n  [c x]\n  (cljs.core\/instance? c x))\n\n(defn ^boolean symbol?\n  \"Return true if x is a Symbol\"\n  [x]\n  (instance? Symbol x))\n\n(defn- hash-symbol [sym]\n  (hash-combine\n    (m3-hash-unencoded-chars (.-name sym))\n    (hash-string (.-ns sym))))\n\n(defn- compare-symbols [a b]\n  (cond\n   (identical? (.-str a) (.-str b)) 0\n   (and (not (.-ns a)) (.-ns b)) -1\n   (.-ns a) (if-not (.-ns b)\n              1\n              (let [nsc (garray\/defaultCompare (.-ns a) (.-ns b))]\n                (if (== 0 nsc)\n                  (garray\/defaultCompare (.-name a) (.-name b))\n                  nsc)))\n   :default (garray\/defaultCompare (.-name a) (.-name b))))\n\n(declare get)\n\n(deftype Symbol [ns name str ^:mutable _hash _meta]\n  Object\n  (toString [_] str)\n  (equiv [this other] (-equiv this other))\n\n  IEquiv\n  (-equiv [_ other]\n    (if (instance? Symbol other)\n      (identical? str (.-str other))\n      false))\n\n  IFn\n  (-invoke [sym coll]\n    (get coll sym))\n  (-invoke [sym coll not-found]\n    (get coll sym not-found))\n\n  IMeta\n  (-meta [_] _meta)\n\n  IWithMeta\n  (-with-meta [_ new-meta] (Symbol. ns name str _hash new-meta))\n\n  IHash\n  (-hash [sym]\n    (caching-hash sym hash-symbol _hash))\n\n  INamed\n  (-name [_] name)\n  (-namespace [_] ns)\n\n  IPrintWithWriter\n  (-pr-writer [o writer _] (-write writer str)))\n\n(defn var?\n  \"Returns true if v is of type cljs.core.Var\"\n  [v]\n  (instance? cljs.core.Var v))\n\n(defn symbol\n  \"Returns a Symbol with the given namespace and name. Arity-1 works\n  on strings, keywords, and vars.\"\n  ([name]\n   (cond (symbol? name) name\n         (string? name) (let [idx (.indexOf name \"\/\")]\n                          (if (< idx 1)\n                            (symbol nil name)\n                            (symbol (.substring name 0 idx)\n                                    (.substring name (inc idx) (. name -length)))))\n         (var? name) (.-sym name)\n         (keyword? name) (recur (.-fqn name))\n         :else (throw (new js\/Error \"no conversion to symbol\"))))\n  ([ns name]\n   (let [sym-str (if-not (nil? ns)\n                   (str ns \"\/\" name)\n                   name)]\n     (Symbol. ns name sym-str nil nil))))\n\n(deftype Var [val sym _meta]\n  Object\n  (isMacro [_]\n    (. (val) -cljs$lang$macro))\n  (toString [_]\n    (str \"#'\" sym))\n  IDeref\n  (-deref [_] (val))\n  IMeta\n  (-meta [_] _meta)\n  IWithMeta\n  (-with-meta [_ new-meta]\n    (Var. val sym new-meta))\n  IEquiv\n  (-equiv [this other]\n    (if (instance? Var other)\n      (= (.-sym this) (.-sym other))\n      false))\n  IHash\n  (-hash [_]\n    (hash-symbol sym))\n  Fn\n  IFn\n  (-invoke [_]\n    ((val)))\n  (-invoke [_ a]\n    ((val) a))\n  (-invoke [_ a b]\n    ((val) a b))\n  (-invoke [_ a b c]\n    ((val) a b c))\n  (-invoke [_ a b c d]\n    ((val) a b c d))\n  (-invoke [_ a b c d e]\n    ((val) a b c d e))\n  (-invoke [_ a b c d e f]\n    ((val) a b c d e f))\n  (-invoke [_ a b c d e f g]\n    ((val) a b c d e f g))\n  (-invoke [_ a b c d e f g h]\n    ((val) a b c d e f g h))\n  (-invoke [_ a b c d e f g h i]\n    ((val) a b c d e f g h i))\n  (-invoke [_ a b c d e f g h i j]\n    ((val) a b c d e f g h i j))\n  (-invoke [_ a b c d e f g h i j k]\n    ((val) a b c d e f g h i j k))\n  (-invoke [_ a b c d e f g h i j k l]\n    ((val) a b c d e f g h i j k l))\n  (-invoke [_ a b c d e f g h i j k l m]\n    ((val) a b c d e f g h i j k l m))\n  (-invoke [_ a b c d e f g h i j k l m n]\n    ((val) a b c d e f g h i j k l m n))\n  (-invoke [_ a b c d e f g h i j k l m n o]\n    ((val) a b c d e f g h i j k l m n o))\n  (-invoke [_ a b c d e f g h i j k l m n o p]\n    ((val) a b c d e f g h i j k l m n o p))\n  (-invoke [_ a b c d e f g h i j k l m n o p q]\n    ((val) a b c d e f g h i j k l m n o p q))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r]\n    ((val) a b c d e f g h i j k l m n o p q r))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s]\n    ((val) a b c d e f g h i j k l m n o p q r s))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s t]\n    ((val) a b c d e f g h i j k l m n o p q r s t))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s t rest]\n    (apply (val) a b c d e f g h i j k l m n o p q r s t rest)))\n\n;;;;;;;;;;;;;;;;;;; fundamentals ;;;;;;;;;;;;;;;\n\n(declare array-seq prim-seq IndexedSeq)\n\n(defn iterable?\n  \"Return true if x implements IIterable protocol.\"\n  [x]\n  (satisfies? IIterable x))\n\n(defn js-iterable?\n  \"Return true if x has a JavaScript iterator property\"\n  [x]\n  (and (not (nil? x))\n       (not (nil? (js* \"~{}[~{}]\" x ITER_SYMBOL)))))\n\n(defn clone\n  \"Clone the supplied value which must implement ICloneable.\"\n  [value]\n  (-clone value))\n\n(defn cloneable?\n  \"Return true if x implements ICloneable protocol.\"\n  [value]\n  (satisfies? ICloneable value))\n\n(declare es6-iterator-seq)\n\n(defn ^seq seq\n  \"Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.\"\n  [coll]\n  (when-not (nil? coll)\n    (cond\n      (implements? ISeqable coll)\n      (-seq coll)\n\n      (array? coll)\n      (when-not (zero? (alength coll))\n        (IndexedSeq. coll 0 nil))\n\n      (string? coll)\n      (when-not (zero? (.-length coll))\n        (IndexedSeq. coll 0 nil))\n\n      (js-iterable? coll)\n      (es6-iterator-seq\n        (.call (gobject\/get coll ITER_SYMBOL) coll))\n\n      (native-satisfies? ISeqable coll)\n      (-seq coll)\n\n      :else (throw (js\/Error. (str coll \" is not ISeqable\"))))))\n\n(defn first\n  \"Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.\"\n  [coll]\n  (when-not (nil? coll)\n    (if (implements? ISeq coll)\n      (-first coll)\n      (let [s (seq coll)]\n        (when-not (nil? s)\n          (-first s))))))\n\n(defn ^seq rest\n  \"Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.\"\n  [coll]\n  (if-not (nil? coll)\n    (if (implements? ISeq coll)\n      (-rest coll)\n      (let [s (seq coll)]\n        (if s\n          (-rest ^not-native s)\n          ())))\n    ()))\n\n(defn ^seq next\n  \"Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil\"\n  [coll]\n  (when-not (nil? coll)\n    (if (implements? INext coll)\n      (-next coll)\n      (seq (rest coll)))))\n\n(defn ^boolean =\n  \"Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.\"\n  ([x] true)\n  ([x y]\n    (if (nil? x)\n      (nil? y)\n      (or (identical? x y)\n        ^boolean (-equiv x y))))\n  ([x y & more]\n     (if (= x y)\n       (if (next more)\n         (recur y (first more) (next more))\n         (= y (first more)))\n       false)))\n\n;; EXPERIMENTAL: subject to change\n(deftype ES6Iterator [^:mutable s]\n  Object\n  (next [_]\n    (if-not (nil? s)\n      (let [x (first s)]\n        (set! s (next s))\n        #js {:value x :done false})\n      #js {:value nil :done true})))\n\n(defn es6-iterator\n  \"EXPERIMENTAL: Return a ES2015 compatible iterator for coll.\"\n  [coll]\n  (ES6Iterator. (seq coll)))\n\n(deftype ES6IteratorSeq [value iter ^:mutable _rest]\n  ISeqable\n  (-seq [this] this)\n  ISeq\n  (-first [_] value)\n  (-rest [_]\n    (when (nil? _rest)\n      (set! _rest (es6-iterator-seq iter)))\n    _rest))\n\n(defn es6-iterator-seq\n  \"EXPERIMENTAL: Given an ES2015 compatible iterator return a seq.\"\n  [iter]\n  (let [v (.next iter)]\n    (if (.-done v)\n      nil\n      (ES6IteratorSeq. (.-value v) iter nil))))\n\n;;;;;;;;;;;;;;;;;;; Murmur3 Helpers ;;;;;;;;;;;;;;;;\n\n(defn ^number mix-collection-hash\n  \"Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http:\/\/clojure.org\/data_structures#hash for full algorithms.\"\n  [hash-basis count]\n  (let [h1 m3-seed\n        k1 (m3-mix-K1 hash-basis)\n        h1 (m3-mix-H1 h1 k1)]\n    (m3-fmix h1 count)))\n\n(defn ^number hash-ordered-coll\n  \"Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http:\/\/clojure.org\/data_structures#hash for full algorithms.\"\n  [coll]\n  (loop [n 0 hash-code 1 coll (seq coll)]\n    (if-not (nil? coll)\n      (recur (inc n) (bit-or (+ (imul 31 hash-code) (hash (first coll))) 0)\n        (next coll))\n      (mix-collection-hash hash-code n))))\n\n(def ^:private empty-ordered-hash\n  (mix-collection-hash 1 0))\n\n(defn ^number hash-unordered-coll\n  \"Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http:\/\/clojure.org\/data_structures#hash for full algorithms.\"\n  [coll]\n  (loop [n 0 hash-code 0 coll (seq coll)]\n    (if-not (nil? coll)\n      (recur (inc n) (bit-or (+ hash-code (hash (first coll))) 0) (next coll))\n      (mix-collection-hash hash-code n))))\n\n(def ^:private empty-unordered-hash\n  (mix-collection-hash 0 0))\n\n;;;;;;;;;;;;;;;;;;; protocols on primitives ;;;;;;;;\n(declare hash-map list equiv-sequential)\n\n(extend-type nil\n  ICounted\n  (-count [_] 0))\n\n;; TODO: we should remove this and handle date equality checking\n;; by some other means, probably by adding a new primitive type\n;; case to the hash table lookup - David\n\n(extend-type js\/Date\n  IEquiv\n  (-equiv [o other]\n    (and (instance? js\/Date other)\n         (== (.valueOf o) (.valueOf other))))\n\n  IComparable\n  (-compare [this other]\n    (if (instance? js\/Date other)\n      (garray\/defaultCompare (.valueOf this) (.valueOf other))\n      (throw (js\/Error. (str \"Cannot compare \" this \" to \" other))))))\n\n(defprotocol Inst\n  (inst-ms* [inst]))\n\n(extend-protocol Inst\n  js\/Date\n  (inst-ms* [inst] (.getTime inst)))\n\n(defn inst-ms\n  \"Return the number of milliseconds since January 1, 1970, 00:00:00 GMT\"\n  [inst]\n  (inst-ms* inst))\n\n(defn inst?\n  \"Return true if x satisfies Inst\"\n  [x]\n  (satisfies? Inst x))\n\n(extend-type number\n  IEquiv\n  (-equiv [x o] (identical? x o)))\n\n(declare with-meta)\n\n(extend-type function\n  Fn\n  IMeta\n  (-meta [_] nil))\n\n(extend-type default\n  IHash\n  (-hash [o]\n    (goog\/getUid o)))\n\n;;this is primitive because & emits call to array-seq\n(defn inc\n  \"Returns a number one greater than num.\"\n  [x] (cljs.core\/+ x 1))\n\n(declare deref)\n\n(deftype Reduced [val]\n  IDeref\n  (-deref [o] val))\n\n(defn reduced\n  \"Wraps x in a way such that a reduce will terminate with the value x\"\n  [x]\n  (Reduced. x))\n\n(defn reduced?\n  \"Returns true if x is the result of a call to reduced\"\n  [r]\n  (instance? Reduced r))\n\n(defn ensure-reduced\n  \"If x is already reduced?, returns it, else returns (reduced x)\"\n  [x]\n  (if (reduced? x) x (reduced x)))\n\n(defn unreduced\n  \"If x is reduced?, returns (deref x), else returns x\"\n  [x]\n  (if (reduced? x) (deref x) x))\n\n;; generic to all refs\n;; (but currently hard-coded to atom!)\n(defn deref\n  \"Also reader macro: @var\/@atom\/@delay. Returns the\n   most-recently-committed value of ref. When applied to a var\n   or atom, returns its current state. When applied to a delay, forces\n   it if not already forced. See also - realized?.\"\n  [o]\n  (-deref o))\n\n(defn- ci-reduce\n  \"Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization\"\n  ([^not-native cicoll f]\n     (let [cnt (-count cicoll)]\n       (if (zero? cnt)\n         (f)\n         (loop [val (-nth cicoll 0), n 1]\n           (if (< n cnt)\n             (let [nval (f val (-nth cicoll n))]\n               (if (reduced? nval)\n                 @nval\n                 (recur nval (inc n))))\n             val)))))\n  ([^not-native cicoll f val]\n     (let [cnt (-count cicoll)]\n       (loop [val val, n 0]\n         (if (< n cnt)\n           (let [nval (f val (-nth cicoll n))]\n             (if (reduced? nval)\n               @nval\n               (recur nval (inc n))))\n           val)))))\n\n(defn- array-reduce\n  ([arr f]\n     (let [cnt (alength arr)]\n       (if (zero? (alength arr))\n         (f)\n         (loop [val (aget arr 0), n 1]\n           (if (< n cnt)\n             (let [nval (f val (aget arr n))]\n               (if (reduced? nval)\n                 @nval\n                 (recur nval (inc n))))\n             val)))))\n  ([arr f val]\n     (let [cnt (alength arr)]\n       (loop [val val, n 0]\n         (if (< n cnt)\n           (let [nval (f val (aget arr n))]\n             (if (reduced? nval)\n               @nval\n               (recur nval (inc n))))\n           val))))\n  ([arr f val idx]\n     (let [cnt (alength arr)]\n       (loop [val val, n idx]\n         (if (< n cnt)\n           (let [nval (f val (aget arr n))]\n             (if (reduced? nval)\n               @nval\n               (recur nval (inc n))))\n           val)))))\n\n(declare hash-coll cons drop count nth RSeq List)\n\n(defn counted?\n  \"Returns true if coll implements count in constant time\"\n  [x] (satisfies? ICounted x))\n\n(defn indexed?\n  \"Returns true if coll implements nth in constant time\"\n  [x] (satisfies? IIndexed x))\n\n(defn- -indexOf\n  ([coll x]\n   (-indexOf coll x 0))\n  ([coll x start]\n   (let [len (count coll)]\n     (if (>= start len)\n       -1\n       (loop [idx (cond\n                    (pos? start) start\n                    (neg? start) (max 0 (+ start len))\n                    :else start)]\n         (if (< idx len)\n           (if (= (nth coll idx) x)\n             idx\n             (recur (inc idx)))\n           -1))))))\n\n(defn- -lastIndexOf\n  ([coll x]\n   (-lastIndexOf coll x (count coll)))\n  ([coll x start]\n   (let [len (count coll)]\n    (if (zero? len)\n      -1\n      (loop [idx (cond\n                   (pos? start) (min (dec len) start)\n                   (neg? start) (+ len start)\n                   :else start)]\n        (if (>= idx 0)\n          (if (= (nth coll idx) x)\n            idx\n            (recur (dec idx)))\n          -1))))))\n\n(deftype IndexedSeqIterator [arr ^:mutable i]\n  Object\n  (hasNext [_]\n    (< i (alength arr)))\n  (next [_]\n    (let [ret (aget arr i)]\n      (set! i (inc i))\n      ret)))\n\n(deftype IndexedSeq [arr i meta]\n  Object\n  (toString [coll]\n   (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [_] (IndexedSeq. arr i meta))\n\n  ISeqable\n  (-seq [this]\n    (when (< i (alength arr))\n      this))\n\n  IMeta\n  (-meta [coll] meta)\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (IndexedSeq. arr i new-meta)))\n\n  ASeq\n  ISeq\n  (-first [_] (aget arr i))\n  (-rest [_] (if (< (inc i) (alength arr))\n               (IndexedSeq. arr (inc i) nil)\n               (list)))\n\n  INext\n  (-next [_] (if (< (inc i) (alength arr))\n               (IndexedSeq. arr (inc i) nil)\n               nil))\n\n  ICounted\n  (-count [_]\n    (max 0 (- (alength arr) i)))\n\n  IIndexed\n  (-nth [coll n]\n    (let [i (+ n i)]\n      (if (and (<= 0 i) (< i (alength arr)))\n        (aget arr i)\n        (throw (js\/Error. \"Index out of bounds\")))))\n  (-nth [coll n not-found]\n    (let [i (+ n i)]\n      (if (and (<= 0 i) (< i (alength arr)))\n        (aget arr i)\n        not-found)))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IIterable\n  (-iterator [coll]\n    (IndexedSeqIterator. arr i))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IReduce\n  (-reduce [coll f]\n    (array-reduce arr f (aget arr i) (inc i)))\n  (-reduce [coll f start]\n    (array-reduce arr f start i))\n\n  IHash\n  (-hash [coll] (hash-ordered-coll coll))\n\n  IReversible\n  (-rseq [coll]\n    (let [c (-count coll)]\n      (if (pos? c)\n        (RSeq. coll (dec c) nil)))))\n\n(es6-iterable IndexedSeq)\n\n(defn prim-seq\n  \"Create seq from a primitive JavaScript Array-like.\"\n  ([prim]\n     (prim-seq prim 0))\n  ([prim i]\n     (when (< i (alength prim))\n       (IndexedSeq. prim i nil))))\n\n(defn array-seq\n  \"Create a seq from a JavaScript array.\"\n  ([array]\n     (prim-seq array 0))\n  ([array i]\n     (prim-seq array i)))\n\n(declare with-meta seq-reduce)\n\n(deftype RSeq [ci i meta]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [_] (RSeq. ci i meta))\n\n  IMeta\n  (-meta [coll] meta)\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (RSeq. ci i new-meta)))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ISeq\n  (-first [coll]\n    (-nth ci i))\n  (-rest [coll]\n    (if (pos? i)\n      (RSeq. ci (dec i) nil)\n      ()))\n\n  INext\n  (-next [coll]\n    (when (pos? i)\n      (RSeq. ci (dec i) nil)))\n\n  ICounted\n  (-count [coll] (inc i))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (hash-ordered-coll coll))\n\n  IReduce\n  (-reduce [col f] (seq-reduce f col))\n  (-reduce [col f start] (seq-reduce f start col)))\n\n(es6-iterable RSeq)\n\n(defn second\n  \"Same as (first (next x))\"\n  [coll]\n  (first (next coll)))\n\n(defn ffirst\n  \"Same as (first (first x))\"\n  [coll]\n  (first (first coll)))\n\n(defn nfirst\n  \"Same as (next (first x))\"\n  [coll]\n  (next (first coll)))\n\n(defn fnext\n  \"Same as (first (next x))\"\n  [coll]\n  (first (next coll)))\n\n(defn nnext\n  \"Same as (next (next x))\"\n  [coll]\n  (next (next coll)))\n\n(defn last\n  \"Return the last item in coll, in linear time\"\n  [s]\n  (let [sn (next s)]\n    (if-not (nil? sn)\n      (recur sn)\n      (first s))))\n\n(extend-type default\n  IEquiv\n  (-equiv [x o] (identical? x o)))\n\n(defn conj\n  \"conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).\n  (conj coll) returns coll. (conj) returns [].\n  The 'addition' may happen at different 'places' depending\n  on the concrete type.\"\n  ([] [])\n  ([coll] coll)\n  ([coll x]\n    (if-not (nil? coll)\n      (-conj coll x)\n      (list x)))\n  ([coll x & xs]\n    (if xs\n      (recur (conj coll x) (first xs) (next xs))\n      (conj coll x))))\n\n(defn empty\n  \"Returns an empty collection of the same category as coll, or nil\"\n  [coll]\n  (when-not (nil? coll)\n    (cond\n      (implements? IEmptyableCollection coll)\n      (-empty coll)\n\n      (satisfies? IEmptyableCollection coll)\n      (-empty coll)\n\n      :else nil)))\n\n(defn- accumulating-seq-count [coll]\n  (loop [s (seq coll) acc 0]\n    (if (counted? s) ; assumes nil is counted, which it currently is\n      (+ acc (-count s))\n      (recur (next s) (inc acc)))))\n\n(defn count\n  \"Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps\"\n  [coll]\n  (if-not (nil? coll)\n    (cond\n      (implements? ICounted coll)\n      (-count coll)\n\n      (array? coll)\n      (alength coll)\n\n      (string? coll)\n      ^number (.-length coll)\n\n      (implements? ISeqable coll)\n      (accumulating-seq-count coll)\n\n      :else (-count coll))\n    0))\n\n(defn- linear-traversal-nth\n  ([coll n]\n     (cond\n       (nil? coll)     (throw (js\/Error. \"Index out of bounds\"))\n       (zero? n)       (if (seq coll)\n                         (first coll)\n                         (throw (js\/Error. \"Index out of bounds\")))\n       (indexed? coll) (-nth coll n)\n       (seq coll)      (recur (next coll) (dec n))\n       :else           (throw (js\/Error. \"Index out of bounds\"))))\n  ([coll n not-found]\n     (cond\n       (nil? coll)     not-found\n       (zero? n)       (if (seq coll)\n                         (first coll)\n                         not-found)\n       (indexed? coll) (-nth coll n not-found)\n       (seq coll)      (recur (next coll) (dec n) not-found)\n       :else           not-found)))\n\n(defn nth\n  \"Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.\"\n  ([coll n]\n    (cond\n      (not (number? n))\n      (throw (js\/Error. \"Index argument to nth must be a number\"))\n\n      (nil? coll)\n      coll\n\n      (implements? IIndexed coll)\n      (-nth coll n)\n\n      (array? coll)\n      (if (and (< -1 n (.-length coll)))\n        (aget coll (int n))\n        (throw (js\/Error. \"Index out of bounds\")))\n\n      (string? coll)\n      (if (and (< -1 n (.-length coll)))\n        (.charAt coll (int n))\n        (throw (js\/Error. \"Index out of bounds\")))\n\n      (or (implements? ISeq coll)\n          (implements? ISequential coll))\n      (if (neg? n)\n        (throw (js\/Error. \"Index out of bounds\"))\n        (linear-traversal-nth coll n))\n\n      (native-satisfies? IIndexed coll)\n      (-nth coll n)\n\n      :else\n      (throw (js\/Error. (str \"nth not supported on this type \"\n                          (type->str (type coll)))))))\n  ([coll n not-found]\n    (cond\n      (not (number? n))\n      (throw (js\/Error. \"Index argument to nth must be a number.\"))\n\n      (nil? coll)\n      not-found\n\n      (implements? IIndexed coll)\n      (-nth coll n not-found)\n\n      (array? coll)\n      (if (and (< -1 n (.-length coll)))\n        (aget coll (int n))\n        not-found)\n\n      (string? coll)\n      (if (and (< -1 n (.-length coll)))\n        (.charAt coll (int n))\n        not-found)\n\n      (or (implements? ISeq coll)\n          (implements? ISequential coll))\n      (if (neg? n)\n        not-found\n        (linear-traversal-nth coll n not-found))\n\n      (native-satisfies? IIndexed coll)\n      (-nth coll n not-found)\n\n      :else\n      (throw (js\/Error. (str \"nth not supported on this type \"\n                          (type->str (type coll))))))))\n\n(defn nthrest\n  \"Returns the nth rest of coll, coll when n is 0.\"\n  [coll n]\n    (loop [n n xs coll]\n      (if-let [xs (and (pos? n) (seq xs))]\n        (recur (dec n) (rest xs))\n        xs)))\n\n(defn get\n  \"Returns the value mapped to key, not-found or nil if key not present.\"\n  ([o k]\n    (when-not (nil? o)\n      (cond\n        (implements? ILookup o)\n        (-lookup o k)\n\n        (array? o)\n        (when (and (some? k) (< k (.-length o)))\n          (aget o (int k)))\n\n        (string? o)\n        (when (and (some? k) (< -1 k (.-length o)))\n          (.charAt o (int k)))\n\n        (native-satisfies? ILookup o)\n        (-lookup o k)\n\n        :else nil)))\n  ([o k not-found]\n    (if-not (nil? o)\n      (cond\n        (implements? ILookup o)\n        (-lookup o k not-found)\n\n        (array? o)\n        (if (and (some? k) (< -1 k (.-length o)))\n          (aget o (int k))\n          not-found)\n\n        (string? o)\n        (if (and (some? k) (< -1 k (.-length o)))\n          (.charAt o (int k))\n          not-found)\n\n        (native-satisfies? ILookup o)\n        (-lookup o k not-found)\n\n        :else not-found)\n      not-found)))\n\n(declare PersistentHashMap PersistentArrayMap MapEntry)\n\n(defn assoc\n  \"assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed\/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index. Note - index must be <= (count vector).\"\n  ([coll k v]\n   (if (implements? IAssociative coll)\n     (-assoc coll k v)\n     (if-not (nil? coll)\n       (-assoc coll k v)\n       (array-map k v))))\n  ([coll k v & kvs]\n     (let [ret (assoc coll k v)]\n       (if kvs\n         (recur ret (first kvs) (second kvs) (nnext kvs))\n         ret))))\n\n(defn dissoc\n  \"dissoc[iate]. Returns a new map of the same (hashed\/sorted) type,\n  that does not contain a mapping for key(s).\"\n  ([coll] coll)\n  ([coll k]\n    (when-not (nil? coll)\n      (-dissoc coll k)))\n  ([coll k & ks]\n    (when-not (nil? coll)\n      (let [ret (dissoc coll k)]\n        (if ks\n          (recur ret (first ks) (next ks))\n          ret)))))\n\n(defn fn?\n  \"Return true if f is a JavaScript function or satisfies the Fn protocol.\"\n  [f]\n  (or (js-fn? f) (satisfies? Fn f)))\n\n(deftype MetaFn [afn meta]\n  IMeta\n  (-meta [_] meta)\n  IWithMeta\n  (-with-meta [_ new-meta]\n    (MetaFn. afn new-meta))\n  Fn\n  IFn\n  (-invoke [_]\n    (afn))\n  (-invoke [_ a]\n    (afn a))\n  (-invoke [_ a b]\n    (afn a b))\n  (-invoke [_ a b c]\n    (afn a b c))\n  (-invoke [_ a b c d]\n    (afn a b c d))\n  (-invoke [_ a b c d e]\n    (afn a b c d e))\n  (-invoke [_ a b c d e f]\n    (afn a b c d e f))\n  (-invoke [_ a b c d e f g]\n    (afn a b c d e f g))\n  (-invoke [_ a b c d e f g h]\n    (afn a b c d e f g h))\n  (-invoke [_ a b c d e f g h i]\n    (afn a b c d e f g h i))\n  (-invoke [_ a b c d e f g h i j]\n    (afn a b c d e f g h i j))\n  (-invoke [_ a b c d e f g h i j k]\n    (afn a b c d e f g h i j k))\n  (-invoke [_ a b c d e f g h i j k l]\n    (afn a b c d e f g h i j k l))\n  (-invoke [_ a b c d e f g h i j k l m]\n    (afn a b c d e f g h i j k l m))\n  (-invoke [_ a b c d e f g h i j k l m n]\n    (afn a b c d e f g h i j k l m n))\n  (-invoke [_ a b c d e f g h i j k l m n o]\n    (afn a b c d e f g h i j k l m n o))\n  (-invoke [_ a b c d e f g h i j k l m n o p]\n    (afn a b c d e f g h i j k l m n o p))\n  (-invoke [_ a b c d e f g h i j k l m n o p q]\n    (afn a b c d e f g h i j k l m n o p q))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r]\n    (afn a b c d e f g h i j k l m n o p q r))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s]\n    (afn a b c d e f g h i j k l m n o p q r s))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s t]\n    (afn a b c d e f g h i j k l m n o p q r s t))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s t rest]\n    (apply afn a b c d e f g h i j k l m n o p q r s t rest)))\n\n(defn with-meta\n  \"Returns an object of the same type and value as obj, with\n  map m as its metadata.\"\n  [o meta]\n  (if (js-fn? o)\n    (MetaFn. o meta)\n    (when-not (nil? o)\n      (-with-meta o meta))))\n\n(defn meta\n  \"Returns the metadata of obj, returns nil if there is no metadata.\"\n  [o]\n  (when (and (not (nil? o))\n             (satisfies? IMeta o))\n    (-meta o)))\n\n(defn peek\n  \"For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.\"\n  [coll]\n  (when-not (nil? coll)\n    (-peek coll)))\n\n(defn pop\n  \"For a list or queue, returns a new list\/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next\/butlast.\"\n  [coll]\n  (when-not (nil? coll)\n    (-pop coll)))\n\n(defn disj\n  \"disj[oin]. Returns a new set of the same (hashed\/sorted) type, that\n  does not contain key(s).\"\n  ([coll] coll)\n  ([coll k]\n    (when-not (nil? coll)\n      (-disjoin coll k)))\n  ([coll k & ks]\n    (when-not (nil? coll)\n      (let [ret (disj coll k)]\n        (if ks\n          (recur ret (first ks) (next ks))\n          ret)))))\n\n(defn empty?\n  \"Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))\"\n  [coll] (or (nil? coll)\n             (not (seq coll))))\n\n(defn coll?\n  \"Returns true if x satisfies ICollection\"\n  [x]\n  (if (nil? x)\n    false\n    (satisfies? ICollection x)))\n\n(defn set?\n  \"Returns true if x satisfies ISet\"\n  [x]\n  (if (nil? x)\n    false\n    (satisfies? ISet x)))\n\n(defn associative?\n \"Returns true if coll implements IAssociative\"\n  [x] (satisfies? IAssociative x))\n\n(defn ifind?\n \"Returns true if coll implements IFind\"\n  [x] (satisfies? IFind x))\n\n(defn sequential?\n  \"Returns true if coll satisfies ISequential\"\n  [x] (satisfies? ISequential x))\n\n(defn sorted?\n  \"Returns true if coll satisfies ISorted\"\n  [x] (satisfies? ISorted x))\n\n(defn reduceable?\n  \"Returns true if coll satisfies IReduce\"\n  [x] (satisfies? IReduce x))\n\n(defn map?\n  \"Return true if x satisfies IMap\"\n  [x]\n  (if (nil? x)\n    false\n    (satisfies? IMap x)))\n\n(defn record?\n  \"Return true if x satisfies IRecord\"\n  [x]\n  (satisfies? IRecord x))\n\n(defn vector?\n  \"Return true if x satisfies IVector\"\n  [x] (satisfies? IVector x))\n\n(declare ChunkedCons ChunkedSeq)\n\n(defn chunked-seq?\n  \"Return true if x satisfies IChunkedSeq.\"\n  [x] (implements? IChunkedSeq x))\n\n;;;;;;;;;;;;;;;;;;;; js primitives ;;;;;;;;;;;;\n(defn js-obj\n  \"Create JavaSript object from an even number arguments representing\n  interleaved keys and values.\"\n  ([]\n     (cljs.core\/js-obj))\n  ([& keyvals]\n     (apply gobject\/create keyvals)))\n\n(defn js-keys\n  \"Return the JavaScript keys for an object.\"\n  [obj]\n  (gobject\/getKeys obj))\n\n(defn js-delete\n  \"Delete a property from a JavaScript object.\n  Returns true upon success, false otherwise.\"\n  [obj key]\n  (cljs.core\/js-delete obj key))\n\n(defn- array-copy\n  ([from i to j len]\n    (loop [i i j j len len]\n       (if (zero? len)\n         to\n         (do (aset to j (aget from i))\n             (recur (inc i) (inc j) (dec len)))))))\n\n(defn- array-copy-downward\n  ([from i to j len]\n     (loop [i (+ i (dec len)) j (+ j (dec len)) len len]\n       (if (zero? len)\n         to\n         (do (aset to j (aget from i))\n             (recur (dec i) (dec j) (dec len)))))))\n\n;;;;;;;;;;;;;;;; preds ;;;;;;;;;;;;;;;;;;\n\n(def ^:private lookup-sentinel (js-obj))\n\n(defn ^boolean false?\n  \"Returns true if x is the value false, false otherwise.\"\n  [x] (cljs.core\/false? x))\n\n(defn ^boolean true?\n  \"Returns true if x is the value true, false otherwise.\"\n  [x] (cljs.core\/true? x))\n\n(defn boolean?\n  \"Return true if x is a Boolean\"\n  [x] (or (cljs.core\/true? x) (cljs.core\/false? x)))\n\n(defn ^boolean undefined?\n  \"Returns true if x identical to the JavaScript undefined value.\"\n  [x]\n  (cljs.core\/undefined? x))\n\n(defn seq?\n  \"Return true if s satisfies ISeq\"\n  [s]\n  (if (nil? s)\n    false\n    (satisfies? ISeq s)))\n\n(defn seqable?\n  \"Return true if the seq function is supported for s\"\n  [s]\n  (or\n   (nil? s)\n   (satisfies? ISeqable s)\n   (array? s)\n   (string? s)))\n\n(defn boolean\n  \"Coerce to boolean\"\n  [x]\n  (cond\n    (nil? x) false\n    (false? x) false\n    :else true))\n\n(defn ifn?\n  \"Returns true if f returns true for fn? or satisfies IFn.\"\n  [f]\n  (or (fn? f) (satisfies? IFn f)))\n\n(defn integer?\n  \"Returns true if n is a JavaScript number with no decimal part.\"\n  [n]\n  (and (number? n)\n       (not ^boolean (js\/isNaN n))\n       (not (identical? n js\/Infinity))\n       (== (js\/parseFloat n) (js\/parseInt n 10))))\n\n(def\n  ^{:doc \"INTERNAL: do not use\"}\n  LongImpl goog.math.Long)\n\n(defn int?\n  \"Return true if x satisfies integer? or is an instance of goog.math.Integer\n   or goog.math.Long.\"\n  [x]\n  (or (integer? x)\n      (instance? goog.math.Integer x)\n      (instance? goog.math.Long x)))\n\n(defn pos-int?\n  \"Return true if x satisfies int? and is positive.\"\n  [x]\n  (cond\n    (integer? x) (pos? x)\n\n    (instance? goog.math.Integer x)\n    (and (not (.isNegative x))\n         (not (.isZero x)))\n\n    (instance? goog.math.Long x)\n    (and (not (.isNegative x))\n         (not (.isZero x)))\n\n    :else false))\n\n(defn ^boolean neg-int?\n  \"Return true if x satisfies int? and is negative.\"\n  [x]\n  (cond\n    (integer? x) (neg? x)\n\n    (instance? goog.math.Integer x)\n    (.isNegative x)\n\n    (instance? goog.math.Long x)\n    (.isNegative x)\n\n    :else false))\n\n(defn nat-int?\n  \"Return true if x satisfies int? and is a natural integer value.\"\n  [x]\n  (cond\n    (integer? x)\n    (not (neg? x))\n\n    (instance? goog.math.Integer x)\n    (not (.isNegative x))\n\n    (instance? goog.math.Long x)\n    (not (.isNegative x))\n\n    :else false))\n\n(defn float?\n  \"Returns true for JavaScript numbers, false otherwise.\"\n  [x]\n  (number? x))\n\n(defn double?\n  \"Returns true for JavaScript numbers, false otherwise.\"\n  [x]\n  (number? x))\n\n(defn infinite?\n  \"Returns true for Infinity and -Infinity values.\"\n  [x]\n  (or (identical? x js\/Number.POSITIVE_INFINITY)\n      (identical? x js\/Number.NEGATIVE_INFINITY)))\n\n(defn contains?\n  \"Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.\"\n  [coll v]\n  (cond\n    (implements? IAssociative coll)\n    (-contains-key? coll v)\n\n    (native-satisfies? IAssociative coll)\n    (-contains-key? coll v)\n\n    (identical? (get coll v lookup-sentinel) lookup-sentinel)\n    false\n\n    :else\n    true))\n\n(defn find\n  \"Returns the map entry for key, or nil if key not present.\"\n  [coll k]\n  (if (ifind? coll)\n    (-find coll k)\n    (when (and (not (nil? coll))\n            (associative? coll)\n            (contains? coll k))\n      (MapEntry. k (get coll k) nil))))\n\n(defn ^boolean distinct?\n  \"Returns true if no two of the arguments are =\"\n  ([x] true)\n  ([x y] (not (= x y)))\n  ([x y & more]\n     (if (not (= x y))\n     (loop [s #{x y} xs more]\n       (let [x (first xs)\n             etc (next xs)]\n         (if xs\n           (if (contains? s x)\n             false\n             (recur (conj s x) etc))\n           true)))\n     false)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Seq fns ;;;;;;;;;;;;;;;;\n\n(defn ^number compare\n  \"Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.\"\n  [x y]\n  (cond\n   (identical? x y) 0\n\n   (nil? x) -1\n\n   (nil? y) 1\n\n   (number? x) (if (number? y)\n                 (garray\/defaultCompare x y)\n                 (throw (js\/Error. (str \"Cannot compare \" x \" to \" y))))\n\n   (satisfies? IComparable x)\n   (-compare x y)\n\n   :else\n   (if (and (or (string? x) (array? x) (true? x) (false? x))\n            (identical? (type x) (type y)))\n     (garray\/defaultCompare x y)\n     (throw (js\/Error. (str \"Cannot compare \" x \" to \" y))))))\n\n(defn ^:private compare-indexed\n  \"Compare indexed collection.\"\n  ([xs ys]\n     (let [xl (count xs)\n           yl (count ys)]\n       (cond\n        (< xl yl) -1\n        (> xl yl) 1\n        (== xl 0) 0\n        :else (compare-indexed xs ys xl 0))))\n  ([xs ys len n]\n     (let [d (compare (nth xs n) (nth ys n))]\n       (if (and (zero? d) (< (+ n 1) len))\n         (recur xs ys len (inc n))\n         d))))\n\n(defn ^:private fn->comparator\n  \"Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.\"\n  [f]\n  (if (= f compare)\n    compare\n    (fn [x y]\n      (let [r (f x y)]\n        (if (number? r)\n          r\n          (if r\n            -1\n            (if (f y x) 1 0)))))))\n\n(declare to-array)\n\n(defn sort\n  \"Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison function, or a -\/0\/+ valued comparator.\n   Comp defaults to compare.\"\n  ([coll]\n   (sort compare coll))\n  ([comp coll]\n   (if (seq coll)\n     (let [a (to-array coll)]\n       ;; matching Clojure's stable sort, though docs don't promise it\n       (garray\/stableSort a (fn->comparator comp))\n       (with-meta (seq a) (meta coll)))\n     ())))\n\n(defn sort-by\n  \"Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison function, or a -\/0\/+ valued comparator.\n   Comp defaults to compare.\"\n  ([keyfn coll]\n   (sort-by keyfn compare coll))\n  ([keyfn comp coll]\n     (sort (fn [x y] ((fn->comparator comp) (keyfn x) (keyfn y))) coll)))\n\n; simple reduce based on seqs, used as default\n(defn- seq-reduce\n  ([f coll]\n    (if-let [s (seq coll)]\n      (reduce f (first s) (next s))\n      (f)))\n  ([f val coll]\n    (loop [val val, coll (seq coll)]\n      (if coll\n        (let [nval (f val (first coll))]\n          (if (reduced? nval)\n            @nval\n            (recur nval (next coll))))\n        val))))\n\n(declare vec)\n\n(defn shuffle\n  \"Return a random permutation of coll\"\n  [coll]\n  (let [a (to-array coll)]\n    (garray\/shuffle a)\n    (vec a)))\n\n(defn- iter-reduce\n  ([coll f]\n   (let [iter (-iterator coll)]\n     (if (.hasNext iter)\n       (let [init (.next iter)]\n         (loop [acc init]\n           (if ^boolean (.hasNext iter)\n             (let [nacc (f acc (.next iter))]\n               (if (reduced? nacc)\n                 @nacc\n                 (recur nacc)))\n             acc)))\n       (f))))\n  ([coll f init]\n   (let [iter (-iterator coll)]\n     (loop [acc init]\n       (if ^boolean (.hasNext iter)\n         (let [nacc (f acc (.next iter))]\n           (if (reduced? nacc)\n             @nacc\n             (recur nacc)))\n         acc)))))\n\n(defn reduce\n  \"f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.\"\n  ([f coll]\n     (cond\n       (implements? IReduce coll)\n       (-reduce coll f)\n\n       (array? coll)\n       (array-reduce coll f)\n\n       (string? coll)\n       (array-reduce coll f)\n\n       (native-satisfies? IReduce coll)\n       (-reduce coll f)\n\n       (iterable? coll)\n       (iter-reduce coll f)\n\n       :else\n       (seq-reduce f coll)))\n  ([f val coll]\n     (cond\n       (implements? IReduce coll)\n       (-reduce coll f val)\n\n       (array? coll)\n       (array-reduce coll f val)\n\n       (string? coll)\n       (array-reduce coll f val)\n\n       (native-satisfies? IReduce coll)\n       (-reduce coll f val)\n\n       (iterable? coll)\n       (iter-reduce coll f val)\n\n       :else\n       (seq-reduce f val coll))))\n\n(defn reduce-kv\n  \"Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.\"\n  ([f init coll]\n    (if-not (nil? coll)\n      (-kv-reduce coll f init)\n      init)))\n\n(defn identity\n  \"Returns its argument.\"\n  [x] x)\n\n(defn completing\n  \"Takes a reducing function f of 2 args and returns a fn suitable for\n  transduce by adding an arity-1 signature that calls cf (default -\n  identity) on the result argument.\"\n  ([f] (completing f identity))\n  ([f cf]\n    (fn\n      ([] (f))\n      ([x] (cf x))\n      ([x y] (f x y)))))\n\n(defn transduce\n  \"reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.\"\n  ([xform f coll] (transduce xform f (f) coll))\n  ([xform f init coll]\n     (let [f (xform f)\n           ret (reduce f init coll)]\n       (f ret))))\n\n;;; Math - variadic forms will not work until the following implemented:\n;;; first, next, reduce\n\n(defn ^number +\n  \"Returns the sum of nums. (+) returns 0.\"\n  ([] 0)\n  ([x] x)\n  ([x y] (cljs.core\/+ x y))\n  ([x y & more]\n    (reduce + (cljs.core\/+ x y) more)))\n\n(defn ^number -\n  \"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.\"\n  ([x] (cljs.core\/- x))\n  ([x y] (cljs.core\/- x y))\n  ([x y & more] (reduce - (cljs.core\/- x y) more)))\n\n(defn ^number *\n  \"Returns the product of nums. (*) returns 1.\"\n  ([] 1)\n  ([x] x)\n  ([x y] (cljs.core\/* x y))\n  ([x y & more] (reduce * (cljs.core\/* x y) more)))\n\n(declare divide)\n\n(defn ^number \/\n  \"If no denominators are supplied, returns 1\/numerator,\n  else returns numerator divided by all of the denominators.\"\n  ([x] (\/ 1 x))\n  ([x y] (cljs.core\/divide x y)) ;; FIXME: waiting on cljs.core\/\/\n  ([x y & more] (reduce \/ (\/ x y) more)))\n\n(defn ^boolean <\n  \"Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.\"\n  ([x] true)\n  ([x y] (cljs.core\/< x y))\n  ([x y & more]\n     (if (cljs.core\/< x y)\n       (if (next more)\n         (recur y (first more) (next more))\n         (cljs.core\/< y (first more)))\n       false)))\n\n(defn ^boolean <=\n  \"Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.\"\n  ([x] true)\n  ([x y] (cljs.core\/<= x y))\n  ([x y & more]\n   (if (cljs.core\/<= x y)\n     (if (next more)\n       (recur y (first more) (next more))\n       (cljs.core\/<= y (first more)))\n     false)))\n\n(defn ^boolean >\n  \"Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.\"\n  ([x] true)\n  ([x y] (cljs.core\/> x y))\n  ([x y & more]\n   (if (cljs.core\/> x y)\n     (if (next more)\n       (recur y (first more) (next more))\n       (cljs.core\/> y (first more)))\n     false)))\n\n(defn ^boolean >=\n  \"Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.\"\n  ([x] true)\n  ([x y] (cljs.core\/>= x y))\n  ([x y & more]\n   (if (cljs.core\/>= x y)\n     (if (next more)\n       (recur y (first more) (next more))\n       (cljs.core\/>= y (first more)))\n     false)))\n\n(defn dec\n  \"Returns a number one less than num.\"\n  [x] (- x 1))\n\n(defn ^number max\n  \"Returns the greatest of the nums.\"\n  ([x] x)\n  ([x y] (cljs.core\/max x y))\n  ([x y & more]\n   (reduce max (cljs.core\/max x y) more)))\n\n(defn ^number min\n  \"Returns the least of the nums.\"\n  ([x] x)\n  ([x y] (cljs.core\/min x y))\n  ([x y & more]\n   (reduce min (cljs.core\/min x y) more)))\n\n(defn ^number byte [x] x)\n\n(defn char\n  \"Coerce to char\"\n  [x]\n  (cond\n    (number? x) (.fromCharCode js\/String x)\n    (and (string? x) (== (.-length x) 1)) x\n    :else (throw (js\/Error. \"Argument to char must be a character or number\"))))\n\n(defn ^number short [x] x)\n(defn ^number float [x] x)\n(defn ^number double [x] x)\n\n(defn ^number unchecked-byte [x] x)\n(defn ^number unchecked-char [x] x)\n(defn ^number unchecked-short [x] x)\n(defn ^number unchecked-float [x] x)\n(defn ^number unchecked-double [x] x)\n\n(defn ^number unchecked-add\n  \"Returns the sum of nums. (+) returns 0.\"\n  ([] 0)\n  ([x] x)\n  ([x y] (cljs.core\/unchecked-add x y))\n  ([x y & more] (reduce unchecked-add (cljs.core\/unchecked-add x y) more)))\n\n(defn ^number unchecked-add-int\n  \"Returns the sum of nums. (+) returns 0.\"\n  ([] 0)\n  ([x] x)\n  ([x y] (cljs.core\/unchecked-add-int x y))\n  ([x y & more] (reduce unchecked-add-int (cljs.core\/unchecked-add-int x y) more)))\n\n(defn unchecked-dec\n  \"Returns a number one less than x, an int.\"\n  [x]\n  (cljs.core\/unchecked-dec x))\n\n(defn unchecked-dec-int\n  \"Returns a number one less than x, an int.\"\n  [x]\n  (cljs.core\/unchecked-dec-int x))\n\n(defn ^number unchecked-divide-int\n  \"If no denominators are supplied, returns 1\/numerator,\n  else returns numerator divided by all of the denominators.\"\n  ([x] (unchecked-divide-int 1 x))\n  ([x y] (cljs.core\/divide x y)) ;; FIXME: waiting on cljs.core\/\/\n  ([x y & more] (reduce unchecked-divide-int (unchecked-divide-int x y) more)))\n\n(defn unchecked-inc [x]\n  (cljs.core\/unchecked-inc x))\n\n(defn unchecked-inc-int [x]\n  (cljs.core\/unchecked-inc-int x))\n\n(defn ^number unchecked-multiply\n  \"Returns the product of nums. (*) returns 1.\"\n  ([] 1)\n  ([x] x)\n  ([x y] (cljs.core\/unchecked-multiply x y))\n  ([x y & more] (reduce unchecked-multiply (cljs.core\/unchecked-multiply x y) more)))\n\n(defn ^number unchecked-multiply-int\n  \"Returns the product of nums. (*) returns 1.\"\n  ([] 1)\n  ([x] x)\n  ([x y] (cljs.core\/unchecked-multiply-int x y))\n  ([x y & more] (reduce unchecked-multiply-int (cljs.core\/unchecked-multiply-int x y) more)))\n\n(defn unchecked-negate [x]\n  (cljs.core\/unchecked-negate x))\n\n(defn unchecked-negate-int [x]\n  (cljs.core\/unchecked-negate-int x))\n\n(declare mod)\n\n(defn unchecked-remainder-int [x n]\n  (cljs.core\/unchecked-remainder-int x n))\n\n(defn ^number unchecked-subtract\n  \"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.\"\n  ([x] (cljs.core\/unchecked-subtract x))\n  ([x y] (cljs.core\/unchecked-subtract x y))\n  ([x y & more] (reduce unchecked-subtract (cljs.core\/unchecked-subtract x y) more)))\n\n(defn ^number unchecked-subtract-int\n  \"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.\"\n  ([x] (cljs.core\/unchecked-subtract-int x))\n  ([x y] (cljs.core\/unchecked-subtract-int x y))\n  ([x y & more] (reduce unchecked-subtract-int (cljs.core\/unchecked-subtract-int x y) more)))\n\n(defn- ^number fix [q]\n  (if (>= q 0)\n    (Math\/floor q)\n    (Math\/ceil q)))\n\n(defn int\n  \"Coerce to int by stripping decimal places.\"\n  [x]\n  (bit-or x 0))\n\n(defn unchecked-int\n  \"Coerce to int by stripping decimal places.\"\n  [x]\n  (fix x))\n\n(defn long\n  \"Coerce to long by stripping decimal places. Identical to `int'.\"\n  [x]\n  (fix x))\n\n(defn unchecked-long\n  \"Coerce to long by stripping decimal places. Identical to `int'.\"\n  [x]\n  (fix x))\n\n(defn booleans [x] x)\n(defn bytes [x] x)\n(defn chars [x] x)\n(defn shorts [x] x)\n(defn ints [x] x)\n(defn floats [x] x)\n(defn doubles [x] x)\n(defn longs [x] x)\n\n(defn js-mod\n  \"Modulus of num and div with original javascript behavior. i.e. bug for negative numbers\"\n  [n d]\n  (cljs.core\/js-mod n d))\n\n(defn mod\n  \"Modulus of num and div. Truncates toward negative infinity.\"\n  [n d]\n  (js-mod (+ (js-mod n d) d) d))\n\n(defn quot\n  \"quot[ient] of dividing numerator by denominator.\"\n  [n d]\n  (let [rem (js-mod n d)]\n    (fix (\/ (- n rem) d))))\n\n(defn rem\n  \"remainder of dividing numerator by denominator.\"\n  [n d]\n  (let [q (quot n d)]\n    (- n (* d q))))\n\n(defn bit-xor\n  \"Bitwise exclusive or\"\n  ([x y] (cljs.core\/bit-xor x y))\n  ([x y & more]\n     (reduce bit-xor (cljs.core\/bit-xor x y) more)))\n\n(defn bit-and\n  \"Bitwise and\"\n  ([x y] (cljs.core\/bit-and x y))\n  ([x y & more]\n     (reduce bit-and (cljs.core\/bit-and x y) more)))\n\n(defn bit-or\n  \"Bitwise or\"\n  ([x y] (cljs.core\/bit-or x y))\n  ([x y & more]\n     (reduce bit-or (cljs.core\/bit-or x y) more)))\n\n(defn bit-and-not\n  \"Bitwise and with complement\"\n  ([x y] (cljs.core\/bit-and-not x y))\n  ([x y & more]\n     (reduce bit-and-not (cljs.core\/bit-and-not x y) more)))\n\n(defn bit-clear\n  \"Clear bit at index n\"\n  [x n]\n  (cljs.core\/bit-clear x n))\n\n(defn bit-flip\n  \"Flip bit at index n\"\n  [x n]\n  (cljs.core\/bit-flip x n))\n\n(defn bit-not\n  \"Bitwise complement\"\n  [x] (cljs.core\/bit-not x))\n\n(defn bit-set\n  \"Set bit at index n\"\n  [x n]\n  (cljs.core\/bit-set x n))\n\n(defn ^boolean bit-test\n  \"Test bit at index n\"\n  [x n]\n  (cljs.core\/bit-test x n))\n\n(defn bit-shift-left\n  \"Bitwise shift left\"\n  [x n] (cljs.core\/bit-shift-left x n))\n\n(defn bit-shift-right\n  \"Bitwise shift right\"\n  [x n] (cljs.core\/bit-shift-right x n))\n\n(defn bit-shift-right-zero-fill\n  \"DEPRECATED: Bitwise shift right with zero fill\"\n  [x n] (cljs.core\/bit-shift-right-zero-fill x n))\n\n(defn unsigned-bit-shift-right\n  \"Bitwise shift right with zero fill\"\n  [x n] (cljs.core\/unsigned-bit-shift-right x n))\n\n(defn bit-count\n  \"Counts the number of bits set in n\"\n  [v]\n  (let [v (- v (bit-and (bit-shift-right v 1) 0x55555555))\n        v (+ (bit-and v 0x33333333) (bit-and (bit-shift-right v 2) 0x33333333))]\n    (bit-shift-right (* (bit-and (+ v (bit-shift-right v 4)) 0xF0F0F0F) 0x1010101) 24)))\n\n(defn ^boolean ==\n  \"Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.\"\n  ([x] true)\n  ([x y] (-equiv x y))\n  ([x y & more]\n   (if (== x y)\n     (if (next more)\n       (recur y (first more) (next more))\n       (== y (first more)))\n     false)))\n\n(defn ^boolean pos?\n  \"Returns true if num is greater than zero, else false\"\n  [x] (cljs.core\/pos? x))\n\n(defn ^boolean zero?\n  \"Returns true if num is zero, else false\"\n  [x]\n  (cljs.core\/zero? x))\n\n(defn ^boolean neg?\n  \"Returns true if num is less than zero, else false\"\n  [x] (cljs.core\/neg? x))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; protocols for host types ;;;;;;\n\n(defn nthnext\n  \"Returns the nth next of coll, (seq coll) when n is 0.\"\n  [coll n]\n  (loop [n n xs (seq coll)]\n    (if (and xs (pos? n))\n      (recur (dec n) (next xs))\n      xs)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;; basics ;;;;;;;;;;;;;;;;;;\n\n(defn str\n  \"With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.\"\n  ([] \"\")\n  ([x] (if (nil? x)\n         \"\"\n         (.join #js [x] \"\")))\n  ([x & ys]\n    (loop [sb (StringBuffer. (str x)) more ys]\n      (if more\n        (recur (. sb  (append (str (first more)))) (next more))\n        (.toString sb)))))\n\n(defn subs\n  \"Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.\"\n  ([s start] ^string (.substring s start))\n  ([s start end] ^string (.substring s start end)))\n\n(declare map name)\n\n(defn- equiv-sequential\n  \"Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.\"\n  [x y]\n  (boolean\n    (when (sequential? y)\n      (if (and (counted? x) (counted? y)\n               (not (== (count x) (count y))))\n        false\n        (loop [xs (seq x) ys (seq y)]\n          (cond (nil? xs) (nil? ys)\n            (nil? ys) false\n            (= (first xs) (first ys)) (recur (next xs) (next ys))\n            :else false))))))\n\n(defn- hash-coll [coll]\n  (if (seq coll)\n    (loop [res (hash (first coll)) s (next coll)]\n      (if (nil? s)\n        res\n        (recur (hash-combine res (hash (first s))) (next s))))\n    0))\n\n(declare key val)\n\n(defn- hash-imap [m]\n  ;; a la clojure.lang.APersistentMap\n  (loop [h 0 s (seq m)]\n    (if s\n      (let [e (first s)]\n        (recur (js-mod (+ h (bit-xor (hash (key e)) (hash (val e))))\n                    4503599627370496)\n               (next s)))\n      h)))\n\n(defn- hash-iset [s]\n  ;; a la clojure.lang.APersistentSet\n  (loop [h 0 s (seq s)]\n    (if s\n      (let [e (first s)]\n        (recur (js-mod (+ h (hash e)) 4503599627370496)\n               (next s)))\n      h)))\n\n(declare name chunk-first chunk-rest)\n\n(defn- extend-object!\n  \"Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implicit this (via the this-as macro) will resolve to the\n  object that the function is attached.\"\n  [obj fn-map]\n  (doseq [[key-name f] fn-map]\n    (let [str-name (name key-name)]\n      (gobject\/set obj str-name f)))\n  obj)\n\n;;;;;;;;;;;;;;;; cons ;;;;;;;;;;;;;;;;\n(deftype List [meta first rest count ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x count))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IList\n\n  ICloneable\n  (-clone [_] (List. meta first rest count __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (List. new-meta first rest count __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ASeq\n  ISeq\n  (-first [coll] first)\n  (-rest [coll]\n    (if (== count 1)\n      ()\n      rest))\n\n  INext\n  (-next [coll]\n    (if (== count 1)\n      nil\n      rest))\n\n  IStack\n  (-peek [coll] first)\n  (-pop [coll] (-rest coll))\n\n  ICollection\n  (-conj [coll o] (List. meta o coll (inc count) nil))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY List) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ICounted\n  (-count [coll] count)\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(defn list?\n  \"Returns true if x implements IList\"\n  [x]\n  (satisfies? IList x))\n\n(es6-iterable List)\n\n(deftype EmptyList [meta]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IList\n\n  ICloneable\n  (-clone [_] (EmptyList. meta))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (EmptyList. new-meta)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll] nil)\n  (-rest [coll] ())\n\n  INext\n  (-next [coll] nil)\n\n  IStack\n  (-peek [coll] nil)\n  (-pop [coll] (throw (js\/Error. \"Can't pop empty list\")))\n\n  ICollection\n  (-conj [coll o] (List. meta o nil 1 nil))\n\n  IEmptyableCollection\n  (-empty [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other]\n    (if (or (list? other)\n            (sequential? other))\n      (nil? (seq other))\n      false))\n\n  IHash\n  (-hash [coll] empty-ordered-hash)\n\n  ISeqable\n  (-seq [coll] nil)\n\n  ICounted\n  (-count [coll] 0)\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(set! (.-EMPTY List) (EmptyList. nil))\n\n(es6-iterable EmptyList)\n\n(defn reversible?\n  \"Returns true if coll satisfies? IReversible.\"\n  [coll]\n  (satisfies? IReversible coll))\n\n(defn ^seq rseq\n  \"Returns, in constant time, a seq of the items in rev (which\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil\"\n  [rev]\n  (-rseq rev))\n\n(defn reverse\n  \"Returns a seq of the items in coll in reverse order. Not lazy.\"\n  [coll]\n  (if (reversible? coll)\n    (or (rseq coll) ())\n    (reduce conj () coll)))\n\n(defn list\n  \"Creates a new list containing the items.\"\n  [& xs]\n  (let [arr (if (and (instance? IndexedSeq xs) (zero? (.-i xs)))\n              (.-arr xs)\n              (let [arr (array)]\n                (loop [^not-native xs xs]\n                  (if-not (nil? xs)\n                    (do\n                      (.push arr (-first xs))\n                      (recur (-next xs)))\n                    arr))))]\n    (loop [i (alength arr) r ()]\n      (if (> i 0)\n        (recur (dec i) (-conj r (aget arr (dec i))))\n        r))))\n\n(deftype Cons [meta first rest ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IList\n\n  ICloneable\n  (-clone [_] (Cons. meta first rest __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (Cons. new-meta first rest __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ASeq\n  ISeq\n  (-first [coll] first)\n  (-rest [coll] (if (nil? rest) () rest))\n\n  INext\n  (-next [coll]\n    (if (nil? rest) nil (seq rest)))\n\n  ICollection\n  (-conj [coll o] (Cons. nil o coll nil))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable Cons)\n\n(defn cons\n  \"Returns a new seq where x is the first element and coll is the rest.\"\n  [x coll]\n  (cond\n    (nil? coll)             (List. nil x nil 1 nil)\n    (implements? ISeq coll) (Cons. nil x coll nil)\n    :default                (Cons. nil x (seq coll) nil)))\n\n(defn hash-keyword [k]\n  (int (+ (hash-symbol k) 0x9e3779b9)))\n\n(defn- compare-keywords [a b]\n  (cond\n   (identical? (.-fqn a) (.-fqn b)) 0\n   (and (not (.-ns a)) (.-ns b)) -1\n   (.-ns a) (if-not (.-ns b)\n              1\n              (let [nsc (garray\/defaultCompare (.-ns a) (.-ns b))]\n                (if (== 0 nsc)\n                  (garray\/defaultCompare (.-name a) (.-name b))\n                  nsc)))\n   :default (garray\/defaultCompare (.-name a) (.-name b))))\n\n(deftype Keyword [ns name fqn ^:mutable _hash]\n  Object\n  (toString [_] (str \":\" fqn))\n  (equiv [this other]\n    (-equiv this other))\n\n  IEquiv\n  (-equiv [_ other]\n    (if (instance? Keyword other)\n      (identical? fqn (.-fqn other))\n      false))\n  IFn\n  (-invoke [kw coll]\n    (get coll kw))\n  (-invoke [kw coll not-found]\n    (get coll kw not-found))\n\n  IHash\n  (-hash [this]\n    (caching-hash this hash-keyword _hash))\n\n  INamed\n  (-name [_] name)\n  (-namespace [_] ns)\n\n  IPrintWithWriter\n  (-pr-writer [o writer _] (-write writer (str \":\" fqn))))\n\n(defn keyword?\n  \"Return true if x is a Keyword\"\n  [x]\n  (instance? Keyword x))\n\n(defn keyword-identical?\n  \"Efficient test to determine that two keywords are identical.\"\n  [x y]\n  (if (identical? x y)\n    true\n    (if (and (keyword? x) (keyword? y))\n      (identical? (.-fqn x) (.-fqn y))\n      false)))\n\n(defn symbol-identical?\n  \"Efficient test to determine that two symbols are identical.\"\n  [x y]\n  (if (identical? x y)\n    true\n    (if (and (symbol? x) (symbol? y))\n      (identical? (.-str x) (.-str y))\n      false)))\n\n(defn namespace\n  \"Returns the namespace String of a symbol or keyword, or nil if not present.\"\n  [x]\n  (if (implements? INamed x)\n    (-namespace x)\n    (throw (js\/Error. (str \"Doesn't support namespace: \" x)))))\n\n(defn ident?\n  \"Return true if x is a symbol or keyword\"\n  [x] (or (keyword? x) (symbol? x)))\n\n(defn simple-ident?\n  \"Return true if x is a symbol or keyword without a namespace\"\n  [x] (and (ident? x) (nil? (namespace x))))\n\n(defn qualified-ident?\n  \"Return true if x is a symbol or keyword with a namespace\"\n  [x] (boolean (and (ident? x) (namespace x) true)))\n\n(defn simple-symbol?\n  \"Return true if x is a symbol without a namespace\"\n  [x] (and (symbol? x) (nil? (namespace x))))\n\n(defn qualified-symbol?\n  \"Return true if x is a symbol with a namespace\"\n  [x] (boolean (and (symbol? x) (namespace x) true)))\n\n(defn simple-keyword?\n  \"Return true if x is a keyword without a namespace\"\n  [x] (and (keyword? x) (nil? (namespace x))))\n\n(defn qualified-keyword?\n  \"Return true if x is a keyword with a namespace\"\n  [x] (boolean (and (keyword? x) (namespace x) true)))\n\n(defn keyword\n  \"Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.\"\n  ([name] (cond\n            (keyword? name) name\n            (symbol? name) (Keyword.\n                             (cljs.core\/namespace name)\n                             (cljs.core\/name name) (.-str name) nil)\n            (= \"\/\" name) (Keyword. nil name name nil)\n            (string? name) (let [parts (.split name \"\/\")]\n                             (if (== (alength parts) 2)\n                               (Keyword. (aget parts 0) (aget parts 1) name nil)\n                               (Keyword. nil (aget parts 0) name nil)))))\n  ([ns name]\n   (let [ns   (cond\n                (keyword? ns) (cljs.core\/name ns)\n                (symbol? ns)  (cljs.core\/name ns)\n                :else ns)\n         name (cond\n                (keyword? name) (cljs.core\/name name)\n                (symbol? name) (cljs.core\/name name)\n                :else name)]\n     (Keyword. ns name (str (when ns (str ns \"\/\")) name) nil))))\n\n\n(deftype LazySeq [meta ^:mutable fn ^:mutable s ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (sval [coll]\n    (if (nil? fn)\n      s\n      (do\n        (set! s (fn))\n        (set! fn nil)\n        s)))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IPending\n  (-realized? [coll]\n    (not fn))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (LazySeq. new-meta #(-seq coll) nil __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll]\n    (-seq coll)\n    (when-not (nil? s)\n      (first s)))\n  (-rest [coll]\n    (-seq coll)\n    (if-not (nil? s)\n      (rest s)\n      ()))\n\n  INext\n  (-next [coll]\n    (-seq coll)\n    (when-not (nil? s)\n      (next s)))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY List) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (.sval coll)\n    (when-not (nil? s)\n      (loop [ls s]\n        (if (instance? LazySeq ls)\n          (recur (.sval ls))\n          (do (set! s ls)\n            (seq s))))))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable LazySeq)\n\n(declare ArrayChunk)\n\n(deftype ChunkBuffer [^:mutable buf ^:mutable end]\n  Object\n  (add [_ o]\n    (aset buf end o)\n    (set! end (inc end)))\n\n  (chunk [_]\n    (let [ret (ArrayChunk. buf 0 end)]\n      (set! buf nil)\n      ret))\n\n  ICounted\n  (-count [_] end))\n\n(defn chunk-buffer [capacity]\n  (ChunkBuffer. (make-array capacity) 0))\n\n(deftype ArrayChunk [arr off end]\n  ICounted\n  (-count [_] (- end off))\n\n  IIndexed\n  (-nth [coll i]\n    (aget arr (+ off i)))\n  (-nth [coll i not-found]\n    (if (and (>= i 0) (< i (- end off)))\n      (aget arr (+ off i))\n      not-found))\n\n  IChunk\n  (-drop-first [coll]\n    (if (== off end)\n      (throw (js\/Error. \"-drop-first of empty chunk\"))\n      (ArrayChunk. arr (inc off) end)))\n\n  IReduce\n  (-reduce [coll f]\n    (array-reduce arr f (aget arr off) (inc off)))\n  (-reduce [coll f start]\n    (array-reduce arr f start off)))\n\n(defn array-chunk\n  ([arr]\n     (ArrayChunk. arr 0 (alength arr)))\n  ([arr off]\n     (ArrayChunk. arr off (alength arr)))\n  ([arr off end]\n     (ArrayChunk. arr off end)))\n\n(deftype ChunkedCons [chunk more meta ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (ChunkedCons. chunk more new-meta __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ASeq\n  ISeq\n  (-first [coll] (-nth chunk 0))\n  (-rest [coll]\n    (if (> (-count chunk) 1)\n      (ChunkedCons. (-drop-first chunk) more nil nil)\n      (if (nil? more)\n        ()\n        more)))\n\n  INext\n  (-next [coll]\n    (if (> (-count chunk) 1)\n      (ChunkedCons. (-drop-first chunk) more nil nil)\n      (when-not (nil? more)\n        (-seq more))))\n\n  IChunkedSeq\n  (-chunked-first [coll] chunk)\n  (-chunked-rest [coll]\n    (if (nil? more)\n      ()\n      more))\n\n  IChunkedNext\n  (-chunked-next [coll]\n    (if (nil? more)\n      nil\n      more))\n\n  ICollection\n  (-conj [this o]\n    (cons o this))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash)))\n\n(es6-iterable ChunkedCons)\n\n(defn chunk-cons [chunk rest]\n  (if (zero? (-count chunk))\n    rest\n    (ChunkedCons. chunk rest nil nil)))\n\n(defn chunk-append [b x]\n  (.add b x))\n\n(defn chunk [b]\n  (.chunk b))\n\n(defn chunk-first [s]\n  (-chunked-first s))\n\n(defn chunk-rest [s]\n  (-chunked-rest s))\n\n(defn chunk-next [s]\n  (if (implements? IChunkedNext s)\n    (-chunked-next s)\n    (seq (-chunked-rest s))))\n\n;;;;;;;;;;;;;;;;\n\n(defn to-array\n  \"Returns an array containing the contents of coll.\"\n  [coll]\n  (let [ary (array)]\n    (loop [s (seq coll)]\n      (if-not (nil? s)\n        (do (. ary push (first s))\n            (recur (next s)))\n        ary))))\n\n(defn to-array-2d\n  \"Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.\"\n  [coll]\n    (let [ret (make-array (count coll))]\n      (loop [i 0 xs (seq coll)]\n        (when-not (nil? xs)\n          (aset ret i (to-array (first xs)))\n          (recur (inc i) (next xs))))\n      ret))\n\n(defn int-array\n  \"Creates an array of ints. Does not coerce array, provided for compatibility\n  with Clojure.\"\n  ([size-or-seq]\n     (if (number? size-or-seq)\n       (int-array size-or-seq nil)\n       (into-array size-or-seq)))\n  ([size init-val-or-seq]\n     (let [a (make-array size)]\n       (if (seq? init-val-or-seq)\n         (let [s (seq init-val-or-seq)]\n           (loop [i 0 s s]\n             (if (and s (< i size))\n               (do\n                 (aset a i (first s))\n                 (recur (inc i) (next s)))\n               a)))\n         (do\n           (dotimes [i size]\n             (aset a i init-val-or-seq))\n           a)))))\n\n(defn long-array\n  \"Creates an array of longs. Does not coerce array, provided for compatibility\n  with Clojure.\"\n  ([size-or-seq]\n     (if (number? size-or-seq)\n       (long-array size-or-seq nil)\n       (into-array size-or-seq)))\n  ([size init-val-or-seq]\n     (let [a (make-array size)]\n       (if (seq? init-val-or-seq)\n         (let [s (seq init-val-or-seq)]\n           (loop [i 0 s s]\n             (if (and s (< i size))\n               (do\n                 (aset a i (first s))\n                 (recur (inc i) (next s)))\n               a)))\n         (do\n           (dotimes [i size]\n             (aset a i init-val-or-seq))\n           a)))))\n\n(defn double-array\n  \"Creates an array of doubles. Does not coerce array, provided for compatibility\n  with Clojure.\"\n  ([size-or-seq]\n     (if (number? size-or-seq)\n       (double-array size-or-seq nil)\n       (into-array size-or-seq)))\n  ([size init-val-or-seq]\n     (let [a (make-array size)]\n       (if (seq? init-val-or-seq)\n         (let [s (seq init-val-or-seq)]\n           (loop [i 0 s s]\n             (if (and s (< i size))\n               (do\n                 (aset a i (first s))\n                 (recur (inc i) (next s)))\n               a)))\n         (do\n           (dotimes [i size]\n             (aset a i init-val-or-seq))\n           a)))))\n\n(defn object-array\n  \"Creates an array of objects. Does not coerce array, provided for compatibility\n  with Clojure.\"\n  ([size-or-seq]\n     (if (number? size-or-seq)\n       (object-array size-or-seq nil)\n       (into-array size-or-seq)))\n  ([size init-val-or-seq]\n     (let [a (make-array size)]\n       (if (seq? init-val-or-seq)\n         (let [s (seq init-val-or-seq)]\n           (loop [i 0 s s]\n             (if (and s (< i size))\n               (do\n                 (aset a i (first s))\n                 (recur (inc i) (next s)))\n               a)))\n         (do\n           (dotimes [i size]\n             (aset a i init-val-or-seq))\n           a)))))\n\n(defn bounded-count\n  \"If coll is counted? returns its count, else will count at most the first n\n   elements of coll using its seq\"\n  {:added \"1.9\"}\n  [n coll]\n  (if (counted? coll)\n    (count coll)\n    (loop [i 0 s (seq coll)]\n      (if (and (not (nil? s)) (< i n))\n        (recur (inc i) (next s))\n        i))))\n\n(defn spread\n  [arglist]\n  (when-not (nil? arglist)\n    (let [n (next arglist)]\n      (if (nil? n)\n        (seq (first arglist))\n        (cons (first arglist)\n              (spread n))))))\n\n(defn concat\n  \"Returns a lazy seq representing the concatenation of the elements in the supplied colls.\"\n  ([] (lazy-seq nil))\n  ([x] (lazy-seq x))\n  ([x y]\n    (lazy-seq\n      (let [s (seq x)]\n        (if s\n          (if (chunked-seq? s)\n            (chunk-cons (chunk-first s) (concat (chunk-rest s) y))\n            (cons (first s) (concat (rest s) y)))\n          y))))\n  ([x y & zs]\n     (let [cat (fn cat [xys zs]\n                 (lazy-seq\n                   (let [xys (seq xys)]\n                     (if xys\n                       (if (chunked-seq? xys)\n                         (chunk-cons (chunk-first xys)\n                                     (cat (chunk-rest xys) zs))\n                         (cons (first xys) (cat (rest xys) zs)))\n                       (when zs\n                         (cat (first zs) (next zs)))))))]\n       (cat (concat x y) zs))))\n\n(defn list*\n  \"Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.\"\n  ([args] (seq args))\n  ([a args] (cons a args))\n  ([a b args] (cons a (cons b args)))\n  ([a b c args] (cons a (cons b (cons c args))))\n  ([a b c d & more]\n     (cons a (cons b (cons c (cons d (spread more)))))))\n\n\n;;; Transients\n\n(defn transient\n  \"Returns a new, transient version of the collection, in constant time.\"\n  [coll]\n  (-as-transient coll))\n\n(defn persistent!\n  \"Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.\"\n  [tcoll]\n  (-persistent! tcoll))\n\n(defn conj!\n  \"Adds val to the transient collection, and return tcoll. The 'addition'\n  may happen at different 'places' depending on the concrete type.\"\n  ([] (transient []))\n  ([tcoll] tcoll)\n  ([tcoll val]\n    (-conj! tcoll val))\n  ([tcoll val & vals]\n    (let [ntcoll (-conj! tcoll val)]\n      (if vals\n        (recur ntcoll (first vals) (next vals))\n        ntcoll))))\n\n(defn assoc!\n  \"When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.\"\n  ([tcoll key val]\n    (-assoc! tcoll key val))\n  ([tcoll key val & kvs]\n    (let [ntcoll (-assoc! tcoll key val)]\n      (if kvs\n        (recur ntcoll (first kvs) (second kvs) (nnext kvs))\n        ntcoll))))\n\n(defn dissoc!\n  \"Returns a transient map that doesn't contain a mapping for key(s).\"\n  ([tcoll key]\n    (-dissoc! tcoll key))\n  ([tcoll key & ks]\n    (let [ntcoll (-dissoc! tcoll key)]\n      (if ks\n        (recur ntcoll (first ks) (next ks))\n        ntcoll))))\n\n(defn pop!\n  \"Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns tcoll\"\n  [tcoll]\n  (-pop! tcoll))\n\n(defn disj!\n  \"disj[oin]. Returns a transient set of the same (hashed\/sorted) type, that\n  does not contain key(s).\"\n  ([tcoll val]\n    (-disjoin! tcoll val))\n  ([tcoll val & vals]\n    (let [ntcoll (-disjoin! tcoll val)]\n      (if vals\n        (recur ntcoll (first vals) (next vals))\n        ntcoll))))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; apply ;;;;;;;;;;;;;;;;\n\n;; see core.clj\n(gen-apply-to)\n\n(set! *unchecked-if* true)\n\n(defn- ^seq next*\n  \"Internal. DO NOT USE! Next without the nil? check.\"\n  [coll]\n  (if (implements? INext coll)\n    (-next ^not-native coll)\n    (seq (rest coll))))\n\n(defn- apply-to-simple\n  \"Internal. DO NOT USE!\n  Assumes args was already called with seq beforehand!\"\n  ([f ^seq args]\n   (if (nil? args)\n     (if (.-cljs$core$IFn$_invoke$arity$0 f)\n       (.cljs$core$IFn$_invoke$arity$0 f)\n       (.call f f))\n     (apply-to-simple f (-first args) (next* args))))\n  ([f a0 ^seq args]\n   (if (nil? args)\n     (if (.-cljs$core$IFn$_invoke$arity$1 f)\n       (.cljs$core$IFn$_invoke$arity$1 f a0)\n       (.call f f a0))\n     (apply-to-simple f a0 (-first args) (next* args))))\n  ([f a0 a1 ^seq args]\n   (if (nil? args)\n     (if (.-cljs$core$IFn$_invoke$arity$2 f)\n       (.cljs$core$IFn$_invoke$arity$2 f a0 a1)\n       (.call f f a0 a1))\n     (apply-to-simple f a0 a1 (-first args) (next* args))))\n  ([f a0 a1 a2 ^seq args]\n   (if (nil? args)\n     (if (.-cljs$core$IFn$_invoke$arity$3 f)\n       (.cljs$core$IFn$_invoke$arity$3 f a0 a1 a2)\n       (.call f f a0 a1 a2))\n     (apply-to-simple f a0 a1 a2 (-first args) (next* args))))\n  ([f a0 a1 a2 a3 ^seq args]\n   (if (nil? args)\n     (if (.-cljs$core$IFn$_invoke$arity$4 f)\n       (.cljs$core$IFn$_invoke$arity$4 f a0 a1 a2 a3)\n       (.call f f a0 a1 a2 a3))\n     (gen-apply-to-simple f 4 args))))\n\n(defn apply\n  \"Applies fn f to the argument list formed by prepending intervening arguments to args.\"\n  ([f args]\n   (if (.-cljs$lang$applyTo f)\n     (let [fixed-arity (.-cljs$lang$maxFixedArity f)\n           bc (bounded-count (inc fixed-arity) args)]\n       (if (<= bc fixed-arity)\n         (apply-to f bc args)\n         (.cljs$lang$applyTo f args)))\n     (apply-to-simple f (seq args))))\n  ([f x args]\n   (if (.-cljs$lang$applyTo f)\n     (let [arglist (list* x args)\n           fixed-arity (.-cljs$lang$maxFixedArity f)\n           bc (inc (bounded-count fixed-arity args))]\n       (if (<= bc fixed-arity)\n         (apply-to f bc arglist)\n         (.cljs$lang$applyTo f arglist)))\n     (apply-to-simple f x (seq args))))\n  ([f x y args]\n   (if (.-cljs$lang$applyTo f)\n     (let [arglist (list* x y args)\n           fixed-arity (.-cljs$lang$maxFixedArity f)\n           bc (+ 2 (bounded-count (dec fixed-arity) args))]\n       (if (<= bc fixed-arity)\n         (apply-to f bc arglist)\n         (.cljs$lang$applyTo f arglist)))\n     (apply-to-simple f x y (seq args))))\n  ([f x y z args]\n   (if (.-cljs$lang$applyTo f)\n     (let [arglist (list* x y z args)\n           fixed-arity (.-cljs$lang$maxFixedArity f)\n           bc (+ 3 (bounded-count (- fixed-arity 2) args))]\n       (if (<= bc fixed-arity)\n         (apply-to f bc arglist)\n         (.cljs$lang$applyTo f arglist)))\n     (apply-to-simple f x y z (seq args))))\n  ([f a b c d & args]\n   (if (.-cljs$lang$applyTo f)\n     (let [spread-args (spread args)\n           arglist (cons a (cons b (cons c (cons d spread-args))))\n           fixed-arity (.-cljs$lang$maxFixedArity f)\n           bc (+ 4 (bounded-count (- fixed-arity 3) spread-args))]\n       (if (<= bc fixed-arity)\n         (apply-to f bc arglist)\n         (.cljs$lang$applyTo f arglist)))\n     (apply-to-simple f a b c d (spread args)))))\n\n(set! *unchecked-if* false)\n\n;; CLJS-3200: used by destructure macro for maps to reduce amount of repeated code\n;; placed here because it needs apply and hash-map (only declared at this point)\n(defn --destructure-map [x]\n  (if (implements? ISeq x) (apply cljs.core\/hash-map x) x))\n\n(defn vary-meta\n \"Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.\"\n  ([obj f]\n   (with-meta obj (f (meta obj))))\n  ([obj f a]\n   (with-meta obj (f (meta obj) a)))\n  ([obj f a b]\n   (with-meta obj (f (meta obj) a b)))\n  ([obj f a b c]\n   (with-meta obj (f (meta obj) a b c)))\n  ([obj f a b c d]\n   (with-meta obj (f (meta obj) a b c d)))\n  ([obj f a b c d & args]\n   (with-meta obj (apply f (meta obj) a b c d args))))\n\n(defn ^boolean not=\n  \"Same as (not (= obj1 obj2))\"\n  ([x] false)\n  ([x y] (not (= x y)))\n  ([x y & more]\n   (not (apply = x y more))))\n\n(defn not-empty\n  \"If coll is empty, returns nil, else coll\"\n  [coll] (when (seq coll) coll))\n\n(defn nil-iter []\n  (reify\n    Object\n    (hasNext [_] false)\n    (next [_] (js\/Error. \"No such element\"))\n    (remove [_] (js\/Error. \"Unsupported operation\"))))\n\n(deftype StringIter [s ^:mutable i]\n  Object\n  (hasNext [_] (< i (.-length s)))\n  (next [_]\n    (let [ret (.charAt s i)]\n      (set! i (inc i))\n      ret))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(defn string-iter [x]\n  (StringIter. x 0))\n\n(deftype ArrayIter [arr ^:mutable i]\n  Object\n  (hasNext [_] (< i (alength arr)))\n  (next [_]\n    (let [ret (aget arr i)]\n      (set! i (inc i))\n      ret))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(defn array-iter [x]\n  (ArrayIter. x 0))\n\n(def INIT #js {})\n(def START #js {})\n\n(deftype SeqIter [^:mutable _seq ^:mutable _next]\n  Object\n  (hasNext [_]\n    (if (identical? _seq INIT)\n      (do\n        (set! _seq START)\n        (set! _next (seq _next)))\n      (if (identical? _seq _next)\n        (set! _next (next _seq))))\n    (not (nil? _next)))\n  (next [this]\n    (if-not ^boolean (.hasNext this)\n      (throw (js\/Error. \"No such element\"))\n      (do\n        (set! _seq _next)\n        (first _next))))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(defn seq-iter [coll]\n  (SeqIter. INIT coll))\n\n(defn iter [coll]\n  (cond\n    (iterable? coll) (-iterator coll)\n    (nil? coll) (nil-iter)\n    (string? coll) (string-iter coll)\n    (array? coll) (array-iter coll)\n    (seqable? coll) (seq-iter coll)\n    :else (throw (js\/Error. (str \"Cannot create iterator from \" coll)))))\n\n(deftype Many [vals]\n  Object\n  (add [this o]\n    (.push vals o)\n    this)\n  (remove [this]\n    (.shift vals))\n  (isEmpty [this]\n    (zero? (.-length vals)))\n  (toString [this]\n    (str \"Many: \" vals)))\n\n(def ^:private NONE #js {})\n\n(deftype Single [^:mutable val]\n  Object\n  (add [this o]\n    (if (identical? val NONE)\n      (do\n        (set! val o)\n        this)\n      (Many. #js [val o])))\n  (remove [this]\n    (if (identical? val NONE)\n      (throw (js\/Error. (str \"Removing object from empty buffer\")))\n      (let [ret val]\n        (set! val NONE)\n        ret)))\n  (isEmpty [this]\n    (identical? val NONE))\n  (toString [this]\n    (str \"Single: \" val)))\n\n(deftype Empty []\n  Object\n  (add [this o]\n    (Single. o))\n  (remove [this]\n    (throw (js\/Error. (str \"Removing object from empty buffer\"))))\n  (isEmpty [this]\n    true)\n  (toString [this]\n    \"Empty\"))\n\n(def ^:private EMPTY (Empty.))\n\n(deftype MultiIterator [iters]\n  Object\n  (hasNext [_]\n    (loop [iters (seq iters)]\n      (if-not (nil? iters)\n        (let [iter (first iters)]\n          (if-not ^boolean (.hasNext iter)\n            false\n            (recur (next iters))))\n        true)))\n  (next [_]\n    (let [nexts (array)]\n      (dotimes [i (alength iters)]\n        (aset nexts i (.next (aget iters i))))\n      (prim-seq nexts 0))))\n\n(defn- chunkIteratorSeq [iter]\n  (lazy-seq\n    (when ^boolean (.hasNext iter)\n      (let [arr (array)]\n        (loop [n 0]\n          (if (and (.hasNext iter) (< n 32))\n            (do\n              (aset arr n (.next iter))\n              (recur (inc n)))\n            (chunk-cons (array-chunk arr 0 n) (chunkIteratorSeq iter))))))))\n\n(deftype TransformerIterator [^:mutable buffer ^:mutable _next ^:mutable completed ^:mutable xf sourceIter multi]\n  Object\n  (step [this]\n    (if-not (identical? _next NONE)\n      true\n      (loop []\n        (if (identical? _next NONE)\n          (if ^boolean (.isEmpty buffer)\n            (if ^boolean completed\n              false\n              (if ^boolean (.hasNext sourceIter)\n                (let [iter (if ^boolean multi\n                             (apply xf (cons nil (.next sourceIter)))\n                             (xf nil (.next sourceIter)))]\n                  (when (reduced? iter)\n                    (xf nil)\n                    (set! completed true))\n                  (recur))\n                (do\n                  (xf nil)\n                  (set! completed true)\n                  (recur))))\n            (do\n              (set! _next (.remove buffer))\n              (recur)))\n          true))))\n  (hasNext [this]\n    (.step this))\n  (next [this]\n    (if ^boolean (.hasNext this)\n      (let [ret _next]\n        (set! _next NONE)\n        ret)\n      (throw (js\/Error. \"No such element\"))))\n  (remove [_]\n    (js\/Error. \"Unsupported operation\")))\n\n(es6-iterable TransformerIterator)\n\n(defn transformer-iterator\n  [xform sourceIter multi]\n  (let [iterator (TransformerIterator. EMPTY NONE false nil sourceIter multi)]\n    (set! (.-xf iterator)\n      (xform (fn\n               ([] nil)\n               ([acc] acc)\n               ([acc o]\n                (set! (.-buffer iterator) (.add (.-buffer iterator) o))\n                acc))))\n    iterator))\n\n(set! (.-create TransformerIterator)\n  (fn [xform source]\n    (transformer-iterator xform source false)))\n\n(set! (.-createMulti TransformerIterator)\n  (fn [xform sources]\n    (transformer-iterator xform (MultiIterator. (to-array sources)) true)))\n\n(defn sequence\n  \"Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments\"\n  ([coll]\n     (if (seq? coll)\n       coll\n       (or (seq coll) ())))\n  ([xform coll]\n   (or (chunkIteratorSeq\n         (.create TransformerIterator xform (iter coll)))\n       ()))\n  ([xform coll & colls]\n   (or (chunkIteratorSeq\n         (.createMulti TransformerIterator xform (map iter (cons coll colls))))\n       ())))\n\n(defn every?\n  \"Returns true if (pred x) is logical true for every x in coll, else\n  false.\"\n  [pred coll]\n  (cond\n   (nil? (seq coll)) true\n   (pred (first coll)) (recur pred (next coll))\n   :else false))\n\n(defn not-every?\n  \"Returns false if (pred x) is logical true for every x in\n  coll, else true.\"\n  [pred coll] (not (every? pred coll)))\n\n(defn some\n  \"Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)\"\n  [pred coll]\n  (when-let [s (seq coll)]\n    (or (pred (first s)) (recur pred (next s)))))\n\n(defn not-any?\n  \"Returns false if (pred x) is logical true for any x in coll,\n  else true.\"\n  [pred coll] (not (some pred coll)))\n\n(defn even?\n  \"Returns true if n is even, throws an exception if n is not an integer\"\n   [n] (if (integer? n)\n        (zero? (bit-and n 1))\n        (throw (js\/Error. (str \"Argument must be an integer: \" n)))))\n\n(defn odd?\n  \"Returns true if n is odd, throws an exception if n is not an integer\"\n  [n] (not (even? n)))\n\n(defn complement\n  \"Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.\"\n  [f]\n  (fn\n    ([] (not (f)))\n    ([x] (not (f x)))\n    ([x y] (not (f x y)))\n    ([x y & zs] (not (apply f x y zs)))))\n\n(defn constantly\n  \"Returns a function that takes any number of arguments and returns x.\"\n  [x] (fn [& args] x))\n\n(defn comp\n  \"Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.\"\n  ([] identity)\n  ([f] f)\n  ([f g]\n     (fn\n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h]\n     (fn\n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))\n\n(defn partial\n  \"Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.\"\n  ([f] f)\n  ([f arg1]\n   (fn\n     ([] (f arg1))\n     ([x] (f arg1 x))\n     ([x y] (f arg1 x y))\n     ([x y z] (f arg1 x y z))\n     ([x y z & args] (apply f arg1 x y z args))))\n  ([f arg1 arg2]\n   (fn\n     ([] (f arg1 arg2))\n     ([x] (f arg1 arg2 x))\n     ([x y] (f arg1 arg2 x y))\n     ([x y z] (f arg1 arg2 x y z))\n     ([x y z & args] (apply f arg1 arg2 x y z args))))\n  ([f arg1 arg2 arg3]\n   (fn\n     ([] (f arg1 arg2 arg3))\n     ([x] (f arg1 arg2 arg3 x))\n     ([x y] (f arg1 arg2 arg3 x y))\n     ([x y z] (f arg1 arg2 arg3 x y z))\n     ([x y z & args] (apply f arg1 arg2 arg3 x y z args))))\n  ([f arg1 arg2 arg3 & more]\n   (fn [& args] (apply f arg1 arg2 arg3 (concat more args)))))\n\n(defn fnil\n  \"Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.\"\n  ([f x]\n   (fn\n     ([a] (f (if (nil? a) x a)))\n     ([a b] (f (if (nil? a) x a) b))\n     ([a b c] (f (if (nil? a) x a) b c))\n     ([a b c & ds] (apply f (if (nil? a) x a) b c ds))))\n  ([f x y]\n   (fn\n     ([a b] (f (if (nil? a) x a) (if (nil? b) y b)))\n     ([a b c] (f (if (nil? a) x a) (if (nil? b) y b) c))\n     ([a b c & ds] (apply f (if (nil? a) x a) (if (nil? b) y b) c ds))))\n  ([f x y z]\n   (fn\n     ([a b] (f (if (nil? a) x a) (if (nil? b) y b)))\n     ([a b c] (f (if (nil? a) x a) (if (nil? b) y b) (if (nil? c) z c)))\n     ([a b c & ds] (apply f (if (nil? a) x a) (if (nil? b) y b) (if (nil? c) z c) ds)))))\n\n(declare volatile!)\n\n(defn map-indexed\n  \"Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item. Returns a stateful transducer when\n  no collection is provided.\"\n  ([f]\n    (fn [rf]\n      (let [i (volatile! -1)]\n        (fn\n          ([] (rf))\n          ([result] (rf result))\n          ([result input]\n            (rf result (f (vswap! i inc) input)))))))\n  ([f coll]\n    (letfn [(mapi [idx coll]\n              (lazy-seq\n                (when-let [s (seq coll)]\n                  (if (chunked-seq? s)\n                    (let [c (chunk-first s)\n                          size (count c)\n                          b (chunk-buffer size)]\n                      (dotimes [i size]\n                        (chunk-append b (f (+ idx i) (-nth c i))))\n                      (chunk-cons (chunk b) (mapi (+ idx size) (chunk-rest s))))\n                    (cons (f idx (first s)) (mapi (inc idx) (rest s)))))))]\n      (mapi 0 coll))))\n\n(defn keep\n  \"Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.\"\n  ([f]\n   (fn [rf]\n     (fn\n       ([] (rf))\n       ([result] (rf result))\n       ([result input]\n          (let [v (f input)]\n            (if (nil? v)\n              result\n              (rf result v)))))))\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (if (chunked-seq? s)\n        (let [c (chunk-first s)\n              size (count c)\n              b (chunk-buffer size)]\n          (dotimes [i size]\n            (let [x (f (-nth c i))]\n              (when-not (nil? x)\n                (chunk-append b x))))\n          (chunk-cons (chunk b) (keep f (chunk-rest s))))\n        (let [x (f (first s))]\n          (if (nil? x)\n            (keep f (rest s))\n            (cons x (keep f (rest s))))))))))\n\n;; =============================================================================\n;; Atom\n\n(deftype Atom [state meta validator watches]\n  Object\n  (equiv [this other]\n    (-equiv this other))\n\n  IAtom\n\n  IEquiv\n  (-equiv [o other] (identical? o other))\n\n  IDeref\n  (-deref [_] state)\n\n  IMeta\n  (-meta [_] meta)\n\n  IWatchable\n  (-notify-watches [this oldval newval]\n    (doseq [[key f] watches]\n      (f key this oldval newval)))\n  (-add-watch [this key f]\n    (set! (.-watches this) (assoc watches key f))\n    this)\n  (-remove-watch [this key]\n    (set! (.-watches this) (dissoc watches key)))\n\n  IHash\n  (-hash [this] (goog\/getUid this)))\n\n(defn atom\n  \"Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will become the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.\"\n  ([x] (Atom. x nil nil nil))\n  ([x & {:keys [meta validator]}] (Atom. x meta validator nil)))\n\n(declare pr-str)\n\n(defn reset!\n  \"Sets the value of atom to newval without regard for the\n  current value. Returns new-value.\"\n  [a new-value]\n  (if (instance? Atom a)\n    (let [validate (.-validator a)]\n      (when-not (nil? validate)\n        (when-not (validate new-value)\n          (throw (js\/Error. \"Validator rejected reference state\"))))\n      (let [old-value (.-state a)]\n        (set! (.-state a) new-value)\n        (when-not (nil? (.-watches a))\n          (-notify-watches a old-value new-value))\n        new-value))\n    (-reset! a new-value)))\n\n(defn reset-vals!\n  \"Sets the value of atom to newval. Returns [old new], the value of the\n   atom before and after the reset.\"\n  {:added \"1.9\"}\n  [a new-value]\n  (let [validate (.-validator a)]\n    (when-not (nil? validate)\n      (when-not (validate new-value)\n        (throw (js\/Error. \"Validator rejected reference state\"))))\n    (let [old-value (.-state a)]\n      (set! (.-state a) new-value)\n      (when-not (nil? (.-watches a))\n        (-notify-watches a old-value new-value))\n      [old-value new-value])))\n\n(defn swap!\n  \"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.\"\n  ([a f]\n   (if (instance? Atom a)\n     (reset! a (f (.-state a)))\n     (-swap! a f)))\n  ([a f x]\n   (if (instance? Atom a)\n     (reset! a (f (.-state a) x))\n     (-swap! a f x)))\n  ([a f x y]\n   (if (instance? Atom a)\n     (reset! a (f (.-state a) x y))\n     (-swap! a f x y)))\n  ([a f x y & more]\n   (if (instance? Atom a)\n     (reset! a (apply f (.-state a) x y more))\n     (-swap! a f x y more))))\n\n(defn swap-vals!\n  \"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.\n  Returns [old new], the value of the atom before and after the swap.\"\n  {:added \"1.9\"}\n  ([a f]\n   (reset-vals! a (f (.-state a))))\n  ([a f x]\n   (reset-vals! a (f (.-state a) x)))\n  ([a f x y]\n   (reset-vals! a (f (.-state a) x y)))\n  ([a f x y & more]\n   (reset-vals! a (apply f (.-state a) x y more))))\n\n(defn compare-and-set!\n  \"Atomically sets the value of atom to newval if and only if the\n  current value of the atom is equal to oldval. Returns true if\n  set happened, else false.\"\n  [^not-native a oldval newval]\n  (if (= (-deref a) oldval)\n    (do (reset! a newval) true)\n    false))\n\n(defn set-validator!\n  \"Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.\"\n  [iref val]\n  (when (and (some? val)\n             (not (val (-deref iref))))\n    (throw (js\/Error. \"Validator rejected reference state\")))\n  (set! (.-validator iref) val))\n\n(defn get-validator\n  \"Gets the validator-fn for a var\/ref\/agent\/atom.\"\n  [iref]\n  (.-validator iref))\n\n(deftype Volatile [^:mutable state]\n  IVolatile\n  (-vreset! [_ new-state]\n    (set! state new-state))\n\n  IDeref\n  (-deref [_] state))\n\n(defn volatile!\n  \"Creates and returns a Volatile with an initial value of val.\"\n  [val]\n  (Volatile. val))\n\n(defn volatile?\n  \"Returns true if x is a volatile.\"\n  [x] (instance? Volatile x))\n\n(defn vreset!\n  \"Sets the value of volatile to newval without regard for the\n   current value. Returns newval.\"\n  [vol newval]  (-vreset! vol newval))\n\n(defn keep-indexed\n  \"Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.\"\n  ([f]\n   (fn [rf]\n     (let [ia (volatile! -1)]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result input]\n            (let [i (vswap! ia inc)\n                  v (f i input)]\n              (if (nil? v)\n                result\n                (rf result v))))))))\n  ([f coll]\n     (letfn [(keepi [idx coll]\n               (lazy-seq\n                (when-let [s (seq coll)]\n                  (if (chunked-seq? s)\n                    (let [c (chunk-first s)\n                          size (count c)\n                          b (chunk-buffer size)]\n                      (dotimes [i size]\n                        (let [x (f (+ idx i) (-nth c i))]\n                          (when-not (nil? x)\n                            (chunk-append b x))))\n                      (chunk-cons (chunk b) (keepi (+ idx size) (chunk-rest s))))\n                    (let [x (f idx (first s))]\n                      (if (nil? x)\n                        (keepi (inc idx) (rest s))\n                        (cons x (keepi (inc idx) (rest s)))))))))]\n       (keepi 0 coll))))\n\n(defn every-pred\n  \"Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.\"\n  ([p]\n     (fn ep1\n       ([] true)\n       ([x] (boolean (p x)))\n       ([x y] (boolean (and (p x) (p y))))\n       ([x y z] (boolean (and (p x) (p y) (p z))))\n       ([x y z & args] (boolean (and (ep1 x y z)\n                                     (every? p args))))))\n  ([p1 p2]\n     (fn ep2\n       ([] true)\n       ([x] (boolean (and (p1 x) (p2 x))))\n       ([x y] (boolean (and (p1 x) (p1 y) (p2 x) (p2 y))))\n       ([x y z] (boolean (and (p1 x) (p1 y) (p1 z) (p2 x) (p2 y) (p2 z))))\n       ([x y z & args] (boolean (and (ep2 x y z)\n                                     (every? #(and (p1 %) (p2 %)) args))))))\n  ([p1 p2 p3]\n     (fn ep3\n       ([] true)\n       ([x] (boolean (and (p1 x) (p2 x) (p3 x))))\n       ([x y] (boolean (and (p1 x) (p2 x) (p3 x) (p1 y) (p2 y) (p3 y))))\n       ([x y z] (boolean (and (p1 x) (p2 x) (p3 x) (p1 y) (p2 y) (p3 y) (p1 z) (p2 z) (p3 z))))\n       ([x y z & args] (boolean (and (ep3 x y z)\n                                     (every? #(and (p1 %) (p2 %) (p3 %)) args))))))\n  ([p1 p2 p3 & ps]\n     (let [ps (list* p1 p2 p3 ps)]\n       (fn epn\n         ([] true)\n         ([x] (every? #(% x) ps))\n         ([x y] (every? #(and (% x) (% y)) ps))\n         ([x y z] (every? #(and (% x) (% y) (% z)) ps))\n         ([x y z & args] (boolean (and (epn x y z)\n                                       (every? #(every? % args) ps))))))))\n\n(defn some-fn\n  \"Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.\"\n  ([p]\n     (fn sp1\n       ([] nil)\n       ([x] (p x))\n       ([x y] (or (p x) (p y)))\n       ([x y z] (or (p x) (p y) (p z)))\n       ([x y z & args] (or (sp1 x y z)\n                           (some p args)))))\n  ([p1 p2]\n     (fn sp2\n       ([] nil)\n       ([x] (or (p1 x) (p2 x)))\n       ([x y] (or (p1 x) (p1 y) (p2 x) (p2 y)))\n       ([x y z] (or (p1 x) (p1 y) (p1 z) (p2 x) (p2 y) (p2 z)))\n       ([x y z & args] (or (sp2 x y z)\n                           (some #(or (p1 %) (p2 %)) args)))))\n  ([p1 p2 p3]\n     (fn sp3\n       ([] nil)\n       ([x] (or (p1 x) (p2 x) (p3 x)))\n       ([x y] (or (p1 x) (p2 x) (p3 x) (p1 y) (p2 y) (p3 y)))\n       ([x y z] (or (p1 x) (p2 x) (p3 x) (p1 y) (p2 y) (p3 y) (p1 z) (p2 z) (p3 z)))\n       ([x y z & args] (or (sp3 x y z)\n                           (some #(or (p1 %) (p2 %) (p3 %)) args)))))\n  ([p1 p2 p3 & ps]\n     (let [ps (list* p1 p2 p3 ps)]\n       (fn spn\n         ([] nil)\n         ([x] (some #(% x) ps))\n         ([x y] (some #(or (% x) (% y)) ps))\n         ([x y z] (some #(or (% x) (% y) (% z)) ps))\n         ([x y z & args] (or (spn x y z)\n                             (some #(some % args) ps)))))))\n\n(defn map\n  \"Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.\"\n  ([f]\n    (fn [rf]\n      (fn\n        ([] (rf))\n        ([result] (rf result))\n        ([result input]\n           (rf result (f input)))\n        ([result input & inputs]\n           (rf result (apply f input inputs))))))\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (if (chunked-seq? s)\n        (let [c (chunk-first s)\n              size (count c)\n              b (chunk-buffer size)]\n          (dotimes [i size]\n              (chunk-append b (f (-nth c i))))\n          (chunk-cons (chunk b) (map f (chunk-rest s))))\n        (cons (f (first s)) (map f (rest s)))))))\n  ([f c1 c2]\n   (lazy-seq\n    (let [s1 (seq c1) s2 (seq c2)]\n      (when (and s1 s2)\n        (cons (f (first s1) (first s2))\n              (map f (rest s1) (rest s2)))))))\n  ([f c1 c2 c3]\n   (lazy-seq\n    (let [s1 (seq c1) s2 (seq c2) s3 (seq c3)]\n      (when (and  s1 s2 s3)\n        (cons (f (first s1) (first s2) (first s3))\n              (map f (rest s1) (rest s2) (rest s3)))))))\n  ([f c1 c2 c3 & colls]\n   (let [step (fn step [cs]\n                 (lazy-seq\n                  (let [ss (map seq cs)]\n                    (when (every? identity ss)\n                      (cons (map first ss) (step (map rest ss)))))))]\n     (map #(apply f %) (step (conj colls c3 c2 c1))))))\n\n(defn take\n  \"Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.\"\n  ([n]\n   {:pre [(number? n)]}\n     (fn [rf]\n       (let [na (volatile! n)]\n         (fn\n           ([] (rf))\n           ([result] (rf result))\n           ([result input]\n              (let [n @na\n                    nn (vswap! na dec)\n                    result (if (pos? n)\n                             (rf result input)\n                             result)]\n                (if (not (pos? nn))\n                  (ensure-reduced result)\n                  result)))))))\n  ([n coll]\n   {:pre [(number? n)]}\n     (lazy-seq\n       (when (pos? n)\n         (when-let [s (seq coll)]\n           (cons (first s) (take (dec n) (rest s))))))))\n\n(defn drop\n  \"Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.\"\n  ([n]\n   {:pre [(number? n)]}\n     (fn [rf]\n       (let [na (volatile! n)]\n         (fn\n           ([] (rf))\n           ([result] (rf result))\n           ([result input]\n              (let [n @na]\n                (vswap! na dec)\n                (if (pos? n)\n                  result\n                  (rf result input))))))))\n  ([n coll]\n   {:pre [(number? n)]}\n     (let [step (fn [n coll]\n                  (let [s (seq coll)]\n                    (if (and (pos? n) s)\n                      (recur (dec n) (rest s))\n                      s)))]\n       (lazy-seq (step n coll)))))\n\n(defn drop-last\n  \"Return a lazy sequence of all but the last n (default 1) items in coll\"\n  ([s] (drop-last 1 s))\n  ([n s] (map (fn [x _] x) s (drop n s))))\n\n(defn take-last\n  \"Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.\"\n  [n coll]\n  (loop [s (seq coll), lead (seq (drop n coll))]\n    (if lead\n      (recur (next s) (next lead))\n      s)))\n\n(defn drop-while\n  \"Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.\"\n  ([pred]\n     (fn [rf]\n       (let [da (volatile! true)]\n         (fn\n           ([] (rf))\n           ([result] (rf result))\n           ([result input]\n              (let [drop? @da]\n                (if (and drop? (pred input))\n                  result\n                  (do\n                    (vreset! da nil)\n                    (rf result input)))))))))\n  ([pred coll]\n     (let [step (fn [pred coll]\n                  (let [s (seq coll)]\n                    (if (and s (pred (first s)))\n                      (recur pred (rest s))\n                      s)))]\n       (lazy-seq (step pred coll)))))\n\n(deftype Cycle [meta all prev ^:mutable current ^:mutable _next]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (currentval [coll]\n    (when-not ^seq current\n      (if-let [c (next prev)]\n        (set! current c)\n        (set! current all)))\n    current)\n\n  IPending\n  (-realized? [coll]\n    (some? current))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (Cycle. new-meta all prev current _next)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll]\n    (first (.currentval coll)))\n  (-rest [coll]\n    (when (nil? _next)\n      (set! _next (Cycle. nil all (.currentval coll) nil nil)))\n    _next)\n\n  INext\n  (-next [coll]\n    (-rest coll))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  ISequential\n  ISeqable\n  (-seq [coll] coll)\n\n  IReduce\n  (-reduce [coll f]\n    (loop [s (.currentval coll) ret (first s)]\n      (let [s   (or (next s) all)\n            ret (f ret (first s))]\n        (if (reduced? ret)\n          @ret\n          (recur s ret)))))\n  (-reduce [coll f start]\n    (loop [s (.currentval coll) ret start]\n      (let [ret (f ret (first s))]\n        (if (reduced? ret)\n          @ret\n          (recur (or (next s) all) ret))))))\n\n(defn cycle\n  \"Returns a lazy (infinite!) sequence of repetitions of the items in coll.\"\n  [coll] (if-let [vals (seq coll)]\n           (Cycle. nil vals nil vals nil)\n           (.-EMPTY List)))\n\n(defn split-at\n  \"Returns a vector of [(take n coll) (drop n coll)]\"\n  [n coll]\n  [(take n coll) (drop n coll)])\n\n(deftype Repeat [meta count val ^:mutable next ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x count))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IPending\n  (-realized? [coll] false)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (Repeat. new-meta count val next nil)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll]\n    val)\n  (-rest [coll]\n    (if (nil? next)\n      (if (> count 1)\n        (do\n          (set! next (Repeat. nil (dec count) val nil nil))\n          next)\n        (if (== -1 count)\n          coll\n          ()))\n      next))\n\n  INext\n  (-next [coll]\n    (if (nil? next)\n      (if (> count 1)\n        (do\n          (set! next (Repeat. nil (dec count) val nil nil))\n          next)\n        (if (== -1 count)\n          coll\n          nil))\n      next))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISequential\n  ISeqable\n  (-seq [coll] coll)\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IReduce\n  (-reduce [coll f]\n    (if (== count -1)\n      (loop [ret (f val val)]\n        (if (reduced? ret)\n          @ret\n          (recur (f ret val))))\n      (loop [i 1 ret val]\n        (if (< i count)\n          (let [ret (f ret val)]\n            (if (reduced? ret)\n              @ret\n              (recur (inc i) ret)))\n          ret))))\n  (-reduce [coll f start]\n    (if (== count -1)\n      (loop [ret (f start val)]\n        (if (reduced? ret)\n          @ret\n          (recur (f ret val))))\n      (loop [i 0 ret start]\n        (if (< i count)\n          (let [ret (f ret val)]\n            (if (reduced? ret)\n              @ret\n              (recur (inc i) ret)))\n          ret)))))\n\n(defn repeat\n  \"Returns a lazy (infinite!, or length n if supplied) sequence of xs.\"\n  ([x] (Repeat. nil -1 x nil nil))\n  ([n x] (if (pos? n)\n           (Repeat. nil n x nil nil)\n           (.-EMPTY List))))\n\n(defn replicate\n  \"DEPRECATED: Use 'repeat' instead.\n  Returns a lazy seq of n xs.\"\n  [n x] (take n (repeat x)))\n\n(defn repeatedly\n  \"Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it\"\n  ([f] (lazy-seq (cons (f) (repeatedly f))))\n  ([n f] (take n (repeatedly f))))\n\n(def ^:private UNREALIZED-SEED #js {})\n\n(deftype Iterate [meta f prev-seed ^:mutable seed ^:mutable next]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n\n  IPending\n  (-realized? [coll]\n    (not (identical? seed UNREALIZED-SEED)))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (Iterate. new-meta f prev-seed seed next)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll]\n    (when (identical? UNREALIZED-SEED seed)\n      (set! seed (f prev-seed)))\n    seed)\n  (-rest [coll]\n    (when (nil? next)\n      (set! next (Iterate. nil f (-first coll) UNREALIZED-SEED nil)))\n    next)\n\n  INext\n  (-next [coll]\n    (-rest coll))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  ISequential\n  ISeqable\n  (-seq [coll] coll)\n\n  IReduce\n  (-reduce [coll rf]\n    (let [first (-first coll)\n          v     (f first)]\n      (loop [ret (rf first v) v v]\n        (if (reduced? ret)\n          @ret\n          (let [v (f v)]\n            (recur (rf ret v) v))))))\n  (-reduce [coll rf start]\n    (let [v (-first coll)]\n      (loop [ret (rf start v) v v]\n        (if (reduced? ret)\n          @ret\n          (let [v (f v)]\n            (recur (rf ret v) v)))))))\n\n(defn iterate\n  \"Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects\"\n  {:added \"1.0\"}\n  [f x] (Iterate. nil f nil x nil))\n\n(defn interleave\n  \"Returns a lazy seq of the first item in each coll, then the second etc.\"\n  ([] ())\n  ([c1] (lazy-seq c1))\n  ([c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2)\n                                 (interleave (rest s1) (rest s2))))))))\n  ([c1 c2 & colls]\n     (lazy-seq\n      (let [ss (map seq (conj colls c2 c1))]\n        (when (every? identity ss)\n          (concat (map first ss) (apply interleave (map rest ss))))))))\n\n(defn interpose\n  \"Returns a lazy seq of the elements of coll separated by sep.\n  Returns a stateful transducer when no collection is provided.\"\n  ([sep]\n    (fn [rf]\n      (let [started (volatile! false)]\n        (fn\n          ([] (rf))\n          ([result] (rf result))\n          ([result input]\n            (if @started\n              (let [sepr (rf result sep)]\n                (if (reduced? sepr)\n                  sepr\n                  (rf sepr input)))\n              (do\n                (vreset! started true)\n                (rf result input))))))))\n  ([sep coll] (drop 1 (interleave (repeat sep) coll))))\n\n\n\n(defn- flatten1\n  \"Take a collection of collections, and return a lazy seq\n  of items from the inner collection\"\n  [colls]\n  (let [cat (fn cat [coll colls]\n              (lazy-seq\n                (if-let [coll (seq coll)]\n                  (cons (first coll) (cat (rest coll) colls))\n                  (when (seq colls)\n                    (cat (first colls) (rest colls))))))]\n    (cat nil colls)))\n\n(declare cat)\n\n(defn mapcat\n  \"Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided\"\n  {:added \"1.0\"\n   :static true}\n  ([f] (comp (map f) cat))\n  ([f & colls]\n     (apply concat (apply map f colls))))\n\n(defn filter\n  \"Returns a lazy sequence of the items in coll for which\n  (pred item) returns logical true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.\"\n  ([pred]\n    (fn [rf]\n      (fn\n        ([] (rf))\n        ([result] (rf result))\n        ([result input]\n           (if (pred input)\n             (rf result input)\n             result)))))\n  ([pred coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (if (chunked-seq? s)\n        (let [c (chunk-first s)\n              size (count c)\n              b (chunk-buffer size)]\n          (dotimes [i size]\n              (when (pred (-nth c i))\n                (chunk-append b (-nth c i))))\n          (chunk-cons (chunk b) (filter pred (chunk-rest s))))\n        (let [f (first s) r (rest s)]\n          (if (pred f)\n            (cons f (filter pred r))\n            (filter pred r))))))))\n\n(defn remove\n  \"Returns a lazy sequence of the items in coll for which\n  (pred item) returns logical false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.\"\n  ([pred] (filter (complement pred)))\n  ([pred coll]\n     (filter (complement pred) coll)))\n\n(defn tree-seq\n  \"Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n  branch? must be a fn of one arg that returns true if passed a node\n  that can have children (but may not).  children must be a fn of one\n  arg that returns a sequence of the children. Will only be called on\n  nodes for which branch? returns true. Root is the root node of the\n  tree.\"\n   [branch? children root]\n   (let [walk (fn walk [node]\n                (lazy-seq\n                 (cons node\n                  (when (branch? node)\n                    (mapcat walk (children node))))))]\n     (walk root)))\n\n(defn flatten\n  \"Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.\"\n  [x]\n  (filter #(not (sequential? %))\n          (rest (tree-seq sequential? seq x))))\n\n(defn into\n  \"Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.\"\n  ([] [])\n  ([to] to)\n  ([to from]\n     (if-not (nil? to)\n       (if (implements? IEditableCollection to)\n         (-with-meta (persistent! (reduce -conj! (transient to) from)) (meta to))\n         (reduce -conj to from))\n       (reduce conj to from)))\n  ([to xform from]\n     (if (implements? IEditableCollection to)\n       (-with-meta (persistent! (transduce xform conj! (transient to) from)) (meta to))\n       (transduce xform conj to from))))\n\n(defn mapv\n  \"Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.\"\n  ([f coll]\n     (-> (reduce (fn [v o] (conj! v (f o))) (transient []) coll)\n         persistent!))\n  ([f c1 c2]\n     (into [] (map f c1 c2)))\n  ([f c1 c2 c3]\n     (into [] (map f c1 c2 c3)))\n  ([f c1 c2 c3 & colls]\n     (into [] (apply map f c1 c2 c3 colls))))\n\n(defn filterv\n  \"Returns a vector of the items in coll for which\n  (pred item) returns logical true. pred must be free of side-effects.\"\n  [pred coll]\n  (-> (reduce (fn [v o] (if (pred o) (conj! v o) v))\n              (transient [])\n              coll)\n      persistent!))\n\n(defn partition\n  \"Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition up to n items. In case there are\n  not enough padding elements, return a partition with less than n items.\"\n  ([n coll]\n     (partition n n coll))\n  ([n step coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (let [p (take n s)]\n           (when (== n (count p))\n             (cons p (partition n step (drop step s))))))))\n  ([n step pad coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (let [p (take n s)]\n           (if (== n (count p))\n             (cons p (partition n step pad (drop step s)))\n             (list (take n (concat p pad)))))))))\n\n(defn get-in\n  \"Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.\"\n  {:added \"1.2\"\n   :static true}\n  ([m ks]\n     (reduce get m ks))\n  ([m ks not-found]\n     (loop [sentinel lookup-sentinel\n            m m\n            ks (seq ks)]\n       (if-not (nil? ks)\n         (let [m (get m (first ks) sentinel)]\n           (if (identical? sentinel m)\n             not-found\n             (recur sentinel m (next ks))))\n         m))))\n\n(defn assoc-in\n  \"Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.\"\n  [m [k & ks] v]\n  (if ks\n    (assoc m k (assoc-in (get m k) ks v))\n    (assoc m k v)))\n\n(defn update-in\n  \"'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.\"\n  ([m [k & ks] f]\n   (if ks\n     (assoc m k (update-in (get m k) ks f))\n     (assoc m k (f (get m k)))))\n  ([m [k & ks] f a]\n   (if ks\n     (assoc m k (update-in (get m k) ks f a))\n     (assoc m k (f (get m k) a))))\n  ([m [k & ks] f a b]\n   (if ks\n     (assoc m k (update-in (get m k) ks f a b))\n     (assoc m k (f (get m k) a b))))\n  ([m [k & ks] f a b c]\n   (if ks\n     (assoc m k (update-in (get m k) ks f a b c))\n     (assoc m k (f (get m k) a b c))))\n  ([m [k & ks] f a b c & args]\n   (if ks\n     (assoc m k (apply update-in (get m k) ks f a b c args))\n     (assoc m k (apply f (get m k) a b c args)))))\n\n(defn update\n  \"'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.\"\n  ([m k f]\n   (assoc m k (f (get m k))))\n  ([m k f x]\n   (assoc m k (f (get m k) x)))\n  ([m k f x y]\n   (assoc m k (f (get m k) x y)))\n  ([m k f x y z]\n   (assoc m k (f (get m k) x y z)))\n  ([m k f x y z & more]\n   (assoc m k (apply f (get m k) x y z more))))\n\n;;; PersistentVector\n\n(deftype VectorNode [edit arr])\n\n(defn- pv-fresh-node [edit]\n  (VectorNode. edit (make-array 32)))\n\n(defn- pv-aget [node idx]\n  (aget (.-arr node) idx))\n\n(defn- pv-aset [node idx val]\n  (aset (.-arr node) idx val))\n\n(defn- pv-clone-node [node]\n  (VectorNode. (.-edit node) (aclone (.-arr node))))\n\n(defn- tail-off [pv]\n  (let [cnt (.-cnt pv)]\n    (if (< cnt 32)\n      0\n      (bit-shift-left (bit-shift-right-zero-fill (dec cnt) 5) 5))))\n\n(defn- new-path [edit level node]\n  (loop [ll level\n         ret node]\n    (if (zero? ll)\n      ret\n      (let [embed ret\n            r (pv-fresh-node edit)\n            _ (pv-aset r 0 embed)]\n        (recur (- ll 5) r)))))\n\n(defn- push-tail [pv level parent tailnode]\n  (let [ret (pv-clone-node parent)\n        subidx (bit-and (bit-shift-right-zero-fill (dec (.-cnt pv)) level) 0x01f)]\n    (if (== 5 level)\n      (do\n        (pv-aset ret subidx tailnode)\n        ret)\n      (let [child (pv-aget parent subidx)]\n        (if-not (nil? child)\n          (let [node-to-insert (push-tail pv (- level 5) child tailnode)]\n            (pv-aset ret subidx node-to-insert)\n            ret)\n          (let [node-to-insert (new-path nil (- level 5) tailnode)]\n            (pv-aset ret subidx node-to-insert)\n            ret))))))\n\n(defn- vector-index-out-of-bounds [i cnt]\n  (throw (js\/Error. (str \"No item \" i \" in vector of length \" cnt))))\n\n(defn- first-array-for-longvec [pv]\n  ;; invariants: (count pv) > 32.\n  (loop [node (.-root pv)\n         level (.-shift pv)]\n    (if (pos? level)\n      (recur (pv-aget node 0) (- level 5))\n      (.-arr node))))\n\n(defn- unchecked-array-for [pv i]\n  ;; invariant: i is a valid index of pv (use array-for if unknown).\n  (if (>= i (tail-off pv))\n      (.-tail pv)\n      (loop [node (.-root pv)\n             level (.-shift pv)]\n        (if (pos? level)\n          (recur (pv-aget node (bit-and (bit-shift-right-zero-fill i level) 0x01f))\n                 (- level 5))\n          (.-arr node)))))\n\n(defn- array-for [pv i]\n  (if (and (<= 0 i) (< i (.-cnt pv)))\n    (unchecked-array-for pv i)\n    (vector-index-out-of-bounds i (.-cnt pv))))\n\n(defn- do-assoc [pv level node i val]\n  (let [ret (pv-clone-node node)]\n    (if (zero? level)\n      (do\n        (pv-aset ret (bit-and i 0x01f) val)\n        ret)\n      (let [subidx (bit-and (bit-shift-right-zero-fill i level) 0x01f)]\n        (pv-aset ret subidx (do-assoc pv (- level 5) (pv-aget node subidx) i val))\n        ret))))\n\n(defn- pop-tail [pv level node]\n  (let [subidx (bit-and (bit-shift-right-zero-fill (- (.-cnt pv) 2) level) 0x01f)]\n    (cond\n     (> level 5) (let [new-child (pop-tail pv (- level 5) (pv-aget node subidx))]\n                   (if (and (nil? new-child) (zero? subidx))\n                     nil\n                     (let [ret (pv-clone-node node)]\n                       (pv-aset ret subidx new-child)\n                       ret)))\n     (zero? subidx) nil\n     :else (let [ret (pv-clone-node node)]\n             (pv-aset ret subidx nil)\n             ret))))\n\n(deftype RangedIterator [^:mutable i ^:mutable base ^:mutable arr v start end]\n  Object\n  (hasNext [this]\n    (< i end))\n  (next [this]\n    (when (== (- i base) 32)\n      (set! arr (unchecked-array-for v i))\n      (set! base (+ base 32)))\n    (let [ret (aget arr (bit-and i 0x01f))]\n      (set! i (inc i))\n      ret)))\n\n(defn ranged-iterator [v start end]\n  (let [i start]\n    (RangedIterator. i (- i (js-mod i 32))\n      (when (< start (count v))\n        (unchecked-array-for v i))\n      v start end)))\n\n(defn- pv-reduce\n  ([pv f start end]\n   (if (< start end)\n     (pv-reduce pv f (nth pv start) (inc start) end)\n     (f)))\n  ([pv f init start end]\n   (loop [acc init i start arr (unchecked-array-for pv start)]\n     (if (< i end)\n       (let [j (bit-and i 0x01f)\n             arr (if (zero? j) (unchecked-array-for pv i) arr)\n             nacc (f acc (aget arr j))]\n         (if (reduced? nacc)\n           @nacc\n           (recur nacc (inc i) arr)))\n       acc))))\n\n(declare tv-editable-root tv-editable-tail TransientVector deref\n         pr-sequential-writer pr-writer chunked-seq)\n\n(defprotocol APersistentVector\n  \"Marker protocol\")\n\n(deftype PersistentVector [meta cnt shift root tail ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [_] (PersistentVector. meta cnt shift root tail __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentVector. new-meta cnt shift root tail __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  IStack\n  (-peek [coll]\n    (when (> cnt 0)\n      (-nth coll (dec cnt))))\n  (-pop [coll]\n    (cond\n     (zero? cnt) (throw (js\/Error. \"Can't pop empty vector\"))\n     (== 1 cnt) (-with-meta (.-EMPTY PersistentVector) meta)\n     (< 1 (- cnt (tail-off coll)))\n      (PersistentVector. meta (dec cnt) shift root (.slice tail 0 -1) nil)\n      :else (let [new-tail (unchecked-array-for coll (- cnt 2))\n                  nr (pop-tail coll shift root)\n                  new-root (if (nil? nr) (.-EMPTY-NODE PersistentVector) nr)\n                  cnt-1 (dec cnt)]\n              (if (and (< 5 shift) (nil? (pv-aget new-root 1)))\n                (PersistentVector. meta cnt-1 (- shift 5) (pv-aget new-root 0) new-tail nil)\n                (PersistentVector. meta cnt-1 shift new-root new-tail nil)))))\n\n  ICollection\n  (-conj [coll o]\n    (if (< (- cnt (tail-off coll)) 32)\n      (let [len (alength tail)\n            new-tail (make-array (inc len))]\n        (dotimes [i len]\n          (aset new-tail i (aget tail i)))\n        (aset new-tail len o)\n        (PersistentVector. meta (inc cnt) shift root new-tail nil))\n      (let [root-overflow? (> (bit-shift-right-zero-fill cnt 5) (bit-shift-left 1 shift))\n            new-shift (if root-overflow? (+ shift 5) shift)\n            new-root (if root-overflow?\n                       (let [n-r (pv-fresh-node nil)]\n                           (pv-aset n-r 0 root)\n                           (pv-aset n-r 1 (new-path nil shift (VectorNode. nil tail)))\n                           n-r)\n                       (push-tail coll shift root (VectorNode. nil tail)))]\n        (PersistentVector. meta (inc cnt) new-shift new-root (array o) nil))))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentVector) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other]\n    (if (instance? PersistentVector other)\n      (if (== cnt (count other))\n        (let [me-iter  (-iterator coll)\n              you-iter (-iterator other)]\n          (loop []\n            (if ^boolean (.hasNext me-iter)\n              (let [x (.next me-iter)\n                    y (.next you-iter)]\n                (if (= x y)\n                  (recur)\n                  false))\n              true)))\n        false)\n      (equiv-sequential coll other)))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (cond\n      (zero? cnt) nil\n      (<= cnt 32) (IndexedSeq. tail 0 nil)\n      :else (chunked-seq coll (first-array-for-longvec coll) 0 0)))\n\n  ICounted\n  (-count [coll] cnt)\n\n  IIndexed\n  (-nth [coll n]\n    (aget (array-for coll n) (bit-and n 0x01f)))\n  (-nth [coll n not-found]\n    (if (and (<= 0 n) (< n cnt))\n      (aget (unchecked-array-for coll n) (bit-and n 0x01f))\n      not-found))\n\n  ILookup\n  (-lookup [coll k] (-lookup coll k nil))\n  (-lookup [coll k not-found] (if (number? k)\n                                (-nth coll k not-found)\n                                not-found))\n\n  IAssociative\n  (-assoc [coll k v]\n    (if (number? k)\n      (-assoc-n coll k v)\n      (throw (js\/Error. \"Vector's key for assoc must be a number.\"))))\n  (-contains-key? [coll k]\n    (if (integer? k)\n      (and (<= 0 k) (< k cnt))\n      false))\n\n  IFind\n  (-find [coll n]\n    (when (and (<= 0 n) (< n cnt))\n      (MapEntry. n (aget (unchecked-array-for coll n) (bit-and n 0x01f)) nil)))\n\n  APersistentVector\n  IVector\n  (-assoc-n [coll n val]\n    (cond\n       (and (<= 0 n) (< n cnt))\n       (if (<= (tail-off coll) n)\n         (let [new-tail (aclone tail)]\n           (aset new-tail (bit-and n 0x01f) val)\n           (PersistentVector. meta cnt shift root new-tail nil))\n         (PersistentVector. meta cnt shift (do-assoc coll shift root n val) tail nil))\n       (== n cnt) (-conj coll val)\n       :else (throw (js\/Error. (str \"Index \" n \" out of bounds  [0,\" cnt \"]\")))))\n\n  IReduce\n  (-reduce [v f]\n    (pv-reduce v f 0 cnt))\n  (-reduce [v f init]\n    (loop [i 0 init init]\n      (if (< i cnt)\n        (let [arr  (unchecked-array-for v i)\n              len  (alength arr)\n              init (loop [j 0 init init]\n                     (if (< j len)\n                       (let [init (f init (aget arr j))]\n                         (if (reduced? init)\n                           init\n                           (recur (inc j) init)))\n                       init))]\n          (if (reduced? init)\n            @init\n            (recur (+ i len) init)))\n        init)))\n\n  IKVReduce\n  (-kv-reduce [v f init]\n    (loop [i 0 init init]\n      (if (< i cnt)\n        (let [arr  (unchecked-array-for v i)\n              len  (alength arr)\n              init (loop [j 0 init init]\n                     (if (< j len)\n                       (let [init (f init (+ j i) (aget arr j))]\n                         (if (reduced? init)\n                           init\n                           (recur (inc j) init)))\n                       init))]\n          (if (reduced? init)\n            @init\n            (recur (+ i len) init)))\n        init)))\n\n  IFn\n  (-invoke [coll k]\n    (if (number? k)\n      (-nth coll k)\n      (throw (js\/Error. \"Key must be integer\"))))\n\n  IEditableCollection\n  (-as-transient [coll]\n    (TransientVector. cnt shift (tv-editable-root root) (tv-editable-tail tail)))\n\n  IReversible\n  (-rseq [coll]\n    (when (pos? cnt)\n      (RSeq. coll (dec cnt) nil)))\n\n  IIterable\n  (-iterator [this]\n    (ranged-iterator this 0 cnt)))\n\n(set! (.-EMPTY-NODE PersistentVector) (VectorNode. nil (make-array 32)))\n\n(set! (.-EMPTY PersistentVector)\n  (PersistentVector. nil 0 5 (.-EMPTY-NODE PersistentVector) (array) empty-ordered-hash))\n\n(set! (.-fromArray PersistentVector)\n  (fn [xs ^boolean no-clone]\n    (let [l (alength xs)\n          xs (if no-clone xs (aclone xs))]\n      (if (< l 32)\n        (PersistentVector. nil l 5 (.-EMPTY-NODE PersistentVector) xs nil)\n        (let [node (.slice xs 0 32)\n              v (PersistentVector. nil 32 5 (.-EMPTY-NODE PersistentVector) node nil)]\n          (loop [i 32 out (-as-transient v)]\n            (if (< i l)\n              (recur (inc i) (conj! out (aget xs i)))\n              (persistent! out))))))))\n\n(es6-iterable PersistentVector)\n\n(declare map-entry?)\n\n(defn vec\n  \"Creates a new vector containing the contents of coll. JavaScript arrays\n  will be aliased and should not be modified.\"\n  [coll]\n  (cond\n    (map-entry? coll)\n    [(key coll) (val coll)]\n\n    (vector? coll)\n    (with-meta coll nil)\n\n    (array? coll)\n    (.fromArray PersistentVector coll true)\n\n    :else\n    (-persistent!\n      (reduce -conj!\n        (-as-transient (.-EMPTY PersistentVector))\n        coll))))\n\n(defn vector\n  \"Creates a new vector containing the args.\"\n  [& args]\n  (if (and (instance? IndexedSeq args) (zero? (.-i args)))\n    (.fromArray PersistentVector (.-arr args) (not (array? (.-arr args))))\n    (vec args)))\n\n(declare subvec)\n\n(deftype ChunkedSeq [vec node i off meta ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (chunked-seq vec node i off new-meta)))\n  IMeta\n  (-meta [coll] meta)\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ASeq\n  ISeq\n  (-first [coll]\n    (aget node off))\n  (-rest [coll]\n    (if (< (inc off) (alength node))\n      (let [s (chunked-seq vec node i (inc off))]\n        (if (nil? s)\n          ()\n          s))\n      (-chunked-rest coll)))\n\n  INext\n  (-next [coll]\n    (if (< (inc off) (alength node))\n      (let [s (chunked-seq vec node i (inc off))]\n        (if (nil? s)\n          nil\n          s))\n      (-chunked-next coll)))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll]\n    ())\n\n  IChunkedSeq\n  (-chunked-first [coll]\n    (array-chunk node off))\n  (-chunked-rest [coll]\n    (let [end (+ i (alength node))]\n      (if (< end (-count vec))\n        (chunked-seq vec (unchecked-array-for vec end) end 0)\n        ())))\n\n  IChunkedNext\n  (-chunked-next [coll]\n    (let [end (+ i (alength node))]\n      (when (< end (-count vec))\n        (chunked-seq vec (unchecked-array-for vec end) end 0))))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IReduce\n  (-reduce [coll f]\n    (pv-reduce vec f (+ i off) (count vec)))\n\n  (-reduce [coll f start]\n    (pv-reduce vec f start (+ i off) (count vec))))\n\n(es6-iterable ChunkedSeq)\n\n(defn chunked-seq\n  ([vec i off] (ChunkedSeq. vec (array-for vec i) i off nil nil))\n  ([vec node i off] (ChunkedSeq. vec node i off nil nil))\n  ([vec node i off meta]\n     (ChunkedSeq. vec node i off meta nil)))\n\n(declare build-subvec)\n\n(deftype Subvec [meta v start end ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [_] (Subvec. meta v start end __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (build-subvec new-meta v start end __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  IStack\n  (-peek [coll]\n    (when-not (== start end)\n      (-nth v (dec end))))\n  (-pop [coll]\n    (if (== start end)\n      (throw (js\/Error. \"Can't pop empty vector\"))\n      (build-subvec meta v start (dec end) nil)))\n\n  ICollection\n  (-conj [coll o]\n    (build-subvec meta (-assoc-n v end o) start (inc end) nil))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentVector) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (let [subvec-seq (fn subvec-seq [i]\n                       (when-not (== i end)\n                         (cons (-nth v i)\n                               (lazy-seq\n                                (subvec-seq (inc i))))))]\n      (subvec-seq start)))\n\n  IReversible\n  (-rseq [coll]\n    (if-not (== start end)\n      (RSeq. coll (dec (- end start)) nil)))\n\n  ICounted\n  (-count [coll] (- end start))\n\n  IIndexed\n  (-nth [coll n]\n    (if (or (neg? n) (<= end (+ start n)))\n      (vector-index-out-of-bounds n (- end start))\n      (-nth v (+ start n))))\n  (-nth [coll n not-found]\n    (if (or (neg? n) (<= end (+ start n)))\n      not-found\n      (-nth v (+ start n) not-found)))\n\n  ILookup\n  (-lookup [coll k] (-lookup coll k nil))\n  (-lookup [coll k not-found] (if (number? k)\n                                (-nth coll k not-found)\n                                not-found))\n\n  IAssociative\n  (-assoc [coll key val]\n    (if (number? key)\n      (-assoc-n coll key val)\n      (throw (js\/Error. \"Subvec's key for assoc must be a number.\"))))\n  (-contains-key? [coll key]\n    (if (integer? key)\n      (and (<= 0 key) (< key (- end start)))\n      false))\n\n  IFind\n  (-find [coll n]\n    (when-not (neg? n)\n      (let [idx (+ start n)]\n        (when (< idx end)\n          (MapEntry. n (-lookup v idx) nil)))))\n\n  IVector\n  (-assoc-n [coll n val]\n    (let [v-pos (+ start n)]\n      (if (or (neg? n) (<= (inc end) v-pos))\n        (throw (js\/Error. (str \"Index \" n \" out of bounds [0,\" (-count coll) \"]\")))\n        (build-subvec meta (assoc v v-pos val) start (max end (inc v-pos)) nil))))\n\n  IReduce\n  (-reduce [coll f]\n    (if (implements? APersistentVector v)\n      (pv-reduce v f start end)\n      (ci-reduce coll f)))\n  (-reduce [coll f init]\n    (if (implements? APersistentVector v)\n      (pv-reduce v f init start end)\n      (ci-reduce coll f init)))\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (loop [i start j 0 init init]\n      (if (< i end)\n        (let [init (f init j (-nth v i))]\n          (if (reduced? init)\n            @init\n            (recur (inc i) (inc j) init)))\n        init)))\n\n  IFn\n  (-invoke [coll k]\n    (-nth coll k))\n  (-invoke [coll k not-found]\n    (-nth coll k not-found))\n\n  IIterable\n  (-iterator [coll]\n    (if (implements? APersistentVector v)\n      (ranged-iterator v start end)\n      (seq-iter coll))))\n\n(es6-iterable Subvec)\n\n(defn- build-subvec [meta v start end __hash]\n  (if (instance? Subvec v)\n    (recur meta (.-v v) (+ (.-start v) start) (+ (.-start v) end) __hash)\n    (do\n      (when-not (vector? v)\n        (throw (js\/Error. \"v must satisfy IVector\")))\n      (when (or (neg? start)\n                (< end start)\n                (> end (count v)))\n        (throw (js\/Error. \"Index out of bounds\")))\n      (Subvec. meta v start end __hash))))\n\n(defn subvec\n  \"Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.\"\n  ([v start]\n   (subvec v start (count v)))\n  ([v start end]\n   (assert (and (not (nil? start)) (not (nil? end))))\n   (build-subvec nil v (int start) (int end) nil)))\n\n(defn- tv-ensure-editable [edit node]\n  (if (identical? edit (.-edit node))\n    node\n    (VectorNode. edit (aclone (.-arr node)))))\n\n(defn- tv-editable-root [node]\n  (VectorNode. (js-obj) (aclone (.-arr node))))\n\n(defn- tv-editable-tail [tl]\n  (let [ret (make-array 32)]\n    (array-copy tl 0 ret 0 (alength tl))\n    ret))\n\n(defn- tv-push-tail [tv level parent tail-node]\n  (let [ret    (tv-ensure-editable (.. tv -root -edit) parent)\n        subidx (bit-and (bit-shift-right-zero-fill (dec (.-cnt tv)) level) 0x01f)]\n    (pv-aset ret subidx\n             (if (== level 5)\n               tail-node\n               (let [child (pv-aget ret subidx)]\n                 (if-not (nil? child)\n                   (tv-push-tail tv (- level 5) child tail-node)\n                   (new-path (.. tv -root -edit) (- level 5) tail-node)))))\n    ret))\n\n(defn- tv-pop-tail [tv level node]\n  (let [node   (tv-ensure-editable (.. tv -root -edit) node)\n        subidx (bit-and (bit-shift-right-zero-fill (- (.-cnt tv) 2) level) 0x01f)]\n    (cond\n      (> level 5) (let [new-child (tv-pop-tail\n                                   tv (- level 5) (pv-aget node subidx))]\n                    (if (and (nil? new-child) (zero? subidx))\n                      nil\n                      (do (pv-aset node subidx new-child)\n                          node)))\n      (zero? subidx) nil\n      :else (do (pv-aset node subidx nil)\n                node))))\n\n(defn- unchecked-editable-array-for [tv i]\n  ;; invariant: i is a valid index of tv.\n  (if (>= i (tail-off tv))\n    (.-tail tv)\n    (let [root (.-root tv)]\n      (loop [node  root\n             level (.-shift tv)]\n        (if (pos? level)\n          (recur (tv-ensure-editable\n                   (.-edit root)\n                   (pv-aget node\n                            (bit-and (bit-shift-right-zero-fill i level)\n                                     0x01f)))\n                 (- level 5))\n          (.-arr node))))))\n\n(deftype TransientVector [^:mutable cnt\n                          ^:mutable shift\n                          ^:mutable root\n                          ^:mutable tail]\n  ITransientCollection\n  (-conj! [tcoll o]\n    (if ^boolean (.-edit root)\n      (if (< (- cnt (tail-off tcoll)) 32)\n        (do (aset tail (bit-and cnt 0x01f) o)\n            (set! cnt (inc cnt))\n            tcoll)\n        (let [tail-node (VectorNode. (.-edit root) tail)\n              new-tail  (make-array 32)]\n          (aset new-tail 0 o)\n          (set! tail new-tail)\n          (if (> (bit-shift-right-zero-fill cnt 5)\n                 (bit-shift-left 1 shift))\n            (let [new-root-array (make-array 32)\n                  new-shift      (+ shift 5)]\n              (aset new-root-array 0 root)\n              (aset new-root-array 1 (new-path (.-edit root) shift tail-node))\n              (set! root  (VectorNode. (.-edit root) new-root-array))\n              (set! shift new-shift)\n              (set! cnt   (inc cnt))\n              tcoll)\n            (let [new-root (tv-push-tail tcoll shift root tail-node)]\n              (set! root new-root)\n              (set! cnt  (inc cnt))\n              tcoll))))\n      (throw (js\/Error. \"conj! after persistent!\"))))\n\n  (-persistent! [tcoll]\n    (if ^boolean (.-edit root)\n      (do (set! (.-edit root) nil)\n          (let [len (- cnt (tail-off tcoll))\n                trimmed-tail (make-array len)]\n            (array-copy tail 0 trimmed-tail 0 len)\n            (PersistentVector. nil cnt shift root trimmed-tail nil)))\n      (throw (js\/Error. \"persistent! called twice\"))))\n\n  ITransientAssociative\n  (-assoc! [tcoll key val]\n    (if (number? key)\n      (-assoc-n! tcoll key val)\n      (throw (js\/Error. \"TransientVector's key for assoc! must be a number.\"))))\n\n  ITransientVector\n  (-assoc-n! [tcoll n val]\n    (if ^boolean (.-edit root)\n      (cond\n        (and (<= 0 n) (< n cnt))\n        (if (<= (tail-off tcoll) n)\n          (do (aset tail (bit-and n 0x01f) val)\n              tcoll)\n          (let [new-root\n                ((fn go [level node]\n                   (let [node (tv-ensure-editable (.-edit root) node)]\n                     (if (zero? level)\n                       (do (pv-aset node (bit-and n 0x01f) val)\n                           node)\n                       (let [subidx (bit-and (bit-shift-right-zero-fill n level)\n                                             0x01f)]\n                         (pv-aset node subidx\n                                  (go (- level 5) (pv-aget node subidx)))\n                         node))))\n                 shift root)]\n            (set! root new-root)\n            tcoll))\n        (== n cnt) (-conj! tcoll val)\n        :else\n        (throw\n         (js\/Error.\n          (str \"Index \" n \" out of bounds for TransientVector of length\" cnt))))\n      (throw (js\/Error. \"assoc! after persistent!\"))))\n\n  (-pop! [tcoll]\n    (if ^boolean (.-edit root)\n      (cond\n        (zero? cnt) (throw (js\/Error. \"Can't pop empty vector\"))\n        (== 1 cnt)                       (do (set! cnt 0) tcoll)\n        (pos? (bit-and (dec cnt) 0x01f)) (do (set! cnt (dec cnt)) tcoll)\n        :else\n        (let [new-tail (unchecked-editable-array-for tcoll (- cnt 2))\n              new-root (let [nr (tv-pop-tail tcoll shift root)]\n                         (if-not (nil? nr)\n                           nr\n                           (VectorNode. (.-edit root) (make-array 32))))]\n          (if (and (< 5 shift) (nil? (pv-aget new-root 1)))\n            (let [new-root (tv-ensure-editable (.-edit root) (pv-aget new-root 0))]\n              (set! root  new-root)\n              (set! shift (- shift 5))\n              (set! cnt   (dec cnt))\n              (set! tail  new-tail)\n              tcoll)\n            (do (set! root new-root)\n                (set! cnt  (dec cnt))\n                (set! tail new-tail)\n                tcoll))))\n      (throw (js\/Error. \"pop! after persistent!\"))))\n\n  ICounted\n  (-count [coll]\n    (if ^boolean (.-edit root)\n      cnt\n      (throw (js\/Error. \"count after persistent!\"))))\n\n  IIndexed\n  (-nth [coll n]\n    (if ^boolean (.-edit root)\n      (aget (array-for coll n) (bit-and n 0x01f))\n      (throw (js\/Error. \"nth after persistent!\"))))\n\n  (-nth [coll n not-found]\n    (if (and (<= 0 n) (< n cnt))\n      (-nth coll n)\n      not-found))\n\n  ILookup\n  (-lookup [coll k] (-lookup coll k nil))\n\n  (-lookup [coll k not-found]\n    (cond\n      (not ^boolean (.-edit root)) (throw (js\/Error. \"lookup after persistent!\"))\n      (number? k) (-nth coll k not-found)\n      :else not-found))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found)))\n\n;;; PersistentQueue ;;;\n\n(deftype PersistentQueueIter [^:mutable fseq riter]\n  Object\n  (hasNext [_]\n    (or (and (some? fseq) (seq fseq)) (and (some? riter) (.hasNext riter))))\n  (next [_]\n    (cond\n      (some? fseq)\n      (let [ret (first fseq)]\n        (set! fseq (next fseq))\n        ret)\n      (and (some? riter) ^boolean (.hasNext riter))\n      (.next riter)\n      :else (throw (js\/Error. \"No such element\"))))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype PersistentQueueSeq [meta front rear ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentQueueSeq. new-meta front rear __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll] (first front))\n  (-rest  [coll]\n    (if-let [f1 (next front)]\n      (PersistentQueueSeq. meta f1 rear nil)\n      (if (nil? rear)\n        (-empty coll)\n        (PersistentQueueSeq. meta rear nil nil))))\n\n  INext\n  (-next [coll]\n    (if-let [f1 (next front)]\n      (PersistentQueueSeq. meta f1 rear nil)\n      (when (some? rear)\n        (PersistentQueueSeq. meta rear nil nil))))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY List) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll] coll))\n\n(es6-iterable PersistentQueueSeq)\n\n(deftype PersistentQueue [meta count front rear ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [coll] (PersistentQueue. meta count front rear __hash))\n\n  IIterable\n  (-iterator [coll]\n    (PersistentQueueIter. front (-iterator rear)))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentQueue. new-meta count front rear __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll] (first front))\n  (-rest [coll] (rest (seq coll)))\n\n  IStack\n  (-peek [coll] (first front))\n  (-pop [coll]\n    (if front\n      (if-let [f1 (next front)]\n        (PersistentQueue. meta (dec count) f1 rear nil)\n        (PersistentQueue. meta (dec count) (seq rear) [] nil))\n      coll))\n\n  ICollection\n  (-conj [coll o]\n    (if front\n      (PersistentQueue. meta (inc count) front (conj (or rear []) o) nil)\n      (PersistentQueue. meta (inc count) (conj front o) [] nil)))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentQueue) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (let [rear (seq rear)]\n      (if (or front rear)\n        (PersistentQueueSeq. nil front (seq rear) nil))))\n\n  ICounted\n  (-count [coll] count))\n\n(set! (.-EMPTY PersistentQueue) (PersistentQueue. nil 0 nil [] empty-ordered-hash))\n\n(es6-iterable PersistentQueue)\n\n(deftype NeverEquiv []\n  Object\n  (equiv [this other]\n    (-equiv this other))\n  IEquiv\n  (-equiv [o other] false))\n\n(def ^:private never-equiv (NeverEquiv.))\n\n(defn equiv-map\n  \"Test map equivalence. Returns true if x equals y, otherwise returns false.\"\n  [x y]\n  (boolean\n    (when (and (map? y) (not (record? y)))\n      ; assume all maps are counted\n      (when (== (count x) (count y))\n        (if (satisfies? IKVReduce x)\n          (reduce-kv\n            (fn [_ k v]\n              (if (= (get y k never-equiv) v)\n                true\n                (reduced false)))\n            true x)\n          (every?\n            (fn [xkv]\n              (= (get y (first xkv) never-equiv) (second xkv)))\n            x))))))\n\n\n(defn- scan-array [incr k array]\n  (let [len (alength array)]\n    (loop [i 0]\n      (when (< i len)\n        (if (identical? k (aget array i))\n          i\n          (recur (+ i incr)))))))\n\n; The keys field is an array of all keys of this map, in no particular\n; order. Any string, keyword, or symbol key is used as a property name\n; to store the value in strobj.  If a key is assoc'ed when that same\n; key already exists in strobj, the old value is overwritten. If a\n; non-string key is assoc'ed, return a HashMap object instead.\n\n(defn- obj-map-compare-keys [a b]\n  (let [a (hash a)\n        b (hash b)]\n    (cond\n     (< a b) -1\n     (> a b) 1\n     :else 0)))\n\n(defn- obj-map->hash-map [m k v]\n  (let [ks  (.-keys m)\n        len (alength ks)\n        so  (.-strobj m)\n        mm  (meta m)]\n    (loop [i   0\n           out (transient (.-EMPTY PersistentHashMap))]\n      (if (< i len)\n        (let [k (aget ks i)]\n          (recur (inc i) (assoc! out k (gobject\/get so k))))\n        (-with-meta (persistent! (assoc! out k v)) mm)))))\n\n;;; ObjMap - DEPRECATED\n\n(defn- obj-clone [obj ks]\n  (let [new-obj (js-obj)\n        l (alength ks)]\n    (loop [i 0]\n      (when (< i l)\n        (let [k (aget ks i)]\n          (gobject\/set new-obj k (gobject\/get obj k))\n          (recur (inc i)))))\n    new-obj))\n\n(deftype ObjMap [meta keys strobj update-count ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (ObjMap. new-meta keys strobj update-count __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll entry]\n    (if (vector? entry)\n      (-assoc coll (-nth entry 0) (-nth entry 1))\n      (reduce -conj\n              coll\n              entry)))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY ObjMap) meta))\n\n  IEquiv\n  (-equiv [coll other] (equiv-map coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (when (pos? (alength keys))\n      (map #(vector % (unchecked-get strobj %))\n           (.sort keys obj-map-compare-keys))))\n\n  ICounted\n  (-count [coll] (alength keys))\n\n  ILookup\n  (-lookup [coll k] (-lookup coll k nil))\n  (-lookup [coll k not-found]\n    (if (and (string? k)\n             (not (nil? (scan-array 1 k keys))))\n      (unchecked-get strobj k)\n      not-found))\n\n  IAssociative\n  (-assoc [coll k v]\n    (if (string? k)\n        (if (or (> update-count (.-HASHMAP_THRESHOLD ObjMap))\n                (>= (alength keys) (.-HASHMAP_THRESHOLD ObjMap)))\n          (obj-map->hash-map coll k v)\n          (if-not (nil? (scan-array 1 k keys))\n            (let [new-strobj (obj-clone strobj keys)]\n              (gobject\/set new-strobj k v)\n              (ObjMap. meta keys new-strobj (inc update-count) nil)) ; overwrite\n            (let [new-strobj (obj-clone strobj keys) ; append\n                  new-keys (aclone keys)]\n              (gobject\/set new-strobj k v)\n              (.push new-keys k)\n              (ObjMap. meta new-keys new-strobj (inc update-count) nil))))\n        ;; non-string key. game over.\n        (obj-map->hash-map coll k v)))\n  (-contains-key? [coll k]\n    (if (and (string? k)\n             (not (nil? (scan-array 1 k keys))))\n      true\n      false))\n\n  IFind\n  (-find [coll k]\n    (when (and (string? k)\n            (not (nil? (scan-array 1 k keys))))\n      (MapEntry. k (unchecked-get strobj k) nil)))\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (let [len (alength keys)]\n      (loop [keys (.sort keys obj-map-compare-keys)\n             init init]\n        (if (seq keys)\n          (let [k (first keys)\n                init (f init k (unchecked-get strobj k))]\n            (if (reduced? init)\n              @init\n              (recur (rest keys) init)))\n          init))))\n\n  IMap\n  (-dissoc [coll k]\n    (if (and (string? k)\n             (not (nil? (scan-array 1 k keys))))\n      (let [new-keys (aclone keys)\n            new-strobj (obj-clone strobj keys)]\n        (.splice new-keys (scan-array 1 k new-keys) 1)\n        (js-delete new-strobj k)\n        (ObjMap. meta new-keys new-strobj (inc update-count) nil))\n      coll)) ; key not found, return coll unchanged\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found))\n\n  IEditableCollection\n  (-as-transient [coll]\n    (transient (into (hash-map) coll))))\n\n(set! (.-EMPTY ObjMap) (ObjMap. nil (array) (js-obj) 0 empty-unordered-hash))\n\n(set! (.-HASHMAP_THRESHOLD ObjMap) 8)\n\n(set! (.-fromObject ObjMap) (fn [ks obj] (ObjMap. nil ks obj 0 nil)))\n\n;; Record Iterator\n(deftype RecordIter [^:mutable i record base-count fields ext-map-iter]\n  Object\n  (hasNext [_]\n    (or (< i base-count) (.hasNext ext-map-iter)))\n  (next [_]\n    (if (< i base-count)\n      (let [k (nth fields i)]\n        (set! i (inc i))\n        (MapEntry. k (-lookup record k) nil))\n      (.next ext-map-iter)))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n;; EXPERIMENTAL: subject to change\n(deftype ES6EntriesIterator [^:mutable s]\n  Object\n  (next [_]\n    (if-not (nil? s)\n      (let [[k v] (first s)]\n        (set! s (next s))\n        #js {:value #js [k v] :done false})\n      #js {:value nil :done true})))\n\n(defn es6-entries-iterator [coll]\n  (ES6EntriesIterator. (seq coll)))\n\n;; EXPERIMENTAL: subject to change\n(deftype ES6SetEntriesIterator [^:mutable s]\n  Object\n  (next [_]\n    (if-not (nil? s)\n      (let [x (first s)]\n        (set! s (next s))\n        #js {:value #js [x x] :done false})\n      #js {:value nil :done true})))\n\n(defn es6-set-entries-iterator [coll]\n  (ES6SetEntriesIterator. (seq coll)))\n\n;;; PersistentArrayMap\n\n(defn- array-index-of-nil? [arr]\n  (let [len (alength arr)]\n    (loop [i 0]\n      (cond\n        (<= len i) -1\n        (nil? (aget arr i)) i\n        :else (recur (+ i 2))))))\n\n(defn- array-index-of-keyword? [arr k]\n  (let [len  (alength arr)\n        kstr (.-fqn k)]\n    (loop [i 0]\n      (cond\n        (<= len i) -1\n        (and (keyword? (aget arr i))\n             (identical? kstr (.-fqn (aget arr i)))) i\n        :else (recur (+ i 2))))))\n\n(defn- array-index-of-symbol? [arr k]\n  (let [len  (alength arr)\n        kstr (.-str k)]\n    (loop [i 0]\n      (cond\n        (<= len i) -1\n        (and (symbol? (aget arr i))\n             (identical? kstr (.-str (aget arr i)))) i\n        :else (recur (+ i 2))))))\n\n(defn- array-index-of-identical? [arr k]\n  (let [len (alength arr)]\n    (loop [i 0]\n      (cond\n        (<= len i) -1\n        (identical? k (aget arr i)) i\n        :else (recur (+ i 2))))))\n\n(defn- array-index-of-equiv? [arr k]\n  (let [len (alength arr)]\n    (loop [i 0]\n      (cond\n        (<= len i) -1\n        (= k (aget arr i)) i\n        :else (recur (+ i 2))))))\n\n(defn array-index-of [arr k]\n  (cond\n    (keyword? k) (array-index-of-keyword? arr k)\n\n    (or (string? k) (number? k))\n    (array-index-of-identical? arr k)\n\n    (symbol? k) (array-index-of-symbol? arr k)\n\n    (nil? k)\n    (array-index-of-nil? arr)\n\n    :else (array-index-of-equiv? arr k)))\n\n(defn- array-map-index-of [m k]\n  (array-index-of (.-arr m) k))\n\n(defn- array-extend-kv [arr k v]\n  (let [l (alength arr)\n        narr (make-array (+ l 2))]\n    (loop [i 0]\n      (when (< i l)\n        (aset narr i (aget arr i))\n        (recur (inc i))))\n    (aset narr l k)\n    (aset narr (inc l) v)\n    narr))\n\n(defn- array-map-extend-kv [m k v]\n  (array-extend-kv (.-arr m) k v))\n\n(declare TransientArrayMap)\n\n(deftype MapEntry [key val ^:mutable __hash]\n  Object\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMapEntry\n  (-key [node] key)\n  (-val [node] val)\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IMeta\n  (-meta [node] nil)\n\n  IWithMeta\n  (-with-meta [node meta]\n    (with-meta [key val] meta))\n\n  IStack\n  (-peek [node] val)\n\n  (-pop [node] [key])\n\n  ICollection\n  (-conj [node o] [key val o])\n\n  IEmptyableCollection\n  (-empty [node] nil)\n\n  ISequential\n  ISeqable\n  (-seq [node] (IndexedSeq. #js [key val] 0 nil))\n\n  IReversible\n  (-rseq [node] (IndexedSeq. #js [val key] 0 nil))\n\n  ICounted\n  (-count [node] 2)\n\n  IIndexed\n  (-nth [node n]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    (throw (js\/Error. \"Index out of bounds\"))))\n\n  (-nth [node n not-found]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    not-found))\n\n  ILookup\n  (-lookup [node k] (-nth node k nil))\n  (-lookup [node k not-found] (-nth node k not-found))\n\n  IAssociative\n  (-assoc [node k v]\n    (assoc [key val] k v))\n  (-contains-key? [node k]\n    (or (== k 0) (== k 1)))\n\n  IFind\n  (-find [node k]\n    (case k\n      0 (MapEntry. 0 key nil)\n      1 (MapEntry. 1 val nil)\n      nil))\n\n  IVector\n  (-assoc-n [node n v]\n    (-assoc-n [key val] n v))\n\n  IReduce\n  (-reduce [node f]\n    (ci-reduce node f))\n\n  (-reduce [node f start]\n    (ci-reduce node f start))\n\n  IFn\n  (-invoke [node k]\n    (-nth node k))\n\n  (-invoke [node k not-found]\n    (-nth node k not-found)))\n\n(defn map-entry?\n  \"Returns true if x satisfies IMapEntry\"\n  [x]\n  (implements? IMapEntry x))\n\n(deftype PersistentArrayMapSeq [arr i _meta]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMeta\n  (-meta [coll] _meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta _meta)\n      coll\n      (PersistentArrayMapSeq. arr i new-meta)))\n\n  ICounted\n  (-count [coll]\n    (\/ (- (alength arr) i) 2))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (hash-ordered-coll coll))\n\n  ISeq\n  (-first [coll]\n    (MapEntry. (aget arr i) (aget arr (inc i)) nil))\n\n  (-rest [coll]\n    (if (< i (- (alength arr) 2))\n      (PersistentArrayMapSeq. arr (+ i 2) nil)\n      ()))\n\n  INext\n  (-next [coll]\n    (when (< i (- (alength arr) 2))\n      (PersistentArrayMapSeq. arr (+ i 2) nil)))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable PersistentArrayMapSeq)\n\n(defn persistent-array-map-seq [arr i _meta]\n  (when (<= i (- (alength arr) 2))\n    (PersistentArrayMapSeq. arr i _meta)))\n\n(declare keys vals)\n\n(deftype PersistentArrayMapIterator [arr ^:mutable i cnt]\n  Object\n  (hasNext [_]\n    (< i cnt))\n  (next [_]\n    (let [ret (MapEntry. (aget arr i) (aget arr (inc i)) nil)]\n      (set! i (+ i 2))\n      ret)))\n\n(deftype PersistentArrayMap [meta cnt arr ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n\n  ;; EXPERIMENTAL: subject to change\n  (keys [coll]\n    (es6-iterator (keys coll)))\n  (entries [coll]\n    (es6-entries-iterator (seq coll)))\n  (values [coll]\n    (es6-iterator (vals coll)))\n  (has [coll k]\n    (contains? coll k))\n  (get [coll k not-found]\n    (-lookup coll k not-found))\n  (forEach [coll f]\n    (doseq [[k v] coll]\n      (f v k)))\n\n  ICloneable\n  (-clone [_] (PersistentArrayMap. meta cnt arr __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentArrayMap. new-meta cnt arr __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll entry]\n    (if (vector? entry)\n      (-assoc coll (-nth entry 0) (-nth entry 1))\n      (loop [ret coll es (seq entry)]\n        (if (nil? es)\n          ret\n          (let [e (first es)]\n            (if (vector? e)\n              (recur (-assoc ret (-nth e 0) (-nth e 1))\n                     (next es))\n              (throw (js\/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentArrayMap) meta))\n\n  IEquiv\n  (-equiv [coll other]\n    (if (and (map? other) (not (record? other)))\n      (let [alen (alength arr)\n            ^not-native other other]\n        (if (== cnt (-count other))\n          (loop [i 0]\n            (if (< i alen)\n              (let [v (-lookup other (aget arr i) lookup-sentinel)]\n                (if-not (identical? v lookup-sentinel)\n                  (if (= (aget arr (inc i)) v)\n                    (recur (+ i 2))\n                    false)\n                  false))\n              true))\n          false))\n      false))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  IIterable\n  (-iterator [this]\n    (PersistentArrayMapIterator. arr 0 (* cnt 2)))\n\n  ISeqable\n  (-seq [coll]\n    (persistent-array-map-seq arr 0 nil))\n\n  ICounted\n  (-count [coll] cnt)\n\n  ILookup\n  (-lookup [coll k]\n    (-lookup coll k nil))\n\n  (-lookup [coll k not-found]\n    (let [idx (array-map-index-of coll k)]\n      (if (== idx -1)\n        not-found\n        (aget arr (inc idx)))))\n\n  IAssociative\n  (-assoc [coll k v]\n    (let [idx (array-map-index-of coll k)]\n      (cond\n        (== idx -1)\n        (if (< cnt (.-HASHMAP-THRESHOLD PersistentArrayMap))\n          (let [arr (array-map-extend-kv coll k v)]\n            (PersistentArrayMap. meta (inc cnt) arr nil))\n          (-> (into (.-EMPTY PersistentHashMap) coll)\n            (-assoc k v)\n            (-with-meta meta)))\n\n        (identical? v (aget arr (inc idx)))\n        coll\n\n        :else\n        (let [arr (doto (aclone arr)\n                    (aset (inc idx) v))]\n          (PersistentArrayMap. meta cnt arr nil)))))\n\n  (-contains-key? [coll k]\n    (not (== (array-map-index-of coll k) -1)))\n\n  IFind\n  (-find [coll k]\n    (let [idx (array-map-index-of coll k)]\n      (when-not (== idx -1)\n        (MapEntry. (aget arr idx) (aget arr (inc idx)) nil))))\n\n  IMap\n  (-dissoc [coll k]\n    (let [idx (array-map-index-of coll k)]\n      (if (>= idx 0)\n        (let [len     (alength arr)\n              new-len (- len 2)]\n          (if (zero? new-len)\n            (-empty coll)\n            (let [new-arr (make-array new-len)]\n              (loop [s 0 d 0]\n                (cond\n                  (>= s len) (PersistentArrayMap. meta (dec cnt) new-arr nil)\n                  (= k (aget arr s)) (recur (+ s 2) d)\n                  :else (do (aset new-arr d (aget arr s))\n                            (aset new-arr (inc d) (aget arr (inc s)))\n                            (recur (+ s 2) (+ d 2))))))))\n        coll)))\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (let [len (alength arr)]\n      (loop [i 0 init init]\n        (if (< i len)\n          (let [init (f init (aget arr i) (aget arr (inc i)))]\n            (if (reduced? init)\n              @init\n              (recur (+ i 2) init)))\n          init))))\n\n  IReduce\n  (-reduce [coll f]\n    (iter-reduce coll f))\n  (-reduce [coll f start]\n    (iter-reduce coll f start))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found))\n\n  IEditableCollection\n  (-as-transient [coll]\n    (TransientArrayMap. (js-obj) (alength arr) (aclone arr))))\n\n(set! (.-EMPTY PersistentArrayMap) (PersistentArrayMap. nil 0 (array) empty-unordered-hash))\n\n(set! (.-HASHMAP-THRESHOLD PersistentArrayMap) 8)\n\n(set! (.-fromArray PersistentArrayMap)\n  (fn [arr ^boolean no-clone ^boolean no-check]\n    (as-> (if no-clone arr (aclone arr)) arr\n      (if no-check\n        arr\n        (let [ret (array)]\n          (loop [i 0]\n            (when (< i (alength arr))\n              (let [k (aget arr i)\n                    v (aget arr (inc i))\n                    idx (array-index-of ret k)]\n                (when (== idx -1)\n                  (.push ret k)\n                  (.push ret v)))\n              (recur (+ i 2))))\n          ret))\n      (let [cnt (\/ (alength arr) 2)]\n        (PersistentArrayMap. nil cnt arr nil)))))\n\n(set! (.-createWithCheck PersistentArrayMap)\n  (fn [arr]\n    (let [ret (array)]\n      (loop [i 0]\n        (when (< i (alength arr))\n          (let [k (aget arr i)\n                v (aget arr (inc i))\n                idx (array-index-of ret k)]\n            (if (== idx -1)\n              (doto ret (.push k) (.push v))\n              (throw (js\/Error. (str \"Duplicate key: \" k)))))\n          (recur (+ i 2))))\n      (let [cnt (\/ (alength arr) 2)]\n        (PersistentArrayMap. nil cnt arr nil)))))\n\n(set! (.-createAsIfByAssoc PersistentArrayMap)\n  (fn [arr]\n    (let [ret (array)]\n      (loop [i 0]\n        (when (< i (alength arr))\n          (let [k (aget arr i)\n                v (aget arr (inc i))\n                idx (array-index-of ret k)]\n            (if (== idx -1)\n              (doto ret (.push k) (.push v))\n              (aset ret (inc idx) v)))\n          (recur (+ i 2))))\n      (PersistentArrayMap. nil (\/ (alength ret) 2) ret nil))))\n\n(es6-iterable PersistentArrayMap)\n\n(declare array->transient-hash-map)\n\n(deftype TransientArrayMap [^:mutable ^boolean editable?\n                            ^:mutable len\n                            arr]\n  ICounted\n  (-count [tcoll]\n    (if editable?\n      (quot len 2)\n      (throw (js\/Error. \"count after persistent!\"))))\n\n  ILookup\n  (-lookup [tcoll k]\n    (-lookup tcoll k nil))\n\n  (-lookup [tcoll k not-found]\n    (if editable?\n      (let [idx (array-map-index-of tcoll k)]\n        (if (== idx -1)\n          not-found\n          (aget arr (inc idx))))\n      (throw (js\/Error. \"lookup after persistent!\"))))\n\n  ITransientCollection\n  (-conj! [tcoll o]\n    (if editable?\n      (cond\n        (map-entry? o)\n        (-assoc! tcoll (key o) (val o))\n\n        (vector? o)\n        (-assoc! tcoll (o 0) (o 1))\n\n        :else\n        (loop [es (seq o) tcoll tcoll]\n          (if-let [e (first es)]\n            (recur (next es)\n                   (-assoc! tcoll (key e) (val e)))\n            tcoll)))\n      (throw (js\/Error. \"conj! after persistent!\"))))\n\n  (-persistent! [tcoll]\n    (if editable?\n      (do (set! editable? false)\n          (PersistentArrayMap. nil (quot len 2) arr nil))\n      (throw (js\/Error. \"persistent! called twice\"))))\n\n  ITransientAssociative\n  (-assoc! [tcoll key val]\n    (if editable?\n      (let [idx (array-map-index-of tcoll key)]\n        (if (== idx -1)\n          (if (<= (+ len 2) (* 2 (.-HASHMAP-THRESHOLD PersistentArrayMap)))\n            (do (set! len (+ len 2))\n                (.push arr key)\n                (.push arr val)\n                tcoll)\n            (assoc! (array->transient-hash-map len arr) key val))\n          (if (identical? val (aget arr (inc idx)))\n            tcoll\n            (do (aset arr (inc idx) val)\n                tcoll))))\n      (throw (js\/Error. \"assoc! after persistent!\"))))\n\n  ITransientMap\n  (-dissoc! [tcoll key]\n    (if editable?\n      (let [idx (array-map-index-of tcoll key)]\n        (when (>= idx 0)\n          (aset arr idx (aget arr (- len 2)))\n          (aset arr (inc idx) (aget arr (dec len)))\n          (doto arr .pop .pop)\n          (set! len (- len 2)))\n        tcoll)\n      (throw (js\/Error. \"dissoc! after persistent!\"))))\n\n  IFn\n  (-invoke [tcoll key]\n    (-lookup tcoll key nil))\n  (-invoke [tcoll key not-found]\n    (-lookup tcoll key not-found)))\n\n(declare TransientHashMap)\n\n(defn- array->transient-hash-map [len arr]\n  (loop [out (transient (.-EMPTY PersistentHashMap))\n         i   0]\n    (if (< i len)\n      (recur (assoc! out (aget arr i) (aget arr (inc i))) (+ i 2))\n      out)))\n\n;;; PersistentHashMap\n\n(deftype Box [^:mutable val])\n\n(declare create-inode-seq create-array-node-seq reset! create-node atom deref)\n\n(defn key-test [key other]\n  (cond\n    (identical? key other) true\n    (keyword-identical? key other) true\n    :else (= key other)))\n\n(defn- mask [hash shift]\n  (bit-and (bit-shift-right-zero-fill hash shift) 0x01f))\n\n(defn- clone-and-set\n  ([arr i a]\n     (doto (aclone arr)\n       (aset i a)))\n  ([arr i a j b]\n     (doto (aclone arr)\n       (aset i a)\n       (aset j b))))\n\n(defn- remove-pair [arr i]\n  (let [new-arr (make-array (- (alength arr) 2))]\n    (array-copy arr 0 new-arr 0 (* 2 i))\n    (array-copy arr (* 2 (inc i)) new-arr (* 2 i) (- (alength new-arr) (* 2 i)))\n    new-arr))\n\n(defn- bitmap-indexed-node-index [bitmap bit]\n  (bit-count (bit-and bitmap (dec bit))))\n\n(defn- bitpos [hash shift]\n  (bit-shift-left 1 (mask hash shift)))\n\n(defn- edit-and-set\n  ([inode edit i a]\n     (let [editable (.ensure-editable inode edit)]\n       (aset (.-arr editable) i a)\n       editable))\n  ([inode edit i a j b]\n     (let [editable (.ensure-editable inode edit)]\n       (aset (.-arr editable) i a)\n       (aset (.-arr editable) j b)\n       editable)))\n\n(defn- inode-kv-reduce [arr f init]\n  (let [len (alength arr)]\n    (loop [i 0 init init]\n      (if (< i len)\n        (let [init (let [k (aget arr i)]\n                     (if-not (nil? k)\n                       (f init k (aget arr (inc i)))\n                       (let [node (aget arr (inc i))]\n                         (if-not (nil? node)\n                           (.kv-reduce node f init)\n                           init))))]\n          (if (reduced? init)\n            init\n            (recur (+ i 2) init)))\n        init))))\n\n(declare ArrayNode)\n\n (deftype NodeIterator [arr ^:mutable i ^:mutable next-entry ^:mutable next-iter]\n  Object\n  (advance [this]\n    (let [len (alength arr)]\n      (loop []\n        (if (< i len)\n          (let [key (aget arr i)\n                node-or-val (aget arr (inc i))\n                ^boolean found\n                (cond (some? key)\n                      (set! next-entry (MapEntry. key node-or-val nil))\n                      (some? node-or-val)\n                      (let [new-iter (-iterator node-or-val)]\n                        (if ^boolean (.hasNext new-iter)\n                          (set! next-iter new-iter)\n                          false))\n                      :else false)]\n            (set! i (+ i 2))\n            (if found true (recur)))\n          false))))\n  (hasNext [this]\n    (or (some? next-entry) (some? next-iter) (.advance this)))\n  (next [this]\n    (cond\n      (some? next-entry)\n      (let [ret next-entry]\n        (set! next-entry nil)\n        ret)\n      (some? next-iter)\n      (let [ret (.next next-iter)]\n        (when-not ^boolean (.hasNext next-iter)\n          (set! next-iter nil))\n        ret)\n      ^boolean (.advance this)\n      (.next this)\n      :else (throw (js\/Error. \"No such element\"))))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype BitmapIndexedNode [edit ^:mutable bitmap ^:mutable arr]\n  Object\n  (inode-assoc [inode shift hash key val added-leaf?]\n    (let [bit (bitpos hash shift)\n          idx (bitmap-indexed-node-index bitmap bit)]\n      (if (zero? (bit-and bitmap bit))\n        (let [n (bit-count bitmap)]\n          (if (>= n 16)\n            (let [nodes (make-array 32)\n                  jdx   (mask hash shift)]\n              (aset nodes jdx (.inode-assoc (.-EMPTY BitmapIndexedNode) (+ shift 5) hash key val added-leaf?))\n              (loop [i 0 j 0]\n                (if (< i 32)\n                  (if (zero? (bit-and (bit-shift-right-zero-fill bitmap i) 1))\n                    (recur (inc i) j)\n                    (do (aset nodes i\n                              (if-not (nil? (aget arr j))\n                                (.inode-assoc (.-EMPTY BitmapIndexedNode)\n                                              (+ shift 5) (cljs.core\/hash (aget arr j)) (aget arr j) (aget arr (inc j)) added-leaf?)\n                                (aget arr (inc j))))\n                        (recur (inc i) (+ j 2))))))\n              (ArrayNode. nil (inc n) nodes))\n            (let [new-arr (make-array (* 2 (inc n)))]\n              (array-copy arr 0 new-arr 0 (* 2 idx))\n              (aset new-arr (* 2 idx) key)\n              (aset new-arr (inc (* 2 idx)) val)\n              (array-copy arr (* 2 idx) new-arr (* 2 (inc idx)) (* 2 (- n idx)))\n              (set! (.-val added-leaf?) true)\n              (BitmapIndexedNode. nil (bit-or bitmap bit) new-arr))))\n        (let [key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil)\n                (let [n (.inode-assoc val-or-node (+ shift 5) hash key val added-leaf?)]\n                  (if (identical? n val-or-node)\n                    inode\n                    (BitmapIndexedNode. nil bitmap (clone-and-set arr (inc (* 2 idx)) n))))\n\n                (key-test key key-or-nil)\n                (if (identical? val val-or-node)\n                  inode\n                  (BitmapIndexedNode. nil bitmap (clone-and-set arr (inc (* 2 idx)) val)))\n\n                :else\n                (do (set! (.-val added-leaf?) true)\n                    (BitmapIndexedNode. nil bitmap\n                                        (clone-and-set arr (* 2 idx) nil (inc (* 2 idx))\n                                                       (create-node (+ shift 5) key-or-nil val-or-node hash key val)))))))))\n\n  (inode-without [inode shift hash key]\n    (let [bit (bitpos hash shift)]\n      (if (zero? (bit-and bitmap bit))\n        inode\n        (let [idx         (bitmap-indexed-node-index bitmap bit)\n              key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil)\n                (let [n (.inode-without val-or-node (+ shift 5) hash key)]\n                  (cond (identical? n val-or-node) inode\n                        (not (nil? n)) (BitmapIndexedNode. nil bitmap (clone-and-set arr (inc (* 2 idx)) n))\n                        (== bitmap bit) nil\n                        :else (BitmapIndexedNode. nil (bit-xor bitmap bit) (remove-pair arr idx))))\n                (key-test key key-or-nil)\n                (BitmapIndexedNode. nil (bit-xor bitmap bit) (remove-pair arr idx))\n                :else inode)))))\n\n  (inode-lookup [inode shift hash key not-found]\n    (let [bit (bitpos hash shift)]\n      (if (zero? (bit-and bitmap bit))\n        not-found\n        (let [idx         (bitmap-indexed-node-index bitmap bit)\n              key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil)  (.inode-lookup val-or-node (+ shift 5) hash key not-found)\n                (key-test key key-or-nil) val-or-node\n                :else not-found)))))\n\n  (inode-find [inode shift hash key not-found]\n    (let [bit (bitpos hash shift)]\n      (if (zero? (bit-and bitmap bit))\n        not-found\n        (let [idx         (bitmap-indexed-node-index bitmap bit)\n              key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil) (.inode-find val-or-node (+ shift 5) hash key not-found)\n                (key-test key key-or-nil)          (MapEntry. key-or-nil val-or-node nil)\n                :else not-found)))))\n\n  (inode-seq [inode]\n    (create-inode-seq arr))\n\n  (ensure-editable [inode e]\n    (if (identical? e edit)\n      inode\n      (let [n       (bit-count bitmap)\n            new-arr (make-array (if (neg? n) 4 (* 2 (inc n))))]\n        (array-copy arr 0 new-arr 0 (* 2 n))\n        (BitmapIndexedNode. e bitmap new-arr))))\n\n  (edit-and-remove-pair [inode e bit i]\n    (if (== bitmap bit)\n      nil\n      (let [editable (.ensure-editable inode e)\n            earr     (.-arr editable)\n            len      (alength earr)]\n        (set! (.-bitmap editable) (bit-xor bit (.-bitmap editable)))\n        (array-copy earr (* 2 (inc i))\n                    earr (* 2 i)\n                    (- len (* 2 (inc i))))\n        (aset earr (- len 2) nil)\n        (aset earr (dec len) nil)\n        editable)))\n\n  (inode-assoc! [inode edit shift hash key val added-leaf?]\n    (let [bit (bitpos hash shift)\n          idx (bitmap-indexed-node-index bitmap bit)]\n      (if (zero? (bit-and bitmap bit))\n        (let [n (bit-count bitmap)]\n          (cond\n            (< (* 2 n) (alength arr))\n            (let [editable (.ensure-editable inode edit)\n                  earr     (.-arr editable)]\n              (set! (.-val added-leaf?) true)\n              (array-copy-downward earr (* 2 idx)\n                                   earr (* 2 (inc idx))\n                                   (* 2 (- n idx)))\n              (aset earr (* 2 idx) key)\n              (aset earr (inc (* 2 idx)) val)\n              (set! (.-bitmap editable) (bit-or (.-bitmap editable) bit))\n              editable)\n\n            (>= n 16)\n            (let [nodes (make-array 32)\n                  jdx   (mask hash shift)]\n              (aset nodes jdx (.inode-assoc! (.-EMPTY BitmapIndexedNode) edit (+ shift 5) hash key val added-leaf?))\n              (loop [i 0 j 0]\n                (if (< i 32)\n                  (if (zero? (bit-and (bit-shift-right-zero-fill bitmap i) 1))\n                    (recur (inc i) j)\n                    (do (aset nodes i\n                              (if-not (nil? (aget arr j))\n                                (.inode-assoc! (.-EMPTY BitmapIndexedNode)\n                                               edit (+ shift 5) (cljs.core\/hash (aget arr j)) (aget arr j) (aget arr (inc j)) added-leaf?)\n                                (aget arr (inc j))))\n                        (recur (inc i) (+ j 2))))))\n              (ArrayNode. edit (inc n) nodes))\n\n            :else\n            (let [new-arr (make-array (* 2 (+ n 4)))]\n              (array-copy arr 0 new-arr 0 (* 2 idx))\n              (aset new-arr (* 2 idx) key)\n              (aset new-arr (inc (* 2 idx)) val)\n              (array-copy arr (* 2 idx) new-arr (* 2 (inc idx)) (* 2 (- n idx)))\n              (set! (.-val added-leaf?) true)\n              (let [editable (.ensure-editable inode edit)]\n                (set! (.-arr editable) new-arr)\n                (set! (.-bitmap editable) (bit-or (.-bitmap editable) bit))\n                editable))))\n        (let [key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil)\n                (let [n (.inode-assoc! val-or-node edit (+ shift 5) hash key val added-leaf?)]\n                  (if (identical? n val-or-node)\n                    inode\n                    (edit-and-set inode edit (inc (* 2 idx)) n)))\n\n                (key-test key key-or-nil)\n                (if (identical? val val-or-node)\n                  inode\n                  (edit-and-set inode edit (inc (* 2 idx)) val))\n\n                :else\n                (do (set! (.-val added-leaf?) true)\n                    (edit-and-set inode edit (* 2 idx) nil (inc (* 2 idx))\n                                  (create-node edit (+ shift 5) key-or-nil val-or-node hash key val))))))))\n\n  (inode-without! [inode edit shift hash key removed-leaf?]\n    (let [bit (bitpos hash shift)]\n      (if (zero? (bit-and bitmap bit))\n        inode\n        (let [idx         (bitmap-indexed-node-index bitmap bit)\n              key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil)\n                (let [n (.inode-without! val-or-node edit (+ shift 5) hash key removed-leaf?)]\n                  (cond (identical? n val-or-node) inode\n                        (not (nil? n)) (edit-and-set inode edit (inc (* 2 idx)) n)\n                        (== bitmap bit) nil\n                        :else (.edit-and-remove-pair inode edit bit idx)))\n                (key-test key key-or-nil)\n                (do (set! (.-val removed-leaf?) true)\n                    (.edit-and-remove-pair inode edit bit idx))\n                :else inode)))))\n\n  (kv-reduce [inode f init]\n    (inode-kv-reduce arr f init))\n\n  IIterable\n  (-iterator [coll]\n    (NodeIterator. arr 0 nil nil)))\n\n(set! (.-EMPTY BitmapIndexedNode) (BitmapIndexedNode. nil 0 (make-array 0)))\n\n(defn- pack-array-node [array-node edit idx]\n  (let [arr     (.-arr array-node)\n        len     (alength arr)\n        new-arr (make-array (* 2 (dec (.-cnt array-node))))]\n    (loop [i 0 j 1 bitmap 0]\n      (if (< i len)\n        (if (and (not (== i idx))\n                 (not (nil? (aget arr i))))\n          (do (aset new-arr j (aget arr i))\n              (recur (inc i) (+ j 2) (bit-or bitmap (bit-shift-left 1 i))))\n          (recur (inc i) j bitmap))\n        (BitmapIndexedNode. edit bitmap new-arr)))))\n\n(deftype ArrayNodeIterator [arr ^:mutable i ^:mutable next-iter]\n  Object\n  (hasNext [this]\n    (let [len (alength arr)]\n      (loop []\n        (if-not (and  (some? next-iter) ^boolean (.hasNext next-iter))\n          (if (< i len)\n            (let [node (aget arr i)]\n              (set! i (inc i))\n              (when (some? node)\n                (set! next-iter (-iterator node)))\n              (recur))\n            false)\n          true))))\n  (next [this]\n    (if ^boolean (.hasNext this)\n      (.next next-iter)\n      (throw (js\/Error. \"No such element\"))))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype ArrayNode [edit ^:mutable cnt ^:mutable arr]\n  Object\n  (inode-assoc [inode shift hash key val added-leaf?]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if (nil? node)\n        (ArrayNode. nil (inc cnt) (clone-and-set arr idx (.inode-assoc (.-EMPTY BitmapIndexedNode) (+ shift 5) hash key val added-leaf?)))\n        (let [n (.inode-assoc node (+ shift 5) hash key val added-leaf?)]\n          (if (identical? n node)\n            inode\n            (ArrayNode. nil cnt (clone-and-set arr idx n)))))))\n\n  (inode-without [inode shift hash key]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if-not (nil? node)\n        (let [n (.inode-without node (+ shift 5) hash key)]\n          (cond\n            (identical? n node)\n            inode\n\n            (nil? n)\n            (if (<= cnt 8)\n              (pack-array-node inode nil idx)\n              (ArrayNode. nil (dec cnt) (clone-and-set arr idx n)))\n\n            :else\n            (ArrayNode. nil cnt (clone-and-set arr idx n))))\n        inode)))\n\n  (inode-lookup [inode shift hash key not-found]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if-not (nil? node)\n        (.inode-lookup node (+ shift 5) hash key not-found)\n        not-found)))\n\n  (inode-find [inode shift hash key not-found]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if-not (nil? node)\n        (.inode-find node (+ shift 5) hash key not-found)\n        not-found)))\n\n  (inode-seq [inode]\n    (create-array-node-seq arr))\n\n  (ensure-editable [inode e]\n    (if (identical? e edit)\n      inode\n      (ArrayNode. e cnt (aclone arr))))\n\n  (inode-assoc! [inode edit shift hash key val added-leaf?]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if (nil? node)\n        (let [editable (edit-and-set inode edit idx (.inode-assoc! (.-EMPTY BitmapIndexedNode) edit (+ shift 5) hash key val added-leaf?))]\n          (set! (.-cnt editable) (inc (.-cnt editable)))\n          editable)\n        (let [n (.inode-assoc! node edit (+ shift 5) hash key val added-leaf?)]\n          (if (identical? n node)\n            inode\n            (edit-and-set inode edit idx n))))))\n\n  (inode-without! [inode edit shift hash key removed-leaf?]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if (nil? node)\n        inode\n        (let [n (.inode-without! node edit (+ shift 5) hash key removed-leaf?)]\n          (cond\n            (identical? n node)\n            inode\n\n            (nil? n)\n            (if (<= cnt 8)\n              (pack-array-node inode edit idx)\n              (let [editable (edit-and-set inode edit idx n)]\n                (set! (.-cnt editable) (dec (.-cnt editable)))\n                editable))\n\n            :else\n            (edit-and-set inode edit idx n))))))\n\n  (kv-reduce [inode f init]\n    (let [len (alength arr)]           ; actually 32\n      (loop [i 0 init init]\n        (if (< i len)\n          (let [node (aget arr i)]\n            (if-not (nil? node)\n              (let [init (.kv-reduce node f init)]\n                (if (reduced? init)\n                  init\n                  (recur (inc i) init)))\n              (recur (inc i) init)))\n          init))))\n\n IIterable\n (-iterator [coll]\n    (ArrayNodeIterator. arr 0 nil)))\n\n(defn- hash-collision-node-find-index [arr cnt key]\n  (let [lim (* 2 cnt)]\n    (loop [i 0]\n      (if (< i lim)\n        (if (key-test key (aget arr i))\n          i\n          (recur (+ i 2)))\n        -1))))\n\n(deftype HashCollisionNode [edit\n                            ^:mutable collision-hash\n                            ^:mutable cnt\n                            ^:mutable arr]\n  Object\n  (inode-assoc [inode shift hash key val added-leaf?]\n    (if (== hash collision-hash)\n      (let [idx (hash-collision-node-find-index arr cnt key)]\n        (if (== idx -1)\n          (let [len     (* 2 cnt)\n                new-arr (make-array (+ len 2))]\n            (array-copy arr 0 new-arr 0 len)\n            (aset new-arr len key)\n            (aset new-arr (inc len) val)\n            (set! (.-val added-leaf?) true)\n            (HashCollisionNode. nil collision-hash (inc cnt) new-arr))\n          (if (= (aget arr (inc idx)) val)\n            inode\n            (HashCollisionNode. nil collision-hash cnt (clone-and-set arr (inc idx) val)))))\n      (.inode-assoc (BitmapIndexedNode. nil (bitpos collision-hash shift) (array nil inode))\n                    shift hash key val added-leaf?)))\n\n  (inode-without [inode shift hash key]\n    (let [idx (hash-collision-node-find-index arr cnt key)]\n      (cond (== idx -1) inode\n            (== cnt 1)  nil\n            :else (HashCollisionNode. nil collision-hash (dec cnt) (remove-pair arr (quot idx 2))))))\n\n  (inode-lookup [inode shift hash key not-found]\n    (let [idx (hash-collision-node-find-index arr cnt key)]\n      (cond (< idx 0)              not-found\n            (key-test key (aget arr idx)) (aget arr (inc idx))\n            :else                  not-found)))\n\n  (inode-find [inode shift hash key not-found]\n    (let [idx (hash-collision-node-find-index arr cnt key)]\n      (cond (< idx 0)              not-found\n            (key-test key (aget arr idx)) (MapEntry. (aget arr idx) (aget arr (inc idx)) nil)\n            :else                  not-found)))\n\n  (inode-seq [inode]\n    (create-inode-seq arr))\n\n  (ensure-editable [inode e]\n    (if (identical? e edit)\n      inode\n      (let [new-arr (make-array (* 2 (inc cnt)))]\n        (array-copy arr 0 new-arr 0 (* 2 cnt))\n        (HashCollisionNode. e collision-hash cnt new-arr))))\n\n  (ensure-editable-array [inode e count array]\n    (if (identical? e edit)\n      (do (set! arr array)\n          (set! cnt count)\n          inode)\n      (HashCollisionNode. edit collision-hash count array)))\n\n  (inode-assoc! [inode edit shift hash key val added-leaf?]\n    (if (== hash collision-hash)\n      (let [idx (hash-collision-node-find-index arr cnt key)]\n        (if (== idx -1)\n          (if (> (alength arr) (* 2 cnt))\n            (let [editable (edit-and-set inode edit (* 2 cnt) key (inc (* 2 cnt)) val)]\n              (set! (.-val added-leaf?) true)\n              (set! (.-cnt editable) (inc (.-cnt editable)))\n              editable)\n            (let [len     (alength arr)\n                  new-arr (make-array (+ len 2))]\n              (array-copy arr 0 new-arr 0 len)\n              (aset new-arr len key)\n              (aset new-arr (inc len) val)\n              (set! (.-val added-leaf?) true)\n              (.ensure-editable-array inode edit (inc cnt) new-arr)))\n          (if (identical? (aget arr (inc idx)) val)\n            inode\n            (edit-and-set inode edit (inc idx) val))))\n      (.inode-assoc! (BitmapIndexedNode. edit (bitpos collision-hash shift) (array nil inode nil nil))\n                     edit shift hash key val added-leaf?)))\n\n  (inode-without! [inode edit shift hash key removed-leaf?]\n    (let [idx (hash-collision-node-find-index arr cnt key)]\n      (if (== idx -1)\n        inode\n        (do (set! (.-val removed-leaf?) true)\n            (if (== cnt 1)\n              nil\n              (let [editable (.ensure-editable inode edit)\n                    earr     (.-arr editable)]\n                (aset earr idx (aget earr (- (* 2 cnt) 2)))\n                (aset earr (inc idx) (aget earr (dec (* 2 cnt))))\n                (aset earr (dec (* 2 cnt)) nil)\n                (aset earr (- (* 2 cnt) 2) nil)\n                (set! (.-cnt editable) (dec (.-cnt editable)))\n                editable))))))\n\n  (kv-reduce [inode f init]\n    (inode-kv-reduce arr f init))\n\n  IIterable\n  (-iterator [coll]\n    (NodeIterator. arr 0 nil nil)))\n\n(defn- create-node\n  ([shift key1 val1 key2hash key2 val2]\n     (let [key1hash (hash key1)]\n       (if (== key1hash key2hash)\n         (HashCollisionNode. nil key1hash 2 (array key1 val1 key2 val2))\n         (let [added-leaf? (Box. false)]\n           (-> (.-EMPTY BitmapIndexedNode)\n               (.inode-assoc shift key1hash key1 val1 added-leaf?)\n               (.inode-assoc shift key2hash key2 val2 added-leaf?))))))\n  ([edit shift key1 val1 key2hash key2 val2]\n     (let [key1hash (hash key1)]\n       (if (== key1hash key2hash)\n         (HashCollisionNode. nil key1hash 2 (array key1 val1 key2 val2))\n         (let [added-leaf? (Box. false)]\n           (-> (.-EMPTY BitmapIndexedNode)\n               (.inode-assoc! edit shift key1hash key1 val1 added-leaf?)\n               (.inode-assoc! edit shift key2hash key2 val2 added-leaf?)))))))\n\n(deftype NodeSeq [meta nodes i s ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMeta\n  (-meta [coll] meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (NodeSeq. new-meta nodes i s __hash)))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  ISequential\n  ISeq\n  (-first [coll]\n    (if (nil? s)\n      (MapEntry. (aget nodes i) (aget nodes (inc i)) nil)\n      (first s)))\n\n  (-rest [coll]\n    (let [ret (if (nil? s)\n                (create-inode-seq nodes (+ i 2) nil)\n                (create-inode-seq nodes i (next s)))]\n      (if-not (nil? ret) ret ())))\n\n  INext\n  (-next [coll]\n    (if (nil? s)\n      (create-inode-seq nodes (+ i 2) nil)\n      (create-inode-seq nodes i (next s))))\n\n  ISeqable\n  (-seq [this] this)\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable NodeSeq)\n\n(defn- create-inode-seq\n  ([nodes]\n     (create-inode-seq nodes 0 nil))\n  ([nodes i s]\n     (if (nil? s)\n       (let [len (alength nodes)]\n         (loop [j i]\n           (if (< j len)\n             (if-not (nil? (aget nodes j))\n               (NodeSeq. nil nodes j nil nil)\n               (if-let [node (aget nodes (inc j))]\n                 (if-let [node-seq (.inode-seq node)]\n                   (NodeSeq. nil nodes (+ j 2) node-seq nil)\n                   (recur (+ j 2)))\n                 (recur (+ j 2)))))))\n       (NodeSeq. nil nodes i s nil))))\n\n(deftype ArrayNodeSeq [meta nodes i s ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMeta\n  (-meta [coll] meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (ArrayNodeSeq. new-meta nodes i s __hash)))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  ISequential\n  ISeq\n  (-first [coll] (first s))\n  (-rest  [coll]\n    (let [ret (create-array-node-seq nodes i (next s))]\n      (if-not (nil? ret) ret ())))\n\n  INext\n  (-next [coll]\n    (create-array-node-seq nodes i (next s)))\n\n  ISeqable\n  (-seq [this] this)\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable ArrayNodeSeq)\n\n(defn- create-array-node-seq\n  ([nodes] (create-array-node-seq nodes 0 nil))\n  ([nodes i s]\n     (if (nil? s)\n       (let [len (alength nodes)]\n         (loop [j i]\n           (if (< j len)\n             (if-let [nj (aget nodes j)]\n               (if-let [ns (.inode-seq nj)]\n                 (ArrayNodeSeq. nil nodes (inc j) ns nil)\n                 (recur (inc j)))\n               (recur (inc j))))))\n       (ArrayNodeSeq. nil nodes i s nil))))\n\n(deftype HashMapIter [nil-val root-iter ^:mutable seen]\n  Object\n  (hasNext [_]\n    (or (not ^boolean seen) ^boolean (.hasNext root-iter)))\n  (next [_]\n    (if-not ^boolean seen\n      (do\n        (set! seen true)\n        (MapEntry. nil nil-val nil))\n      (.next root-iter)))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype PersistentHashMap [meta cnt root ^boolean has-nil? nil-val ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n\n  ;; EXPERIMENTAL: subject to change\n  (keys [coll]\n    (es6-iterator (keys coll)))\n  (entries [coll]\n    (es6-entries-iterator (seq coll)))\n  (values [coll]\n    (es6-iterator (vals coll)))\n  (has [coll k]\n    (contains? coll k))\n  (get [coll k not-found]\n    (-lookup coll k not-found))\n  (forEach [coll f]\n    (doseq [[k v] coll]\n      (f v k)))\n\n  ICloneable\n  (-clone [_] (PersistentHashMap. meta cnt root has-nil? nil-val __hash))\n\n  IIterable\n  (-iterator [coll]\n    (let [root-iter (if ^boolean root (-iterator root) (nil-iter))]\n      (if has-nil?\n        (HashMapIter. nil-val root-iter false)\n        root-iter)))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentHashMap. new-meta cnt root has-nil? nil-val __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll entry]\n    (if (vector? entry)\n      (-assoc coll (-nth entry 0) (-nth entry 1))\n      (loop [ret coll es (seq entry)]\n        (if (nil? es)\n          ret\n          (let [e (first es)]\n            (if (vector? e)\n              (recur (-assoc ret (-nth e 0) (-nth e 1))\n                     (next es))\n              (throw (js\/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentHashMap) meta))\n\n  IEquiv\n  (-equiv [coll other] (equiv-map coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (when (pos? cnt)\n      (let [s (if-not (nil? root) (.inode-seq root))]\n        (if has-nil?\n          (cons (MapEntry. nil nil-val nil) s)\n          s))))\n\n  ICounted\n  (-count [coll] cnt)\n\n  ILookup\n  (-lookup [coll k]\n    (-lookup coll k nil))\n\n  (-lookup [coll k not-found]\n    (cond (nil? k)    (if has-nil?\n                        nil-val\n                        not-found)\n          (nil? root) not-found\n          :else       (.inode-lookup root 0 (hash k) k not-found)))\n\n  IAssociative\n  (-assoc [coll k v]\n    (if (nil? k)\n      (if (and has-nil? (identical? v nil-val))\n        coll\n        (PersistentHashMap. meta (if has-nil? cnt (inc cnt)) root true v nil))\n      (let [added-leaf? (Box. false)\n            new-root    (-> (if (nil? root)\n                              (.-EMPTY BitmapIndexedNode)\n                              root)\n                            (.inode-assoc 0 (hash k) k v added-leaf?))]\n        (if (identical? new-root root)\n          coll\n          (PersistentHashMap. meta (if ^boolean (.-val added-leaf?) (inc cnt) cnt) new-root has-nil? nil-val nil)))))\n\n  (-contains-key? [coll k]\n    (cond (nil? k)    has-nil?\n          (nil? root) false\n          :else       (not (identical? (.inode-lookup root 0 (hash k) k lookup-sentinel)\n                                       lookup-sentinel))))\n\n  IFind\n  (-find [coll k]\n    (cond\n      (nil? k) (when has-nil? (MapEntry. nil nil-val nil))\n      (nil? root) nil\n      :else (.inode-find root 0 (hash k) k nil)))\n\n  IMap\n  (-dissoc [coll k]\n    (cond (nil? k)    (if has-nil?\n                        (PersistentHashMap. meta (dec cnt) root false nil nil)\n                        coll)\n          (nil? root) coll\n          :else\n          (let [new-root (.inode-without root 0 (hash k) k)]\n            (if (identical? new-root root)\n              coll\n              (PersistentHashMap. meta (dec cnt) new-root has-nil? nil-val nil)))))\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (let [init (if has-nil? (f init nil nil-val) init)]\n      (cond\n        (reduced? init)          @init\n        (not (nil? root)) (unreduced (.kv-reduce root f init))\n        :else                    init)))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found))\n\n  IEditableCollection\n  (-as-transient [coll]\n    (TransientHashMap. (js-obj) root cnt has-nil? nil-val)))\n\n(set! (.-EMPTY PersistentHashMap) (PersistentHashMap. nil 0 nil false nil empty-unordered-hash))\n\n(set! (.-fromArray PersistentHashMap)\n  (fn [arr ^boolean no-clone]\n    (let [arr (if no-clone arr (aclone arr))\n          len (alength arr)]\n      (loop [i 0 ret (transient (.-EMPTY PersistentHashMap))]\n        (if (< i len)\n          (recur (+ i 2)\n            (-assoc! ret (aget arr i) (aget arr (inc i))))\n          (-persistent! ret))))))\n\n(set! (.-fromArrays PersistentHashMap)\n  (fn [ks vs]\n    (let [len (alength ks)]\n      (loop [i 0 ^not-native out (transient (.-EMPTY PersistentHashMap))]\n        (if (< i len)\n          (if (<= (alength vs) i)\n            (throw (js\/Error. (str \"No value supplied for key: \" (aget ks i))))\n            (recur (inc i) (-assoc! out (aget ks i) (aget vs i))))\n          (persistent! out))))))\n\n(set! (.-createWithCheck PersistentHashMap)\n  (fn [arr]\n    (let [len (alength arr)\n          ret (transient (.-EMPTY PersistentHashMap))]\n      (loop [i 0]\n        (when (< i len)\n          (-assoc! ret (aget arr i) (aget arr (inc i)))\n          (if (not= (-count ret) (inc (\/ i 2)))\n            (throw (js\/Error. (str \"Duplicate key: \" (aget arr i))))\n            (recur (+ i 2)))))\n      (-persistent! ret))))\n\n(es6-iterable PersistentHashMap)\n\n(deftype TransientHashMap [^:mutable ^boolean edit\n                           ^:mutable root\n                           ^:mutable count\n                           ^:mutable ^boolean has-nil?\n                           ^:mutable nil-val]\n  Object\n  (conj! [tcoll o]\n    (if edit\n      (cond\n        (map-entry? o)\n        (.assoc! tcoll (key o) (val o))\n\n        (vector? o)\n        (.assoc! tcoll (o 0) (o 1))\n\n        :else\n        (loop [es (seq o) tcoll tcoll]\n          (if-let [e (first es)]\n            (recur (next es)\n                   (.assoc! tcoll (key e) (val e)))\n            tcoll)))\n      (throw (js\/Error. \"conj! after persistent\"))))\n\n  (assoc! [tcoll k v]\n    (if edit\n      (if (nil? k)\n        (do (if (identical? nil-val v)\n              nil\n              (set! nil-val v))\n            (if has-nil?\n              nil\n              (do (set! count (inc count))\n                  (set! has-nil? true)))\n            tcoll)\n        (let [added-leaf? (Box. false)\n              node        (-> (if (nil? root)\n                                (.-EMPTY BitmapIndexedNode)\n                                root)\n                              (.inode-assoc! edit 0 (hash k) k v added-leaf?))]\n          (if (identical? node root)\n            nil\n            (set! root node))\n          (if ^boolean (.-val added-leaf?)\n            (set! count (inc count)))\n          tcoll))\n      (throw (js\/Error. \"assoc! after persistent!\"))))\n\n  (without! [tcoll k]\n    (if edit\n      (if (nil? k)\n        (if has-nil?\n          (do (set! has-nil? false)\n              (set! nil-val nil)\n              (set! count (dec count))\n              tcoll)\n          tcoll)\n        (if (nil? root)\n          tcoll\n          (let [removed-leaf? (Box. false)\n                node (.inode-without! root edit 0 (hash k) k removed-leaf?)]\n            (if (identical? node root)\n              nil\n              (set! root node))\n            (if ^boolean (.-val removed-leaf?)\n              (set! count (dec count)))\n            tcoll)))\n      (throw (js\/Error. \"dissoc! after persistent!\"))))\n\n  (persistent! [tcoll]\n    (if edit\n      (do (set! edit nil)\n          (PersistentHashMap. nil count root has-nil? nil-val nil))\n      (throw (js\/Error. \"persistent! called twice\"))))\n\n  ICounted\n  (-count [coll]\n    (if edit\n      count\n      (throw (js\/Error. \"count after persistent!\"))))\n\n  ILookup\n  (-lookup [tcoll k]\n    (if (nil? k)\n      (if has-nil?\n        nil-val)\n      (if (nil? root)\n        nil\n        (.inode-lookup root 0 (hash k) k))))\n\n  (-lookup [tcoll k not-found]\n    (if (nil? k)\n      (if has-nil?\n        nil-val\n        not-found)\n      (if (nil? root)\n        not-found\n        (.inode-lookup root 0 (hash k) k not-found))))\n\n  ITransientCollection\n  (-conj! [tcoll val] (.conj! tcoll val))\n\n  (-persistent! [tcoll] (.persistent! tcoll))\n\n  ITransientAssociative\n  (-assoc! [tcoll key val] (.assoc! tcoll key val))\n\n  ITransientMap\n  (-dissoc! [tcoll key] (.without! tcoll key))\n\n  IFn\n  (-invoke [tcoll key]\n    (-lookup tcoll key))\n  (-invoke [tcoll key not-found]\n    (-lookup tcoll key not-found)))\n\n;;; PersistentTreeMap\n\n(defn- tree-map-seq-push [node stack ^boolean ascending?]\n  (loop [t node stack stack]\n    (if-not (nil? t)\n      (recur (if ascending? (.-left t) (.-right t))\n             (conj stack t))\n      stack)))\n\n(deftype PersistentTreeMapSeq [meta stack ^boolean ascending? cnt ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ISeqable\n  (-seq [this] this)\n\n  ISequential\n  ISeq\n  (-first [this] (peek stack))\n  (-rest [this]\n    (let [t (first stack)\n          next-stack (tree-map-seq-push (if ascending? (.-right t) (.-left t))\n                                        (next stack)\n                                        ascending?)]\n      (if-not (nil? next-stack)\n        (PersistentTreeMapSeq. nil next-stack ascending? (dec cnt) nil)\n        ())))\n  INext\n  (-next [this]\n    (let [t (first stack)\n          next-stack (tree-map-seq-push (if ascending? (.-right t) (.-left t))\n                                        (next stack)\n                                        ascending?)]\n      (when-not (nil? next-stack)\n        (PersistentTreeMapSeq. nil next-stack ascending? (dec cnt) nil))))\n\n  ICounted\n  (-count [coll]\n    (if (neg? cnt)\n      (inc (count (next coll)))\n      cnt))\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IMeta\n  (-meta [coll] meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentTreeMapSeq. new-meta stack ascending? cnt __hash)))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable PersistentTreeMapSeq)\n\n(defn- create-tree-map-seq [tree ascending? cnt]\n  (PersistentTreeMapSeq. nil (tree-map-seq-push tree nil ascending?) ascending? cnt nil))\n\n(declare RedNode BlackNode)\n\n(defn- balance-left [key val ins right]\n  (if (instance? RedNode ins)\n    (cond\n      (instance? RedNode (.-left ins))\n      (RedNode. (.-key ins) (.-val ins)\n              (.blacken (.-left ins))\n              (BlackNode. key val (.-right ins) right nil)\n              nil)\n\n      (instance? RedNode (.-right ins))\n      (RedNode. (.. ins -right -key) (.. ins -right -val)\n                (BlackNode. (.-key ins) (.-val ins)\n                            (.-left ins)\n                            (.. ins -right -left)\n                            nil)\n                (BlackNode. key val\n                            (.. ins -right -right)\n                            right\n                            nil)\n                nil)\n\n      :else\n      (BlackNode. key val ins right nil))\n    (BlackNode. key val ins right nil)))\n\n(defn- balance-right [key val left ins]\n  (if (instance? RedNode ins)\n    (cond\n      (instance? RedNode (.-right ins))\n      (RedNode. (.-key ins) (.-val ins)\n                (BlackNode. key val left (.-left ins) nil)\n                (.blacken (.-right ins))\n                nil)\n\n      (instance? RedNode (.-left ins))\n      (RedNode. (.. ins -left -key) (.. ins -left -val)\n                (BlackNode. key val left (.. ins -left -left) nil)\n                (BlackNode. (.-key ins) (.-val ins)\n                            (.. ins -left -right)\n                            (.-right ins)\n                            nil)\n                nil)\n\n      :else\n      (BlackNode. key val left ins nil))\n    (BlackNode. key val left ins nil)))\n\n(defn- balance-left-del [key val del right]\n  (cond\n    (instance? RedNode del)\n    (RedNode. key val (.blacken del) right nil)\n\n    (instance? BlackNode right)\n    (balance-right key val del (.redden right))\n\n    (and (instance? RedNode right) (instance? BlackNode (.-left right)))\n    (RedNode. (.. right -left -key) (.. right -left -val)\n              (BlackNode. key val del (.. right -left -left) nil)\n              (balance-right (.-key right) (.-val right)\n                             (.. right -left -right)\n                             (.redden (.-right right)))\n              nil)\n\n    :else\n    (throw (js\/Error. \"red-black tree invariant violation\"))))\n\n(defn- balance-right-del [key val left del]\n  (cond\n    (instance? RedNode del)\n    (RedNode. key val left (.blacken del) nil)\n\n    (instance? BlackNode left)\n    (balance-left key val (.redden left) del)\n\n    (and (instance? RedNode left) (instance? BlackNode (.-right left)))\n    (RedNode. (.. left -right -key) (.. left -right -val)\n              (balance-left (.-key left) (.-val left)\n                            (.redden (.-left left))\n                            (.. left -right -left))\n              (BlackNode. key val (.. left -right -right) del nil)\n              nil)\n\n    :else\n    (throw (js\/Error. \"red-black tree invariant violation\"))))\n\n(defn- tree-map-kv-reduce [node f init]\n  (let [init (if-not (nil? (.-left node))\n               (tree-map-kv-reduce (.-left node) f init)\n               init)]\n    (if (reduced? init)\n      init\n      (let [init (f init (.-key node) (.-val node))]\n        (if (reduced? init)\n          init\n          (if-not (nil? (.-right node))\n            (tree-map-kv-reduce (.-right node) f init)\n            init))))))\n\n(deftype BlackNode [key val left right ^:mutable __hash]\n  Object\n  (add-left [node ins]\n    (.balance-left ins node))\n\n  (add-right [node ins]\n    (.balance-right ins node))\n\n  (remove-left [node del]\n    (balance-left-del key val del right))\n\n  (remove-right [node del]\n    (balance-right-del key val left del))\n\n  (blacken [node] node)\n\n  (redden [node] (RedNode. key val left right nil))\n\n  (balance-left [node parent]\n    (BlackNode. (.-key parent) (.-val parent) node (.-right parent) nil))\n\n  (balance-right [node parent]\n    (BlackNode. (.-key parent) (.-val parent) (.-left parent) node nil))\n\n  (replace [node key val left right]\n    (BlackNode. key val left right nil))\n\n  (kv-reduce [node f init]\n    (tree-map-kv-reduce node f init))\n\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMapEntry\n  (-key [node] key)\n  (-val [node] val)\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IMeta\n  (-meta [node] nil)\n\n  IWithMeta\n  (-with-meta [node meta]\n    (-with-meta [key val] meta))\n\n  IStack\n  (-peek [node] val)\n\n  (-pop [node] [key])\n\n  ICollection\n  (-conj [node o] [key val o])\n\n  IEmptyableCollection\n  (-empty [node] nil)\n\n  ISequential\n  ISeqable\n  (-seq [node] (IndexedSeq. #js [key val] 0 nil))\n\n  IReversible\n  (-rseq [node] (IndexedSeq. #js [val key] 0 nil))\n\n  ICounted\n  (-count [node] 2)\n\n  IIndexed\n  (-nth [node n]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    (throw (js\/Error. \"Index out of bounds\"))))\n\n  (-nth [node n not-found]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    not-found))\n\n  ILookup\n  (-lookup [node k] (-nth node k nil))\n  (-lookup [node k not-found] (-nth node k not-found))\n\n  IAssociative\n  (-assoc [node k v]\n    (assoc [key val] k v))\n  (-contains-key? [node k]\n    (or (== k 0) (== k 1)))\n\n  IFind\n  (-find [node k]\n    (case k\n      0 (MapEntry. 0 key nil)\n      1 (MapEntry. 1 val nil)\n      nil))\n\n  IVector\n  (-assoc-n [node n v]\n    (-assoc-n [key val] n v))\n\n  IReduce\n  (-reduce [node f]\n    (ci-reduce node f))\n\n  (-reduce [node f start]\n    (ci-reduce node f start))\n\n  IFn\n  (-invoke [node k]\n    (-nth node k))\n\n  (-invoke [node k not-found]\n    (-nth node k not-found)))\n\n(es6-iterable BlackNode)\n\n(deftype RedNode [key val left right ^:mutable __hash]\n  Object\n  (add-left [node ins]\n    (RedNode. key val ins right nil))\n\n  (add-right [node ins]\n    (RedNode. key val left ins nil))\n\n  (remove-left [node del]\n    (RedNode. key val del right nil))\n\n  (remove-right [node del]\n    (RedNode. key val left del nil))\n\n  (blacken [node]\n    (BlackNode. key val left right nil))\n\n  (redden [node]\n    (throw (js\/Error. \"red-black tree invariant violation\")))\n\n  (balance-left [node parent]\n    (cond\n      (instance? RedNode left)\n      (RedNode. key val\n                (.blacken left)\n                (BlackNode. (.-key parent) (.-val parent) right (.-right parent) nil)\n                nil)\n\n      (instance? RedNode right)\n      (RedNode. (.-key right) (.-val right)\n                (BlackNode. key val left (.-left right) nil)\n                (BlackNode. (.-key parent) (.-val parent)\n                            (.-right right)\n                            (.-right parent)\n                            nil)\n                nil)\n\n      :else\n      (BlackNode. (.-key parent) (.-val parent) node (.-right parent) nil)))\n\n  (balance-right [node parent]\n    (cond\n      (instance? RedNode right)\n      (RedNode. key val\n                (BlackNode. (.-key parent) (.-val parent)\n                            (.-left parent)\n                            left\n                            nil)\n                (.blacken right)\n                nil)\n\n      (instance? RedNode left)\n      (RedNode. (.-key left) (.-val left)\n                (BlackNode. (.-key parent) (.-val parent)\n                            (.-left parent)\n                            (.-left left)\n                            nil)\n                (BlackNode. key val (.-right left) right nil)\n                nil)\n\n      :else\n      (BlackNode. (.-key parent) (.-val parent) (.-left parent) node nil)))\n\n  (replace [node key val left right]\n    (RedNode. key val left right nil))\n\n  (kv-reduce [node f init]\n    (tree-map-kv-reduce node f init))\n\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMapEntry\n  (-key [node] key)\n  (-val [node] val)\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IMeta\n  (-meta [node] nil)\n\n  IWithMeta\n  (-with-meta [node meta]\n    (-with-meta [key val] meta))\n\n  IStack\n  (-peek [node] val)\n\n  (-pop [node] [key])\n\n  ICollection\n  (-conj [node o] [key val o])\n\n  IEmptyableCollection\n  (-empty [node] nil)\n\n  ISequential\n  ISeqable\n  (-seq [node] (IndexedSeq. #js [key val] 0 nil))\n\n  IReversible\n  (-rseq [node] (IndexedSeq. #js [val key] 0 nil))\n\n  ICounted\n  (-count [node] 2)\n\n  IIndexed\n  (-nth [node n]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    (throw (js\/Error. \"Index out of bounds\"))))\n\n  (-nth [node n not-found]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    not-found))\n\n  ILookup\n  (-lookup [node k] (-nth node k nil))\n  (-lookup [node k not-found] (-nth node k not-found))\n\n  IAssociative\n  (-assoc [node k v]\n    (assoc [key val] k v))\n  (-contains-key? [node k]\n    (or (== k 0) (== k 1)))\n\n  IFind\n  (-find [node k]\n    (case k\n      0 (MapEntry. 0 key nil)\n      1 (MapEntry. 1 val nil)\n      nil))\n\n  IVector\n  (-assoc-n [node n v]\n    (-assoc-n [key val] n v))\n\n  IReduce\n  (-reduce [node f]\n    (ci-reduce node f))\n\n  (-reduce [node f start]\n    (ci-reduce node f start))\n\n  IFn\n  (-invoke [node k]\n    (-nth node k))\n\n  (-invoke [node k not-found]\n    (-nth node k not-found)))\n\n(es6-iterable RedNode)\n\n(defn- tree-map-add [comp tree k v found]\n  (if (nil? tree)\n    (RedNode. k v nil nil nil)\n    (let [c (comp k (.-key tree))]\n      (cond\n        (zero? c)\n        (do (aset found 0 tree)\n            nil)\n\n        (neg? c)\n        (let [ins (tree-map-add comp (.-left tree) k v found)]\n          (if-not (nil? ins)\n            (.add-left tree ins)))\n\n        :else\n        (let [ins (tree-map-add comp (.-right tree) k v found)]\n          (if-not (nil? ins)\n            (.add-right tree ins)))))))\n\n(defn- tree-map-append [left right]\n  (cond\n    (nil? left)\n    right\n\n    (nil? right)\n    left\n\n    (instance? RedNode left)\n    (if (instance? RedNode right)\n      (let [app (tree-map-append (.-right left) (.-left right))]\n        (if (instance? RedNode app)\n          (RedNode. (.-key app) (.-val app)\n                    (RedNode. (.-key left) (.-val left)\n                              (.-left left)\n                              (.-left app)\n                              nil)\n                    (RedNode. (.-key right) (.-val right)\n                              (.-right app)\n                              (.-right right)\n                              nil)\n                    nil)\n          (RedNode. (.-key left) (.-val left)\n                    (.-left left)\n                    (RedNode. (.-key right) (.-val right) app (.-right right) nil)\n                    nil)))\n      (RedNode. (.-key left) (.-val left)\n                (.-left left)\n                (tree-map-append (.-right left) right)\n                nil))\n\n    (instance? RedNode right)\n    (RedNode. (.-key right) (.-val right)\n              (tree-map-append left (.-left right))\n              (.-right right)\n              nil)\n\n    :else\n    (let [app (tree-map-append (.-right left) (.-left right))]\n      (if (instance? RedNode app)\n        (RedNode. (.-key app) (.-val app)\n                  (BlackNode. (.-key left) (.-val left)\n                              (.-left left)\n                              (.-left app)\n                              nil)\n                  (BlackNode. (.-key right) (.-val right)\n                              (.-right app)\n                              (.-right right)\n                              nil)\n                  nil)\n        (balance-left-del (.-key left) (.-val left)\n                          (.-left left)\n                          (BlackNode. (.-key right) (.-val right)\n                                      app\n                                      (.-right right)\n                                      nil))))))\n\n(defn- tree-map-remove [comp tree k found]\n  (if-not (nil? tree)\n    (let [c (comp k (.-key tree))]\n      (cond\n        (zero? c)\n        (do (aset found 0 tree)\n            (tree-map-append (.-left tree) (.-right tree)))\n\n        (neg? c)\n        (let [del (tree-map-remove comp (.-left tree) k found)]\n          (if (or (not (nil? del)) (not (nil? (aget found 0))))\n            (if (instance? BlackNode (.-left tree))\n              (balance-left-del (.-key tree) (.-val tree) del (.-right tree))\n              (RedNode. (.-key tree) (.-val tree) del (.-right tree) nil))))\n\n        :else\n        (let [del (tree-map-remove comp (.-right tree) k found)]\n          (if (or (not (nil? del)) (not (nil? (aget found 0))))\n            (if (instance? BlackNode (.-right tree))\n              (balance-right-del (.-key tree) (.-val tree) (.-left tree) del)\n              (RedNode. (.-key tree) (.-val tree) (.-left tree) del nil))))))))\n\n(defn- tree-map-replace [comp tree k v]\n  (let [tk (.-key tree)\n        c  (comp k tk)]\n    (cond (zero? c) (.replace tree tk v (.-left tree) (.-right tree))\n          (neg? c)  (.replace tree tk (.-val tree) (tree-map-replace comp (.-left tree) k v) (.-right tree))\n          :else     (.replace tree tk (.-val tree) (.-left tree) (tree-map-replace comp (.-right tree) k v)))))\n\n(declare key)\n\n(deftype PersistentTreeMap [comp tree cnt meta ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n\n  ;; EXPERIMENTAL: subject to change\n  (keys [coll]\n    (es6-iterator (keys coll)))\n  (entries [coll]\n    (es6-entries-iterator (seq coll)))\n  (values [coll]\n    (es6-iterator (vals coll)))\n  (has [coll k]\n    (contains? coll k))\n  (get [coll k not-found]\n    (-lookup coll k not-found))\n  (forEach [coll f]\n    (doseq [[k v] coll]\n      (f v k)))\n\n  (entry-at [coll k]\n    (loop [t tree]\n      (if-not (nil? t)\n        (let [c (comp k (.-key t))]\n          (cond (zero? c) t\n                (neg? c)  (recur (.-left t))\n                :else     (recur (.-right t)))))))\n\n  ICloneable\n  (-clone [_] (PersistentTreeMap. comp tree cnt meta __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentTreeMap. comp tree cnt new-meta __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll entry]\n    (if (vector? entry)\n      (-assoc coll (-nth entry 0) (-nth entry 1))\n      (loop [ret coll es (seq entry)]\n        (if (nil? es)\n          ret\n          (let [e (first es)]\n            (if (vector? e)\n              (recur (-assoc ret (-nth e 0) (-nth e 1))\n                     (next es))\n              (throw (js\/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))\n\n  IEmptyableCollection\n  (-empty [coll] (PersistentTreeMap. comp nil 0 meta 0))\n\n  IEquiv\n  (-equiv [coll other] (equiv-map coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  ICounted\n  (-count [coll] cnt)\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (if-not (nil? tree)\n      (unreduced (tree-map-kv-reduce tree f init))\n      init))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found))\n\n  ISeqable\n  (-seq [coll]\n    (if (pos? cnt)\n      (create-tree-map-seq tree true cnt)))\n\n  IReversible\n  (-rseq [coll]\n    (if (pos? cnt)\n      (create-tree-map-seq tree false cnt)))\n\n  ILookup\n  (-lookup [coll k]\n    (-lookup coll k nil))\n\n  (-lookup [coll k not-found]\n    (let [n (.entry-at coll k)]\n      (if-not (nil? n)\n        (.-val n)\n        not-found)))\n\n  IAssociative\n  (-assoc [coll k v]\n    (let [found (array nil)\n          t     (tree-map-add comp tree k v found)]\n      (if (nil? t)\n        (let [found-node (nth found 0)]\n          (if (= v (.-val found-node))\n            coll\n            (PersistentTreeMap. comp (tree-map-replace comp tree k v) cnt meta nil)))\n        (PersistentTreeMap. comp (.blacken t) (inc cnt) meta nil))))\n\n  (-contains-key? [coll k]\n    (not (nil? (.entry-at coll k))))\n\n  IFind\n  (-find [coll k]\n    (.entry-at coll k))\n\n  IMap\n  (-dissoc [coll k]\n    (let [found (array nil)\n          t     (tree-map-remove comp tree k found)]\n      (if (nil? t)\n        (if (nil? (nth found 0))\n          coll\n          (PersistentTreeMap. comp nil 0 meta nil))\n        (PersistentTreeMap. comp (.blacken t) (dec cnt) meta nil))))\n\n  ISorted\n  (-sorted-seq [coll ascending?]\n    (if (pos? cnt)\n      (create-tree-map-seq tree ascending? cnt)))\n\n  (-sorted-seq-from [coll k ascending?]\n    (if (pos? cnt)\n      (loop [stack nil t tree]\n        (if-not (nil? t)\n          (let [c (comp k (.-key t))]\n            (cond\n              (zero? c)  (PersistentTreeMapSeq. nil (conj stack t) ascending? -1 nil)\n              ascending? (if (neg? c)\n                           (recur (conj stack t) (.-left t))\n                           (recur stack          (.-right t)))\n              :else      (if (pos? c)\n                           (recur (conj stack t) (.-right t))\n                           (recur stack          (.-left t)))))\n          (when-not (nil? stack)\n            (PersistentTreeMapSeq. nil stack ascending? -1 nil))))))\n\n  (-entry-key [coll entry] (key entry))\n\n  (-comparator [coll] comp))\n\n(set! (.-EMPTY PersistentTreeMap) (PersistentTreeMap. compare nil 0 nil empty-unordered-hash))\n\n(es6-iterable PersistentTreeMap)\n\n(defn hash-map\n  \"keyval => key val\n  Returns a new hash map with supplied mappings.\"\n  [& keyvals]\n  (loop [in (seq keyvals), out (transient (.-EMPTY PersistentHashMap))]\n    (if in\n      (let [in' (next in)]\n        (if (nil? in')\n          (throw (js\/Error. (str \"No value supplied for key: \" (first in))))\n          (recur (next in') (assoc! out (first in) (first in')) )))\n      (persistent! out))))\n\n(defn array-map\n  \"keyval => key val\n  Returns a new array map with supplied mappings.\"\n  [& keyvals]\n  (let [arr (if (and (instance? IndexedSeq keyvals) (zero? (.-i keyvals)))\n              (.-arr keyvals)\n              (into-array keyvals))]\n    (.createAsIfByAssoc PersistentArrayMap arr)))\n\n(defn obj-map\n  \"keyval => key val\n  Returns a new object map with supplied mappings.\"\n  [& keyvals]\n  (let [ks  (array)\n        obj (js-obj)]\n    (loop [kvs (seq keyvals)]\n      (if kvs\n        (do (.push ks (first kvs))\n            (gobject\/set obj (first kvs) (second kvs))\n            (recur (nnext kvs)))\n        (.fromObject ObjMap ks obj)))))\n\n(defn sorted-map\n  \"keyval => key val\n  Returns a new sorted map with supplied mappings.\"\n  ([& keyvals]\n     (loop [in (seq keyvals) out (.-EMPTY PersistentTreeMap)]\n       (if in\n         (recur (nnext in) (assoc out (first in) (second in)))\n         out))))\n\n(defn sorted-map-by\n  \"keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.\"\n  ([comparator & keyvals]\n     (loop [in (seq keyvals)\n            out (PersistentTreeMap. (fn->comparator comparator) nil 0 nil 0)]\n       (if in\n         (recur (nnext in) (assoc out (first in) (second in)))\n         out))))\n\n(deftype KeySeq [^not-native mseq _meta]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMeta\n  (-meta [coll] _meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta _meta)\n      coll\n      (KeySeq. mseq new-meta)))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (hash-ordered-coll coll))\n\n  ISeq\n  (-first [coll]\n    (let [^not-native me (-first mseq)]\n      (-key me)))\n\n  (-rest [coll]\n    (let [nseq (if (satisfies? INext mseq)\n                 (-next mseq)\n                 (next mseq))]\n      (if-not (nil? nseq)\n        (KeySeq. nseq nil)\n        ())))\n\n  INext\n  (-next [coll]\n    (let [nseq (if (satisfies? INext mseq)\n                 (-next mseq)\n                 (next mseq))]\n      (when-not (nil? nseq)\n        (KeySeq. nseq nil))))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable KeySeq)\n\n(defn keys\n  \"Returns a sequence of the map's keys, in the same order as (seq map).\"\n  [map]\n  (when-let [mseq (seq map)]\n    (KeySeq. mseq nil)))\n\n(defn key\n  \"Returns the key of the map entry.\"\n  [map-entry]\n  (-key map-entry))\n\n(deftype ValSeq [^not-native mseq _meta]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMeta\n  (-meta [coll] _meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta _meta)\n      coll\n      (ValSeq. mseq new-meta)))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (hash-ordered-coll coll))\n\n  ISeq\n  (-first [coll]\n    (let [^not-native me (-first mseq)]\n      (-val me)))\n\n  (-rest [coll]\n    (let [nseq (if (satisfies? INext mseq)\n                 (-next mseq)\n                 (next mseq))]\n      (if-not (nil? nseq)\n        (ValSeq. nseq nil)\n        ())))\n\n  INext\n  (-next [coll]\n    (let [nseq (if (satisfies? INext mseq)\n                 (-next mseq)\n                 (next mseq))]\n      (when-not (nil? nseq)\n        (ValSeq. nseq nil))))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable ValSeq)\n\n(defn vals\n  \"Returns a sequence of the map's values, in the same order as (seq map).\"\n  [map]\n  (when-let [mseq (seq map)]\n    (ValSeq. mseq nil)))\n\n(defn val\n  \"Returns the value in the map entry.\"\n  [map-entry]\n  (-val map-entry))\n\n(defn merge\n  \"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.\"\n  [& maps]\n  (when (some identity maps)\n    (reduce #(conj (or %1 {}) %2) maps)))\n\n(defn merge-with\n  \"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).\"\n  [f & maps]\n  (when (some identity maps)\n    (let [merge-entry (fn [m e]\n                        (let [k (key e) v (val e)]\n                          (if (contains? m k)\n                            (assoc m k (f (get m k) v))\n                            (assoc m k v))))\n          merge2 (fn [m1 m2]\n                   (reduce merge-entry (or m1 {}) (seq m2)))]\n      (reduce merge2 maps))))\n\n(defn select-keys\n  \"Returns a map containing only those entries in map whose key is in keys\"\n  [map keyseq]\n    (loop [ret {} keys (seq keyseq)]\n      (if keys\n        (let [key   (first keys)\n              entry (get map key ::not-found)]\n          (recur\n           (if (not= entry ::not-found)\n             (assoc ret key entry)\n             ret)\n           (next keys)))\n        (-with-meta ret (meta map)))))\n\n;;; PersistentHashSet\n\n(declare TransientHashSet)\n\n(deftype HashSetIter [iter]\n  Object\n  (hasNext [_]\n    (.hasNext iter))\n  (next [_]\n    (if ^boolean (.hasNext iter)\n      (.-key (.next iter))\n      (throw (js\/Error. \"No such element\"))))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype PersistentHashSet [meta hash-map ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n\n  ;; EXPERIMENTAL: subject to change\n  (keys [coll]\n    (es6-iterator (seq coll)))\n  (entries [coll]\n    (es6-set-entries-iterator (seq coll)))\n  (values [coll]\n    (es6-iterator (seq coll)))\n  (has [coll k]\n    (contains? coll k))\n  (forEach [coll f]\n    (doseq [[k v] coll]\n      (f v k)))\n\n  ICloneable\n  (-clone [_] (PersistentHashSet. meta hash-map __hash))\n\n  IIterable\n  (-iterator [coll]\n    (HashSetIter. (-iterator hash-map)))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentHashSet. new-meta hash-map __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll o]\n    (PersistentHashSet. meta (assoc hash-map o nil) nil))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentHashSet) meta))\n\n  IEquiv\n  (-equiv [coll other]\n    (and\n     (set? other)\n     (== (count coll) (count other))\n     ^boolean\n     (try\n       (reduce-kv\n         #(or (contains? other %2) (reduced false))\n         true hash-map)\n       (catch js\/Error ex\n         false))))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  ISeqable\n  (-seq [coll] (keys hash-map))\n\n  ICounted\n  (-count [coll] (-count hash-map))\n\n  ILookup\n  (-lookup [coll v]\n    (-lookup coll v nil))\n  (-lookup [coll v not-found]\n    (if-let [entry (-find hash-map v)]\n      (key entry)\n      not-found))\n\n  ISet\n  (-disjoin [coll v]\n    (PersistentHashSet. meta (-dissoc hash-map v) nil))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found))\n\n  IEditableCollection\n  (-as-transient [coll] (TransientHashSet. (-as-transient hash-map))))\n\n(set! (.-EMPTY PersistentHashSet)\n  (PersistentHashSet. nil (.-EMPTY PersistentArrayMap) empty-unordered-hash))\n\n(set! (.-fromArray PersistentHashSet)\n  (fn [items ^boolean no-clone]\n    (let [len (alength items)]\n      (if (<= len (.-HASHMAP-THRESHOLD PersistentArrayMap))\n        (let [arr (if no-clone items (aclone items))]\n          (loop [i 0\n                 out (transient (.-EMPTY PersistentArrayMap))]\n            (if (< i len)\n              (recur (inc i) (-assoc! out (aget items i) nil))\n              (PersistentHashSet. nil (-persistent! out) nil))))\n       (loop [i 0\n              out (transient (.-EMPTY PersistentHashSet))]\n         (if (< i len)\n           (recur (inc i) (-conj! out (aget items i)))\n           (-persistent! out)))))))\n\n(set! (.-createWithCheck PersistentHashSet)\n      (fn [items]\n        (let [len (alength items)\n              t (-as-transient (.-EMPTY PersistentHashSet))]\n          (dotimes [i len]\n            (-conj! t (aget items i))\n            (when-not (= (count t) (inc i))\n              (throw (js\/Error. (str \"Duplicate key: \" (aget items i))))))\n          (-persistent! t))))\n\n(set! (.-createAsIfByAssoc PersistentHashSet)\n      (fn [items]\n        (let [len (alength items)\n              t (-as-transient (.-EMPTY PersistentHashSet))]\n          (dotimes [i len] (-conj! t (aget items i)))\n          (-persistent! t))))\n\n(es6-iterable PersistentHashSet)\n\n(deftype TransientHashSet [^:mutable transient-map]\n  ITransientCollection\n  (-conj! [tcoll o]\n    (set! transient-map (assoc! transient-map o nil))\n    tcoll)\n\n  (-persistent! [tcoll]\n    (PersistentHashSet. nil (persistent! transient-map) nil))\n\n  ITransientSet\n  (-disjoin! [tcoll v]\n    (set! transient-map (dissoc! transient-map v))\n    tcoll)\n\n  ICounted\n  (-count [tcoll] (count transient-map))\n\n  ILookup\n  (-lookup [tcoll v]\n    (-lookup tcoll v nil))\n\n  (-lookup [tcoll v not-found]\n    (if (identical? (-lookup transient-map v lookup-sentinel) lookup-sentinel)\n      not-found\n      v))\n\n  IFn\n  (-invoke [tcoll k]\n    (if (identical? (-lookup transient-map k lookup-sentinel) lookup-sentinel)\n      nil\n      k))\n\n  (-invoke [tcoll k not-found]\n    (if (identical? (-lookup transient-map k lookup-sentinel) lookup-sentinel)\n      not-found\n      k)))\n\n(deftype PersistentTreeSet [meta tree-map ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n\n  ;; EXPERIMENTAL: subject to change\n  (keys [coll]\n    (es6-iterator (seq coll)))\n  (entries [coll]\n    (es6-set-entries-iterator (seq coll)))\n  (values [coll]\n    (es6-iterator (seq coll)))\n  (has [coll k]\n    (contains? coll k))\n  (forEach [coll f]\n    (doseq [[k v] coll]\n      (f v k)))\n\n  ICloneable\n  (-clone [_] (PersistentTreeSet. meta tree-map __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentTreeSet. new-meta tree-map __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll o]\n    (PersistentTreeSet. meta (assoc tree-map o nil) nil))\n\n  IEmptyableCollection\n  (-empty [coll] (PersistentTreeSet. meta (-empty tree-map) 0))\n\n  IEquiv\n  (-equiv [coll other]\n    (and\n     (set? other)\n     (== (count coll) (count other))\n     ^boolean\n     (try\n       (reduce-kv\n         #(or (contains? other %2) (reduced false))\n         true tree-map)\n       (catch js\/Error ex\n         false))))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  ISeqable\n  (-seq [coll] (keys tree-map))\n\n  ISorted\n  (-sorted-seq [coll ascending?]\n    (map key (-sorted-seq tree-map ascending?)))\n\n  (-sorted-seq-from [coll k ascending?]\n    (map key (-sorted-seq-from tree-map k ascending?)))\n\n  (-entry-key [coll entry] entry)\n\n  (-comparator [coll] (-comparator tree-map))\n\n  IReversible\n  (-rseq [coll]\n    (if (pos? (count tree-map))\n      (map key (rseq tree-map))))\n\n  ICounted\n  (-count [coll] (count tree-map))\n\n  ILookup\n  (-lookup [coll v]\n    (-lookup coll v nil))\n  (-lookup [coll v not-found]\n    (let [n (.entry-at tree-map v)]\n      (if-not (nil? n)\n        (.-key n)\n        not-found)))\n\n  ISet\n  (-disjoin [coll v]\n    (PersistentTreeSet. meta (dissoc tree-map v) nil))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found)))\n\n(set! (.-EMPTY PersistentTreeSet)\n  (PersistentTreeSet. nil (.-EMPTY PersistentTreeMap) empty-unordered-hash))\n\n(es6-iterable PersistentTreeSet)\n\n(defn set-from-indexed-seq [iseq]\n  (let [arr (.-arr iseq)\n        ret (areduce arr i ^not-native res (-as-transient #{})\n              (-conj! res (aget arr i)))]\n    (-persistent! ^not-native ret)))\n\n(defn set\n  \"Returns a set of the distinct elements of coll.\"\n  [coll]\n  (if (set? coll)\n    (with-meta coll nil)\n    (let [in (seq coll)]\n      (cond\n        (nil? in) #{}\n\n        (and (instance? IndexedSeq in) (zero? (.-i in)))\n        (.createAsIfByAssoc PersistentHashSet (.-arr in))\n\n        :else\n        (loop [^not-native in  in\n               ^not-native out (-as-transient #{})]\n          (if-not (nil? in)\n            (recur (next in) (-conj! out (-first in)))\n            (persistent! out)))))))\n\n(defn hash-set\n  \"Returns a new hash set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.\"\n  ([] #{})\n  ([& keys] (set keys)))\n\n(defn sorted-set\n  \"Returns a new sorted set with supplied keys.\"\n  ([& keys]\n   (reduce -conj (.-EMPTY PersistentTreeSet) keys)))\n\n(defn sorted-set-by\n  \"Returns a new sorted set with supplied keys, using the supplied comparator.\"\n  ([comparator & keys]\n   (reduce -conj\n           (PersistentTreeSet. nil (sorted-map-by comparator) 0)\n           keys)))\n\n(defn replace\n  \"Given a map of replacement pairs and a vector\/collection, returns a\n  vector\/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.\"\n  ([smap]\n     (map #(if-let [e (find smap %)] (val e) %)))\n  ([smap coll]\n     (if (vector? coll)\n       (let [n (count coll)]\n         (reduce (fn [v i]\n                   (if-let [e (find smap (nth v i))]\n                     (assoc v i (second e))\n                     v))\n           coll (take n (iterate inc 0))))\n       (map #(if-let [e (find smap %)] (second e) %) coll))))\n\n(defn distinct\n  \"Returns a lazy sequence of the elements of coll with duplicates removed.\n  Returns a stateful transducer when no collection is provided.\"\n  ([]\n    (fn [rf]\n      (let [seen (volatile! #{})]\n        (fn\n          ([] (rf))\n          ([result] (rf result))\n          ([result input]\n            (if (contains? @seen input)\n              result\n              (do (vswap! seen conj input)\n                  (rf result input))))))))\n  ([coll]\n    (let [step (fn step [xs seen]\n                 (lazy-seq\n                   ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f)\n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{}))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(defn butlast\n  \"Return a seq of all but the last item in coll, in linear time\"\n  [s]\n  (loop [ret [] s s]\n    (if (next s)\n      (recur (conj ret (first s)) (next s))\n      (seq ret))))\n\n(defn name\n  \"Returns the name String of a string, symbol or keyword.\"\n  [x]\n  (if (implements? INamed x)\n    (-name x)\n    (if (string? x)\n      x\n      (throw (js\/Error. (str \"Doesn't support name: \" x))))))\n\n(defn zipmap\n  \"Returns a map with the keys mapped to the corresponding vals.\"\n  [keys vals]\n    (loop [map (transient {})\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc! map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        (persistent! map))))\n\n(defn max-key\n  \"Returns the x for which (k x), a number, is greatest.\n\n  If there are multiple such xs, the last one is returned.\"\n  ([k x] x)\n  ([k x y] (if (> (k x) (k y)) x y))\n  ([k x y & more]\n   (reduce #(max-key k %1 %2) (max-key k x y) more)))\n\n(defn min-key\n  \"Returns the x for which (k x), a number, is least.\n\n  If there are multiple such xs, the last one is returned.\"\n  ([k x] x)\n  ([k x y] (if (< (k x) (k y)) x y))\n  ([k x y & more]\n     (reduce #(min-key k %1 %2) (min-key k x y) more)))\n\n(deftype ArrayList [^:mutable arr]\n  Object\n  (add [_ x] (.push arr x))\n  (size [_] (alength arr))\n  (clear [_] (set! arr (array)))\n  (isEmpty [_] (zero? (alength arr)))\n  (toArray [_] arr))\n\n(defn array-list []\n  (ArrayList. (array)))\n\n(defn partition-all\n  \"Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.\"\n  ([n]\n   (fn [rf]\n     (let [a (array-list)]\n       (fn\n         ([] (rf))\n         ([result]\n            (let [result (if (.isEmpty a)\n                           result\n                           (let [v (vec (.toArray a))]\n                             ;;clear first!\n                             (.clear a)\n                             (unreduced (rf result v))))]\n              (rf result)))\n         ([result input]\n            (.add a input)\n            (if (== n (.size a))\n              (let [v (vec (.toArray a))]\n                (.clear a)\n                (rf result v))\n              result))))))\n  ([n coll]\n     (partition-all n n coll))\n  ([n step coll]\n     (lazy-seq\n      (when-let [s (seq coll)]\n        (cons (take n s) (partition-all n step (drop step s)))))))\n\n(defn take-while\n  \"Returns a lazy sequence of successive items from coll while\n  (pred item) returns logical true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.\"\n  ([pred]\n     (fn [rf]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result input]\n            (if (pred input)\n              (rf result input)\n              (reduced result))))))\n  ([pred coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (when (pred (first s))\n           (cons (first s) (take-while pred (rest s))))))))\n\n(defn mk-bound-fn\n  [sc test key]\n  (fn [e]\n    (let [comp (-comparator sc)]\n      (test (comp (-entry-key sc e) key) 0))))\n\n(defn subseq\n  \"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true\"\n  ([sc test key]\n     (let [include (mk-bound-fn sc test key)]\n       (if (#{> >=} test)\n         (when-let [[e :as s] (-sorted-seq-from sc key true)]\n           (if (include e) s (next s)))\n         (take-while include (-sorted-seq sc true)))))\n  ([sc start-test start-key end-test end-key]\n     (when-let [[e :as s] (-sorted-seq-from sc start-key true)]\n       (take-while (mk-bound-fn sc end-test end-key)\n                   (if ((mk-bound-fn sc start-test start-key) e) s (next s))))))\n\n(defn rsubseq\n  \"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true\"\n  ([sc test key]\n     (let [include (mk-bound-fn sc test key)]\n       (if (#{< <=} test)\n         (when-let [[e :as s] (-sorted-seq-from sc key false)]\n           (if (include e) s (next s)))\n         (take-while include (-sorted-seq sc false)))))\n  ([sc start-test start-key end-test end-key]\n     (when-let [[e :as s] (-sorted-seq-from sc end-key false)]\n       (take-while (mk-bound-fn sc start-test start-key)\n                   (if ((mk-bound-fn sc end-test end-key) e) s (next s))))))\n\n(deftype IntegerRangeChunk [start step count]\n  ICounted\n  (-count [coll] count)\n\n  ISeq\n  (-first [coll] start)\n\n  IIndexed\n  (-nth [coll i]\n    (+ start (* i step)))\n  (-nth [coll i not-found]\n    (if (and (>= i 0) (< i count))\n      (+ start (* i step))\n      not-found))\n\n  IChunk\n  (-drop-first [coll]\n    (if (<= count 1)\n      (throw (js\/Error. \"-drop-first of empty chunk\"))\n      (IntegerRangeChunk. (+ start step) step (dec count)))))\n\n(deftype RangeIterator [^:mutable i end step]\n  Object\n  (hasNext [_]\n    (if (pos? step)\n      (< i end)\n      (> i end)))\n  (next [_]\n    (let [ret i]\n      (set! i (+ i step))\n      ret)))\n\n(deftype IntegerRange [meta start end step ^:mutable chunk ^:mutable chunk-next ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n  (forceChunk [coll]\n    (when (nil? chunk)\n      (let [count (-count coll)]\n        (if (> count 32)\n          (do\n            (set! chunk-next (IntegerRange. nil (+ start (* step 32)) end step nil nil nil))\n            (set! chunk (IntegerRangeChunk. start step 32)))\n          (set! chunk (IntegerRangeChunk. start step count))))))\n\n  ICloneable\n  (-clone [_] (IntegerRange. meta start end step chunk chunk-next __hash))\n\n  IWithMeta\n  (-with-meta [rng new-meta]\n    (if (identical? new-meta meta)\n      rng\n      (IntegerRange. new-meta start end step chunk chunk-next __hash)))\n\n  IMeta\n  (-meta [rng] meta)\n\n  ISeqable\n  (-seq [rng] rng)\n\n  ISeq\n  (-first [rng] start)\n  (-rest [rng]\n    (let [s (-next rng)]\n      (if (nil? s)\n        ()\n        s)))\n\n  IIterable\n  (-iterator [_]\n    (RangeIterator. start end step))\n\n  INext\n  (-next [rng]\n    (if (pos? step)\n      (when (< (+ start step) end)\n        (IntegerRange. nil (+ start step) end step nil nil nil))\n      (when (> (+ start step) end)\n        (IntegerRange. nil (+ start step) end step nil nil nil))))\n\n  IChunkedSeq\n  (-chunked-first [rng]\n    (.forceChunk rng)\n    chunk)\n  (-chunked-rest [rng]\n    (.forceChunk rng)\n    (if (nil? chunk-next)\n      ()\n      chunk-next))\n\n  IChunkedNext\n  (-chunked-next [rng]\n    (seq (-chunked-rest rng)))\n\n  ICollection\n  (-conj [rng o] (cons o rng))\n\n  IEmptyableCollection\n  (-empty [rng] (.-EMPTY List))\n\n  ISequential\n  IEquiv\n  (-equiv [rng other] (equiv-sequential rng other))\n\n  IHash\n  (-hash [rng] (caching-hash rng hash-ordered-coll __hash))\n\n  ICounted\n  (-count [rng]\n    (Math\/ceil (\/ (- end start) step)))\n\n  IIndexed\n  (-nth [rng n]\n    (if (and (<= 0 n) (< n (-count rng)))\n      (+ start (* n step))\n      (if (and (<= 0 n) (> start end) (zero? step))\n        start\n        (throw (js\/Error. \"Index out of bounds\")))))\n  (-nth [rng n not-found]\n    (if (and (<= 0 n) (< n (-count rng)))\n      (+ start (* n step))\n      (if (and (<= 0 n) (> start end) (zero? step))\n        start\n        not-found)))\n\n  IReduce\n  (-reduce [rng f] (ci-reduce rng f))\n  (-reduce [rng f init]\n    (loop [i start ret init]\n      (if (if (pos? step) (< i end) (> i end))\n        (let [ret (f ret i)]\n          (if (reduced? ret)\n            @ret\n            (recur (+ i step) ret)))\n        ret))))\n\n(es6-iterable IntegerRange)\n\n(deftype Range [meta start end step ^:mutable chunk ^:mutable chunk-next ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n  (forceChunk [coll]\n    (when (nil? chunk)\n      (let [arr (make-array 32)\n            val (loop [n 0 val start]\n                  (if (< n 32)\n                    (do\n                      (aset arr n val)\n                      (let [n (inc n)\n                            val (+ val step)]\n                        (if (if (pos? step) (< val end) (> val end))\n                          (recur n val)\n                          (set! chunk (array-chunk arr 0 n)))))\n                    val))]\n        (when (nil? chunk)\n          (set! chunk (array-chunk arr 0 32))\n          (when (if (pos? step) (< val end) (> val end))\n            (set! chunk-next (Range. nil val end step nil nil nil)))))))\n\n  ICloneable\n  (-clone [_] (Range. meta start end step chunk chunk-next __hash))\n\n  IWithMeta\n  (-with-meta [rng new-meta]\n    (if (identical? new-meta meta)\n      rng\n      (Range. new-meta start end step chunk chunk-next __hash)))\n\n  IMeta\n  (-meta [rng] meta)\n\n  ISeqable\n  (-seq [rng] rng)\n\n  ISeq\n  (-first [rng] start)\n  (-rest [rng]\n    (let [s (-next rng)]\n      (if (nil? s)\n        ()\n        s)))\n\n  IIterable\n  (-iterator [_]\n    (RangeIterator. start end step))\n\n  INext\n  (-next [rng]\n    (if (pos? step)\n      (when (< (+ start step) end)\n        (Range. nil (+ start step) end step nil nil nil))\n      (when (> (+ start step) end)\n        (Range. nil (+ start step) end step nil nil nil))))\n\n  IChunkedSeq\n  (-chunked-first [rng]\n    (.forceChunk rng)\n    chunk)\n  (-chunked-rest [rng]\n    (.forceChunk rng)\n    (if (nil? chunk-next)\n      ()\n      chunk-next))\n\n  IChunkedNext\n  (-chunked-next [rng]\n    (seq (-chunked-rest rng)))\n\n  ICollection\n  (-conj [rng o] (cons o rng))\n\n  IEmptyableCollection\n  (-empty [rng] (.-EMPTY List))\n\n  ISequential\n  IEquiv\n  (-equiv [rng other] (equiv-sequential rng other))\n\n  IHash\n  (-hash [rng] (caching-hash rng hash-ordered-coll __hash))\n\n  IReduce\n  (-reduce [rng f] (seq-reduce f rng))\n  (-reduce [rng f init]\n    (loop [i start ret init]\n      (if (if (pos? step) (< i end) (> i end))\n        (let [ret (f ret i)]\n          (if (reduced? ret)\n            @ret\n            (recur (+ i step) ret)))\n        ret))))\n\n(es6-iterable Range)\n\n(defn range\n  \"Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.\"\n  ([] (range 0 (.-MAX_VALUE js\/Number) 1))\n  ([end] (range 0 end 1))\n  ([start end] (range start end 1))\n  ([start end step]\n   (cond\n     (pos? step)\n     (if (<= end start)\n       ()\n       (if (and (integer? start) (integer? end) (integer? step))\n         (IntegerRange. nil start end step nil nil nil)\n         (Range. nil start end step nil nil nil)))\n\n     (neg? step)\n     (if (>= end start)\n       ()\n       (if (and (integer? start) (integer? end) (integer? step))\n         (IntegerRange. nil start end step nil nil nil)\n         (Range. nil start end step nil nil nil)))\n\n     :else\n     (if (== end start)\n       ()\n       (repeat start)))))\n\n(defn take-nth\n  \"Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.\"\n  ([n]\n   {:pre [(number? n)]}\n     (fn [rf]\n       (let [ia (volatile! -1)]\n         (fn\n           ([] (rf))\n           ([result] (rf result))\n           ([result input]\n              (let [i (vswap! ia inc)]\n                (if (zero? (rem i n))\n                  (rf result input)\n                  result)))))))\n  ([n coll]\n   {:pre [(number? n)]}\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (cons (first s) (take-nth n (drop n s)))))))\n\n(defn split-with\n  \"Returns a vector of [(take-while pred coll) (drop-while pred coll)]\"\n  [pred coll]\n  [(take-while pred coll) (drop-while pred coll)])\n\n(defn partition-by\n  \"Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.\"\n  ([f]\n     (fn [rf]\n       (let [a (array-list)\n             pa (volatile! ::none)]\n         (fn\n           ([] (rf))\n           ([result]\n              (let [result (if (.isEmpty a)\n                             result\n                             (let [v (vec (.toArray a))]\n                               ;;clear first!\n                               (.clear a)\n                               (unreduced (rf result v))))]\n                (rf result)))\n           ([result input]\n              (let [pval @pa\n                    val (f input)]\n                (vreset! pa val)\n                (if (or (keyword-identical? pval ::none)\n                        (= val pval))\n                  (do\n                    (.add a input)\n                    result)\n                  (let [v (vec (.toArray a))]\n                    (.clear a)\n                    (let [ret (rf result v)]\n                      (when-not (reduced? ret)\n                        (.add a input))\n                      ret)))))))))\n  ([f coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (let [fst (first s)\n               fv (f fst)\n               run (cons fst (take-while #(= fv (f %)) (next s)))]\n           (cons run (partition-by f (lazy-seq (drop (count run) s)))))))))\n\n(defn frequencies\n  \"Returns a map from distinct items in coll to the number of times\n  they appear.\"\n  [coll]\n  (persistent!\n   (reduce (fn [counts x]\n             (assoc! counts x (inc (get counts x 0))))\n           (transient {}) coll)))\n\n(defn reductions\n  \"Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.\"\n  ([f coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (reductions f (first s) (rest s))\n       (list (f)))))\n  ([f init coll]\n   (if (reduced? init)\n     (list @init)\n     (cons init\n       (lazy-seq\n         (when-let [s (seq coll)]\n           (reductions f (f init (first s)) (rest s))))))))\n\n(defn juxt\n  \"Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]\"\n  ([f]\n     (fn\n       ([] (vector (f)))\n       ([x] (vector (f x)))\n       ([x y] (vector (f x y)))\n       ([x y z] (vector (f x y z)))\n       ([x y z & args] (vector (apply f x y z args)))))\n  ([f g]\n     (fn\n       ([] (vector (f) (g)))\n       ([x] (vector (f x) (g x)))\n       ([x y] (vector (f x y) (g x y)))\n       ([x y z] (vector (f x y z) (g x y z)))\n       ([x y z & args] (vector (apply f x y z args) (apply g x y z args)))))\n  ([f g h]\n     (fn\n       ([] (vector (f) (g) (h)))\n       ([x] (vector (f x) (g x) (h x)))\n       ([x y] (vector (f x y) (g x y) (h x y)))\n       ([x y z] (vector (f x y z) (g x y z) (h x y z)))\n       ([x y z & args] (vector (apply f x y z args) (apply g x y z args) (apply h x y z args)))))\n  ([f g h & fs]\n     (let [fs (list* f g h fs)]\n       (fn\n         ([] (reduce #(conj %1 (%2)) [] fs))\n         ([x] (reduce #(conj %1 (%2 x)) [] fs))\n         ([x y] (reduce #(conj %1 (%2 x y)) [] fs))\n         ([x y z] (reduce #(conj %1 (%2 x y z)) [] fs))\n         ([x y z & args] (reduce #(conj %1 (apply %2 x y z args)) [] fs))))))\n\n(defn dorun\n  \"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.\"\n  ([coll]\n   (when-let [s (seq coll)]\n     (recur (next s))))\n  ([n coll]\n   (when (and (seq coll) (pos? n))\n     (recur (dec n) (next coll)))))\n\n(defn doall\n  \"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.\"\n  ([coll]\n   (dorun coll)\n   coll)\n  ([n coll]\n   (dorun n coll)\n   coll))\n\n;;;;;;;;;;;;;;;;;;;;;;;;; Regular Expressions ;;;;;;;;;;\n\n(defn regexp?\n  \"Returns true if x is a JavaScript RegExp instance.\"\n  [x]\n  (instance? js\/RegExp x))\n\n(defn re-matches\n  \"Returns the result of (re-find re s) if re fully matches s.\"\n  [re s]\n  (if (string? s)\n    (let [matches (.exec re s)]\n      (when (and (not (nil? matches))\n                 (= (aget matches 0) s))\n        (if (== (count ^array matches) 1)\n          (aget matches 0)\n          (vec matches))))\n    (throw (js\/TypeError. \"re-matches must match against a string.\"))))\n\n\n(defn re-find\n  \"Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.\"\n  [re s]\n  (if (string? s)\n    (let [matches (.exec re s)]\n      (when-not (nil? matches)\n        (if (== (count ^array matches) 1)\n          (aget matches 0)\n          (vec matches))))\n    (throw (js\/TypeError. \"re-find must match against a string.\"))))\n\n(defn- re-seq* [re s]\n  (when-some [matches (.exec re s)]\n    (let [match-str (aget matches 0)\n          match-vals (if (== (.-length matches) 1)\n                       match-str\n                       (vec matches))]\n      (cons match-vals\n            (lazy-seq\n             (let [post-idx (+ (.-index matches)\n                               (max 1 (.-length match-str)))]\n               (when (<= post-idx (.-length s))\n                 (re-seq* re (subs s post-idx)))))))))\n\n(defn re-seq\n  \"Returns a lazy sequence of successive matches of re in s.\"\n  [re s]\n  (if (string? s)\n    (re-seq* re s)\n    (throw (js\/TypeError. \"re-seq must match against a string.\"))))\n\n(defn re-pattern\n  \"Returns an instance of RegExp which has compiled the provided string.\"\n  [s]\n  (if (instance? js\/RegExp s)\n    s\n    (let [[prefix flags] (re-find #\"^\\(\\?([idmsux]*)\\)\" s)\n          pattern (subs s (if (nil? prefix)\n                            0\n                            (count ^string prefix)))]\n      (js\/RegExp. pattern (or flags \"\")))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Printing ;;;;;;;;;;;;;;;;\n\n(defn pr-sequential-writer [writer print-one begin sep end opts coll]\n  (binding [*print-level* (when-not (nil? *print-level*) (dec *print-level*))]\n    (if (and (not (nil? *print-level*)) (neg? *print-level*))\n      (-write writer \"#\")\n      (do\n        (-write writer begin)\n        (if (zero? (:print-length opts))\n          (when (seq coll)\n            (-write writer (or (:more-marker opts) \"...\")))\n          (do\n            (when (seq coll)\n              (print-one (first coll) writer opts))\n            (loop [coll (next coll) n (dec (:print-length opts))]\n              (if (and coll (or (nil? n) (not (zero? n))))\n                (do\n                  (-write writer sep)\n                  (print-one (first coll) writer opts)\n                  (recur (next coll) (dec n)))\n                (when (and (seq coll) (zero? n))\n                  (-write writer sep)\n                  (-write writer (or (:more-marker opts) \"...\")))))))\n        (-write writer end)))))\n\n(defn write-all [writer & ss]\n  (doseq [s ss]\n    (-write writer s)))\n\n(defn string-print [x]\n  (when (nil? *print-fn*)\n    (throw (js\/Error. \"No *print-fn* fn set for evaluation environment\")))\n  (*print-fn* x)\n  nil)\n\n(defn flush [] ;stub\n  nil)\n\n(def ^:private char-escapes\n  (js-obj\n    \"\\\"\" \"\\\\\\\"\"\n    \"\\\\\" \"\\\\\\\\\"\n    \"\\b\" \"\\\\b\"\n    \"\\f\" \"\\\\f\"\n    \"\\n\" \"\\\\n\"\n    \"\\r\" \"\\\\r\"\n    \"\\t\" \"\\\\t\"))\n\n(defn ^:private quote-string\n  [s]\n  (str \\\"\n       (.replace s (js\/RegExp \"[\\\\\\\\\\\"\\b\\f\\n\\r\\t]\" \"g\")\n         (fn [match] (unchecked-get char-escapes match)))\n       \\\"))\n\n(declare print-map)\n\n(defn print-meta? [opts obj]\n  (and (boolean (get opts :meta))\n       (implements? IMeta obj)\n       (not (nil? (meta obj)))))\n\n(defn- pr-writer-impl\n  [obj writer opts]\n  (cond\n    (nil? obj) (-write writer \"nil\")\n    :else\n    (do\n      (when (print-meta? opts obj)\n        (-write writer \"^\")\n        (pr-writer (meta obj) writer opts)\n        (-write writer \" \"))\n      (cond\n        ;; handle CLJS ctors\n        ^boolean (.-cljs$lang$type obj)\n        (.cljs$lang$ctorPrWriter obj obj writer opts)\n\n        ; Use the new, more efficient, IPrintWithWriter interface when possible.\n        (satisfies? IPrintWithWriter obj)\n        (-pr-writer obj writer opts)\n\n        (or (true? obj) (false? obj))\n        (-write writer (str obj))\n\n        (number? obj)\n        (-write writer\n          (cond\n            ^boolean (js\/isNaN obj) \"##NaN\"\n            (identical? obj js\/Number.POSITIVE_INFINITY) \"##Inf\"\n            (identical? obj js\/Number.NEGATIVE_INFINITY) \"##-Inf\"\n            :else (str obj)))\n\n        (object? obj)\n        (do\n          (-write writer \"#js \")\n          (print-map\n            (map (fn [k]\n                   (MapEntry. (cond-> k (some? (re-matches #\"[A-Za-z_\\*\\+\\?!\\-'][\\w\\*\\+\\?!\\-']*\" k)) keyword) (unchecked-get obj k) nil))\n              (js-keys obj))\n            pr-writer writer opts))\n\n        (array? obj)\n        (pr-sequential-writer writer pr-writer \"#js [\" \" \" \"]\" opts obj)\n\n        (string? obj)\n        (if (:readably opts)\n          (-write writer (quote-string obj))\n          (-write writer obj))\n\n        (js-fn? obj)\n        (let [name (.-name obj)\n              name (if (or (nil? name) (gstring\/isEmpty name))\n                     \"Function\"\n                     name)]\n          (write-all writer \"#object[\" name\n            (if *print-fn-bodies*\n              (str \" \\\"\" (str obj) \"\\\"\")\n              \"\")\n            \"]\"))\n\n        (instance? js\/Date obj)\n        (let [normalize (fn [n len]\n                          (loop [ns (str n)]\n                            (if (< (count ns) len)\n                              (recur (str \"0\" ns))\n                              ns)))]\n          (write-all writer\n            \"#inst \\\"\"\n            (normalize (.getUTCFullYear obj) 4)     \"-\"\n            (normalize (inc (.getUTCMonth obj)) 2)  \"-\"\n            (normalize (.getUTCDate obj) 2)         \"T\"\n            (normalize (.getUTCHours obj) 2)        \":\"\n            (normalize (.getUTCMinutes obj) 2)      \":\"\n            (normalize (.getUTCSeconds obj) 2)      \".\"\n            (normalize (.getUTCMilliseconds obj) 3) \"-\"\n            \"00:00\\\"\"))\n\n        (regexp? obj) (write-all writer \"#\\\"\" (.-source obj) \"\\\"\")\n\n        (js-symbol? obj) (write-all writer \"#object[\" (.toString obj) \"]\" )\n\n        :else\n        (if (some-> obj .-constructor .-cljs$lang$ctorStr)\n          (write-all writer\n            \"#object[\" (.replace (.. obj -constructor -cljs$lang$ctorStr)\n                         (js\/RegExp. \"\/\" \"g\") \".\") \"]\")\n          (let [name (some-> obj .-constructor .-name)\n                name (if (or (nil? name) (gstring\/isEmpty name))\n                       \"Object\"\n                       name)]\n            (if (nil? (. obj -constructor))\n              (write-all writer \"#object[\" name \"]\")\n              (write-all writer \"#object[\" name \" \" (str obj) \"]\"))))))))\n\n(defn- pr-writer\n  \"Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.\"\n  [obj writer opts]\n  (if-let [alt-impl (:alt-impl opts)]\n    (alt-impl obj writer (assoc opts :fallback-impl pr-writer-impl))\n    (pr-writer-impl obj writer opts)))\n\n(defn pr-seq-writer [objs writer opts]\n  (pr-writer (first objs) writer opts)\n  (doseq [obj (next objs)]\n    (-write writer \" \")\n    (pr-writer obj writer opts)))\n\n(defn- pr-sb-with-opts [objs opts]\n  (let [sb (StringBuffer.)\n        writer (StringBufferWriter. sb)]\n    (pr-seq-writer objs writer opts)\n    (-flush writer)\n    sb))\n\n(defn pr-str-with-opts\n  \"Prints a sequence of objects to a string, observing all the\n  options given in opts\"\n  [objs opts]\n  (if (empty? objs)\n    \"\"\n    (str (pr-sb-with-opts objs opts))))\n\n(defn prn-str-with-opts\n  \"Same as pr-str-with-opts followed by (newline)\"\n  [objs opts]\n  (if (empty? objs)\n    \"\\n\"\n    (let [sb (pr-sb-with-opts objs opts)]\n      (.append sb \\newline)\n      (str sb))))\n\n(defn- pr-with-opts\n  \"Prints a sequence of objects using string-print, observing all\n  the options given in opts\"\n  [objs opts]\n  (string-print (pr-str-with-opts objs opts)))\n\n(defn newline\n  \"Prints a newline using *print-fn*\"\n  ([] (newline nil))\n  ([opts]\n   (string-print \"\\n\")\n   (when (get opts :flush-on-newline)\n     (flush))))\n\n(defn pr-str\n  \"pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.\"\n  [& objs]\n  (pr-str-with-opts objs (pr-opts)))\n\n(defn prn-str\n  \"Same as pr-str followed by (newline)\"\n  [& objs]\n  (prn-str-with-opts objs (pr-opts)))\n\n(defn pr\n  \"Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader\"\n  [& objs]\n  (pr-with-opts objs (pr-opts)))\n\n(def ^{:doc\n  \"Prints the object(s) using string-print.\n  print and println produce output for human consumption.\"}\n  print\n  (fn cljs-core-print [& objs]\n    (pr-with-opts objs (assoc (pr-opts) :readably false))))\n\n(defn print-str\n  \"print to a string, returning it\"\n  [& objs]\n  (pr-str-with-opts objs (assoc (pr-opts) :readably false)))\n\n(defn println\n  \"Same as print followed by (newline)\"\n  [& objs]\n  (pr-with-opts objs (assoc (pr-opts) :readably false))\n  (when *print-newline*\n    (newline (pr-opts))))\n\n(defn println-str\n  \"println to a string, returning it\"\n  [& objs]\n  (prn-str-with-opts objs (assoc (pr-opts) :readably false)))\n\n(defn prn\n  \"Same as pr followed by (newline).\"\n  [& objs]\n  (pr-with-opts objs (pr-opts))\n  (when *print-newline*\n    (newline (pr-opts))))\n\n(defn- strip-ns\n  [named]\n  (if (symbol? named)\n    (symbol nil (name named))\n    (keyword nil (name named))))\n\n(defn- lift-ns\n  \"Returns [lifted-ns lifted-map] or nil if m can't be lifted.\"\n  [m]\n  (when *print-namespace-maps*\n    (loop [ns nil\n           [[k v :as entry] & entries] (seq m)\n           lm (empty m)]\n      (if entry\n        (when (or (keyword? k) (symbol? k))\n          (if ns\n            (when (= ns (namespace k))\n              (recur ns entries (assoc lm (strip-ns k) v)))\n            (when-let [new-ns (namespace k)]\n              (recur new-ns entries (assoc lm (strip-ns k) v)))))\n        [ns lm]))))\n\n(defn print-prefix-map [prefix m print-one writer opts]\n  (pr-sequential-writer\n    writer\n    (fn [e w opts]\n      (do (print-one (key e) w opts)\n          (-write w \\space)\n          (print-one (val e) w opts)))\n    (str prefix \"{\") \", \" \"}\"\n    opts (seq m)))\n\n(defn print-map [m print-one writer opts]\n  (let [[ns lift-map] (when (map? m)\n                        (lift-ns m))]\n    (if ns\n      (print-prefix-map (str \"#:\" ns) lift-map print-one writer opts)\n      (print-prefix-map nil m print-one writer opts))))\n\n(extend-protocol IPrintWithWriter\n  LazySeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  TransformerIterator\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  IndexedSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  RSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  PersistentQueue\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"#queue [\" \" \" \"]\" opts (seq coll)))\n\n  PersistentQueueSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  PersistentTreeMapSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  NodeSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  ArrayNodeSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  List\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Cons\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  EmptyList\n  (-pr-writer [coll writer opts] (-write writer \"()\"))\n\n  PersistentVector\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))\n\n  ChunkedCons\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  ChunkedSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Subvec\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))\n\n  BlackNode\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))\n\n  RedNode\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))\n\n  MapEntry\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))\n\n  ObjMap\n  (-pr-writer [coll writer opts]\n    (print-map coll pr-writer writer opts))\n\n  KeySeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  ValSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  PersistentArrayMapSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  PersistentArrayMap\n  (-pr-writer [coll writer opts]\n    (print-map coll pr-writer writer opts))\n\n  PersistentHashMap\n  (-pr-writer [coll writer opts]\n    (print-map coll pr-writer writer opts))\n\n  PersistentTreeMap\n  (-pr-writer [coll writer opts]\n    (print-map coll pr-writer writer opts))\n\n  PersistentHashSet\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"#{\" \" \" \"}\" opts coll))\n\n  PersistentTreeSet\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"#{\" \" \" \"}\" opts coll))\n\n  Range\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  IntegerRange\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Cycle\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Repeat\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Iterate\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  ES6IteratorSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Atom\n  (-pr-writer [a writer opts]\n    (-write writer \"#object[cljs.core.Atom \")\n    (pr-writer {:val (.-state a)} writer opts)\n    (-write writer \"]\"))\n\n  Volatile\n  (-pr-writer [a writer opts]\n    (-write writer \"#object[cljs.core.Volatile \")\n    (pr-writer {:val (.-state a)} writer opts)\n    (-write writer \"]\"))\n\n  Var\n  (-pr-writer [a writer opts]\n    (-write writer \"#'\")\n    (pr-writer (.-sym a) writer opts)))\n\n;; IComparable\n(extend-protocol IComparable\n  Symbol\n  (-compare [x y]\n    (if (symbol? y)\n      (compare-symbols x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  Keyword\n  (-compare [x y]\n    (if (keyword? y)\n      (compare-keywords x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  Subvec\n  (-compare [x y]\n    (if (vector? y)\n      (compare-indexed x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  PersistentVector\n  (-compare [x y]\n    (if (vector? y)\n      (compare-indexed x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  MapEntry\n  (-compare [x y]\n    (if (vector? y)\n      (compare-indexed x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  BlackNode\n  (-compare [x y]\n    (if (vector? y)\n      (compare-indexed x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  RedNode\n  (-compare [x y]\n    (if (vector? y)\n      (compare-indexed x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y))))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Reference Types ;;;;;;;;;;;;;;;;\n\n(defn alter-meta!\n  \"Atomically sets the metadata for a namespace\/var\/ref\/agent\/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects\"\n  [iref f & args]\n  (set! (.-meta iref) (apply f (.-meta iref) args)))\n\n(defn reset-meta!\n  \"Atomically resets the metadata for an atom\"\n  [iref m]\n  (set! (.-meta iref) m))\n\n(defn add-watch\n  \"Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old\/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1\"\n  [iref key f]\n  (-add-watch iref key f)\n  iref)\n\n(defn remove-watch\n  \"Removes a watch (set by add-watch) from a reference\"\n  [iref key]\n  (-remove-watch iref key)\n  iref)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; gensym ;;;;;;;;;;;;;;;;\n;; Internal - do not use!\n(def\n  ^{:jsdoc [\"@type {*}\"]}\n  gensym_counter nil)\n\n(defn gensym\n  \"Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.\"\n  ([] (gensym \"G__\"))\n  ([prefix-string]\n     (when (nil? gensym_counter)\n       (set! gensym_counter (atom 0)))\n     (symbol (str prefix-string (swap! gensym_counter inc)))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Delay ;;;;;;;;;;;;;;;;;;;;\n\n(deftype Delay [^:mutable f ^:mutable value]\n  IDeref\n  (-deref [_]\n    (when f\n      (set! value (f))\n      (set! f nil))\n    value)\n\n  IPending\n  (-realized? [x]\n    (not f))\n\n  IPrintWithWriter\n  (-pr-writer [x writer opts]\n    (-write writer \"#object[cljs.core.Delay \")\n    (pr-writer {:status (if (nil? f) :ready :pending), :val value} writer opts)\n    (-write writer \"]\")))\n\n(defn delay?\n  \"returns true if x is a Delay created with delay\"\n  [x] (instance? Delay x))\n\n(defn force\n  \"If x is a Delay, returns the (possibly cached) value of its expression, else returns x\"\n  [x]\n  (if (delay? x)\n    (deref x)\n    x))\n\n(defn ^boolean realized?\n  \"Returns true if a value has been produced for a delay or lazy sequence.\"\n  [x]\n  (-realized? x))\n\n(defn- preserving-reduced\n  [rf]\n  #(let [ret (rf %1 %2)]\n     (if (reduced? ret)\n       (reduced ret)\n       ret)))\n\n(defn cat\n  \"A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction.\"\n  {:added \"1.7\"}\n  [rf]\n  (let [rf1 (preserving-reduced rf)]\n    (fn\n      ([] (rf))\n      ([result] (rf result))\n      ([result input]\n         (reduce rf1 result input)))))\n\n(defn halt-when\n  \"Returns a transducer that ends transduction when pred returns true\n  for an input. When retf is supplied it must be a fn of 2 arguments -\n  it will be passed the (completed) result so far and the input that\n  triggered the predicate, and its return value (if it does not throw\n  an exception) will be the return value of the transducer. If retf\n  is not supplied, the input that triggered the predicate will be\n  returned. If the predicate never returns true the transduction is\n  unaffected.\"\n  {:added \"1.9\"}\n  ([pred] (halt-when pred nil))\n  ([pred retf]\n     (fn [rf]\n       (fn\n         ([] (rf))\n         ([result]\n            (if (and (map? result) (contains? result ::halt))\n              (::halt result)\n              (rf result)))\n         ([result input]\n            (if (pred input)\n              (reduced {::halt (if retf (retf (rf result) input) input)})\n              (rf result input)))))))\n\n(defn dedupe\n  \"Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.\"\n  ([]\n   (fn [rf]\n     (let [pa (volatile! ::none)]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result input]\n            (let [prior @pa]\n              (vreset! pa input)\n              (if (= prior input)\n                result\n                (rf result input))))))))\n  ([coll] (sequence (dedupe) coll)))\n\n(declare rand)\n\n(defn random-sample\n  \"Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.\"\n  ([prob]\n     (filter (fn [_] (< (rand) prob))))\n  ([prob coll]\n     (filter (fn [_] (< (rand) prob)) coll)))\n\n(deftype Eduction [xform coll]\n  Object\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ISequential\n\n  IIterable\n  (-iterator [_]\n    (.create TransformerIterator xform (iter coll)))\n\n  ISeqable\n  (-seq [_] (seq (sequence xform coll)))\n\n  IReduce\n  (-reduce [_ f] (transduce xform (completing f) coll))\n  (-reduce [_ f init] (transduce xform (completing f) init coll))\n\n  IPrintWithWriter\n  (-pr-writer [coll writer opts]\n    (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll)))\n\n(es6-iterable Eduction)\n\n(defn eduction\n  \"Returns a reducible\/iterable application of the transducers\n  to the items in coll. Transducers are applied in order as if\n  combined with comp. Note that these applications will be\n  performed every time reduce\/iterator is called.\"\n  {:arglists '([xform* coll])}\n  [& xforms]\n  (Eduction. (apply comp (butlast xforms)) (last xforms)))\n\n(defn run!\n  \"Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil\"\n  [proc coll]\n  (reduce #(proc %2) nil coll)\n  nil)\n\n(defprotocol IEncodeJS\n  (-clj->js [x] \"Recursively transforms clj values to JavaScript\")\n  (-key->js [x] \"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)\"))\n\n(declare clj->js)\n\n(defn key->js\n  ([k] (key->js k clj->js))\n  ([k primitive-fn]\n   (cond\n     (satisfies? IEncodeJS k) (-clj->js k)\n     (or (string? k)\n         (number? k)\n         (keyword? k)\n         (symbol? k)) (primitive-fn k)\n     :default (pr-str k))))\n\n(defn clj->js\n  \"Recursively transforms ClojureScript values to JavaScript.\n  sets\/vectors\/lists become Arrays, Keywords and Symbol become Strings,\n  Maps become Objects. Arbitrary keys are encoded to by `key->js`.\n  Options is a key-value pair, where the only valid key is\n  :keyword-fn, which should point to a single-argument function to be\n  called on keyword keys. Default to `name`.\"\n  [x & {:keys [keyword-fn]\n        :or   {keyword-fn name}\n        :as options}]\n  (letfn [(keyfn [k] (key->js k thisfn))\n          (thisfn [x] (cond\n                        (nil? x) nil\n                        (satisfies? IEncodeJS x) (-clj->js x)\n                        (keyword? x) (keyword-fn x)\n                        (symbol? x) (str x)\n                        (map? x) (let [m (js-obj)]\n                                   (doseq [[k v] x]\n                                     (gobject\/set m (keyfn k) (thisfn v)))\n                                   m)\n                        (coll? x) (let [arr (array)]\n                                    (doseq [x (map thisfn x)]\n                                      (.push arr x))\n                                    arr)\n                        :else x))]\n    (thisfn x)))\n\n\n(defprotocol IEncodeClojure\n  (-js->clj [x options] \"Transforms JavaScript values to Clojure\"))\n\n(defn js->clj\n  \"Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.\"\n  ([x] (js->clj x :keywordize-keys false))\n  ([x & opts]\n    (let [{:keys [keywordize-keys]} opts\n          keyfn (if keywordize-keys keyword str)\n          f (fn thisfn [x]\n              (cond\n                (satisfies? IEncodeClojure x)\n                (-js->clj x (apply array-map opts))\n\n                (seq? x)\n                (doall (map thisfn x))\n\n                (map-entry? x)\n                (MapEntry. (thisfn (key x)) (thisfn (val x)) nil)\n\n                (coll? x)\n                (into (empty x) (map thisfn) x)\n\n                (array? x)\n                (persistent!\n                 (reduce #(conj! %1 (thisfn %2))\n                         (transient []) x))\n\n                (identical? (type x) js\/Object)\n                (persistent!\n                 (reduce (fn [r k] (assoc! r (keyfn k) (thisfn (gobject\/get x k))))\n                         (transient {}) (js-keys x)))\n                :else x))]\n      (f x))))\n\n(defn memoize\n  \"Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.\"\n  [f]\n  (let [mem (atom {})]\n    (fn [& args]\n      (let [v (get @mem args lookup-sentinel)]\n        (if (identical? v lookup-sentinel)\n          (let [ret (apply f args)]\n            (swap! mem assoc args ret)\n            ret)\n          v)))))\n\n(defn trampoline\n  \"trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.\"\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (trampoline #(apply f args))))\n\n(defn rand\n  \"Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).\"\n  ([] (rand 1))\n  ([n] (* (Math\/random) n)))\n\n(defn rand-int\n  \"Returns a random integer between 0 (inclusive) and n (exclusive).\"\n  [n] (Math\/floor (* (Math\/random) n)))\n\n(defn rand-nth\n  \"Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.\"\n  [coll]\n  (nth coll (rand-int (count coll))))\n\n(defn group-by\n  \"Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.\"\n  [f coll]\n  (persistent!\n    (reduce\n      (fn [ret x]\n        (let [k (f x)]\n          (assoc! ret k (conj (get ret k []) x))))\n      (transient {}) coll)))\n\n(defn make-hierarchy\n  \"Creates a hierarchy object for use with derive, isa? etc.\"\n  [] {:parents {} :descendants {} :ancestors {}})\n\n(def\n  ^{:private true\n    :jsdoc [\"@type {*}\"]}\n  -global-hierarchy nil)\n\n(defn- get-global-hierarchy []\n  (when (nil? -global-hierarchy)\n    (set! -global-hierarchy (atom (make-hierarchy))))\n  -global-hierarchy)\n\n(defn- swap-global-hierarchy! [f & args]\n  (apply swap! (get-global-hierarchy) f args))\n\n(defn ^boolean isa?\n  \"Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy\"\n  ([child parent] (isa? @(get-global-hierarchy) child parent))\n  ([h child parent]\n     (or (= child parent)\n         ;; (and (class? parent) (class? child)\n         ;;    (. ^Class parent isAssignableFrom child))\n         (contains? ((:ancestors h) child) parent)\n         ;;(and (class? child) (some #(contains? ((:ancestors h) %) parent) (supers child)))\n         (and (vector? parent) (vector? child)\n              (== (count parent) (count child))\n              (loop [ret true i 0]\n                (if (or (not ret) (== i (count parent)))\n                  ret\n                  (recur (isa? h (child i) (parent i)) (inc i))))))))\n\n(defn parents\n  \"Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy\"\n  ([tag] (parents @(get-global-hierarchy) tag))\n  ([h tag] (not-empty (get (:parents h) tag))))\n\n(defn ancestors\n  \"Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy\"\n  ([tag] (ancestors @(get-global-hierarchy) tag))\n  ([h tag] (not-empty (get (:ancestors h) tag))))\n\n(defn descendants\n  \"Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.\"\n  ([tag] (descendants @(get-global-hierarchy) tag))\n  ([h tag] (not-empty (get (:descendants h) tag))))\n\n(defn derive\n  \"Establishes a parent\/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.\"\n  ([tag parent]\n   (assert (namespace parent))\n   ;; (assert (or (class? tag) (and (instance? cljs.core.Named tag) (namespace tag))))\n   (swap-global-hierarchy! derive tag parent) nil)\n  ([h tag parent]\n   (assert (not= tag parent))\n   ;; (assert (or (class? tag) (instance? clojure.lang.Named tag)))\n   ;; (assert (instance? clojure.lang.INamed tag))\n   ;; (assert (instance? clojure.lang.INamed parent))\n   (let [tp (:parents h)\n         td (:descendants h)\n         ta (:ancestors h)\n         tf (fn [m source sources target targets]\n              (reduce (fn [ret k]\n                        (assoc ret k\n                               (reduce conj (get targets k #{}) (cons target (targets target)))))\n                      m (cons source (sources source))))]\n     (or\n      (when-not (contains? (tp tag) parent)\n        (when (contains? (ta tag) parent)\n          (throw (js\/Error. (str tag \"already has\" parent \"as ancestor\"))))\n        (when (contains? (ta parent) tag)\n          (throw (js\/Error. (str \"Cyclic derivation:\" parent \"has\" tag \"as ancestor\"))))\n        {:parents (assoc (:parents h) tag (conj (get tp tag #{}) parent))\n         :ancestors (tf (:ancestors h) tag td parent ta)\n         :descendants (tf (:descendants h) parent ta tag td)})\n      h))))\n\n(defn underive\n  \"Removes a parent\/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.\"\n  ([tag parent]\n    (swap-global-hierarchy! underive tag parent)\n    nil)\n  ([h tag parent]\n    (let [parentMap (:parents h)\n          childsParents (if (parentMap tag)\n                          (disj (parentMap tag) parent) #{})\n          newParents (if (not-empty childsParents)\n                      (assoc parentMap tag childsParents)\n                      (dissoc parentMap tag))\n          deriv-seq (flatten (map #(cons (first %) (interpose (first %) (second %)))\n                                  (seq newParents)))]\n      (if (contains? (parentMap tag) parent)\n        (reduce #(apply derive %1 %2) (make-hierarchy)\n                (partition 2 deriv-seq))\n        h))))\n\n(defn- reset-cache\n  [method-cache method-table cached-hierarchy hierarchy]\n  (swap! method-cache (fn [_] (deref method-table)))\n  (swap! cached-hierarchy (fn [_] (deref hierarchy))))\n\n(defn- prefers*\n  [x y prefer-table]\n  (let [xprefs (@prefer-table x)]\n    (or\n     (when (and xprefs (xprefs y))\n       true)\n     (loop [ps (parents y)]\n       (when (pos? (count ps))\n         (when (prefers* x (first ps) prefer-table)\n           true)\n         (recur (rest ps))))\n     (loop [ps (parents x)]\n       (when (pos? (count ps))\n         (when (prefers* (first ps) y prefer-table)\n           true)\n         (recur (rest ps))))\n     false)))\n\n(defn- dominates\n  [x y prefer-table hierarchy]\n  (or (prefers* x y prefer-table) (isa? hierarchy x y)))\n\n(defn- find-and-cache-best-method\n  [name dispatch-val hierarchy method-table prefer-table method-cache cached-hierarchy default-dispatch-val]\n  (let [best-entry (reduce (fn [be [k _ :as e]]\n                             (if (isa? @hierarchy dispatch-val k)\n                               (let [be2 (if (or (nil? be) (dominates k (first be) prefer-table @hierarchy))\n                                           e\n                                           be)]\n                                 (when-not (dominates (first be2) k prefer-table @hierarchy)\n                                   (throw (js\/Error.\n                                            (str \"Multiple methods in multimethod '\" name\n                                              \"' match dispatch value: \" dispatch-val \" -> \" k\n                                              \" and \" (first be2) \", and neither is preferred\"))))\n                                 be2)\n                               be))\n                     nil @method-table)\n        best-entry (if-let [entry (and (nil? best-entry) (@method-table default-dispatch-val))]\n                     [default-dispatch-val entry]\n                     best-entry)]\n    (when best-entry\n      (if (= @cached-hierarchy @hierarchy)\n        (do\n          (swap! method-cache assoc dispatch-val (second best-entry))\n          (second best-entry))\n        (do\n          (reset-cache method-cache method-table cached-hierarchy hierarchy)\n          (find-and-cache-best-method name dispatch-val hierarchy method-table prefer-table\n            method-cache cached-hierarchy default-dispatch-val))))))\n\n(defprotocol IMultiFn\n  (-reset [mf])\n  (-add-method [mf dispatch-val method])\n  (-remove-method [mf dispatch-val])\n  (-prefer-method [mf dispatch-val dispatch-val-y])\n  (-get-method [mf dispatch-val])\n  (-methods [mf])\n  (-prefers [mf])\n  (-default-dispatch-val [mf])\n  (-dispatch-fn [mf]))\n\n(defn- throw-no-method-error [name dispatch-val]\n  (throw (js\/Error. (str \"No method in multimethod '\" name \"' for dispatch value: \" dispatch-val))))\n\n(deftype MultiFn [name dispatch-fn default-dispatch-val hierarchy\n                  method-table prefer-table method-cache cached-hierarchy]\n  IFn\n  (-invoke [mf]\n    (let [dispatch-val (dispatch-fn)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn)))\n  (-invoke [mf a]\n    (let [dispatch-val (dispatch-fn a)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a)))\n  (-invoke [mf a b]\n    (let [dispatch-val (dispatch-fn a b)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b)))\n  (-invoke [mf a b c]\n    (let [dispatch-val (dispatch-fn a b c)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c)))\n  (-invoke [mf a b c d]\n    (let [dispatch-val (dispatch-fn a b c d)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d)))\n  (-invoke [mf a b c d e]\n    (let [dispatch-val (dispatch-fn a b c d e)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e)))\n  (-invoke [mf a b c d e f]\n    (let [dispatch-val (dispatch-fn a b c d e f)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f)))\n  (-invoke [mf a b c d e f g]\n    (let [dispatch-val (dispatch-fn a b c d e f g)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g)))\n  (-invoke [mf a b c d e f g h]\n    (let [dispatch-val (dispatch-fn a b c d e f g h)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h)))\n  (-invoke [mf a b c d e f g h i]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i)))\n  (-invoke [mf a b c d e f g h i j]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j)))\n  (-invoke [mf a b c d e f g h i j k]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k)))\n  (-invoke [mf a b c d e f g h i j k l]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l)))\n  (-invoke [mf a b c d e f g h i j k l m]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m)))\n  (-invoke [mf a b c d e f g h i j k l m n]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n)))\n  (-invoke [mf a b c d e f g h i j k l m n o]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o)))\n  (-invoke [mf a b c d e f g h i j k l m n o p]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o p)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o p)))\n  (-invoke [mf a b c d e f g h i j k l m n o p q]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o p q)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o p q)))\n  (-invoke [mf a b c d e f g h i j k l m n o p q r]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o p q r)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o p q r)))\n  (-invoke [mf a b c d e f g h i j k l m n o p q r s]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o p q r s)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o p q r s)))\n  (-invoke [mf a b c d e f g h i j k l m n o p q r s t]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o p q r s t)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o p q r s t)))\n  (-invoke [mf a b c d e f g h i j k l m n o p q r s t rest]\n    (let [dispatch-val (apply dispatch-fn a b c d e f g h i j k l m n o p q r s t rest)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (apply target-fn a b c d e f g h i j k l m n o p q r s t rest)))\n\n  IMultiFn\n  (-reset [mf]\n    (swap! method-table (fn [mf] {}))\n    (swap! method-cache (fn [mf] {}))\n    (swap! prefer-table (fn [mf] {}))\n    (swap! cached-hierarchy (fn [mf] nil))\n    mf)\n\n  (-add-method [mf dispatch-val method]\n    (swap! method-table assoc dispatch-val method)\n    (reset-cache method-cache method-table cached-hierarchy hierarchy)\n    mf)\n\n  (-remove-method [mf dispatch-val]\n    (swap! method-table dissoc dispatch-val)\n    (reset-cache method-cache method-table cached-hierarchy hierarchy)\n    mf)\n\n  (-get-method [mf dispatch-val]\n    (when-not (= @cached-hierarchy @hierarchy)\n      (reset-cache method-cache method-table cached-hierarchy hierarchy))\n    (if-let [target-fn (@method-cache dispatch-val)]\n      target-fn\n      (find-and-cache-best-method name dispatch-val hierarchy method-table\n        prefer-table method-cache cached-hierarchy default-dispatch-val)))\n\n  (-prefer-method [mf dispatch-val-x dispatch-val-y]\n    (when (prefers* dispatch-val-x dispatch-val-y prefer-table)\n      (throw (js\/Error. (str \"Preference conflict in multimethod '\" name \"': \" dispatch-val-y\n                   \" is already preferred to \" dispatch-val-x))))\n    (swap! prefer-table\n           (fn [old]\n             (assoc old dispatch-val-x\n                    (conj (get old dispatch-val-x #{})\n                          dispatch-val-y))))\n    (reset-cache method-cache method-table cached-hierarchy hierarchy))\n\n  (-methods [mf] @method-table)\n  (-prefers [mf] @prefer-table)\n  (-default-dispatch-val [mf] default-dispatch-val)\n  (-dispatch-fn [mf] dispatch-fn)\n\n  INamed\n  (-name [this] (-name name))\n  (-namespace [this] (-namespace name))\n\n  IHash\n  (-hash [this] (goog\/getUid this)))\n\n(defn remove-all-methods\n  \"Removes all of the methods of multimethod.\"\n [multifn]\n (-reset multifn))\n\n(defn remove-method\n  \"Removes the method of multimethod associated with dispatch-value.\"\n [multifn dispatch-val]\n (-remove-method multifn dispatch-val))\n\n(defn prefer-method\n  \"Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict\"\n  [multifn dispatch-val-x dispatch-val-y]\n  (-prefer-method multifn dispatch-val-x dispatch-val-y))\n\n(defn methods\n  \"Given a multimethod, returns a map of dispatch values -> dispatch fns\"\n  [multifn] (-methods multifn))\n\n(defn get-method\n  \"Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default\"\n  [multifn dispatch-val] (-get-method multifn dispatch-val))\n\n(defn prefers\n  \"Given a multimethod, returns a map of preferred value -> set of other values\"\n  [multifn] (-prefers multifn))\n\n(defn default-dispatch-val\n  \"Given a multimethod, return its default-dispatch-val.\"\n  [multifn] (-default-dispatch-val multifn))\n\n(defn dispatch-fn\n  \"Given a multimethod, return its dispatch-fn.\"\n  [multifn] (-dispatch-fn multifn))\n\n;; UUID\n(defprotocol IUUID \"A marker protocol for UUIDs\")\n\n(deftype UUID [uuid ^:mutable __hash]\n  IUUID\n\n  Object\n  (toString [_] uuid)\n  (equiv [this other]\n    (-equiv this other))\n\n  IEquiv\n  (-equiv [_ other]\n    (and (instance? UUID other) (identical? uuid (.-uuid other))))\n\n  IPrintWithWriter\n  (-pr-writer [_ writer _]\n    (-write writer (str \"#uuid \\\"\" uuid \"\\\"\")))\n\n  IHash\n  (-hash [this]\n    (when (nil? __hash)\n      (set! __hash (hash uuid)))\n    __hash)\n\n  IComparable\n  (-compare [this other]\n    (if (instance? UUID other)\n      (garray\/defaultCompare uuid (.-uuid other))\n      (throw (js\/Error. (str \"Cannot compare \" this \" to \" other))))))\n\n(defn uuid [s]\n  (assert (string? s))\n  (UUID. (.toLowerCase s) nil))\n\n(defn random-uuid []\n  (letfn [(hex [] (.toString (rand-int 16) 16))]\n    (let [rhex (.toString (bit-or 0x8 (bit-and 0x3 (rand-int 16))) 16)]\n      (uuid\n        (str (hex) (hex) (hex) (hex)\n             (hex) (hex) (hex) (hex) \"-\"\n             (hex) (hex) (hex) (hex) \"-\"\n             \"4\"   (hex) (hex) (hex) \"-\"\n             rhex  (hex) (hex) (hex) \"-\"\n             (hex) (hex) (hex) (hex)\n             (hex) (hex) (hex) (hex)\n             (hex) (hex) (hex) (hex))))))\n\n(defn uuid?\n  [x] (implements? IUUID x))\n\n;;; ExceptionInfo\n\n(defn- pr-writer-ex-info [obj writer opts]\n  (-write writer \"#error {:message \")\n  (pr-writer (.-message obj) writer opts)\n  (when (.-data obj)\n    (-write writer \", :data \")\n    (pr-writer (.-data obj) writer opts))\n  (when (.-cause obj)\n    (-write writer \", :cause \")\n    (pr-writer (.-cause obj) writer opts))\n  (-write writer \"}\"))\n\n(defn ^{:jsdoc [\"@constructor\"]}\n  ExceptionInfo [message data cause]\n  (let [e (js\/Error. message)]\n    (this-as this\n      (set! (.-message this) message)\n      (set! (.-data this) data)\n      (set! (.-cause this) cause)\n      (do\n        (set! (.-name this) (.-name e))\n        ;; non-standard\n        (set! (.-description this) (.-description e))\n        (set! (.-number this) (.-number e))\n        (set! (.-fileName this) (.-fileName e))\n        (set! (.-lineNumber this) (.-lineNumber e))\n        (set! (.-columnNumber this) (.-columnNumber e))\n        (set! (.-stack this) (.-stack e)))\n      this)))\n\n(set! (.. ExceptionInfo -prototype -__proto__) js\/Error.prototype)\n\n(extend-type ExceptionInfo\n  IPrintWithWriter\n  (-pr-writer [obj writer opts]\n    (pr-writer-ex-info obj writer opts)))\n\n(set! (.. ExceptionInfo -prototype -toString)\n  (fn []\n    (this-as this (pr-str* this))))\n\n(defn ex-info\n  \"Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.\"\n  ([msg data] (ex-info msg data nil))\n  ([msg data cause]\n    (ExceptionInfo. msg data cause)))\n\n(defn ex-data\n  \"Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.\"\n  [ex]\n  (when (instance? ExceptionInfo ex)\n    (.-data ex)))\n\n(defn ex-message\n  \"Returns the message attached to the given Error \/ ExceptionInfo object.\n  For non-Errors returns nil.\"\n  [ex]\n  (when (instance? js\/Error ex)\n    (.-message ex)))\n\n(defn ex-cause\n  \"Returns exception cause (an Error \/ ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.\"\n  [ex]\n  (when (instance? ExceptionInfo ex)\n    (.-cause ex)))\n\n(defn comparator\n  \"Returns an JavaScript compatible comparator based upon pred.\"\n  [pred]\n  (fn [x y]\n    (cond (pred x y) -1 (pred y x) 1 :else 0)))\n\n(defn ^boolean special-symbol?\n  \"Returns true if x names a special form\"\n  [x]\n  (contains?\n    '#{if def fn* do let* loop* letfn* throw try catch finally\n       recur new set! ns deftype* defrecord* . js* & quote case* var ns*}\n    x))\n\n(defn test\n  \"test [v] finds fn at key :test in var metadata and calls it,\n  presuming failure will throw exception\"\n  [v]\n  (let [f (.-cljs$lang$test v)]\n    (if f\n      (do (f) :ok)\n      :no-test)))\n\n\n(deftype TaggedLiteral [tag form]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n\n  IEquiv\n  (-equiv [this other]\n    (and (instance? TaggedLiteral other)\n         (= tag (.-tag other))\n         (= form (.-form other))))\n\n  IHash\n  (-hash [this]\n    (+ (* 31 (hash tag))\n       (hash form)))\n\n  ILookup\n  (-lookup [this v]\n    (-lookup this v nil))\n  (-lookup [this v not-found]\n    (case v\n      :tag tag\n      :form form\n      not-found))\n\n  IPrintWithWriter\n  (-pr-writer [o writer opts]\n    (-write writer (str \"#\" tag \" \"))\n    (pr-writer form writer opts)))\n\n(defn tagged-literal?\n  \"Return true if the value is the data representation of a tagged literal\"\n  [value]\n  (instance? TaggedLiteral value))\n\n(defn tagged-literal\n  \"Construct a data representation of a tagged literal from a\n  tag symbol and a form.\"\n  [tag form]\n  {:pre [(symbol? tag)]}\n  (TaggedLiteral. tag form))\n\n(def\n  ^{:private true\n    :jsdoc [\"@type {*}\"]}\n  js-reserved-arr\n  #js [\"arguments\" \"abstract\" \"await\" \"boolean\" \"break\" \"byte\" \"case\"\n       \"catch\" \"char\" \"class\" \"const\" \"continue\"\n       \"debugger\" \"default\" \"delete\" \"do\" \"double\"\n       \"else\" \"enum\" \"export\" \"extends\" \"final\"\n       \"finally\" \"float\" \"for\" \"function\" \"goto\" \"if\"\n       \"implements\" \"import\" \"in\" \"instanceof\" \"int\"\n       \"interface\" \"let\" \"long\" \"native\" \"new\"\n       \"package\" \"private\" \"protected\" \"public\"\n       \"return\" \"short\" \"static\" \"super\" \"switch\"\n       \"synchronized\" \"this\" \"throw\" \"throws\"\n       \"transient\" \"try\" \"typeof\" \"var\" \"void\"\n       \"volatile\" \"while\" \"with\" \"yield\" \"methods\"\n       \"null\" \"constructor\"])\n\n(def\n  ^{:jsdoc [\"@type {null|Object}\"]}\n  js-reserved nil)\n\n(defn- js-reserved? [x]\n  (when (nil? js-reserved)\n    (set! js-reserved\n      (reduce #(do (gobject\/set %1 %2 true) %1)\n        #js {} js-reserved-arr)))\n  (.hasOwnProperty js-reserved x))\n\n(defn- demunge-pattern []\n  (when-not DEMUNGE_PATTERN\n    (set! DEMUNGE_PATTERN\n      (let [ks (sort (fn [a b] (- (. b -length) (. a -length)))\n                 (js-keys DEMUNGE_MAP))]\n        (loop [ks ks ret \"\"]\n          (if (seq ks)\n            (recur\n              (next ks)\n              (str\n                (cond-> ret\n                  (not (identical? ret \"\")) (str \"|\"))\n                (first ks)))\n            (str ret \"|\\\\$\"))))))\n  DEMUNGE_PATTERN)\n\n(defn- ^string munge-str [name]\n  (let [sb (StringBuffer.)]\n    (loop [i 0]\n      (if (< i (. name -length))\n        (let [c (.charAt name i)\n              sub (gobject\/get CHAR_MAP c)]\n          (if-not (nil? sub)\n            (.append sb sub)\n            (.append sb c))\n          (recur (inc i)))))\n    (.toString sb)))\n\n(defn munge [name]\n  (let [name' (munge-str (str name))\n        name' (cond\n                (identical? name' \"..\") \"_DOT__DOT_\"\n                (js-reserved? name') (str name' \"$\")\n                :else name')]\n    (if (symbol? name)\n      (symbol name')\n      name')))\n\n(defn- demunge-str [munged-name]\n  (let [r (js\/RegExp. (demunge-pattern) \"g\")\n        munged-name (if (gstring\/endsWith munged-name \"$\")\n                      (.substring munged-name 0 (dec (. munged-name -length)))\n                      munged-name)]\n    (loop [ret \"\" last-match-end 0]\n      (if-let [match (.exec r munged-name)]\n        (let [[x] match]\n          (recur\n            (str ret\n              (.substring munged-name last-match-end\n                (- (. r -lastIndex) (. x -length)))\n              (if (identical? x \"$\") \"\/\" (gobject\/get DEMUNGE_MAP x)))\n            (. r -lastIndex)))\n        (str ret\n          (.substring munged-name last-match-end (.-length munged-name)))))))\n\n(defn demunge [name]\n  ((if (symbol? name) symbol str)\n    (let [name' (str name)]\n      (if (identical? name' \"_DOT__DOT_\")\n        \"..\"\n        (demunge-str name')))))\n\n(defonce ^{:jsdoc [\"@type {*}\"] :private true}\n  tapset nil)\n\n(defn- maybe-init-tapset []\n  (when (nil? tapset)\n    (set! tapset (atom #{}))))\n\n(defn add-tap\n  \"Adds f, a fn of one argument, to the tap set. This function will be called with\n  anything sent via tap>. Remember f in order to remove-tap\"\n  [f]\n  (maybe-init-tapset)\n  (swap! tapset conj f)\n  nil)\n\n(defn remove-tap\n  \"Remove f from the tap set.\"\n  [f]\n  (maybe-init-tapset)\n  (swap! tapset disj f)\n  nil)\n\n(defn ^boolean tap>\n  \"Sends x to any taps. Returns the result of *exec-tap-fn*, a Boolean value.\"\n  [x]\n  (maybe-init-tapset)\n  (*exec-tap-fn*\n    (fn []\n      (doseq [tap @tapset]\n        (try\n          (tap x)\n          (catch js\/Error ex))))))\n\n;; -----------------------------------------------------------------------------\n;; Bootstrap helpers - incompatible with advanced compilation\n\n(defn- ns-lookup\n  \"Bootstrap only.\"\n  [ns-obj k]\n  (fn [] (gobject\/get ns-obj k)))\n\n;; Bootstrap only\n(deftype Namespace [obj name]\n  Object\n  (findInternedVar [this sym]\n    (let [k (munge (str sym))]\n      (when ^boolean (gobject\/containsKey obj k)\n        (let [var-sym (symbol (str name) (str sym))\n              var-meta {:ns this}]\n          (Var. (ns-lookup obj k) var-sym var-meta)))))\n  (getName [_] name)\n  (toString [_]\n    (str name))\n  IEquiv\n  (-equiv [_ other]\n    (if (instance? Namespace other)\n      (= name (.-name other))\n      false))\n  IHash\n  (-hash [_]\n    (hash name)))\n\n(def\n  ^{:doc \"Bootstrap only.\" :jsdoc [\"@type {*}\"]}\n  NS_CACHE nil)\n\n(defn- find-ns-obj*\n  \"Bootstrap only.\"\n  [ctxt xs]\n  (cond\n    (nil? ctxt) nil\n    (nil? xs) ctxt\n    :else (recur (gobject\/get ctxt (first xs)) (next xs))))\n\n(defn find-ns-obj\n  \"Bootstrap only.\"\n  [ns]\n  (let [munged-ns (munge (str ns))\n        segs (.split munged-ns \".\")]\n    (case *target*\n      \"nodejs\"  (if ^boolean js\/COMPILED\n                  ; Under simple optimizations on nodejs, namespaces will be in module\n                  ; rather than global scope and must be accessed by a direct call to eval.\n                  ; The first segment may refer to an undefined variable, so its evaluation\n                  ; may throw ReferenceError.\n                  (find-ns-obj*\n                    (try\n                      (let [ctxt (js\/eval (first segs))]\n                        (when (and ctxt (object? ctxt))\n                          ctxt))\n                      (catch js\/ReferenceError e\n                        nil))\n                    (next segs))\n                  (find-ns-obj* goog\/global segs))\n      (\"default\" \"webworker\") (find-ns-obj* goog\/global segs)\n      (throw (js\/Error. (str \"find-ns-obj not supported for target \" *target*))))))\n\n(defn ns-interns*\n  \"Returns a map of the intern mappings for the namespace.\n  Bootstrap only.\"\n  [sym]\n  (let [ns-obj (find-ns-obj sym)\n        ns     (Namespace. ns-obj sym)]\n    (letfn [(step [ret k]\n              (let [var-sym (symbol (demunge k))]\n                (assoc ret\n                  var-sym (Var. #(gobject\/get ns-obj k)\n                            (symbol (str sym) (str var-sym)) {:ns ns}))))]\n      (reduce step {} (js-keys ns-obj)))))\n\n(defn create-ns\n  \"Create a new namespace named by the symbol. Bootstrap only.\"\n  ([sym]\n   (create-ns sym (find-ns-obj sym)))\n  ([sym ns-obj]\n   (Namespace. ns-obj sym)))\n\n(defn find-ns\n  \"Returns the namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only.\"\n  [ns]\n  (when (nil? NS_CACHE)\n    (set! NS_CACHE (atom {})))\n  (let [the-ns (get @NS_CACHE ns)]\n    (if-not (nil? the-ns)\n      the-ns\n      (let [ns-obj (find-ns-obj ns)]\n        (when-not (nil? ns-obj)\n          (let [new-ns (create-ns ns ns-obj)]\n            (swap! NS_CACHE assoc ns new-ns)\n            new-ns))))))\n\n(defn find-macros-ns\n  \"Returns the macros namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only.\"\n  [ns]\n  (when (nil? NS_CACHE)\n    (set! NS_CACHE (atom {})))\n  (let [ns-str (str ns)\n        ns (if (not ^boolean (gstring\/contains ns-str \"$macros\"))\n             (symbol (str ns-str \"$macros\"))\n             ns)\n        the-ns (get @NS_CACHE ns)]\n    (if-not (nil? the-ns)\n      the-ns\n      (let [ns-obj (find-ns-obj ns)]\n       (when-not (nil? ns-obj)\n         (let [new-ns (create-ns ns ns-obj)]\n           (swap! NS_CACHE assoc ns new-ns)\n           new-ns))))))\n\n(defn ns-name\n  \"Returns the name of the namespace, a Namespace object.\n  Bootstrap only.\"\n  [ns-obj]\n  (.-name ns-obj))\n\n(defn uri?\n  \"Returns true x is a goog.Uri instance.\"\n  {:added \"1.9\"}\n  [x]\n  (instance? goog.Uri x))\n\n(defn- maybe-enable-print! []\n  (cond\n    (exists? js\/console)\n    (enable-console-print!)\n\n    (or (identical? *target* \"nashorn\")\n        (identical? *target* \"graaljs\"))\n    (let [system (.type js\/Java \"java.lang.System\")]\n      (set! *print-newline* false)\n      (set-print-fn!\n        (fn []\n          (let [xs (js-arguments)\n                s  (.join (garray\/clone xs) \"\")]\n            (.println (.-out system) s))))\n      (set-print-err-fn!\n        (fn []\n          (let [xs (js-arguments)\n                s  (.join (garray\/clone xs) \"\")]\n            (.println (.-error system) s)))))))\n\n(maybe-enable-print!)\n\n(defonce\n  ^{:doc \"Runtime environments may provide a way to evaluate ClojureScript\n  forms. Whatever function *eval* is bound to will be passed any forms which\n  should be evaluated.\" :dynamic true}\n  *eval*\n  (fn [_]\n    (throw (js\/Error. \"cljs.core\/*eval* not bound\"))))\n\n(defn eval\n  \"Evaluates the form data structure (not text!) and returns the result.\n  Delegates to cljs.core\/*eval*. Intended for use in self-hosted ClojureScript,\n  which sets up an implementation of cljs.core\/*eval* for that environment.\"\n  [form]\n  (*eval* form))\n\n(when ^boolean js\/COMPILED\n  (when (identical? \"nodejs\" *target*)\n    (set! goog\/global js\/global))\n  (cond\n    (identical? \"window\" *global*) (set! goog\/global js\/window)\n    (identical? \"self\" *global*) (set! goog\/global js\/self)\n    (identical? \"global\" *global*) (set! goog\/global js\/global)))\n","(ns frontend.db\n  (:require [clojure.core.async :as async]\n            [datascript.core :as d]\n            [frontend.db-schema :as db-schema]\n            [frontend.db.conn :as conn]\n            [frontend.db.default :as default-db]\n            [frontend.db.model]\n            [frontend.db.query-custom]\n            [frontend.db.query-react]\n            [frontend.db.react :as react]\n            [frontend.db.utils]\n            [frontend.db.persist :as db-persist]\n            [frontend.db.migrate :as db-migrate]\n            [frontend.namespaces :refer [import-vars]]\n            [frontend.state :as state]\n            [frontend.config :as config]\n            [frontend.util :as util]\n            [promesa.core :as p]\n            [electron.ipc :as ipc]))\n\n(import-vars\n [frontend.db.conn\n  ;; TODO: remove later\n  conns\n  get-repo-path\n  datascript-db\n  get-conn\n  me-tx\n  remove-conn!]\n\n [frontend.db.utils\n  date->int db->json db->edn-str db->string get-max-tx-id get-tx-id\n  group-by-page seq-flatten sort-by-pos\n  string->db\n\n  entity pull pull-many transact! get-key-value]\n\n [frontend.db.model\n  blocks-count blocks-count-cache clean-export!  cloned? delete-blocks get-pre-block\n  delete-file! delete-file-blocks! delete-page-blocks delete-file-pages! delete-file-tx delete-files delete-pages-by-files\n  filter-only-public-pages-and-blocks get-all-block-contents get-all-tagged-pages\n  get-all-templates get-block-and-children sub-block-and-children get-block-by-uuid get-block-children sort-by-left\n  get-block-parent get-block-parents parents-collapsed? get-block-referenced-blocks\n  get-block-children-ids get-block-immediate-children get-block-page\n  get-blocks-contents get-custom-css\n  get-date-scheduled-or-deadlines get-db-type\n  get-file-blocks get-file-contents get-file-last-modified-at get-file get-file-page get-file-page-id file-exists?\n  get-file-pages get-files get-files-blocks get-files-full get-journals-length\n  get-latest-journals get-matched-blocks get-page get-page-alias get-page-alias-names get-page-blocks get-page-linked-refs-refed-pages\n  get-page-blocks-count get-page-blocks-no-cache get-page-file get-page-format get-page-properties\n  get-page-referenced-blocks get-page-referenced-pages get-page-unlinked-references get-page-referenced-blocks-no-cache\n  get-all-pages get-pages get-pages-relation get-pages-that-mentioned-page get-public-pages get-tag-pages\n  journal-page? mark-repo-as-cloned! page-alias-set pull-block\n  set-file-last-modified-at! transact-files-db! page-empty? page-empty-or-dummy? get-alias-source-page\n  set-file-content! has-children? get-namespace-pages get-all-namespace-relation get-pages-by-name-partition]\n\n [frontend.db.react\n  get-current-page set-key-value\n  remove-key! remove-q! remove-query-component! add-q! add-query-component! clear-query-state!\n  clear-query-state-without-refs-and-embeds! kv q\n  query-state query-components query-entity-in-component remove-custom-query! set-new-result! sub-key-value refresh!]\n\n [frontend.db.query-custom\n  custom-query]\n\n [frontend.db.query-react\n  react-query custom-query-result-transform]\n\n [frontend.db.default built-in-pages-names built-in-pages])\n\n(defn get-schema-version [db]\n  (d\/q\n    '[:find ?v .\n      :where\n      [_ :schema\/version ?v]]\n    db))\n\n(defn old-schema?\n  [db]\n  (let [v (get-schema-version db)]\n    (if (integer? v)\n      (> db-schema\/version v)\n      ;; backward compatibility\n      true)))\n\n;; persisting DBs between page reloads\n(defn persist! [repo]\n  (let [key (datascript-db repo)\n        conn (get-conn repo false)]\n    (when conn\n      (let [db (d\/db conn)\n            db-str (if db (db->string db) \"\")]\n        (p\/let [_ (db-persist\/save-graph! key db-str)])))))\n\n(defonce persistent-jobs (atom {}))\n\n(defn clear-repo-persistent-job!\n  [repo]\n  (when-let [old-job (get @persistent-jobs repo)]\n    (js\/clearTimeout old-job)))\n\n(defn persist-if-idle!\n  [repo]\n  (clear-repo-persistent-job! repo)\n  (let [job (js\/setTimeout\n             (fn []\n               (if (and (state\/input-idle? repo)\n                        (state\/db-idle? repo))\n                 (persist! repo)\n                 ;; (state\/set-db-persisted! repo true)\n\n                 (persist-if-idle! repo)))\n             3000)]\n    (swap! persistent-jobs assoc repo job)))\n\n;; only save when user's idle\n\n;; TODO: pass as a parameter\n(defonce *sync-search-indice-f (atom nil))\n(defn- repo-listen-to-tx!\n  [repo conn]\n  (d\/listen! conn :persistence\n             (fn [tx-report]\n               ;; reactive components\n               (react\/refresh! repo tx-report)\n\n               (when (and\n                      (not config\/publishing?)\n                      (not (:new-graph? (:tx-meta tx-report)))) ; skip initial txs\n                 (if (util\/electron?)\n                   (when-not (:dbsync? (:tx-meta tx-report))\n                     ;; sync with other windows if needed\n                     (p\/let [graph-has-other-window? (ipc\/ipc \"graphHasOtherWindow\" repo)]\n                       (when graph-has-other-window?\n                         (ipc\/ipc \"dbsync\" repo {:data (db->string (:tx-data tx-report))}))))\n                   (do\n                     (state\/set-last-transact-time! repo (util\/time-ms))\n                     (persist-if-idle! repo)))\n\n                 ;; rebuild search indices\n                 (let [data (:tx-data tx-report)\n                       datoms (filter\n                               (fn [datom]\n                                 (contains? #{:block\/name :block\/content} (:a datom)))\n                               data)]\n                   (when-let [f @*sync-search-indice-f]\n                     (f datoms)))))))\n\n(defn listen-and-persist!\n  [repo]\n  (when-let [conn (get-conn repo false)]\n    (repo-listen-to-tx! repo conn)))\n\n(defn start-db-conn!\n  ([me repo]\n   (start-db-conn! me repo {}))\n  ([me repo option]\n   (conn\/start! me repo\n                (assoc option\n                       :listen-handler listen-and-persist!))))\n\n(defn restore-graph!\n  \"Restore db from serialized db cache, and swap into the current db status\"\n  [repo me]\n  (p\/let [db-name (datascript-db repo)\n          db-conn (d\/create-conn db-schema\/schema)\n          _ (swap! conns assoc db-name db-conn)\n          stored (db-persist\/get-serialized-graph db-name)\n          logged? (:name me)\n          _ (if stored\n              (let [stored-db (try (string->db stored)\n                                   (catch js\/Error _e\n                                     (js\/console.warn \"Invalid graph cache\")\n                                     (d\/empty-db db-schema\/schema)))\n                    attached-db (d\/db-with stored-db (concat\n                                                      [(me-tx stored-db me)]\n                                                      default-db\/built-in-pages)) ;; TODO bug overriding uuids?\n                    db (if (old-schema? attached-db)\n                         (db-migrate\/migrate attached-db)\n                         attached-db)]\n                (conn\/reset-conn! db-conn db))\n              (when logged?\n                (d\/transact! db-conn [(me-tx (d\/db db-conn) me)])))]\n    (d\/transact! db-conn [{:schema\/version db-schema\/version}])))\n\n;; TODO: only restore the current graph instead of all the graphs to speedup and\n;; reduce memory usage. pub event :graph\/ready when a graph is restored, and finish the TODOs in :graph\/ready\n(defn restore!\n  [{:keys [repos] :as me} _old-db-schema restore-config-handler]\n  (doall\n   (for [{:keys [url]} repos]\n     (let [repo url]\n       (p\/let [_ (restore-graph! repo me)]\n         (restore-config-handler repo)\n         (listen-and-persist! repo))))))\n\n(defn run-batch-txs!\n  []\n  (let [chan (state\/get-db-batch-txs-chan)]\n    (async\/go-loop []\n      (let [f (async\/<! chan)]\n        (f))\n      (recur))\n    chan))\n\n(defn new-block-id\n  []\n  (d\/squuid))\n","(ns frontend.handler.editor\n  (:require [\"\/frontend\/utils\" :as utils]\n            [cljs.core.match :refer [match]]\n            [clojure.set :as set]\n            [clojure.string :as string]\n            [clojure.walk :as w]\n            [clojure.zip :as zip]\n            [dommy.core :as dom]\n            [frontend.commands :as commands\n             :refer [*angle-bracket-caret-pos *show-block-commands\n                     *show-commands *slash-caret-pos]]\n            [frontend.config :as config]\n            [frontend.date :as date]\n            [frontend.db :as db]\n            [frontend.db-schema :as db-schema]\n            [frontend.db.model :as db-model]\n            [frontend.db.utils :as db-utils]\n            [frontend.diff :as diff]\n            [frontend.format.block :as block]\n            [frontend.format.mldoc :as mldoc]\n            [frontend.fs :as fs]\n            [frontend.handler.block :as block-handler]\n            [frontend.handler.common :as common-handler]\n            [frontend.handler.export :as export]\n            [frontend.handler.image :as image-handler]\n            [frontend.handler.notification :as notification]\n            [frontend.handler.repeated :as repeated]\n            [frontend.handler.repo :as repo-handler]\n            [frontend.handler.route :as route-handler]\n            [frontend.image :as image]\n            [frontend.idb :as idb]\n            [frontend.mobile.util :as mobile-util]\n            [frontend.modules.outliner.core :as outliner-core]\n            [frontend.modules.outliner.datascript :as ds]\n            [frontend.modules.outliner.tree :as tree]\n            [frontend.search :as search]\n            [frontend.state :as state]\n            [frontend.template :as template]\n            [frontend.text :as text]\n            [frontend.utf8 :as utf8]\n            [frontend.util :as util :refer [profile]]\n            [frontend.util.clock :as clock]\n            [frontend.util.cursor :as cursor]\n            [frontend.util.drawer :as drawer]\n            [frontend.util.marker :as marker]\n            [frontend.util.page-property :as page-property]\n            [frontend.util.property :as property]\n            [frontend.util.priority :as priority]\n            [frontend.util.thingatpt :as thingatpt]\n            [frontend.util.list :as list]\n            [goog.dom :as gdom]\n            [goog.dom.classes :as gdom-classes]\n            [goog.object :as gobj]\n            [lambdaisland.glogi :as log]\n            [medley.core :as medley]\n            [promesa.core :as p]\n            [frontend.util.keycode :as keycode]))\n\n;; FIXME: should support multiple images concurrently uploading\n\n(defonce *asset-uploading? (atom false))\n(defonce *asset-uploading-process (atom 0))\n(defonce *selected-text (atom nil))\n\n(defn- get-selection-and-format\n  []\n  (when-let [block (state\/get-edit-block)]\n    (when (:block\/uuid block)\n      (when-let [edit-id (state\/get-edit-input-id)]\n        (when-let [input (gdom\/getElement edit-id)]\n          (let [selection-start (util\/get-selection-start input)\n                selection-end (util\/get-selection-end input)\n                value (gobj\/get input \"value\")\n                selection (when (not= selection-start selection-end)\n                            (subs value selection-start selection-end))\n                selection-start (+ selection-start\n                                   (count (take-while #(= \" \" %) selection)))\n                selection-end (- selection-end\n                                 (count (take-while #(= \" \" %) (reverse selection))))]\n            {:selection-start selection-start\n             :selection-end selection-end\n             :selection (some-> selection\n                                string\/trim)\n             :format (:block\/format block)\n             :value value\n             :block block\n             :edit-id edit-id\n             :input input}))))))\n\n(defn- format-text!\n  [pattern-fn]\n  (when-let [m (get-selection-and-format)]\n    (let [{:keys [selection-start selection-end format selection value edit-id input]} m\n          pattern (pattern-fn format)\n          pattern-count (count pattern)\n          pattern-prefix (subs value (max 0 (- selection-start pattern-count)) selection-start)\n          pattern-suffix (subs value selection-end (min (count value) (+ selection-end pattern-count)))\n          already-wrapped? (= pattern pattern-prefix pattern-suffix)\n          prefix (if already-wrapped?\n                   (subs value 0 (- selection-start pattern-count))\n                   (subs value 0 selection-start))\n          postfix (if already-wrapped?\n                    (subs value (+ selection-end pattern-count))\n                    (subs value selection-end))\n          inner-value (cond-> selection\n                        (not already-wrapped?)\n                        (#(str pattern % pattern)))\n          new-value (str prefix inner-value postfix)]\n      (state\/set-edit-content! edit-id new-value)\n      (cond\n        already-wrapped? (cursor\/set-selection-to input (- selection-start pattern-count) (- selection-end pattern-count))\n        selection (cursor\/move-cursor-to input (+ selection-end pattern-count))\n        :else (cursor\/set-selection-to input (+ selection-start pattern-count) (+ selection-end pattern-count))))))\n\n(defn bold-format! []\n  (format-text! config\/get-bold))\n\n(defn italics-format! []\n  (format-text! config\/get-italic))\n\n(defn highlight-format! []\n  (when-let [block (state\/get-edit-block)]\n    (let [format (:block\/format block)]\n      (format-text! #(config\/get-highlight format)))))\n\n(defn strike-through-format! []\n  (format-text! config\/get-strike-through))\n\n(defn html-link-format!\n  ([]\n   (html-link-format! nil))\n  ([link]\n   (when-let [m (get-selection-and-format)]\n     (let [{:keys [selection-start selection-end format selection value edit-id input]} m\n           cur-pos (cursor\/pos input)\n           empty-selection? (= selection-start selection-end)\n           selection-link? (and selection (or (util\/starts-with? selection \"http:\/\/\")\n                                              (util\/starts-with? selection \"https:\/\/\")))\n           [content forward-pos] (cond\n                                   empty-selection?\n                                   (config\/get-empty-link-and-forward-pos format)\n\n                                   link\n                                   (config\/with-label-link format selection link)\n\n                                   selection-link?\n                                   (config\/with-default-link format selection)\n\n                                   :else\n                                   (config\/with-default-label format selection))\n           new-value (str\n                      (subs value 0 selection-start)\n                      content\n                      (subs value selection-end))\n           cur-pos (or selection-start cur-pos)]\n       (state\/set-edit-content! edit-id new-value)\n       (cursor\/move-cursor-to input (+ cur-pos forward-pos))))))\n\n(defn open-block-in-sidebar!\n  [block-id]\n  (when block-id\n    (when-let [block (db\/pull [:block\/uuid block-id])]\n      (let [page? (nil? (:block\/page block))]\n        (state\/sidebar-add-block!\n         (state\/get-current-repo)\n         (:db\/id block)\n         (if page? :page :block)\n         block)))))\n\n(defn reset-cursor-range!\n  [node]\n  (when node\n    (state\/set-cursor-range! (util\/caret-range node))))\n\n(defn restore-cursor-pos!\n  [id markup]\n  (when-let [node (gdom\/getElement (str id))]\n    (when-let [cursor-range (state\/get-cursor-range)]\n      (when-let [range cursor-range]\n        (let [pos (:editor\/pos @state\/state)\n              pos (or pos (diff\/find-position markup range))]\n          (cursor\/move-cursor-to node pos)\n          (state\/set-state! :editor\/pos nil))))))\n\n(defn highlight-block!\n  [block-uuid]\n  (let [blocks (array-seq (js\/document.getElementsByClassName (str block-uuid)))]\n    (doseq [block blocks]\n      (dom\/add-class! block \"block-highlight\"))))\n\n(defn unhighlight-blocks!\n  []\n  (let [blocks (some->> (array-seq (js\/document.getElementsByClassName \"block-highlight\"))\n                        (repeat 2)\n                        (apply concat))]\n    (doseq [block blocks]\n      (gdom-classes\/remove block \"block-highlight\"))))\n\n(defn- get-edit-input-id-with-block-id\n  [block-id]\n  (when-let [first-block (util\/get-first-block-by-id block-id)]\n    (string\/replace (gobj\/get first-block \"id\")\n                    \"ls-block\"\n                    \"edit-block\")))\n\n(defn clear-selection!\n  []\n  (util\/select-unhighlight! (dom\/by-class \"selected\"))\n  (state\/clear-selection!))\n\n(defn- text-range-by-lst-fst-line [content [direction pos]]\n  (case direction\n    :up\n    (let [last-new-line (or (string\/last-index-of content \\newline) -1)\n          end (+ last-new-line pos 1)]\n      (subs content 0 end))\n    :down\n    (-> (string\/split-lines content)\n        first\n        (or \"\")\n        (subs 0 pos))))\n\n;; id: block dom id, \"ls-block-counter-uuid\"\n(defn edit-block!\n  ([block pos id]\n   (edit-block! block pos id nil))\n  ([block pos id {:keys [custom-content tail-len move-cursor?]\n                  :or {tail-len 0\n                       move-cursor? true}}]\n   (when-not config\/publishing?\n     (when-let [block-id (:block\/uuid block)]\n       (let [block (or (db\/pull [:block\/uuid block-id]) block)\n             edit-input-id (if (uuid? id)\n                             (get-edit-input-id-with-block-id id)\n                             (-> (str (subs id 0 (- (count id) 36)) block-id)\n                                 (string\/replace \"ls-block\" \"edit-block\")))\n             content (or custom-content (:block\/content block) \"\")\n             content-length (count content)\n             text-range (cond\n                          (vector? pos)\n                          (text-range-by-lst-fst-line content pos)\n\n                          (and (> tail-len 0) (>= (count content) tail-len))\n                          (subs content 0 (- (count content) tail-len))\n\n                          (or (= :max pos) (<= content-length pos))\n                          content\n\n                          :else\n                          (subs content 0 pos))\n             content (-> (property\/remove-built-in-properties (:block\/format block)\n                                                              content)\n                         (drawer\/remove-logbook))]\n         (clear-selection!)\n         (state\/set-editing! edit-input-id content block text-range move-cursor?))))))\n\n(defn- another-block-with-same-id-exists?\n  [current-id block-id]\n  (and (string? block-id)\n       (util\/uuid-string? block-id)\n       (not= current-id (cljs.core\/uuid block-id))\n       (db\/entity [:block\/uuid (cljs.core\/uuid block-id)])))\n\n(defn- attach-page-properties-if-exists!\n  [block]\n  (if (and (:block\/pre-block? block)\n           (seq (:block\/properties block)))\n    (let [page-properties (:block\/properties block)\n          str->page (fn [n] (block\/page-name->map n true))\n          refs (->> page-properties\n                    (filter (fn [[_ v]] (coll? v)))\n                    (vals)\n                    (apply concat)\n                    (set)\n                    (map str->page)\n                    (concat (:block\/refs block))\n                    (util\/distinct-by :block\/name))\n          {:keys [tags alias]} page-properties\n          page-tx (let [id (:db\/id (:block\/page block))\n                        retract-attributes (when id\n                                             (mapv (fn [attribute]\n                                                     [:db\/retract id attribute])\n                                                   [:block\/properties :block\/tags :block\/alias]))\n                        tags (->> (map str->page tags) (remove nil?))\n                        alias (->> (map str->page alias) (remove nil?))\n                        tx (cond-> {:db\/id id\n                                    :block\/properties page-properties}\n                             (seq tags)\n                             (assoc :block\/tags tags)\n                             (seq alias)\n                             (assoc :block\/alias alias))]\n                    (conj retract-attributes tx))]\n      (assoc block\n             :block\/refs refs\n             :db\/other-tx page-tx))\n    block))\n\n(defn- remove-non-existed-refs!\n  [refs]\n  (remove (fn [x] (or\n                   (and (vector? x)\n                        (= :block\/uuid (first x))\n                        (nil? (db\/entity x)))\n                   (nil? x))) refs))\n\n(defn- with-marker-time\n  [content block format new-marker old-marker]\n  (if (and (state\/enable-timetracking?) new-marker)\n    (try\n      (let [logbook-exists? (and (:block\/body block) (drawer\/get-logbook (:block\/body block)))\n            new-marker (string\/trim (string\/lower-case (name new-marker)))\n            old-marker (when old-marker (string\/trim (string\/lower-case (name old-marker))))\n            new-content (cond\n                          (or (and (nil? old-marker) (or (= new-marker \"doing\")\n                                                         (= new-marker \"now\")))\n                              (and (= old-marker \"todo\") (= new-marker \"doing\"))\n                              (and (= old-marker \"later\") (= new-marker \"now\"))\n                              (and (= old-marker new-marker \"now\") (not logbook-exists?))\n                              (and (= old-marker new-marker \"doing\") (not logbook-exists?)))\n                          (clock\/clock-in format content)\n\n                          (or\n                           (and (= old-marker \"doing\") (= new-marker \"todo\"))\n                           (and (= old-marker \"now\") (= new-marker \"later\"))\n                           (and (contains? #{\"now\" \"doing\"} old-marker)\n                                (= new-marker \"done\")))\n                          (clock\/clock-out format content)\n\n                          :else\n                          content)]\n        new-content)\n      (catch js\/Error _e\n        content))\n    content))\n\n(defn- with-timetracking\n  [block value]\n  (if (and (state\/enable-timetracking?)\n           (not= (:block\/content block) value))\n    (let [format (:block\/format block)\n          new-marker (last (util\/safe-re-find (marker\/marker-pattern format) (or value \"\")))\n          new-value (with-marker-time value block format\n                      new-marker\n                      (:block\/marker block))]\n      new-value)\n    value))\n\n(defn wrap-parse-block\n  [{:block\/keys [content format left page uuid level pre-block?] :as block}]\n  (let [block (or (and (:db\/id block) (db\/pull (:db\/id block))) block)\n        block (merge block\n                     (block\/parse-title-and-body uuid format pre-block? (:block\/content block)))\n        properties (:block\/properties block)\n        real-content (:block\/content block)\n        content (if (and (seq properties) real-content (not= real-content content))\n                  (property\/with-built-in-properties properties content format)\n                  content)\n        content (drawer\/with-logbook block content)\n        content (with-timetracking block content)\n        first-block? (= left page)\n        ast (mldoc\/->edn (string\/trim content) (mldoc\/default-config format))\n        first-elem-type (first (ffirst ast))\n        first-elem-meta (second (ffirst ast))\n        properties? (contains? #{\"Property_Drawer\" \"Properties\"} first-elem-type)\n        markdown-heading? (and (= format :markdown)\n                               (= \"Heading\" first-elem-type)\n                               (nil? (:size first-elem-meta)))\n        block-with-title? (mldoc\/block-with-title? first-elem-type)\n        content (string\/triml content)\n        content (string\/replace content (util\/format \"((%s))\" (str uuid)) \"\")\n        [content content'] (cond\n                             (and first-block? properties?)\n                             [content content]\n\n                             markdown-heading?\n                             [content content]\n\n                             :else\n                             (let [content' (str (config\/get-block-pattern format) (if block-with-title? \" \" \"\\n\") content)]\n                               [content content']))\n        block (assoc block\n                     :block\/content content'\n                     :block\/format format)\n        block (apply dissoc block (remove #{:block\/pre-block?} db-schema\/retract-attributes))\n        block (block\/parse-block block)\n        block (if (and first-block? (:block\/pre-block? block))\n                block\n                (dissoc block :block\/pre-block?))\n        block (update block :block\/refs remove-non-existed-refs!)\n        block (attach-page-properties-if-exists! block)\n        new-properties (merge\n                        (select-keys properties (property\/built-in-properties))\n                        (:block\/properties block))]\n    (-> block\n        (dissoc :block\/top?\n                :block\/bottom?)\n        (assoc :block\/content content\n               :block\/properties new-properties)\n        (merge (if level {:block\/level level} {})))))\n\n(defn- save-block-inner!\n  [repo block value {}]\n  (let [block (assoc block :block\/content value)\n        block (apply dissoc block db-schema\/retract-attributes)]\n    (profile\n     \"Save block: \"\n     (let [block (wrap-parse-block block)]\n       (-> (outliner-core\/block block)\n           (outliner-core\/save-node))\n\n       ;; sanitized page name changed\n       (when-let [title (get-in block [:block\/properties :title])]\n         (when-let [old-page-name (:block\/name (db\/entity (:db\/id (:block\/page block))))]\n           (when (and (:block\/pre-block? block)\n                      (not (string\/blank? title))\n                      (not= (util\/page-name-sanity-lc title) old-page-name))\n             (state\/pub-event! [:page\/title-property-changed old-page-name title]))))))\n\n    (repo-handler\/push-if-auto-enabled! repo)))\n\n(defn save-block-if-changed!\n  ([block value]\n   (save-block-if-changed! block value nil))\n  ([block value\n    {:keys [force?]\n     :as opts}]\n   (let [{:block\/keys [uuid page format repo content properties]} block\n         repo (or repo (state\/get-current-repo))\n         format (or format (state\/get-preferred-format))\n         page (db\/entity repo (:db\/id page))\n         block-id (when (map? properties) (get properties :id))\n         content (-> (property\/remove-built-in-properties format content)\n                     (drawer\/remove-logbook))]\n     (cond\n       (another-block-with-same-id-exists? uuid block-id)\n       (notification\/show!\n        [:p.content\n         (util\/format \"Block with the id %s already exists!\" block-id)]\n        :error)\n\n       force?\n       (save-block-inner! repo block value opts)\n\n       :else\n       (let [content-changed? (not= (string\/trim content) (string\/trim value))]\n         (when (and content-changed? page)\n           (save-block-inner! repo block value opts)))))))\n\n(defn- compute-fst-snd-block-text\n  [value pos]\n  (when (string? value)\n    (let [fst-block-text (subs value 0 pos)\n          snd-block-text (string\/triml (subs value pos))]\n      [fst-block-text snd-block-text])))\n\n(defn outliner-insert-block!\n  [config current-block new-block {:keys [sibling? txs-state]}]\n  (let [ref-top-block? (and (:ref? config)\n                            (not (:ref-child? config)))\n        skip-save-current-block? (:skip-save-current-block? config)\n        [current-node new-node]\n        (mapv outliner-core\/block [current-block new-block])\n        has-children? (db\/has-children? (state\/get-current-repo)\n                                        (tree\/-get-id current-node))\n        sibling? (cond\n                   ref-top-block?\n                   false\n\n                   (boolean? sibling?)\n                   sibling?\n\n                   (util\/collapsed? current-block)\n                   true\n\n                   :else\n                   (not has-children?))\n        txs-state' (or txs-state (ds\/new-outliner-txs-state))]\n    (ds\/auto-transact!\n     [txs-state txs-state']\n     {:outliner-op :save-and-insert-node\n      :skip-transact? false}\n     (let [*blocks (atom [current-node])]\n       (when-not skip-save-current-block?\n         (outliner-core\/save-node current-node {:txs-state txs-state}))\n       (outliner-core\/insert-node new-node current-node sibling? {:blocks-atom *blocks\n                                                                  :txs-state txs-state})\n       {:blocks @*blocks\n        :sibling? sibling?}))))\n\n(defn- block-self-alone-when-insert?\n  [config uuid]\n  (let [current-page (state\/get-current-page)\n        block-id (or\n                  (and (:id config)\n                       (util\/uuid-string? (:id config))\n                       (:id config))\n                  (and current-page\n                       (util\/uuid-string? current-page)\n                       current-page))]\n    (= uuid (and block-id (medley\/uuid block-id)))))\n\n(defn insert-new-block-before-block-aux!\n  [config block value\n   {:keys [ok-handler]\n    :as _opts}]\n  (let [input (gdom\/getElement (state\/get-edit-input-id))\n        pos (cursor\/pos input)\n        [fst-block-text snd-block-text] (compute-fst-snd-block-text value pos)\n        current-block (assoc block :block\/content snd-block-text)\n        current-block (apply dissoc current-block db-schema\/retract-attributes)\n        current-block (wrap-parse-block current-block)\n        new-m {:block\/uuid (db\/new-block-id)\n               :block\/content fst-block-text}\n        prev-block (-> (merge (select-keys block [:block\/parent :block\/left :block\/format\n                                                  :block\/page :block\/journal?]) new-m)\n                       (wrap-parse-block))\n        left-block (db\/pull (:db\/id (:block\/left block)))]\n    (profile\n     \"outliner insert block\"\n     (let [txs-state (ds\/new-outliner-txs-state)]\n       (outliner-core\/save-node (outliner-core\/block current-block) {:txs-state txs-state})\n       (let [sibling? (not= (:db\/id left-block) (:db\/id (:block\/parent block)))]\n         (outliner-insert-block! config left-block prev-block {:sibling? sibling?\n                                                               :txs-state txs-state}))))\n    (ok-handler prev-block)))\n\n(defn insert-new-block-aux!\n  [config\n   {:block\/keys [uuid]\n    :as block}\n   value\n   {:keys [ok-handler]\n    :as _opts}]\n  (let [block-self? (block-self-alone-when-insert? config uuid)\n        input (gdom\/getElement (state\/get-edit-input-id))\n        pos (cursor\/pos input)\n        [fst-block-text snd-block-text] (compute-fst-snd-block-text value pos)\n        current-block (assoc block :block\/content fst-block-text)\n        current-block (apply dissoc current-block db-schema\/retract-attributes)\n        current-block (wrap-parse-block current-block)\n        new-m {:block\/uuid (db\/new-block-id)\n               :block\/content snd-block-text}\n        next-block (-> (merge (select-keys block [:block\/parent :block\/left :block\/format\n                                                  :block\/page :block\/journal?]) new-m)\n                       (wrap-parse-block))\n        sibling? (when block-self? false)]\n    (profile\n     \"outliner insert block\"\n     (outliner-insert-block! config current-block next-block {:sibling? sibling?}))\n    ;; WORKAROUND: The block won't refresh itself even if the content is empty.\n    (when block-self?\n      (gobj\/set input \"value\" \"\"))\n    (profile \"ok handler\" (ok-handler next-block))))\n\n(defn clear-when-saved!\n  []\n  (state\/set-editor-show-input! nil)\n  (state\/set-editor-show-zotero! false)\n  (state\/set-editor-show-date-picker! false)\n  (state\/set-editor-show-page-search! false)\n  (state\/set-editor-show-block-search! false)\n  (state\/set-editor-show-template-search! false)\n  (commands\/restore-state true))\n\n(defn get-state\n  []\n  (let [[{:keys [on-hide block block-id block-parent-id format sidebar?]} id config] (state\/get-editor-args)\n        node (gdom\/getElement id)]\n    (when node\n      (let [value (gobj\/get node \"value\")\n            pos (util\/get-selection-start node)]\n        {:config config\n         :on-hide on-hide\n         :sidebar? sidebar?\n         :format format\n         :id id\n         :block (or (db\/pull [:block\/uuid (:block\/uuid block)]) block)\n         :block-id block-id\n         :block-parent-id block-parent-id\n         :node node\n         :value value\n         :pos pos}))))\n\n(defn insert-new-block!\n  ([state]\n   (insert-new-block! state nil))\n  ([_state block-value]\n   (when (and (not config\/publishing?)\n              (not= :insert (state\/get-editor-op)))\n     (state\/set-editor-op! :insert)\n     (when-let [state (get-state)]\n       (let [{:keys [block value id config]} state\n             value (if (string? block-value) block-value value)\n             block-id (:block\/uuid block)\n             block (or (db\/pull [:block\/uuid block-id])\n                       block)\n             block-self? (block-self-alone-when-insert? config block-id)\n             input (gdom\/getElement (state\/get-edit-input-id))\n             pos (cursor\/pos input)\n             [fst-block-text snd-block-text] (compute-fst-snd-block-text value pos)\n             insert-fn (match (mapv boolean [block-self? (seq fst-block-text) (seq snd-block-text)])\n                         [true _ _] insert-new-block-aux!\n                         [_ false true] insert-new-block-before-block-aux!\n                         [_ _ _] insert-new-block-aux!)]\n         (insert-fn config block value\n                    {:ok-handler\n                     (fn [last-block]\n                       (edit-block! last-block 0 id)\n                       (clear-when-saved!))}))))\n   (state\/set-editor-op! nil)))\n\n(defn api-insert-new-block!\n  [content {:keys [page block-uuid sibling? before? properties custom-uuid]\n            :or {sibling? false\n                 before? false}}]\n  (when (or page block-uuid)\n    (let [before? (if page false before?)\n          sibling? (if before? true (if page false sibling?))\n          block (if page\n                  (db\/entity [:block\/name (util\/page-name-sanity-lc page)])\n                  (db\/entity [:block\/uuid block-uuid]))]\n      (when block\n        (let [last-block (when (not sibling?)\n                           (let [children (:block\/_parent block)\n                                 blocks (db\/sort-by-left children block)\n                                 last-block-id (:db\/id (last blocks))]\n                             (when last-block-id\n                               (db\/pull last-block-id))))\n              format (or\n                      (:block\/format block)\n                      (db\/get-page-format (:db\/id block))\n                      (state\/get-preferred-format))\n              content (if (seq properties)\n                        (property\/insert-properties format content properties)\n                        content)\n              new-block (-> (select-keys block [:block\/page :block\/journal?\n                                                :block\/journal-day])\n                            (assoc :block\/content content\n                                   :block\/format format))\n              new-block (assoc new-block :block\/page\n                               (if page\n                                 (:db\/id block)\n                                 (:db\/id (:block\/page new-block))))\n              new-block (-> new-block\n                            (wrap-parse-block)\n                            (assoc :block\/uuid (or custom-uuid (db\/new-block-id))))\n              [block-m sibling?] (cond\n                                   before?\n                                   (let [first-child? (->> [:block\/parent :block\/left]\n                                                           (map #(:db\/id (get block %)))\n                                                           (apply =))\n                                         block (db\/pull (:db\/id (:block\/left block)))\n                                         sibling? (if (or first-child? ;; insert as first child\n                                                          (:block\/name block))\n                                                    false sibling?)]\n                                     [block sibling?])\n\n                                   sibling?\n                                   [(db\/pull (:db\/id block)) sibling?]\n\n                                   last-block\n                                   [last-block true]\n\n                                   block\n                                   [(db\/pull (:db\/id block)) sibling?]\n\n                                   ;; FIXME: assert\n                                   :else\n                                   nil)]\n\n          (when block-m\n            (outliner-insert-block! {:skip-save-current-block? true} block-m new-block {:sibling? sibling?})\n            new-block))))))\n\n(defn insert-first-page-block-if-not-exists!\n  [page-name]\n  (when (string? page-name)\n    (when-let [page (db\/entity [:block\/name (util\/page-name-sanity-lc page-name)])]\n      (when (db\/page-empty? (state\/get-current-repo) (:db\/id page))\n        (api-insert-new-block! \"\" {:page page-name})))))\n\n(defn properties-block\n  [properties format page]\n  (let [content (property\/insert-properties format \"\" properties)\n        refs (block\/get-page-refs-from-properties properties)]\n    {:block\/pre-block? true\n     :block\/uuid (db\/new-block-id)\n     :block\/properties properties\n     :block\/properties-order (keys properties)\n     :block\/refs refs\n     :block\/left page\n     :block\/format format\n     :block\/content content\n     :block\/parent page\n     :block\/page page}))\n\n(defn default-properties-block\n  ([title format page]\n   (default-properties-block title format page {}))\n  ([title format page properties]\n   (let [p (common-handler\/get-page-default-properties title)\n         ps (merge p properties)\n         content (page-property\/insert-properties format \"\" ps)\n         refs (block\/get-page-refs-from-properties properties)]\n     {:block\/pre-block? true\n      :block\/uuid (db\/new-block-id)\n      :block\/properties ps\n      :block\/properties-order (keys ps)\n      :block\/refs refs\n      :block\/left page\n      :block\/format format\n      :block\/content content\n      :block\/parent page\n      :block\/page page})))\n\n(defn add-default-title-property-if-needed!\n  [page-name]\n  (when (string? page-name)\n    (when-let [page (db\/entity [:block\/name (util\/page-name-sanity-lc page-name)])]\n      (when (db\/page-empty? (state\/get-current-repo) (:db\/id page))\n        (let [title (or (:block\/original-name page)\n                        (:block\/name page))\n              format (db\/get-page-format page)\n              create-title-property? (util\/create-title-property? title)]\n          (when create-title-property?\n            (let [default-properties (default-properties-block title format (:db\/id page))\n                  new-empty-block (-> (dissoc default-properties :block\/pre-block? :block\/uuid :block\/left :block\/properties)\n                                      (assoc :block\/uuid (db\/new-block-id)\n                                             :block\/content \"\"\n                                             :block\/left [:block\/uuid (:block\/uuid default-properties)]))]\n              (db\/transact! [default-properties new-empty-block])\n              true)))))))\n\n(defn update-timestamps-content!\n  [{:block\/keys [repeated? marker format] :as block} content]\n  (if repeated?\n    (let [scheduled-ast (block-handler\/get-scheduled-ast block)\n          deadline-ast (block-handler\/get-deadline-ast block)\n          content (some->> (filter repeated\/repeated? [scheduled-ast deadline-ast])\n                           (map (fn [ts]\n                                  [(repeated\/timestamp->text ts)\n                                   (repeated\/next-timestamp-text ts)]))\n                           (reduce (fn [content [old new]]\n                                     (string\/replace content old new))\n                                   content))\n          content (string\/replace-first\n                   content marker\n                   (case marker\n                     \"DOING\"\n                     \"TODO\"\n\n                     \"NOW\"\n                     \"LATER\"\n\n                     marker))\n          content (clock\/clock-out format content)\n          content (drawer\/insert-drawer\n                   format content \"logbook\"\n                   (util\/format (str (if (= :org format) \"-\" \"*\")\n                                     \" State \\\"DONE\\\" from \\\"%s\\\" [%s]\")\n                                marker\n                                (date\/get-date-time-string-3)))]\n      content)\n    content))\n\n(defn check\n  [{:block\/keys [marker content repeated? uuid] :as block}]\n  (let [new-content (string\/replace-first content marker \"DONE\")\n        new-content (if repeated?\n                      (update-timestamps-content! block content)\n                      new-content)\n        input-id (state\/get-edit-input-id)]\n    (if (and input-id\n             (string\/ends-with? input-id (str uuid)))\n      (state\/set-edit-content! input-id new-content)\n      (save-block-if-changed! block new-content))))\n\n(defn uncheck\n  [{:block\/keys [content uuid] :as block}]\n  (let [marker (if (= :now (state\/get-preferred-workflow))\n                 \"LATER\"\n                 \"TODO\")\n        new-content (string\/replace-first content \"DONE\" marker)\n        input-id (state\/get-edit-input-id)]\n    (if (and input-id\n             (string\/ends-with? input-id (str uuid)))\n      (state\/set-edit-content! input-id new-content)\n      (save-block-if-changed! block new-content))))\n\n(defn- rehighlight-selected-nodes\n  ([]\n   (rehighlight-selected-nodes (state\/get-selection-blocks)))\n  ([blocks]\n   (let [blocks (doall\n                 (map\n                  (fn [block]\n                    (when-let [id (gobj\/get block \"id\")]\n                      (when-let [block (gdom\/getElement id)]\n                        (dom\/add-class! block \"selected noselect\")\n                        block)))\n                  blocks))]\n     (state\/set-selection-blocks! blocks))))\n\n(defn- get-selected-blocks-with-children\n  []\n  (when-let [blocks (seq (state\/get-selection-blocks))]\n    (->> (mapcat (fn [block]\n                   (cons block\n                         (array-seq (dom\/by-class block \"ls-block\"))))\n                 blocks)\n         distinct)))\n\n(defn set-marker\n  \"The set-marker will set a new marker on the selected block.\n  if the `new-marker` is nil, it will generate it automatically.\"\n  ([block]\n   (set-marker block nil))\n  ([{:block\/keys [marker content format] :as block} new-marker]\n   (let [[new-content _] (marker\/cycle-marker content marker new-marker format (state\/get-preferred-workflow))]\n     (save-block-if-changed! block new-content))))\n\n(defn cycle-todos!\n  []\n  (when-let [blocks (seq (get-selected-blocks-with-children))]\n    (let [ids (->> (distinct (map #(when-let [id (dom\/attr % \"blockid\")]\n                                     (uuid id)) blocks))\n                   (remove nil?))]\n      (doseq [id ids]\n        (let [block (db\/pull [:block\/uuid id])]\n          (set-marker block)))\n      (js\/setTimeout #(rehighlight-selected-nodes blocks) 0))))\n\n(defn cycle-todo!\n  []\n  #_:clj-kondo\/ignore\n  (if-let [blocks (seq (get-selected-blocks-with-children))]\n    (cycle-todos!)\n    (when (state\/get-edit-block)\n      (let [edit-input-id (state\/get-edit-input-id)\n            current-input (gdom\/getElement edit-input-id)\n            content (state\/get-edit-content)\n            format (or (db\/get-page-format (state\/get-current-page))\n                       (state\/get-preferred-format))\n            [new-content marker] (marker\/cycle-marker content nil nil format (state\/get-preferred-workflow))\n            new-pos (commands\/compute-pos-delta-when-change-marker\n                     content marker (cursor\/pos current-input))]\n        (state\/set-edit-content! edit-input-id new-content)\n        (cursor\/move-cursor-to current-input new-pos)))))\n\n(defn set-priority\n  [{:block\/keys [priority content] :as block} new-priority]\n  (let [new-content (string\/replace-first content\n                                          (util\/format \"[#%s]\" priority)\n                                          (util\/format \"[#%s]\" new-priority))]\n    (save-block-if-changed! block new-content)))\n\n(defn cycle-priority!\n  []\n  (when (state\/get-edit-block)\n    (let [format (or (db\/get-page-format (state\/get-current-page))\n                     (state\/get-preferred-format))\n          input-id (state\/get-edit-input-id)\n          content (state\/get-edit-content)\n          new-priority (priority\/cycle-priority-state content)\n          new-value (priority\/add-or-update-priority content format new-priority)]\n      (state\/set-edit-content! input-id new-value))))\n\n(defn delete-block-aux!\n  [{:block\/keys [uuid repo] :as _block} children?]\n  (let [repo (or repo (state\/get-current-repo))\n        block (db\/pull repo '[*] [:block\/uuid uuid])]\n    (when block\n      (->\n       (outliner-core\/block block)\n       (outliner-core\/delete-node children?)))))\n\n(defn- move-to-prev-block\n  [repo sibling-block format id value]\n  (when (and repo sibling-block)\n    (when-let [sibling-block-id (dom\/attr sibling-block \"blockid\")]\n      (when-let [block (db\/pull repo '[*] [:block\/uuid (uuid sibling-block-id)])]\n        (let [original-content (util\/trim-safe (:block\/content block))\n              value' (-> (property\/remove-built-in-properties format original-content)\n                         (drawer\/remove-logbook))\n              new-value (str value' value)\n              tail-len (count value)\n              pos (max\n                   (if original-content\n                     (utf8\/length (utf8\/encode original-content))\n                     0)\n                   0)]\n          (edit-block! block pos id\n                       {:custom-content new-value\n                        :tail-len tail-len\n                        :move-cursor? false}))))))\n\n(defn delete-block!\n  ([repo]\n   (delete-block! repo true))\n  ([repo delete-children?]\n   (state\/set-editor-op! :delete)\n   (let [{:keys [id block-id block-parent-id value format]} (get-state)]\n     (when block-id\n       (let [page-id (:db\/id (:block\/page (db\/entity [:block\/uuid block-id])))\n             page-blocks-count (and page-id (db\/get-page-blocks-count repo page-id))]\n         (when (> page-blocks-count 1)\n           (let [block (db\/entity [:block\/uuid block-id])\n                 has-children? (seq (:block\/_parent block))\n                 block (db\/pull (:db\/id block))\n                 left (tree\/-get-left (outliner-core\/block block))\n                 left-has-children? (and left\n                                         (when-let [block-id (:block\/uuid (:data left))]\n                                           (let [block (db\/entity [:block\/uuid block-id])]\n                                             (seq (:block\/_parent block)))))]\n             (when-not (and has-children? left-has-children?)\n               (when block-parent-id\n                 (let [block-parent (gdom\/getElement block-parent-id)\n                       sibling-block (util\/get-prev-block-non-collapsed-non-embed block-parent)]\n                   (delete-block-aux! block delete-children?)\n                   (move-to-prev-block repo sibling-block format id value)))))))))\n   (state\/set-editor-op! nil)))\n\n(defn- get-end-block-parent\n  [end-block blocks]\n  (if-let [parent (let [id (:db\/id (:block\/parent end-block))]\n                    (some (fn [block] (when (= (:db\/id block) id) block)) blocks))]\n    (recur parent blocks)\n    end-block))\n\n(defn- get-top-level-end-node\n  [blocks]\n  (let [end-block (last blocks)\n        end-block-parent (get-end-block-parent end-block blocks)]\n    (outliner-core\/block end-block-parent)))\n\n(defn- reorder-blocks\n  [blocks]\n  (if (<= (count blocks) 1)\n    blocks\n    (let [[f s & _others] blocks]\n      (if (or (= (:block\/left s) {:db\/id (:db\/id f)})\n              (and\n               (let [parents (db\/get-block-parents (state\/get-current-repo)\n                                                   (:block\/uuid f)\n                                                   100)]\n                 (some #(= (:block\/left s) {:db\/id (:db\/id %)})\n                       parents))\n               (not= (:block\/left f) {:db\/id (:db\/id s)})))\n        blocks\n        (reverse blocks)))))\n\n(defn delete-blocks!\n  [repo dom-blocks]\n  (let [block-uuids (distinct (map #(uuid (dom\/attr % \"blockid\")) dom-blocks))]\n    (when (seq block-uuids)\n      (let [uuid->dom-block (zipmap block-uuids dom-blocks)\n            lookup-refs (map (fn [id] [:block\/uuid id]) block-uuids)\n            blocks (db\/pull-many repo '[*] lookup-refs)\n            blocks (reorder-blocks blocks)\n            start-node (outliner-core\/block (first blocks))\n            end-node (get-top-level-end-node blocks)\n            block (first blocks)\n            block-parent (get uuid->dom-block (:block\/uuid block))\n            sibling-block (when block-parent (util\/get-prev-block-non-collapsed-non-embed block-parent))]\n        (if (= start-node end-node)\n          (delete-block-aux! (first blocks) true)\n          (outliner-core\/delete-nodes start-node end-node lookup-refs))\n        (when sibling-block\n          (move-to-prev-block repo sibling-block\n                              (:block\/format block)\n                              (dom\/attr sibling-block \"id\")\n                              \"\"))))))\n\n(defn- batch-set-block-property!\n  \"col: a collection of [block-id property-key property-value].\"\n  [col]\n  #_:clj-kondo\/ignore\n  (when-let [repo (state\/get-current-repo)]\n    (ds\/auto-transact!\n     [txs-state (ds\/new-outliner-txs-state)]\n     {:outliner-op :set-block-properties\n      :skip-transact? false}\n     (doseq [[block-id key value] col]\n       (let [block-id (if (string? block-id) (uuid block-id) block-id)]\n         (when-let [block (db\/entity [:block\/uuid block-id])]\n           (let [format (:block\/format block)\n                 content (:block\/content block)\n                 properties (:block\/properties block)\n                 properties (if (nil? value)\n                              (dissoc properties key)\n                              (assoc properties key value))\n                 content (if (nil? value)\n                           (property\/remove-property format key content)\n                           (property\/insert-property format content key value))\n                 content (property\/remove-empty-properties content)\n                 block (outliner-core\/block {:block\/uuid block-id\n                                             :block\/properties properties\n                                             :block\/content content})\n                 input-pos (or (state\/get-edit-pos) :max)]\n             (outliner-core\/save-node block {:txs-state txs-state}))))))\n\n    (let [block-id (ffirst col)\n          block-id (if (string? block-id) (uuid block-id) block-id)\n          input-pos (or (state\/get-edit-pos) :max)]\n      ;; update editing input content\n      (when-let [editing-block (state\/get-edit-block)]\n        (when (= (:block\/uuid editing-block) block-id)\n          (edit-block! editing-block\n                       input-pos\n                       (state\/get-edit-input-id)))))))\n\n(defn remove-block-property!\n  [block-id key]\n  (let [key (keyword key)]\n    (batch-set-block-property! [[block-id key nil]])))\n\n(defn set-block-property!\n  [block-id key value]\n  (let [key (keyword key)]\n    (batch-set-block-property! [[block-id key value]])))\n\n(defn set-block-query-properties!\n  [block-id all-properties key add?]\n  (when-let [block (db\/entity [:block\/uuid block-id])]\n    (let [query-properties (-> (get-in block [:block\/properties :query-properties] \"\")\n                               (common-handler\/safe-read-string \"Failed to parse query properties\"))\n          query-properties (if (seq query-properties)\n                             query-properties\n                             all-properties)\n          query-properties (if add?\n                             (distinct (conj query-properties key))\n                             (remove #{key} query-properties))\n          query-properties (vec query-properties)]\n      (if (seq query-properties)\n        (set-block-property! block-id :query-properties (str query-properties))\n        (remove-block-property! block-id :query-properties)))))\n\n(defn set-block-timestamp!\n  [block-id key value]\n  (let [key (string\/lower-case key)\n        block-id (if (string? block-id) (uuid block-id) block-id)\n        key (string\/lower-case (str key))\n        value (str value)]\n    (when-let [block (db\/pull [:block\/uuid block-id])]\n      (let [{:block\/keys [content]} block\n            content (or content (state\/get-edit-content))\n            new-content (-> (text\/remove-timestamp content key)\n                            (text\/add-timestamp key value))]\n        (when (not= content new-content)\n          (let [input-id (state\/get-edit-input-id)]\n            (if (and input-id\n                     (string\/ends-with? input-id (str block-id)))\n              (state\/set-edit-content! input-id new-content)\n              (save-block-if-changed! block new-content))))))))\n\n(defn- set-blocks-id!\n  [block-ids]\n  (let [block-ids (remove nil? block-ids)\n        col (map (fn [block-id]\n                   (let [block (db\/entity [:block\/uuid block-id])]\n                     (when-not (:block\/pre-block? block)\n                       [block-id :id (str block-id)])))\n                 block-ids)]\n    (batch-set-block-property! col)))\n\n(defn copy-block-ref!\n  ([block-id]\n   (copy-block-ref! block-id #(str %)))\n  ([block-id tap-clipboard]\n   (set-blocks-id! [block-id])\n   (util\/copy-to-clipboard! (tap-clipboard block-id))))\n\n(defn select-block!\n  [block-uuid]\n  (when-let [block (-> (str block-uuid)\n                       (js\/document.getElementsByClassName)\n                       first)]\n    (state\/exit-editing-and-set-selected-blocks! [block])))\n\n(defn- blocks-with-level\n  \"Should be sorted already.\"\n  [blocks]\n  (let [root (assoc (first blocks) :level 1)]\n    (loop [m [[(:db\/id root) root]]\n           blocks (rest blocks)]\n      (if (empty? blocks)\n        m\n        (let [block (first blocks)\n              parent-id (:db\/id (:block\/parent block))\n              parent-level (:level (second (first (filter (fn [x] (= (first x) parent-id)) m))))\n              block (assoc block :level (inc parent-level))\n              m' (vec (conj m [(:db\/id block) block]))]\n          (recur m' (rest blocks)))))))\n\n(defn- blocks-vec->tree\n  [blocks]\n  (let [loc (reduce (fn [loc {:keys [level] :as block}]\n                      (let [loc*\n                            (loop [loc (zip\/vector-zip (zip\/root loc))\n                                   level level]\n                              (if (> level 1)\n                                (if-let [down (zip\/rightmost (zip\/down loc))]\n                                  (let [down-node (zip\/node down)]\n                                    (if (or (and (vector? down-node)\n                                                 (>= (:level (first down-node)) (:level block)))\n                                            (>= (:level down-node) (:level block)))\n                                      down\n                                      (recur down (dec level))))\n                                  loc)\n                                loc))\n                            loc**\n                            (if (vector? (zip\/node loc*))\n                              (zip\/append-child loc* block)\n                              (-> loc*\n                                  zip\/up\n                                  (zip\/append-child [block])))]\n                        loc**)) (zip\/vector-zip []) blocks)]\n\n    (clojure.walk\/postwalk (fn [e] (if (map? e) (dissoc e :level) e)) (zip\/root loc))))\n\n(defn- compose-copied-blocks-contents-&-block-tree\n  [repo block-ids]\n  (let [blocks (db-utils\/pull-many repo '[*] (mapv (fn [id] [:block\/uuid id]) block-ids))\n        blocks* (flatten\n                 (mapv (fn [b] (if (util\/collapsed? b)\n                                 (vec (tree\/sort-blocks (db\/get-block-children repo (:block\/uuid b)) b))\n                                 [b])) blocks))\n        block-ids* (mapv :block\/uuid blocks*)\n        level-blocks (blocks-with-level blocks*)\n        level-blocks-uuid-map (into {} (mapv (fn [b] [(:block\/uuid b) b]) (map second level-blocks)))\n        level-blocks (mapv (fn [uuid] (get level-blocks-uuid-map uuid)) block-ids*)\n        tree (blocks-vec->tree level-blocks)\n        top-level-block-uuids (mapv :block\/uuid (filterv #(not (vector? %)) tree))\n        exported-md-contents (export\/export-blocks-as-markdown\n                              repo top-level-block-uuids\n                              (state\/get-export-block-text-indent-style)\n                              (into [] (state\/get-export-block-text-remove-options)))]\n    [exported-md-contents tree]))\n\n(defn copy-selection-blocks\n  []\n  (when-let [blocks (seq (get-selected-blocks-with-children))]\n    (let [repo (state\/get-current-repo)\n          ids (->> (distinct (map #(when-let [id (dom\/attr % \"blockid\")]\n                                     (uuid id)) blocks))\n                   (remove nil?))\n          [content tree] (compose-copied-blocks-contents-&-block-tree repo ids)\n          block (db\/pull [:block\/uuid (first ids)])]\n      (common-handler\/copy-to-clipboard-without-id-property! (:block\/format block) content)\n      (state\/set-copied-blocks content tree)\n      (notification\/show! \"Copied!\" :success))))\n\n(defn copy-block-refs\n  []\n  (when-let [selected-blocks (seq (get-selected-blocks-with-children))]\n    (let [blocks (->> (distinct (map #(when-let [id (dom\/attr % \"blockid\")]\n                                        (let [level (dom\/attr % \"level\")]\n                                          {:id (uuid id)\n                                           :level (int level)}))\n                                     selected-blocks))\n                      (remove nil?))\n          first-block (first blocks)\n          first-root-level-index (ffirst\n                                  (filter (fn [[_ block]] (= (:level block) 1))\n                                          (map-indexed vector blocks)))\n          root-level (atom (:level first-block))\n          adjusted-blocks (map-indexed\n                           (fn [index {:keys [id level]}]\n                             {:id id\n                              :level (if (< index first-root-level-index)\n                                       (if (< level @root-level)\n                                         (do\n                                           (reset! root-level level)\n                                           1)\n                                         (inc (- level @root-level)))\n                                       level)})\n                           blocks)\n          block (db\/pull [:block\/uuid (:id first-block)])\n          copy-str (some->> adjusted-blocks\n                            (map (fn [{:keys [id level]}]\n                                   (condp = (:block\/format block)\n                                     :org\n                                     (util\/format (str (string\/join (repeat level \"*\")) \" ((%s))\") id)\n                                     :markdown\n                                     (util\/format (str (string\/join (repeat (dec level) \"\\t\")) \"- ((%s))\") id))))\n                            (string\/join \"\\n\\n\"))]\n      (set-blocks-id! (map :id blocks))\n      (util\/copy-to-clipboard! copy-str))))\n\n(defn copy-block-embeds\n  []\n  (when-let [blocks (seq (get-selected-blocks-with-children))]\n    (let [ids (->> (distinct (map #(when-let [id (dom\/attr % \"blockid\")]\n                                     (uuid id)) blocks))\n                   (remove nil?))\n          ids-str (some->> ids\n                           (map (fn [id] (util\/format \"{{embed ((%s))}}\" id)))\n                           (string\/join \"\\n\\n\"))]\n      (set-blocks-id! ids)\n      (util\/copy-to-clipboard! ids-str))))\n\n(defn get-selected-toplevel-block-uuids\n  []\n  (when-let [blocks (seq (get-selected-blocks-with-children))]\n    (let [repo (state\/get-current-repo)\n          block-ids (->> (distinct (map #(when-let [id (dom\/attr % \"blockid\")]\n                                           (uuid id)) blocks))\n                         (remove nil?))\n          blocks (db-utils\/pull-many repo '[*] (mapv (fn [id] [:block\/uuid id]) block-ids))\n          page-id (:db\/id (:block\/page (first blocks)))\n          blocks*\n          (->> blocks\n               ;; filter out blocks not belong to page with 'page-id'\n               (remove (fn [block] (some-> (:db\/id (:block\/page block)) (not= page-id))))\n               ;; expand collapsed blocks\n               (mapv (fn [b] (if (util\/collapsed? b)\n                               (vec (tree\/sort-blocks (db\/get-block-children repo (:block\/uuid b)) b))\n                               [b])))\n               (flatten))\n          block-ids* (mapv :block\/uuid blocks*)\n          level-blocks (blocks-with-level blocks*)\n          level-blocks-uuid-map (into {} (mapv (fn [b] [(:block\/uuid b) b]) (map second level-blocks)))\n          level-blocks (mapv (fn [uuid] (get level-blocks-uuid-map uuid)) block-ids*)\n          tree (blocks-vec->tree level-blocks)\n          top-level-block-uuids (mapv :block\/uuid (filterv #(not (vector? %)) tree))]\n      top-level-block-uuids)))\n\n(defn cut-selection-blocks\n  [copy?]\n  (when copy? (copy-selection-blocks))\n  (when-let [blocks (seq (get-selected-blocks-with-children))]\n    ;; remove embeds, references and queries\n    (let [blocks (remove (fn [block]\n                           (or (= \"true\" (dom\/attr block \"data-transclude\"))\n                               (= \"true\" (dom\/attr block \"data-query\")))) blocks)]\n      (when (seq blocks)\n        (let [repo (state\/get-current-repo)]\n          (delete-blocks! repo blocks))))))\n\n(def url-regex\n  \"Didn't use link\/plain-link as it is incorrectly detects words as urls.\"\n  #\"[^\\s\\(\\[]+:\/\/[^\\s\\)\\]]+\")\n\n(defn extract-nearest-link-from-text\n  [text pos & additional-patterns]\n  (let [page-pattern #\"\\[\\[([^\\]]+)]]\"\n        block-pattern #\"\\(\\(([^\\)]+)\\)\\)\"\n        tag-pattern #\"#\\S+\"\n        page-matches (util\/re-pos page-pattern text)\n        block-matches (util\/re-pos block-pattern text)\n        tag-matches (util\/re-pos tag-pattern text)\n        additional-matches (mapcat #(util\/re-pos % text) additional-patterns)\n        matches (->> (concat page-matches block-matches tag-matches additional-matches)\n                     (remove nil?))\n        [_ match] (first (sort-by\n                          (fn [[start-pos content]]\n                            (let [end-pos (+ start-pos (count content))]\n                              (cond\n                                (< pos start-pos)\n                                (- pos start-pos)\n\n                                (> pos end-pos)\n                                (- end-pos pos)\n\n                                :else\n                                0)))\n                          >\n                          matches))]\n    (when match\n      (cond\n        (some #(re-find % match) additional-patterns)\n        match\n        (string\/starts-with? match \"#\")\n        (subs match 1 (count match))\n        :else\n        (subs match 2 (- (count match) 2))))))\n\n(defn- get-nearest-page-or-url\n  \"Return the nearest page-name (not dereferenced, may be an alias), block, tag or url\"\n  []\n  (when-let [block (state\/get-edit-block)]\n    (when (:block\/uuid block)\n      (when-let [edit-id (state\/get-edit-input-id)]\n        (when-let [input (gdom\/getElement edit-id)]\n          (when-let [pos (cursor\/pos input)]\n            (let [value (gobj\/get input \"value\")]\n              (extract-nearest-link-from-text value pos url-regex))))))))\n\n(defn- get-nearest-page\n  \"Return the nearest page-name (not dereferenced, may be an alias), block or tag\"\n  []\n  (when-let [block (state\/get-edit-block)]\n    (when (:block\/uuid block)\n      (when-let [edit-id (state\/get-edit-input-id)]\n        (when-let [input (gdom\/getElement edit-id)]\n          (when-let [pos (cursor\/pos input)]\n            (let [value (gobj\/get input \"value\")]\n              (extract-nearest-link-from-text value pos))))))))\n\n(defn follow-link-under-cursor!\n  []\n  (when-let [page (get-nearest-page-or-url)]\n    (when-not (string\/blank? page)\n      (if (re-find url-regex page)\n        (js\/window.open page)\n        (let [page-name (db-model\/get-redirect-page-name page)]\n          (state\/clear-edit!)\n          (insert-first-page-block-if-not-exists! page-name)\n          (route-handler\/redirect-to-page! page-name))))))\n\n(defn open-link-in-sidebar!\n  []\n  (when-let [page (get-nearest-page)]\n    (let [page-name (string\/lower-case page)\n          block? (util\/uuid-string? page-name)]\n      (when-let [page (db\/get-page page-name)]\n        (if block?\n          (state\/sidebar-add-block!\n           (state\/get-current-repo)\n           (:db\/id page)\n           :block\n           page)\n          (state\/sidebar-add-block!\n           (state\/get-current-repo)\n           (:db\/id page)\n           :page\n           {:page page}))))))\n\n(defn zoom-in! []\n  (if (state\/editing?)\n    (when-let [id (some-> (state\/get-edit-block)\n                          :block\/uuid\n                          ((fn [id] [:block\/uuid id]))\n                          db\/entity\n                          :block\/uuid)]\n      (let [pos (state\/get-edit-pos)]\n        (route-handler\/redirect-to-page! id)\n        (edit-block! {:block\/uuid id} pos id)))\n    (js\/window.history.forward)))\n\n(defn zoom-out!\n  []\n  (if (state\/editing?)\n    (let [page (state\/get-current-page)\n          block-id (and\n                    (string? page)\n                    (util\/uuid-string? page)\n                    (medley\/uuid page))]\n      (when block-id\n        (let [block-parent (db\/get-block-parent block-id)]\n          (if-let [id (and\n                       (nil? (:block\/name block-parent))\n                       (:block\/uuid block-parent))]\n            (do\n              (route-handler\/redirect-to-page! id)\n\n              (edit-block! {:block\/uuid block-id} :max block-id))\n            (let [page-id (some-> (db\/entity [:block\/uuid block-id])\n                                  :block\/page\n                                  :db\/id)]\n\n              (when-let [page-name (:block\/name (db\/entity page-id))]\n                (route-handler\/redirect-to-page! page-name)\n                (edit-block! {:block\/uuid block-id} :max block-id)))))))\n    (js\/window.history.back)))\n\n(defn cut-block!\n  [block-id]\n  (when-let [block (db\/pull [:block\/uuid block-id])]\n    (let [repo (state\/get-current-repo)\n          ;; TODO: support org mode\n          [md-content _tree] (compose-copied-blocks-contents-&-block-tree repo [block-id])]\n      (common-handler\/copy-to-clipboard-without-id-property! (:block\/format block) md-content)\n      (delete-block-aux! block true))))\n\n(defn clear-last-selected-block!\n  []\n  (let [block (state\/drop-last-selection-block!)]\n    (util\/select-unhighlight! [block])))\n\n(defn highlight-selection-area!\n  [end-block]\n  (when-let [start-block (state\/get-selection-start-block)]\n    (let [blocks (util\/get-nodes-between-two-nodes start-block end-block \"ls-block\")\n          direction (util\/get-direction-between-two-nodes start-block end-block \"ls-block\")\n\n          blocks (if (= :up direction)\n                   (reverse blocks)\n                   blocks)]\n      (state\/exit-editing-and-set-selected-blocks! blocks direction))))\n\n(defn on-select-block\n  [direction]\n  (fn [_event]\n    (cond\n      ;; when editing, quit editing and select current block\n      (state\/editing?)\n      (state\/exit-editing-and-set-selected-blocks! [(gdom\/getElement (state\/get-editing-block-dom-id))])\n\n      ;; when selection and one block selected, select next block\n      (and (state\/selection?) (== 1 (count (state\/get-selection-blocks))))\n      (let [f (if (= :up direction) util\/get-prev-block-non-collapsed util\/get-next-block-non-collapsed-skip)\n            element (f (first (state\/get-selection-blocks)))]\n        (when element\n          (state\/conj-selection-block! element direction)))\n\n      ;; if same direction, keep conj on same direction\n      (and (state\/selection?) (= direction (state\/get-selection-direction)))\n      (let [f (if (= :up direction) util\/get-prev-block-non-collapsed util\/get-next-block-non-collapsed-skip)\n            first-last (if (= :up direction) first last)\n            element (f (first-last (state\/get-selection-blocks)))]\n        (when element\n          (state\/conj-selection-block! element direction)))\n\n      ;; if different direction, keep clear until one left\n      (state\/selection?)\n      (clear-last-selected-block!))))\n\n(defn save-block-aux!\n  [block value opts]\n  (let [value (string\/trim value)]\n    ;; FIXME: somehow frontend.components.editor's will-unmount event will loop forever\n    ;; maybe we shouldn't save the block\/file in \"will-unmount\" event?\n    (save-block-if-changed! block value\n                            (merge\n                             {:init-properties (:block\/properties block)}\n                             opts))))\n\n(defn save-block!\n  ([repo block-or-uuid content]\n   (let [block (if (or (uuid? block-or-uuid)\n                       (string? block-or-uuid))\n                 (db-model\/query-block-by-uuid block-or-uuid) block-or-uuid)\n         format (:block\/format block)]\n     (save-block! {:block block :repo repo :format format} content)))\n  ([{:keys [block repo] :as _state} value]\n   (when (:db\/id (db\/entity repo [:block\/uuid (:block\/uuid block)]))\n     (save-block-aux! block value {}))))\n\n(defn save-current-block!\n  ([]\n   (save-current-block! {}))\n  ([{:keys [force?] :as opts}]\n   ;; non English input method\n   (when-not (state\/editor-in-composition?)\n     (when (state\/get-current-repo)\n       (when (and (not @commands\/*show-commands)\n                  (not @commands\/*show-block-commands)\n                  (not (state\/get-editor-show-page-search?))\n                  (not (state\/get-editor-show-page-search-hashtag?))\n                  (not (state\/get-editor-show-block-search?))\n                  (not (state\/get-editor-show-date-picker?))\n                  (not (state\/get-editor-show-template-search?))\n                  (not (state\/get-editor-show-input)))\n         (try\n           (let [input-id (state\/get-edit-input-id)\n                 block (state\/get-edit-block)\n                 db-block (when-let [block-id (:block\/uuid block)]\n                            (db\/pull [:block\/uuid block-id]))\n                 elem (and input-id (gdom\/getElement input-id))\n                 db-content (:block\/content db-block)\n                 db-content-without-heading (and db-content\n                                                 (util\/safe-subs db-content (:block\/level db-block)))\n                 value (and elem (gobj\/get elem \"value\"))]\n             (cond\n               force?\n               (save-block-aux! db-block value opts)\n\n               (and block value db-content-without-heading\n                    (not= (string\/trim db-content-without-heading)\n                          (string\/trim value)))\n               (save-block-aux! db-block value opts)))\n           (catch js\/Error error\n             (log\/error :save-block-failed error))))))))\n\n(defn- clean-content!\n  [format content]\n  (->> (text\/remove-level-spaces content format)\n       (drawer\/remove-logbook)\n       (property\/remove-properties format)\n       string\/trim))\n\n(defn insert-command!\n  [id command-output format {:keys [restore?]\n                             :or {restore? true}\n                             :as option}]\n  (cond\n    ;; replace string\n    (string? command-output)\n    (commands\/insert! id command-output option)\n\n    ;; steps\n    (vector? command-output)\n    (commands\/handle-steps command-output format)\n\n    (fn? command-output)\n    (let [s (command-output)]\n      (commands\/insert! id s option))\n\n    :else\n    nil)\n\n  (when restore?\n    (let [restore-slash-caret-pos? (if (and\n                                        (seq? command-output)\n                                        (= :editor\/click-hidden-file-input\n                                           (ffirst command-output)))\n                                     false\n                                     true)]\n      (commands\/restore-state restore-slash-caret-pos?))))\n\n(defn get-asset-file-link\n  [format url file-name image?]\n  (let [pdf? (and url (string\/ends-with? url \".pdf\"))]\n    (case (keyword format)\n      :markdown (util\/format (str (when (or image? pdf?) \"!\") \"[%s](%s)\") file-name url)\n      :org (if image?\n             (util\/format \"[[%s]]\" url)\n             (util\/format \"[[%s][%s]]\" url file-name))\n      nil)))\n\n(defn ensure-assets-dir!\n  [repo]\n  (let [repo-dir (config\/get-repo-dir repo)\n        assets-dir \"assets\"]\n    (p\/then\n     (fs\/mkdir-if-not-exists (str repo-dir \"\/\" assets-dir))\n     (fn [] [repo-dir assets-dir]))))\n\n(defn save-assets!\n  ([_ repo files]\n   (p\/let [[repo-dir assets-dir] (ensure-assets-dir! repo)]\n     (save-assets! repo repo-dir assets-dir files\n                   (fn [index file-base]\n                     ;; TODO: maybe there're other chars we need to handle?\n                     (let [file-base (-> file-base\n                                         (string\/replace \" \" \"_\")\n                                         (string\/replace \"%\" \"_\")\n                                         (string\/replace \"\/\" \"_\"))\n                           file-name (str file-base \"_\" (.now js\/Date) \"_\" index)]\n                       (string\/replace file-name #\"_+\" \"_\"))))))\n  ([repo dir path files gen-filename]\n   (p\/all\n    (for [[index ^js file] (map-indexed vector files)]\n      ;; WARN file name maybe fully qualified path when paste file\n      (let [file-name (util\/node-path.basename (.-name file))\n            [file-base ext] (if file-name\n                              (let [last-dot-index (string\/last-index-of file-name \".\")]\n                                [(subs file-name 0 last-dot-index)\n                                 (subs file-name last-dot-index)])\n                              [\"\" \"\"])\n            filename (str (gen-filename index file-base) ext)\n            filename (str path \"\/\" filename)]\n                                        ;(js\/console.debug \"Write asset #\" dir filename file)\n        (if (util\/electron?)\n          (let [from (.-path file)\n                from (if (string\/blank? from) nil from)]\n            (p\/then (js\/window.apis.copyFileToAssets dir filename from)\n                    #(p\/resolved [filename (if (string? %) (js\/File. #js[] %) file) (.join util\/node-path dir filename)])))\n          (p\/then (fs\/write-file! repo dir filename (.stream file) nil)\n                  #(p\/resolved [filename file]))))))))\n\n(defonce *assets-url-cache (atom {}))\n\n(defn make-asset-url\n  [path] ;; path start with \"\/assets\" or compatible for \"..\/assets\"\n  (let [repo-dir (config\/get-repo-dir (state\/get-current-repo))\n        path (string\/replace path \"..\/\" \"\/\")]\n    (cond\n      (util\/electron?)\n      (str \"assets:\/\/\" repo-dir path)\n\n      (mobile-util\/is-native-platform?)\n      (mobile-util\/convert-file-src (str repo-dir path))\n\n      :else\n      (let [handle-path (str \"handle\" repo-dir path)\n            cached-url (get @*assets-url-cache (keyword handle-path))]\n        (if cached-url\n          (p\/resolved cached-url)\n          (p\/let [handle (idb\/get-item handle-path)\n                  file (and handle (.getFile handle))]\n            (when file\n              (p\/let [url (js\/URL.createObjectURL file)]\n                (swap! *assets-url-cache assoc (keyword handle-path) url)\n                url))))))))\n\n(defn delete-asset-of-block!\n  [{:keys [repo href full-text block-id local? delete-local?] :as _opts}]\n  (let [block (db-model\/query-block-by-uuid block-id)\n        _ (or block (throw (str block-id \" not exists\")))\n        text (:block\/content block)\n        content (string\/replace text full-text \"\")]\n    (save-block! repo block content)\n    (when (and local? delete-local?)\n      ;; FIXME: should be relative to current block page path\n      (when-let [href (if (util\/electron?) href (second (re-find #\"\\((.+)\\)$\" full-text)))]\n        (fs\/unlink! repo\n                    (config\/get-repo-path\n                     repo (-> href\n                              (string\/replace #\"^..\/\" \"\/\")\n                              (string\/replace #\"^assets:\/\/\" \"\"))) nil)))))\n\n;; assets\/journals_2021_02_03_1612350230540_0.png\n(defn resolve-relative-path\n  [file-path]\n  (if-let [current-file (or (db-model\/get-block-file-path (state\/get-edit-block))\n                            ;; fix dummy file path of page\n                            (and (util\/electron?)\n                                 (util\/node-path.join\n                                  (config\/get-repo-dir (state\/get-current-repo))\n                                  (config\/get-pages-directory) \"_.md\")))]\n    (util\/get-relative-path current-file file-path)\n    file-path))\n\n(defn upload-asset\n  [id ^js files format uploading? drop-or-paste?]\n  (let [repo (state\/get-current-repo)\n        block (state\/get-edit-block)]\n    (if (config\/local-db? repo)\n      (-> (save-assets! block repo (js->clj files))\n          (p\/then\n           (fn [res]\n             (when-let [[asset-file-name file full-file-path] (and (seq res) (first res))]\n               (let [image? (util\/ext-of-image? asset-file-name)]\n                 (insert-command!\n                  id\n                  (get-asset-file-link format (resolve-relative-path (or full-file-path asset-file-name))\n                                       (if file (.-name file) (if image? \"image\" \"asset\"))\n                                       image?)\n                  format\n                  {:last-pattern (if drop-or-paste? \"\" (state\/get-editor-command-trigger))\n                   :restore?     true})))))\n          (p\/finally\n            (fn []\n              (reset! uploading? false)\n              (reset! *asset-uploading? false)\n              (reset! *asset-uploading-process 0))))\n      (image\/upload\n       files\n       (fn [file file-name file-type]\n         (image-handler\/request-presigned-url\n          file file-name file-type\n          uploading?\n          (fn [signed-url]\n            (insert-command! id\n                             (get-asset-file-link format signed-url file-name true)\n                             format\n                             {:last-pattern (if drop-or-paste? \"\" (state\/get-editor-command-trigger))\n                              :restore?     true})\n\n            (reset! *asset-uploading? false)\n            (reset! *asset-uploading-process 0))\n          (fn [e]\n            (let [process (* (\/ (gobj\/get e \"loaded\")\n                                (gobj\/get e \"total\"))\n                             100)]\n              (reset! *asset-uploading? false)\n              (reset! *asset-uploading-process process)))))))))\n\n;; Editor should track some useful information, like editor modes.\n;; For example:\n;; 1. Which file format is it, markdown or org mode?\n;; 2. Is it in the properties area? Then we can enable the \":\" autopair\n(def autopair-map\n  {\"[\" \"]\"\n   \"{\" \"}\"\n   \"(\" \")\"\n   \"`\" \"`\"\n   \"~\" \"~\"\n   \"*\" \"*\"\n   \"_\" \"_\"\n   \"^\" \"^\"\n   \"=\" \"=\"\n   \"\/\" \"\/\"\n   \"+\" \"+\"})\n;; \":\" \":\"                              ; TODO: only properties editing and org mode tag\n\n(def reversed-autopair-map\n  (zipmap (vals autopair-map)\n          (keys autopair-map)))\n\n(def autopair-when-selected\n  #{\"*\" \"^\" \"_\" \"=\" \"+\" \"\/\"})\n\n(def delete-map\n  (assoc autopair-map\n         \"$\" \"$\"\n         \":\" \":\"))\n\n(defn autopair\n  [input-id prefix _format _option]\n  (let [value (get autopair-map prefix)\n        selected (util\/get-selected-text)\n        postfix (str selected value)\n        value (str prefix postfix)\n        input (gdom\/getElement input-id)]\n    (when value\n      (when-not (string\/blank? selected) (reset! *selected-text selected))\n      (let [[prefix _pos] (commands\/simple-replace! input-id value selected\n                                                    {:backward-pos (count postfix)\n                                                     :check-fn (fn [new-value prefix-pos]\n                                                                 (when (>= prefix-pos 0)\n                                                                   [(subs new-value prefix-pos (+ prefix-pos 2))\n                                                                    (+ prefix-pos 2)]))})]\n        (case prefix\n          \"[[\"\n          (do\n            (commands\/handle-step [:editor\/search-page])\n            (reset! commands\/*slash-caret-pos (cursor\/get-caret-pos input)))\n\n          \"((\"\n          (do\n            (commands\/handle-step [:editor\/search-block :reference])\n            (reset! commands\/*slash-caret-pos (cursor\/get-caret-pos input)))\n\n          nil)))))\n\n(defn surround-by?\n  [input before end]\n  (when input\n    (let [value (gobj\/get input \"value\")\n          pos (cursor\/pos input)]\n      (text\/surround-by? value pos before end))))\n\n(defn wrapped-by?\n  [input before end]\n  (when input\n    (let [value (gobj\/get input \"value\")\n          pos (dec (cursor\/pos input))]\n      (when (>= pos 0)\n        (text\/wrapped-by? value pos before end)))))\n\n(defn get-matched-pages\n  \"Return matched page names\"\n  [q]\n  (let [block (state\/get-edit-block)\n        editing-page (and block\n                          (when-let [page-id (:db\/id (:block\/page block))]\n                            (:block\/name (db\/entity page-id))))\n        pages (search\/page-search q 20)]\n    (if editing-page\n      ;; To prevent self references\n      (remove (fn [p] (= (util\/page-name-sanity-lc p) editing-page)) pages)\n      pages)))\n\n(defn get-matched-blocks\n  [q block-id]\n  ;; remove current block\n  (let [current-block (state\/get-edit-block)\n        block-parents (set (->> (db\/get-block-parents (state\/get-current-repo)\n                                                      block-id\n                                                      99)\n                                (map (comp str :block\/uuid))))\n        current-and-parents (set\/union #{(str (:block\/uuid current-block))} block-parents)]\n    (p\/let [result (search\/block-search (state\/get-current-repo) q {:limit 20})]\n      (remove\n       (fn [h]\n         (contains? current-and-parents (:block\/uuid h)))\n       result))))\n\n(defn get-matched-templates\n  [q]\n  (search\/template-search q))\n\n(defn get-matched-commands\n  [input]\n  (try\n    (let [edit-content (or (gobj\/get input \"value\") \"\")\n          pos (cursor\/pos input)\n          last-slash-caret-pos (:pos @*slash-caret-pos)\n          last-command (and last-slash-caret-pos (subs edit-content last-slash-caret-pos pos))]\n      (when (> pos 0)\n        (or\n         (and (= (state\/get-editor-command-trigger) (util\/nth-safe edit-content (dec pos)))\n              @commands\/*initial-commands)\n         (and last-command\n              (commands\/get-matched-commands last-command)))))\n    (catch js\/Error e\n      (js\/console.error e)\n      nil)))\n\n(defn get-matched-block-commands\n  [input]\n  (try\n    (let [edit-content (gobj\/get input \"value\")\n          pos (cursor\/pos input)\n          last-command (subs edit-content\n                             (:pos @*angle-bracket-caret-pos)\n                             pos)]\n      (when (> pos 0)\n        (or\n         (and (= \\< (util\/nth-safe edit-content (dec pos)))\n              (commands\/block-commands-map))\n         (and last-command\n              (commands\/get-matched-commands\n               last-command\n               (commands\/block-commands-map))))))\n    (catch js\/Error _error\n      nil)))\n\n(defn auto-complete?\n  []\n  (or @*show-commands\n      @*show-block-commands\n      @*asset-uploading?\n      (state\/get-editor-show-input)\n      (state\/get-editor-show-page-search?)\n      (state\/get-editor-show-block-search?)\n      (state\/get-editor-show-template-search?)\n      (state\/get-editor-show-date-picker?)))\n\n(defn get-current-input-char\n  [input]\n  (when-let [pos (cursor\/pos input)]\n    (let [value (gobj\/get input \"value\")]\n      (when (and (>= (count value) (inc pos))\n                 (>= pos 1))\n        (util\/nth-safe value pos)))))\n\n(defn- reorder-selected-blocks\n  [blocks]\n  (let [repo (state\/get-current-repo)\n        lookup-refs (->> (map (fn [block] (when-let [id (dom\/attr block \"blockid\")]\n                                            [:block\/uuid (medley\/uuid id)])) blocks)\n                         (remove nil?))\n        blocks (db\/pull-many repo '[*] lookup-refs)]\n    (reorder-blocks blocks)))\n\n(defn move-up-down\n  [up?]\n  (fn [event]\n    (util\/stop event)\n    (let [edit-block-id (:block\/uuid (state\/get-edit-block))\n          move-nodes (fn [blocks]\n                       (let [nodes (mapv outliner-core\/block blocks)]\n                         (outliner-core\/move-nodes nodes up?)\n                         (rehighlight-selected-nodes)\n                         (let [block-node (util\/get-first-block-by-id (:block\/uuid (first blocks)))]\n                           (.scrollIntoView block-node #js {:behavior \"smooth\" :block \"nearest\"}))))]\n      (if edit-block-id\n        (when-let [block (db\/pull [:block\/uuid edit-block-id])]\n          (let [blocks [block]]\n            (move-nodes blocks))\n          (when-let [input-id (state\/get-edit-input-id)]\n            (when-let [input (gdom\/getElement input-id)]\n              (.focus input))))\n        (let [blocks (-> (state\/get-selection-blocks)\n                         reorder-selected-blocks)\n              blocks (filter #(= (:block\/parent %) (:block\/parent (first blocks))) blocks)]\n          (when (seq blocks)\n            (move-nodes blocks)))))))\n\n;; selections\n(defn on-tab\n  \"direction = :left|:right, only indent or outdent when blocks are siblings\"\n  [direction]\n  (let [blocks-dom-nodes (state\/get-selection-blocks)\n        blocks (seq (reorder-selected-blocks blocks-dom-nodes))]\n    (when (seq blocks)\n      (let [end-node (get-top-level-end-node blocks)\n            end-node-parent (tree\/-get-parent end-node)\n            top-level-nodes (->> (filter #(= (get-in end-node-parent [:data :db\/id])\n                                             (get-in % [:block\/parent :db\/id])) blocks)\n                                 (map outliner-core\/block))]\n        (outliner-core\/indent-outdent-nodes top-level-nodes (= direction :right))\n        (rehighlight-selected-nodes)))))\n\n(defn- get-link [format link label]\n  (let [link (or link \"\")\n        label (or label \"\")]\n    (case (keyword format)\n      :markdown (util\/format \"[%s](%s)\" label link)\n      :org (util\/format \"[[%s][%s]]\" link label)\n      nil)))\n\n(defn- get-image-link\n  [format link label]\n  (let [link (or link \"\")\n        label (or label \"\")]\n    (case (keyword format)\n      :markdown (util\/format \"![%s](%s)\" label link)\n      :org (util\/format \"[[%s]]\"))))\n\n(defn handle-command-input [command id format m]\n  ;; TODO: Add error handling for when user doesn't provide a required field.\n  ;; (The current behavior is to just revert back to the editor.)\n  (case command\n\n    :link (let [{:keys [link label]} m]\n            (when-not (or (string\/blank? link) (string\/blank? label))\n              (insert-command!\n               id\n               (get-link format link label)\n               format\n               {:last-pattern (str (state\/get-editor-command-trigger) \"link\")})))\n\n    :image-link (let [{:keys [link label]} m]\n                  (when (not (string\/blank? link))\n                    (insert-command!\n                     id\n                     (get-image-link format link label)\n                     format\n                     {:last-pattern (str (state\/get-editor-command-trigger) \"link\")})))\n\n    nil)\n\n  (state\/set-editor-show-input! nil)\n\n  (when-let [saved-cursor (get @state\/state :editor\/last-saved-cursor)]\n    (when-let [input (gdom\/getElement id)]\n      (.focus input)\n      (cursor\/move-cursor-to input saved-cursor))))\n\n(defn get-search-q\n  []\n  (when-let [id (state\/get-edit-input-id)]\n    (when-let [input (gdom\/getElement id)]\n      (let [current-pos (cursor\/pos input)\n            pos (:editor\/last-saved-cursor @state\/state)\n            edit-content (or (state\/sub [:editor\/content id]) \"\")]\n        (or\n         @*selected-text\n         (util\/safe-subs edit-content pos current-pos))))))\n\n(defn close-autocomplete-if-outside\n  [input]\n  (when (and input\n             (or (state\/get-editor-show-page-search?)\n                 (state\/get-editor-show-page-search-hashtag?)\n                 (state\/get-editor-show-block-search?))\n             (not (wrapped-by? input \"[[\" \"]]\")))\n    (when (get-search-q)\n      (let [value (gobj\/get input \"value\")\n            pos (:editor\/last-saved-cursor @state\/state)\n            current-pos (cursor\/pos input)\n            between (util\/safe-subs value (min pos current-pos) (max pos current-pos))]\n        (when (and between\n                   (or\n                    (string\/includes? between \"[\")\n                    (string\/includes? between \"]\")\n                    (string\/includes? between \"(\")\n                    (string\/includes? between \")\")))\n          (state\/set-editor-show-block-search! false)\n          (state\/set-editor-show-page-search! false)\n          (state\/set-editor-show-page-search-hashtag! false))))))\n\n(defn resize-image!\n  [block-id metadata full_text size]\n  (let [new-meta (merge metadata size)\n        image-part (first (string\/split full_text #\"\\{\"))\n        new-full-text (str image-part (pr-str new-meta))\n        block (db\/pull [:block\/uuid block-id])\n        value (:block\/content block)\n        new-value (string\/replace value full_text new-full-text)]\n    (save-block-aux! block new-value {})))\n\n(defn- mark-last-input-time!\n  [repo]\n  (when repo\n    (state\/set-editor-last-input-time! repo (util\/time-ms))\n    (db\/clear-repo-persistent-job! repo)))\n\n(defonce *auto-save-timeout (atom nil))\n(defn edit-box-on-change!\n  [e block id]\n  (let [value (util\/evalue e)\n        repo (state\/get-current-repo)]\n    (state\/set-edit-content! id value false)\n    (when @*auto-save-timeout\n      (js\/clearTimeout @*auto-save-timeout))\n    (mark-last-input-time! repo)\n    (when-not\n     (and\n      (= (:db\/id (:block\/parent block))\n         (:db\/id (:block\/page block)))            ; don't auto-save for page's properties block\n      (get-in block [:block\/properties :title]))\n      (reset! *auto-save-timeout\n              (js\/setTimeout\n               (fn []\n                 (when (state\/input-idle? repo)\n                   (state\/set-editor-op! :auto-save)\n                   (save-current-block! {})\n                   (state\/set-editor-op! nil)))\n               500)))))\n\n(defn handle-last-input []\n  (let [input           (state\/get-input)\n        pos             (cursor\/pos input)\n        last-input-char (util\/nth-safe (.-value input) (dec pos))]\n\n    ;; TODO: is it cross-browser compatible?\n    ;; (not= (gobj\/get native-e \"inputType\") \"insertFromPaste\")\n    (when (= last-input-char (state\/get-editor-command-trigger))\n      (when (seq (get-matched-commands input))\n        (reset! commands\/*slash-caret-pos (cursor\/get-caret-pos input))\n        (reset! commands\/*show-commands true)))\n\n    (if (= last-input-char commands\/angle-bracket)\n      (when (seq (get-matched-block-commands input))\n        (reset! commands\/*angle-bracket-caret-pos (cursor\/get-caret-pos input))\n        (reset! commands\/*show-block-commands true))\n      nil)))\n\n(defn block-on-chosen-handler\n  [_input id q format]\n  (fn [chosen _click?]\n    (state\/set-editor-show-block-search! false)\n    (let [uuid-string (str (:block\/uuid chosen))]\n\n      ;; block reference\n      (insert-command! id\n                       (util\/format \"((%s))\" uuid-string)\n                       format\n                       {:last-pattern (str \"((\" (if @*selected-text \"\" q))\n                        :end-pattern \"))\"\n                        :postfix-fn   (fn [s] (util\/replace-first \"))\" s \"\"))\n                        :forward-pos 3})\n\n      ;; Save it so it'll be parsed correctly in the future\n      (set-block-property! (:block\/uuid chosen)\n                           :id\n                           uuid-string)\n\n      (when-let [input (gdom\/getElement id)]\n        (.focus input)))))\n\n(defn block-non-exist-handler\n  [input]\n  (fn []\n    (state\/set-editor-show-block-search! false)\n    (cursor\/move-cursor-forward input 2)))\n\n(defn get-block-tree-insert-pos-after-target\n  \"return [target-block sibling? delete-editing-block? editing-block]\"\n  ([target-block-id sibling?]\n   (get-block-tree-insert-pos-after-target target-block-id sibling? nil))\n  ([target-block-id sibling? editing-block]\n   (when-let [target-block (db\/pull target-block-id)]\n     [target-block sibling? false (or editing-block target-block)])))\n\n(defn- get-block-tree-insert-pos-at-point\n  \"return [target-block sibling? delete-editing-block? editing-block]\"\n  []\n  (when-let [editing-block (db\/pull (:db\/id (state\/get-edit-block)))]\n    (let [input (gdom\/getElement (state\/get-edit-input-id))\n          pos (cursor\/pos input)\n          value (:value (get-state))\n          [fst-block-text snd-block-text] (compute-fst-snd-block-text value pos)\n          parent (:db\/id (:block\/parent editing-block))\n          parent-block (db\/pull parent)\n          left (:db\/id (:block\/left editing-block))\n          left-block (db\/pull left)\n          [_ _ config] (state\/get-editor-args)\n          block-id (:block\/uuid editing-block)\n          block-self? (block-self-alone-when-insert? config block-id)\n          has-children? (db\/has-children? (state\/get-current-repo)\n                                          (:block\/uuid editing-block))\n          collapsed? (util\/collapsed? editing-block)]\n      (conj (match (mapv boolean [(seq fst-block-text) (seq snd-block-text)\n                                  block-self? has-children? (= parent left) collapsed?])\n              ;; when zoom at editing-block\n              [_ _ true _ _ _]\n              [editing-block false false]\n\n              ;; insert after editing-block\n              [true _ false true _ false]\n              [editing-block false false]\n              [true _ false true _ true]\n              [editing-block true false]\n              [true _ false false _ _]\n              [editing-block true false]\n              [false false false true _ false]\n              [editing-block false false]\n              [false false false true _ true]\n              [editing-block true false]\n              [false false false false _ _]\n              [editing-block true true]\n\n              ;; insert before editing-block\n              [false true false _ true _]\n              [parent-block false false]\n              [false true false _ false _]\n              [left-block true false])\n            editing-block))))\n\n(defn- paste-block-tree-at-point-edit-aux\n  [uuid page exclude-properties format content-update-fn]\n  (fn [block]\n    (outliner-core\/block\n     (let [new-content\n           (if content-update-fn\n             (content-update-fn (:block\/content block))\n             (:block\/content block))\n           new-content\n           (->> new-content\n                (property\/remove-property format \"id\")\n                (property\/remove-property format \"custom_id\"))\n           m (merge (dissoc block\n                            :block\/pre-block?\n                            :block\/uuid\n                            :db\/id\n                            :block\/left\n                            :block\/parent)\n                    {:block\/uuid uuid\n                     :block\/page (select-keys page [:db\/id])\n                     :block\/format format\n                     :block\/properties (apply dissoc (:block\/properties block)\n                                              (concat [:id :custom_id :custom-id]\n                                                      exclude-properties))\n                     :block\/meta (dissoc (:block\/meta block) :start-pos :end-pos)\n                     :block\/content new-content\n                     :block\/path-refs (->> (cons (:db\/id page) (:block\/path-refs block))\n                                           (remove nil?))})]\n       m))))\n\n(defn paste-block-vec-tree-at-target\n  [tree exclude-properties {:keys [content-update-fn\n                                   get-pos-fn\n                                   page-block]\n                            :as _opts}]\n  (let [page (or page-block\n                 (:block\/page (db\/entity (:db\/id (state\/get-edit-block)))))\n        [target-block sibling? delete-editing-block? editing-block]\n        ((or get-pos-fn get-block-tree-insert-pos-at-point))]\n    (when target-block\n      (let [target-block (outliner-core\/block target-block)\n            format (or (:block\/format target-block) (state\/get-preferred-format))\n            new-block-uuids (atom #{})\n            metadata-replaced-blocks\n            (zip\/root\n             (loop [loc (zip\/vector-zip tree)]\n               (if (zip\/end? loc)\n                 loc\n                 (if (vector? (zip\/node loc))\n                   (recur (zip\/next loc))\n                   (let [uuid (random-uuid)]\n                     (swap! new-block-uuids (fn [acc uuid] (conj acc uuid)) uuid)\n                     (recur (zip\/next (zip\/edit\n                                       loc\n                                       (paste-block-tree-at-point-edit-aux\n                                        uuid page exclude-properties format content-update-fn)))))))))\n            _ (when editing-block\n                (let [editing-block (outliner-core\/block editing-block)]\n                  (outliner-core\/save-node editing-block)))\n            _ (outliner-core\/insert-nodes metadata-replaced-blocks target-block sibling?)\n            _ (when (and delete-editing-block? editing-block)\n                (when-let [id (:db\/id editing-block)]\n                  (outliner-core\/delete-node (outliner-core\/block (db\/pull id)) true)))]\n        (last metadata-replaced-blocks)))))\n\n(defn- tree->vec-tree\n  \"tree:\n  [\n  {\n    :content 'this is a block',\n    :properties {\\\"key\\\" \\\"value\\\" \\\"key2\\\" \\\"value2\\\"},\n    :children [\n      { :content 'this is child block' }\n    ]\n  },\n  {\n    :content 'this is sibling block'\n  }\n  ]\"\n  [tree]\n  (into []\n        (mapcat\n         (fn [e]\n           (let [e* (select-keys e [:content :properties])\n                 children (:children e)]\n             (if (seq children)\n               [e* (tree->vec-tree (:children e))]\n               [e*])))\n         tree)))\n\n(defn- vec-tree->vec-block-tree\n  [tree format]\n  (let [loc (zip\/vector-zip tree)]\n    (loop [loc loc]\n      (if (zip\/end? loc)\n        (zip\/root loc)\n        (let [node (zip\/node loc)]\n          (if (vector? node)\n            (recur (zip\/next loc))\n            (let [content (:content node)\n                  props (into [] (:properties node))\n                  content* (str (if (= :markdown format) \"- \" \"* \")\n                                (property\/insert-properties format content props))\n                  ast (mldoc\/->edn content* (mldoc\/default-config format))\n                  blocks (block\/extract-blocks ast content* true format)\n                  fst-block (first blocks)]\n              (assert fst-block \"fst-block shouldn't be nil\")\n              (recur (zip\/next (zip\/replace loc fst-block))))))))))\n\n(defn paste-block-tree-after-target\n  [target-block-id sibling? tree format]\n  (let [vec-tree (tree->vec-tree tree)\n        block-tree (vec-tree->vec-block-tree vec-tree format)\n        target-block (db\/pull target-block-id)\n        page-block (if (:block\/name target-block) target-block\n                       (db\/entity (:db\/id (:block\/page (db\/pull target-block-id)))))\n        ;; sibling? = false, when target-block is a page-block\n        sibling? (if (= target-block-id (:db\/id page-block))\n                   false\n                   sibling?)]\n    (paste-block-vec-tree-at-target\n     block-tree []\n     {:get-pos-fn #(get-block-tree-insert-pos-after-target target-block-id sibling?)\n      :page-block page-block})))\n\n(defn insert-template!\n  ([element-id db-id]\n   (insert-template! element-id db-id {}))\n  ([element-id db-id opts]\n   (when-let [db-id (if (integer? db-id)\n                      db-id\n                      (:db\/id (db-model\/get-template-by-name (name db-id))))]\n     (let [repo (state\/get-current-repo)\n           block (db\/entity db-id)\n           format (:block\/format block)\n           block-uuid (:block\/uuid block)\n           template-including-parent? (not (false? (:template-including-parent (:block\/properties block))))\n           blocks (if template-including-parent? (db\/get-block-and-children repo block-uuid) (db\/get-block-children repo block-uuid))\n           root-block (db\/pull db-id)\n           blocks-exclude-root (remove (fn [b] (= (:db\/id b) db-id)) blocks)\n           sorted-blocks (tree\/sort-blocks blocks-exclude-root root-block)\n           sorted-blocks (->> (blocks-with-level sorted-blocks)\n                              (map second))\n           result-blocks (if template-including-parent?\n                           sorted-blocks\n                           (->> (drop 1 sorted-blocks)\n                                (map (fn [block] (update block :level dec)))))\n           tree (blocks-vec->tree result-blocks)]\n       (when element-id\n         (insert-command! element-id \"\" format {}))\n       (let [opts (merge\n                   {:content-update-fn (fn [content]\n                                         (->> content\n                                              (property\/remove-property format \"template\")\n                                              (property\/remove-property format \"template-including-parent\")\n                                              template\/resolve-dynamic-template!))}\n                   opts)\n             last-block (paste-block-vec-tree-at-target tree [:id :template :template-including-parent] opts)]\n         (clear-when-saved!)\n         (let [block (if (tree\/satisfied-inode? last-block)\n                       (:data last-block)\n                       (:data (last (flatten last-block))))]\n           (edit-block! block :max (:block\/uuid block))))))))\n\n(defn template-on-chosen-handler\n  [element-id]\n  (fn [[_template db-id] _click?]\n    (insert-template! element-id db-id)))\n\n(defn parent-is-page?\n  [{{:block\/keys [parent page]} :data :as node}]\n  {:pre [(tree\/satisfied-inode? node)]}\n  (= parent page))\n\n(defn outdent-on-enter\n  [node]\n  (when-not (parent-is-page? node)\n    (let [parent-node (tree\/-get-parent node)]\n      (outliner-core\/move-subtree node parent-node true))))\n\n(defn- last-top-level-child?\n  [{:keys [id]} current-node]\n  (when id\n    (when-let [entity (if (util\/uuid-string? (str id))\n                        (db\/entity [:block\/uuid (uuid id)])\n                        (db\/entity [:block\/name (util\/page-name-sanity-lc id)]))]\n      (= (:block\/uuid entity) (tree\/-get-parent-id current-node)))))\n\n(defn- insert\n  [insertion]\n  (when-not (auto-complete?)\n    (let [^js input (state\/get-input)\n          selected-start (util\/get-selection-start input)\n          selected-end (util\/get-selection-end input)\n          value (.-value input)\n          s1 (subs value 0 selected-start)\n          s2 (subs value selected-end)]\n      (state\/set-edit-content! (state\/get-edit-input-id)\n                               (str s1 insertion s2))\n      (cursor\/move-cursor-to input (+ selected-start (count insertion))))))\n\n(defn- keydown-new-line\n  []\n  (insert \"\\n\"))\n\n(declare delete-and-update)\n\n(defn- dwim-in-properties\n  [state]\n  (when-not (auto-complete?)\n    (let [{:keys [block]} (get-state)]\n      (when block\n        (let [input (state\/get-input)\n              content (gobj\/get input \"value\")\n              format (:block\/format (:block (get-state)))\n              property-key (:raw-content (thingatpt\/property-key-at-point input))\n              org? (= format :org)\n              move-to-pos (if org? 2 3)]\n          (if org?\n            (cond\n              (and property-key (not= property-key \"\"))\n              (case property-key\n                ;; When cursor in \"PROPERTIES\", add :|: in a new line and move cursor to |\n                \"PROPERTIES\"\n                (do (cursor\/move-cursor-to-line-end input)\n                    (insert \"\\n:: \")\n                    (cursor\/move-cursor-backward input move-to-pos))\n                ;; When cursor in \"END\", new block (respect the previous enter behavior)\n                \"END\"\n                (do\n                  (cursor\/move-cursor-to-end input)\n                  (insert-new-block! state))\n                ;; cursor in other positions of :ke|y: or ke|y::, move to line end for inserting value.\n                (if (property\/property-key-exist? format content property-key)\n                  (notification\/show!\n                   [:p.content\n                    (util\/format \"Property key \\\"%s\\\" already exists!\" property-key)]\n                   :error)\n                  (cursor\/move-cursor-to-line-end input)))\n\n              ;; when cursor in empty property key\n              (and property-key (= property-key \"\"))\n              (do (delete-and-update\n                   input\n                   (cursor\/line-beginning-pos input)\n                   (inc (cursor\/line-end-pos input)))\n                  (property\/goto-properties-end format input)\n                  (cursor\/move-cursor-to-line-end input))\n              :else\n              ;;When cursor in other place of PROPERTIES drawer, add :|: in a new line and move cursor to |\n              (do\n                (insert \"\\n:: \")\n                (cursor\/move-cursor-backward input move-to-pos)))\n            (insert \"\\n\")))))))\n\n(defn- dwim-in-list\n  [_state]\n  (when-not (auto-complete?)\n    (let [{:keys [block]} (get-state)]\n      (when block\n        (let [input (state\/get-input)]\n          (when-let [item (thingatpt\/list-item-at-point input)]\n            (let [{:keys [full-content indent bullet checkbox ordered _]} item\n                  next-bullet (if ordered (str (inc bullet) \".\") bullet)\n                  checkbox (when checkbox \"[ ] \")]\n              (if (= (count full-content)\n                     (+ (if ordered (+ (count (str bullet)) 2) 2) (when checkbox (count checkbox))))\n                (delete-and-update input (cursor\/line-beginning-pos input) (cursor\/line-end-pos input))\n                (do (cursor\/move-cursor-to-line-end input)\n                    (insert (str \"\\n\" indent next-bullet \" \" checkbox))\n                    (when ordered\n                      (let [bullet-atom (atom (inc bullet))]\n                        (while (when-let [next-item (list\/get-next-item input)]\n                                 (swap! bullet-atom inc)\n                                 (let [{:keys [full-content start end]} next-item\n                                       new-bullet @bullet-atom]\n                                   (delete-and-update input start end)\n                                   (insert (string\/replace-first full-content (:bullet next-item) new-bullet))\n                                   true))\n                          nil)\n                        (cursor\/move-cursor-to input (+ (:end item) (count next-bullet) 2)))))))))))))\n\n(defn toggle-list!\n  []\n  (when-not (auto-complete?)\n    (let [{:keys [block]} (get-state)]\n      (when block\n        (let [input (state\/get-input)\n              format (or (db\/get-page-format (state\/get-current-page)) (state\/get-preferred-format))\n              new-unordered-bullet (case format :org \"-\" \"*\")\n              current-pos (cursor\/pos input)\n              content (state\/get-edit-content)\n              pos (atom current-pos)]\n          (if-let [item (thingatpt\/list-item-at-point input)]\n            (let [{:keys [ordered]} item\n                  list-beginning-pos (list\/list-beginning-pos input)\n                  list-end-pos (list\/list-end-pos input)\n                  list (subs content list-beginning-pos list-end-pos)\n                  items (string\/split-lines list)\n                  splitter-reg (if ordered #\"[\\d]*\\.\\s*\" #\"[-\\*]{1}\\s*\")\n                  items-without-bullet (vec (map #(last (string\/split % splitter-reg 2)) items))\n                  new-list (string\/join \"\\n\"\n                                        (if ordered\n                                          (map #(str new-unordered-bullet \" \" %) items-without-bullet)\n                                          (map-indexed #(str (inc %1) \". \" %2) items-without-bullet)))\n                  index-of-current-item (inc (.indexOf items-without-bullet\n                                                       (last (string\/split (:raw-content item) splitter-reg 2))))\n                  numbers-length (->> (map-indexed\n                                       #_:clj-kondo\/ignore\n                                       #(str (inc %1) \". \")\n                                       (subvec items-without-bullet 0 index-of-current-item))\n                                      string\/join\n                                      count)\n                  pos-diff (- numbers-length (* 2 index-of-current-item))]\n              (delete-and-update input list-beginning-pos list-end-pos)\n              (insert new-list)\n              (reset! pos (if ordered\n                            (- current-pos pos-diff)\n                            (+ current-pos pos-diff))))\n            (let [prev-item (list\/get-prev-item input)]\n              (cursor\/move-cursor-down input)\n              (cursor\/move-cursor-to-line-beginning input)\n              (if prev-item\n                (let [{:keys [bullet ordered]} prev-item\n                      current-bullet (if ordered (str (inc bullet) \".\") bullet)]\n                  (insert (str current-bullet \" \"))\n                  (reset! pos (+ current-pos (count current-bullet) 1)))\n                (do (insert (str new-unordered-bullet \" \"))\n                    (reset! pos (+ current-pos 2))))))\n          (cursor\/move-cursor-to input @pos))))))\n\n(defn toggle-page-reference-embed\n  [parent-id]\n  (let [{:keys [block]} (get-state)]\n    (when block\n      (let [input (state\/get-input)\n            new-pos (cursor\/get-caret-pos input)\n            page-ref-fn (fn [bounds backward-pos]\n                          (commands\/simple-insert!\n                           parent-id bounds\n                           {:backward-pos backward-pos\n                            :check-fn (fn [_ _ _]\n                                        (reset! commands\/*slash-caret-pos new-pos)\n                                        (commands\/handle-step [:editor\/search-page]))}))]\n        (state\/set-editor-show-page-search! false)\n        (let [selection (get-selection-and-format)\n              {:keys [selection-start selection-end selection]} selection]\n          (if selection\n            (do (delete-and-update input selection-start selection-end)\n                (insert (util\/format \"[[%s]]\" selection)))\n            (if-let [embed-ref (thingatpt\/embed-macro-at-point input)]\n              (let [{:keys [raw-content start end]} embed-ref]\n                (delete-and-update input start end)\n                (if (= 5 (count raw-content))\n                  (page-ref-fn \"[[]]\" 2)\n                  (insert raw-content)))\n              (if-let [page-ref (thingatpt\/page-ref-at-point input)]\n                (let [{:keys [start end full-content raw-content]} page-ref]\n                  (delete-and-update input start end)\n                  (if (= raw-content \"\")\n                    (page-ref-fn \"{{embed [[]]}}\" 4)\n                    (insert (util\/format \"{{embed %s}}\" full-content))))\n                (page-ref-fn \"[[]]\" 2)))))))))\n\n(defn toggle-block-reference-embed\n  [parent-id]\n  (let [{:keys [block]} (get-state)]\n    (when block\n      (let [input (state\/get-input)\n            new-pos (cursor\/get-caret-pos input)\n            block-ref-fn (fn [bounds backward-pos]\n                           (commands\/simple-insert!\n                            parent-id bounds\n                            {:backward-pos backward-pos\n                             :check-fn     (fn [_ _ _]\n                                             (reset! commands\/*slash-caret-pos new-pos)\n                                             (commands\/handle-step [:editor\/search-block]))}))]\n        (state\/set-editor-show-block-search! false)\n        (if-let [embed-ref (thingatpt\/embed-macro-at-point input)]\n          (let [{:keys [raw-content start end]} embed-ref]\n            (delete-and-update input start end)\n            (if (= 5 (count raw-content))\n              (block-ref-fn \"(())\" 2)\n              (insert raw-content)))\n          (if-let [page-ref (thingatpt\/block-ref-at-point input)]\n            (let [{:keys [start end full-content raw-content]} page-ref]\n              (delete-and-update input start end)\n              (if (= raw-content \"\")\n                (block-ref-fn \"{{embed (())}}\" 4)\n                (insert (util\/format \"{{embed %s}}\" full-content))))\n            (block-ref-fn \"(())\" 2)))))))\n\n(defn- keydown-new-block\n  [state]\n  (when-not (auto-complete?)\n    (let [{:keys [block config]} (get-state)]\n      (when block\n        (let [input (state\/get-input)\n              content (gobj\/get input \"value\")\n              pos (cursor\/pos input)\n              current-node (outliner-core\/block block)\n              has-right? (-> (tree\/-get-right current-node)\n                             (tree\/satisfied-inode?))\n              thing-at-point ;intern is not supported in cljs, need a more elegant solution\n              (or (when (thingatpt\/get-setting :admonition&src?)\n                    (thingatpt\/admonition&src-at-point input))\n                  (when (thingatpt\/get-setting :markup?)\n                    (thingatpt\/markup-at-point input))\n                  (when (thingatpt\/get-setting :block-ref?)\n                    (thingatpt\/block-ref-at-point input))\n                  (when (thingatpt\/get-setting :page-ref?)\n                    (thingatpt\/page-ref-at-point input))\n                  (when (thingatpt\/get-setting :properties?)\n                    (thingatpt\/properties-at-point input))\n                  (when (thingatpt\/get-setting :list?)\n                    (and (not (cursor\/beginning-of-line? input))\n                         (thingatpt\/list-item-at-point input))))]\n          (cond\n            thing-at-point\n            (case (:type thing-at-point)\n              \"markup\" (let [right-bound (:bounds thing-at-point)]\n                         (cursor\/move-cursor-to\n                          input\n                          (+ (string\/index-of content right-bound pos)\n                             (count right-bound))))\n              \"admonition-block\" (keydown-new-line)\n              \"source-block\" (do\n                               (keydown-new-line)\n                               (case (:action thing-at-point)\n                                 :into-code-editor\n                                 (state\/into-code-editor-mode!)\n                                 nil))\n              \"block-ref\" (open-block-in-sidebar! (:link thing-at-point))\n              \"page-ref\" (when-not (string\/blank? (:link thing-at-point))\n                           (let [page (:link thing-at-point)\n                                 page-name (db-model\/get-redirect-page-name page)]\n                             (insert-first-page-block-if-not-exists! page-name)\n                             (route-handler\/redirect-to-page! page-name)))\n              \"list-item\" (dwim-in-list state)\n              \"properties-drawer\" (dwim-in-properties state))\n\n            (and\n             (string\/blank? content)\n             (not has-right?)\n             (not (last-top-level-child? config current-node)))\n            (outdent-on-enter current-node)\n\n            :else\n            (profile\n             \"Insert block\"\n             (insert-new-block! state))))))))\n\n(defn keydown-new-block-handler [state e]\n  (if (state\/doc-mode-enter-for-new-line?)\n    (keydown-new-line)\n    (do\n      (.preventDefault e)\n      (keydown-new-block state))))\n\n(defn keydown-new-line-handler [state e]\n  (if (state\/doc-mode-enter-for-new-line?)\n    (keydown-new-block state)\n    (do\n      (.preventDefault e)\n      (keydown-new-line))))\n\n(defn- select-first-last\n  \"Select first or last block in viewpoint\"\n  [direction]\n  (let [f (case direction :up last :down first)\n        block (->> (util\/get-blocks-noncollapse)\n                   (f))]\n    (when block\n      (.scrollIntoView block #js {:behavior \"smooth\" :block \"center\"})\n      (state\/exit-editing-and-set-selected-blocks! [block]))))\n\n(defn- select-up-down [direction]\n  (let [selected (first (state\/get-selection-blocks))\n        f (case direction\n            :up util\/get-prev-block-non-collapsed\n            :down util\/get-next-block-non-collapsed)\n        sibling-block (f selected)]\n    (when (and sibling-block (dom\/attr sibling-block \"blockid\"))\n      (.scrollIntoView sibling-block #js {:behavior \"smooth\" :block \"center\"})\n      (state\/exit-editing-and-set-selected-blocks! [sibling-block]))))\n\n(defn- move-cross-boundrary-up-down\n  [direction]\n  (let [input (state\/get-input)\n        line-pos (util\/get-first-or-last-line-pos input)\n        repo (state\/get-current-repo)\n        f (case direction\n            :up util\/get-prev-block-non-collapsed\n            :down util\/get-next-block-non-collapsed)\n        sibling-block (f (gdom\/getElement (state\/get-editing-block-dom-id)))\n        {:block\/keys [uuid content format]} (state\/get-edit-block)]\n    (when sibling-block\n      (when-let [sibling-block-id (dom\/attr sibling-block \"blockid\")]\n        (let [value (state\/get-edit-content)]\n          (when (not= (clean-content! format content)\n                      (string\/trim value))\n            (save-block! repo uuid value)))\n\n        (let [new-id (string\/replace (gobj\/get sibling-block \"id\") \"ls-block\" \"edit-block\")\n              new-uuid (cljs.core\/uuid sibling-block-id)\n              block (db\/pull repo '[*] [:block\/uuid new-uuid])]\n          (edit-block! block\n                       [direction line-pos]\n                       new-id))))))\n\n(defn keydown-up-down-handler\n  [direction]\n  (let [input (state\/get-input)\n        selected-start (util\/get-selection-start input)\n        selected-end (util\/get-selection-end input)\n        up? (= direction :up)\n        down? (= direction :down)]\n    (cond\n      (not= selected-start selected-end)\n      (if up?\n        (cursor\/move-cursor-to input selected-start)\n        (cursor\/move-cursor-to input selected-end))\n\n      (or (and up? (cursor\/textarea-cursor-first-row? input))\n          (and down? (cursor\/textarea-cursor-last-row? input)))\n      (move-cross-boundrary-up-down direction)\n\n      :else\n      (if up?\n        (cursor\/move-cursor-up input)\n        (cursor\/move-cursor-down input)))))\n\n(defn- move-to-block-when-cross-boundrary\n  [direction]\n  (let [up? (= :left direction)\n        pos (if up? :max 0)\n        {:block\/keys [format uuid] :as block} (state\/get-edit-block)\n        id (state\/get-edit-input-id)\n        repo (state\/get-current-repo)\n        f (if up? util\/get-prev-block-non-collapsed util\/get-next-block-non-collapsed)\n        sibling-block (f (gdom\/getElement (state\/get-editing-block-dom-id)))]\n    (when sibling-block\n      (when-let [sibling-block-id (dom\/attr sibling-block \"blockid\")]\n        (let [content (:block\/content block)\n              value (state\/get-edit-content)]\n          (when (not= (clean-content! format content)\n                      (string\/trim value))\n            (save-block! repo uuid value)))\n        (let [block (db\/pull repo '[*] [:block\/uuid (cljs.core\/uuid sibling-block-id)])]\n          (edit-block! block pos id))))))\n\n(defn keydown-arrow-handler\n  [direction]\n  (let [input (state\/get-input)\n        element js\/document.activeElement\n        selected-start (util\/get-selection-start input)\n        selected-end (util\/get-selection-end input)\n        left? (= direction :left)\n        right? (= direction :right)]\n    (when (= input element)\n      (cond\n        (not= selected-start selected-end)\n        (if left?\n          (cursor\/move-cursor-to input selected-start)\n          (cursor\/move-cursor-to input selected-end))\n\n        (or (and left? (cursor\/start? input))\n            (and right? (cursor\/end? input)))\n        (move-to-block-when-cross-boundrary direction)\n\n        :else\n        (if left?\n          (cursor\/move-cursor-backward input)\n          (cursor\/move-cursor-forward input))))))\n\n(defn- delete-and-update [^js input start end]\n  (util\/safe-set-range-text! input \"\" start end)\n  (state\/set-edit-content! (state\/get-edit-input-id) (.-value input)))\n\n(defn- delete-concat [current-block]\n  (let [input-id (state\/get-edit-input-id)\n        ^js input (state\/get-input)\n        current-pos (cursor\/pos input)\n        value (gobj\/get input \"value\")\n        repo (state\/get-current-repo)\n        right (outliner-core\/get-right-node (outliner-core\/block current-block))\n        current-block-has-children? (db\/has-children? repo (:block\/uuid current-block))\n        collapsed? (util\/collapsed? current-block)\n        first-child (:data (tree\/-get-down (outliner-core\/block current-block)))\n        next-block (if (or collapsed? (not current-block-has-children?))\n                     (:data right)\n                     first-child)]\n    (cond\n      (and collapsed? right (db\/has-children? repo (tree\/-get-id right)))\n      nil\n\n      (and (not collapsed?) first-child (db\/has-children? repo (:block\/uuid first-child)))\n      nil\n\n      :else\n      (do\n        (delete-block-aux! next-block false)\n        (state\/set-edit-content! input-id (str value \"\" (:block\/content next-block)))\n        (cursor\/move-cursor-to input current-pos)))))\n\n(defn keydown-delete-handler\n  [_e]\n  (let [^js input (state\/get-input)\n        current-pos (cursor\/pos input)\n        value (gobj\/get input \"value\")\n        end? (= current-pos (count value))\n        current-block (state\/get-edit-block)\n        selected-start (util\/get-selection-start input)\n        selected-end (util\/get-selection-end input)]\n    (when current-block\n      (cond\n        (not= selected-start selected-end)\n        (delete-and-update input selected-start selected-end)\n\n        (and end? current-block)\n        (delete-concat current-block)\n\n        :else\n        (delete-and-update input current-pos (inc current-pos))))))\n\n(defn keydown-backspace-handler\n  [cut? e]\n  (let [^js input (state\/get-input)\n        id (state\/get-edit-input-id)\n        current-pos (cursor\/pos input)\n        value (gobj\/get input \"value\")\n        deleted (and (> current-pos 0)\n                     (util\/nth-safe value (dec current-pos)))\n        selected-start (util\/get-selection-start input)\n        selected-end (util\/get-selection-end input)\n        block (state\/get-edit-block)\n        repo (state\/get-current-repo)]\n    (mark-last-input-time! repo)\n    (cond\n      (not= selected-start selected-end)\n      (do\n        (util\/stop e)\n        (when cut?\n          (js\/document.execCommand \"copy\"))\n        (delete-and-update input selected-start selected-end))\n\n      (zero? current-pos)\n      (do\n        (util\/stop e)\n        ;; not the top block in a page or journal\n        (when-not (= (:block\/left block) (:block\/page block))\n          (delete-block! repo false)))\n\n      (and (> current-pos 1)\n           (= (util\/nth-safe value (dec current-pos)) (state\/get-editor-command-trigger)))\n      (do\n        (util\/stop e)\n        (reset! *slash-caret-pos nil)\n        (reset! *show-commands false)\n        (delete-and-update input (dec current-pos) current-pos))\n\n      (and (> current-pos 1)\n           (= (util\/nth-safe value (dec current-pos)) commands\/angle-bracket))\n      (do\n        (util\/stop e)\n        (reset! *angle-bracket-caret-pos nil)\n        (reset! *show-block-commands false)\n        (delete-and-update input (dec current-pos) current-pos))\n\n      ;; pair\n      (and\n       deleted\n       (contains?\n        (set (keys delete-map))\n        deleted)\n       (>= (count value) (inc current-pos))\n       (= (util\/nth-safe value current-pos)\n          (get delete-map deleted)))\n\n      (do\n        (util\/stop e)\n        (commands\/delete-pair! id)\n        (cond\n          (and (= deleted \"[\") (state\/get-editor-show-page-search?))\n          (state\/set-editor-show-page-search! false)\n\n          (and (= deleted \"(\") (state\/get-editor-show-block-search?))\n          (state\/set-editor-show-block-search! false)\n\n          :else\n          nil))\n\n      ;; deleting hashtag\n      (and (= deleted \"#\") (state\/get-editor-show-page-search-hashtag?))\n      (do\n        (state\/set-editor-show-page-search-hashtag! false)\n        (delete-and-update input (dec current-pos) current-pos))\n\n      ;; just delete\n      :else\n      (do\n        (util\/stop e)\n        (delete-and-update\n         input (util\/safe-dec-current-pos-from-end (.-value input) current-pos) current-pos)))))\n\n(defn indent-outdent\n  [indent?]\n  (state\/set-editor-op! :indent-outdent)\n  (let [{:keys [block]} (get-state)]\n    (when block\n      (let [current-node (outliner-core\/block block)]\n        (outliner-core\/indent-outdent-nodes [current-node] indent?)))\n    (state\/set-editor-op! :nil)))\n\n(defn keydown-tab-handler\n  [direction]\n  (fn [e]\n    (cond\n      (state\/editing?)\n      (let [input (state\/get-input)\n            pos (cursor\/pos input)]\n        (when (and (not (state\/get-editor-show-input))\n                   (not (state\/get-editor-show-date-picker?))\n                   (not (state\/get-editor-show-template-search?)))\n          (util\/stop e)\n          (indent-outdent (not (= :left direction)))\n          (and input pos\n               (when-let [input (state\/get-input)]\n                 (cursor\/move-cursor-to input pos)))))\n\n      (state\/selection?)\n      (do\n        (util\/stop e)\n        (on-tab direction)))\n    nil))\n\n(defn keydown-not-matched-handler\n  [format]\n  (fn [e _key-code]\n    (let [input-id (state\/get-edit-input-id)\n          input (state\/get-input)\n          key (gobj\/get e \"key\")\n          value (gobj\/get input \"value\")\n          ctrlKey (gobj\/get e \"ctrlKey\")\n          metaKey (gobj\/get e \"metaKey\")\n          pos (cursor\/pos input)\n          hashtag? (or (surround-by? input \"#\" \" \")\n                       (surround-by? input \"#\" :end)\n                       (= key \"#\"))]\n      (cond\n        (and (util\/event-is-composing? e true) ;; #3218\n             (not hashtag?) ;; #3283 @Rime\n             (not (state\/get-editor-show-page-search-hashtag?))) ;; #3283 @MacOS pinyin\n        nil\n\n        (or ctrlKey metaKey)\n        nil\n\n        ;; FIXME: On mobile, a backspace click to call keydown-backspace-handler\n        ;; does not work sometimes in an empty block, hence the empty block\n        ;; can't be deleted. Need to figure out why and find a better solution.\n        (and (mobile-util\/is-native-platform?)\n             (= key \"Backspace\")\n             (= value \"\"))\n        (do\n          (util\/stop e)\n          (delete-block! (state\/get-current-repo) false))\n\n        (and (= key \"#\")\n             (and\n              (> pos 0)\n              (= \"#\" (util\/nth-safe value (dec pos)))))\n        (state\/set-editor-show-page-search-hashtag! false)\n\n        (and\n         (contains? (set\/difference (set (keys reversed-autopair-map))\n                                    #{\"`\"})\n                    key)\n         (= (get-current-input-char input) key))\n        (do\n          (util\/stop e)\n          (cursor\/move-cursor-forward input))\n\n        (and (autopair-when-selected key) (string\/blank? (util\/get-selected-text)))\n        nil\n\n        (and (not (string\/blank? (util\/get-selected-text)))\n             (contains? keycode\/left-square-brackets-keys key))\n        (do\n          (autopair input-id \"[\" format nil)\n          (util\/stop e))\n\n        (and (not (string\/blank? (util\/get-selected-text)))\n             (contains? keycode\/left-paren-keys key))\n        (do\n          (util\/stop e)\n          (autopair input-id \"(\" format nil))\n\n        (contains? (set (keys autopair-map)) key)\n        (do\n          (util\/stop e)\n          (autopair input-id key format nil))\n\n        hashtag?\n        (do\n          (commands\/handle-step [:editor\/search-page-hashtag])\n          (if (= key \"#\")\n            (state\/set-last-pos! (inc (cursor\/pos input))) ;; In keydown handler, the `#` is not inserted yet.\n            (state\/set-last-pos! (cursor\/pos input)))\n          (reset! commands\/*slash-caret-pos (cursor\/get-caret-pos input)))\n\n        (let [sym \"$\"]\n          (and (= key sym)\n               (>= (count value) 1)\n               (> pos 0)\n               (= (nth value (dec pos)) sym)\n               (if (> (count value) pos)\n                 (not= (nth value pos) sym)\n                 true)))\n        (commands\/simple-insert! input-id \"$$\" {:backward-pos 2})\n\n        (let [sym \"^\"]\n          (and (= key sym)\n               (>= (count value) 1)\n               (> pos 0)\n               (= (nth value (dec pos)) sym)\n               (if (> (count value) pos)\n                 (not= (nth value pos) sym)\n                 true)))\n        (commands\/simple-insert! input-id \"^^\" {:backward-pos 2})\n\n        :else\n        nil))))\n\n(defn ^:large-vars\/cleanup-todo keyup-handler\n  [_state input input-id search-timeout]\n  (fn [e key-code]\n    (when-not (util\/event-is-composing? e)\n      (let [k (gobj\/get e \"key\")\n            code (gobj\/getValueByKeys e \"event_\" \"code\")\n            format (:format (get-state))\n            current-pos (cursor\/pos input)\n            value (gobj\/get input \"value\")\n            c (util\/nth-safe value (dec current-pos))\n            last-key-code (state\/get-last-key-code)\n            blank-selected? (string\/blank? (util\/get-selected-text))\n            is-processed? (util\/event-is-composing? e true) ;; #3440\n            non-enter-processed? (and is-processed? ;; #3251\n                                      (not= code keycode\/enter-code))] ;; #3459\n        (when-not (or (state\/get-editor-show-input) non-enter-processed?)\n          (cond\n            (and (not (contains? #{\"ArrowDown\" \"ArrowLeft\" \"ArrowRight\" \"ArrowUp\"} k))\n                 (not (:editor\/show-page-search? @state\/state))\n                 (not (:editor\/show-page-search-hashtag? @state\/state))\n                 (wrapped-by? input \"[[\" \"]]\"))\n            (let [orig-pos (cursor\/get-caret-pos input)\n                  value (gobj\/get input \"value\")\n                  square-pos (string\/last-index-of (subs value 0 (:pos orig-pos)) \"[[\")\n                  pos (+ square-pos 2)\n                  _ (state\/set-last-pos! pos)\n                  pos (assoc orig-pos :pos pos)\n                  command-step (if (= \\# (util\/nth-safe value (dec square-pos)))\n                                 :editor\/search-page-hashtag\n                                 :editor\/search-page)]\n              (commands\/handle-step [command-step])\n              (reset! commands\/*slash-caret-pos pos))\n\n            (and blank-selected?\n                 (contains? keycode\/left-square-brackets-keys k)\n                 (= (:key last-key-code) k)\n                 (> current-pos 0)\n                 (not (wrapped-by? input \"[[\" \"]]\")))\n            (do\n              (commands\/handle-step [:editor\/input \"[[]]\" {:backward-truncate-number 2\n                                                           :backward-pos 2}])\n              (commands\/handle-step [:editor\/search-page])\n              (reset! commands\/*slash-caret-pos (cursor\/get-caret-pos input)))\n\n            (and blank-selected?\n                 (contains? keycode\/left-paren-keys k)\n                 (= (:key last-key-code) k)\n                 (> current-pos 0)\n                 (not (wrapped-by? input \"((\" \"))\")))\n            (do\n              (commands\/handle-step [:editor\/input \"(())\" {:backward-truncate-number 2\n                                                           :backward-pos 2}])\n              (commands\/handle-step [:editor\/search-block :reference])\n              (reset! commands\/*slash-caret-pos (cursor\/get-caret-pos input)))\n\n            (and (= \"\u3008\" c)\n                 (= \"\u300a\" (util\/nth-safe value (dec (dec current-pos))))\n                 (> current-pos 0))\n            (do\n              (commands\/handle-step [:editor\/input commands\/angle-bracket {:last-pattern \"\u300a\u3008\"\n                                                                           :backward-pos 0}])\n              (reset! commands\/*angle-bracket-caret-pos (cursor\/get-caret-pos input))\n              (reset! commands\/*show-block-commands true))\n\n            (and (= c \" \")\n                 (or (= (util\/nth-safe value (dec (dec current-pos))) \"#\")\n                     (not (state\/get-editor-show-page-search?))\n                     (and (state\/get-editor-show-page-search?)\n                          (not= (util\/nth-safe value current-pos) \"]\"))))\n            (state\/set-editor-show-page-search-hashtag! false)\n\n            (and @*show-commands (not= k (state\/get-editor-command-trigger)))\n            (let [matched-commands (get-matched-commands input)]\n              (if (seq matched-commands)\n                (do\n                  (reset! *show-commands true)\n                  (reset! commands\/*matched-commands matched-commands))\n                (reset! *show-commands false)))\n\n            (and @*show-block-commands (not= key-code 188)) ; not <\n            (let [matched-block-commands (get-matched-block-commands input)]\n              (if (seq matched-block-commands)\n                (cond\n                  (= key-code 9)       ;tab\n                  (when @*show-block-commands\n                    (util\/stop e)\n                    (insert-command! input-id\n                                     (last (first matched-block-commands))\n                                     format\n                                     {:last-pattern commands\/angle-bracket}))\n\n                  :else\n                  (reset! commands\/*matched-block-commands matched-block-commands))\n                (reset! *show-block-commands false)))\n\n            (nil? @search-timeout)\n            (close-autocomplete-if-outside input)\n\n            :else\n            nil))\n        (when-not (or (= k \"Shift\") is-processed?)\n          (state\/set-last-key-code! {:key-code key-code\n                                     :code code\n                                     :key k\n                                     :shift? (.-shiftKey e)}))))))\n\n(defn editor-on-click!\n  [id]\n  (fn [_e]\n    (let [input (gdom\/getElement id)]\n      (close-autocomplete-if-outside input))))\n\n(defonce mobile-toolbar-height 40)\n(defn editor-on-height-change!\n  [id]\n  (fn [box-height ^js row-height]\n    (let [row-height (:rowHeight (js->clj row-height :keywordize-keys true))\n          input (gdom\/getElement id)\n          caret (cursor\/get-caret-pos input)\n          cursor-bottom (if caret (+ row-height (:top caret)) box-height)\n          box-top (gobj\/get (.getBoundingClientRect input) \"top\")\n          cursor-y (+ cursor-bottom box-top)\n          vw-height (.-height js\/window.visualViewport)]\n      (when (<  vw-height (+ cursor-y mobile-toolbar-height))\n        (let [main-node (gdom\/getElement \"main-content-container\")\n              scroll-top (.-scrollTop main-node)]\n          (set! (.-scrollTop main-node) (+ scroll-top (\/ vw-height 2))))))))\n\n(defn editor-on-change!\n  [block id search-timeout]\n  (fn [e]\n    (if (state\/sub :editor\/show-block-search?)\n      (let [timeout 300]\n        (when @search-timeout\n          (js\/clearTimeout @search-timeout))\n        (reset! search-timeout\n                (js\/setTimeout\n                 #(edit-box-on-change! e block id)\n                 timeout)))\n      (edit-box-on-change! e block id))))\n\n(defn blocks->tree-by-level\n  [blocks]\n  (let [min-level (apply min (mapv :block\/level blocks))\n        prefix-level (if (> min-level 1) (- min-level 1) 0)]\n    (->> blocks\n         (mapv #(assoc % :level (- (:block\/level %) prefix-level)))\n         (blocks-vec->tree))))\n\n(defn- paste-text-parseable\n  [format text]\n  (let [tree (->>\n              (block\/extract-blocks\n               (mldoc\/->edn text (mldoc\/default-config format)) text true format))\n        min-level (apply min (mapv :block\/level tree))\n        prefix-level (if (> min-level 1) (- min-level 1) 0)\n        tree* (->> tree\n                   (mapv #(assoc % :level (- (:block\/level %) prefix-level)))\n                   (blocks-vec->tree))]\n    (paste-block-vec-tree-at-target tree* [] nil)))\n\n(defn- paste-segmented-text\n  [format text]\n  (let [paragraphs (string\/split text #\"(?:\\r?\\n){2,}\")\n        updated-paragraphs\n        (string\/join \"\\n\"\n                     (mapv (fn [p] (->> (string\/trim p)\n                                        ((fn [p]\n                                           (if (util\/safe-re-find (if (= format :org)\n                                                                    #\"\\s*\\*+\\s+\"\n                                                                    #\"\\s*-\\s+\") p)\n                                             p\n                                             (str (if (= format :org) \"* \" \"- \") p))))))\n                           paragraphs))]\n    (paste-text-parseable format updated-paragraphs)))\n\n(defn- paste-text\n  [text e]\n  (let [copied-blocks (state\/get-copied-blocks)\n        copied-block-tree (:copy\/block-tree copied-blocks)\n        input (state\/get-input)\n        *stop-event? (atom true)]\n    (cond\n      (and\n       (:copy\/content copied-blocks)\n       (not (string\/blank? text))\n       (= (string\/replace (string\/trim text) \"\\r\" \"\")\n          (string\/replace (string\/trim (:copy\/content copied-blocks)) \"\\r\" \"\")))\n      (paste-block-vec-tree-at-target copied-block-tree [] nil)\n\n      (and (util\/url? text)\n           (not (string\/blank? (util\/get-selected-text))))\n      (html-link-format! text)\n\n      (and (util\/url? text)\n           (or (string\/includes? text \"youtube.com\")\n               (string\/includes? text \"youtu.be\"))\n           (mobile-util\/is-native-platform?))\n      (commands\/simple-insert! (state\/get-edit-input-id) (util\/format \"{{youtube %s}}\" text) nil)\n\n      (and (util\/url? text)\n           (string\/includes? text \"twitter.com\")\n           (mobile-util\/is-native-platform?))\n      (commands\/simple-insert! (state\/get-edit-input-id) (util\/format \"{{twitter %s}}\" text) nil)\n\n      (and (text\/block-ref? text)\n           (wrapped-by? input \"((\" \"))\"))\n      (commands\/simple-insert! (state\/get-edit-input-id) (text\/get-block-ref text) nil)\n\n      :else\n      ;; from external\n      (let [format (or (db\/get-page-format (state\/get-current-page)) :markdown)]\n        (match [format\n                (nil? (util\/safe-re-find #\"(?m)^\\s*(?:[-+*]|#+)\\s+\" text))\n                (nil? (util\/safe-re-find #\"(?m)^\\s*\\*+\\s+\" text))\n                (nil? (util\/safe-re-find #\"(?:\\r?\\n){2,}\" text))]\n          [:markdown false _ _]\n          (paste-text-parseable format text)\n\n          [:org _ false _]\n          (paste-text-parseable format text)\n\n          [:markdown true _ false]\n          (paste-segmented-text format text)\n\n          [:markdown true _ true]\n          (reset! *stop-event? false)\n\n          [:org _ true false]\n          (paste-segmented-text format text)\n\n          [:org _ true true]\n          (reset! *stop-event? false))))\n    (when @*stop-event?\n      (util\/stop e))))\n\n(defn paste-text-in-one-block-at-point\n  []\n  (utils\/getClipText\n   (fn [clipboard-data]\n     (when-let [_ (state\/get-input)]\n       (state\/append-current-edit-content! clipboard-data)))\n   (fn [error]\n     (js\/console.error error))))\n\n(defn editor-on-paste!\n  [id]\n  (fn [e]\n    (state\/set-state! :editor\/on-paste? true)\n    (let [text (.getData (gobj\/get e \"clipboardData\") \"text\")\n          input (state\/get-input)]\n      (if-not (string\/blank? text)\n        (if (thingatpt\/org-admonition&src-at-point input)\n          (do (util\/stop e)\n              (paste-text-in-one-block-at-point))\n          (paste-text text e))\n        (let [_handled\n              (let [clipboard-data (gobj\/get e \"clipboardData\")\n                    files (.-files clipboard-data)]\n                (when-let [file (first files)]\n                  (when-let [block (state\/get-edit-block)]\n                    (upload-asset id #js[file] (:block\/format block) *asset-uploading? true))))]\n          (util\/stop e))))))\n\n(defn- cut-blocks-and-clear-selections!\n  [copy?]\n  (cut-selection-blocks copy?)\n  (clear-selection!))\n\n(defn shortcut-copy-selection\n  [_e]\n  (copy-selection-blocks))\n\n(defn shortcut-cut-selection\n  [e]\n  (util\/stop e)\n  (cut-blocks-and-clear-selections! true))\n\n(defn shortcut-delete-selection\n  [e]\n  (util\/stop e)\n  (cut-blocks-and-clear-selections! false))\n\n;; credits to @pengx17\n(defn- copy-current-block-ref\n  []\n  (when-let [current-block (state\/get-edit-block)]\n    (when-let [block-id (:block\/uuid current-block)]\n      (copy-block-ref! block-id #(str \"((\" % \"))\"))\n      (notification\/show!\n       [:div\n        [:span.mb-1.5 \"Block ref copied!\"]\n        [:div [:code.whitespace-nowrap (str \"((\" block-id \"))\")]]]\n       :success true\n       ;; use uuid to make sure there is only one toast a time\n       (str \"copied-block-ref:\" block-id)))))\n\n(defn shortcut-copy\n  \"shortcut copy action:\n  * when in selection mode, copy selected blocks\n  * when in edit mode but no text selected, copy current block ref\n  * when in edit mode with text selected, copy selected text as normal\"\n  [e]\n  (when-not (auto-complete?)\n    (cond\n      (state\/selection?)\n      (shortcut-copy-selection e)\n\n      (state\/editing?)\n      (let [input (state\/get-input)\n            selected-start (util\/get-selection-start input)\n            selected-end (util\/get-selection-end input)]\n        (if (= selected-start selected-end)\n          (copy-current-block-ref)\n          (js\/document.execCommand \"copy\")))\n\n      :else\n      (js\/document.execCommand \"copy\"))))\n\n(defn shortcut-cut\n  \"shortcut cut action:\n  * when in selection mode, cut selected blocks\n  * when in edit mode with text selected, cut selected text\n  * otherwise same as delete shortcut\"\n  [e]\n  (cond\n    (state\/selection?)\n    (shortcut-cut-selection e)\n\n    (state\/editing?)\n    (keydown-backspace-handler true e)))\n\n(defn delete-selection\n  [e]\n  (when (state\/selection?)\n    (shortcut-delete-selection e)))\n\n(defn editor-delete\n  [_state e]\n  (when (state\/editing?)\n    (util\/stop e)\n    (keydown-delete-handler e)))\n\n(defn editor-backspace\n  [_state e]\n  (when (state\/editing?)\n    (keydown-backspace-handler false e)))\n\n(defn shortcut-up-down [direction]\n  (fn [e]\n    (when-not (auto-complete?)\n      (util\/stop e)\n      (cond\n        (state\/editing?)\n        (keydown-up-down-handler direction)\n\n        (and (state\/selection?) (== 1 (count (state\/get-selection-blocks))))\n        (select-up-down direction)\n\n        :else\n        (select-first-last direction)))))\n\n(defn open-selected-block!\n  [direction e]\n  (when-let [block-id (some-> (state\/get-selection-blocks)\n                              first\n                              (dom\/attr \"blockid\")\n                              medley\/uuid)]\n    (util\/stop e)\n    (let [block    {:block\/uuid block-id}\n          block-id (-> (state\/get-selection-blocks)\n                       first\n                       (gobj\/get \"id\")\n                       (string\/replace \"ls-block\" \"edit-block\"))\n          left?    (= direction :left)]\n      (edit-block! block\n                   (if left? 0 :max)\n                   block-id))))\n\n(defn shortcut-left-right [direction]\n  (fn [e]\n    (when-not (auto-complete?)\n      (cond\n        (state\/editing?)\n        (do\n          (util\/stop e)\n          (keydown-arrow-handler direction))\n\n        (and (state\/selection?) (== 1 (count (state\/get-selection-blocks))))\n        (do\n          (util\/stop e)\n          (open-selected-block! direction e))\n\n        :else\n        nil))))\n\n(defn clear-block-content! []\n  (save-current-block! {:force? true})\n  (state\/set-edit-content! (state\/get-edit-input-id) \"\"))\n\n(defn kill-line-before! []\n  (save-current-block! {:force? true})\n  (util\/kill-line-before! (state\/get-input)))\n\n(defn kill-line-after! []\n  (save-current-block! {:force? true})\n  (util\/kill-line-after! (state\/get-input)))\n\n(defn beginning-of-block []\n  (cursor\/move-cursor-to (state\/get-input) 0))\n\n(defn end-of-block []\n  (cursor\/move-cursor-to-end (state\/get-input)))\n\n(defn cursor-forward-word []\n  (cursor\/move-cursor-forward-by-word (state\/get-input)))\n\n(defn cursor-backward-word []\n  (cursor\/move-cursor-backward-by-word (state\/get-input)))\n\n(defn backward-kill-word []\n  (let [input (state\/get-input)]\n    (save-current-block! {:force? true})\n    (util\/backward-kill-word input)\n    (state\/set-edit-content! (state\/get-edit-input-id) (.-value input))))\n\n(defn forward-kill-word []\n  (let [input (state\/get-input)]\n    (save-current-block! {:force? true})\n    (util\/forward-kill-word input)\n    (state\/set-edit-content! (state\/get-edit-input-id) (.-value input))))\n\n(defn block-with-title?\n  [format content semantic?]\n  (and (string\/includes? content \"\\n\")\n       (if semantic?\n         (let [ast (mldoc\/->edn content (mldoc\/default-config format))\n               first-elem-type (first (ffirst ast))]\n           (mldoc\/block-with-title? first-elem-type))\n         true)))\n\n(defn collapsable?\n  ([block-id]\n   (collapsable? block-id {}))\n  ([block-id {:keys [semantic?]\n              :or {semantic? false}}]\n   (when block-id\n     (if-let [block (db-model\/query-block-by-uuid block-id)]\n       (and\n        (not (util\/collapsed? block))\n        (or (db-model\/has-children? block-id)\n            (and\n             (:outliner\/block-title-collapse-enabled? (state\/get-config))\n             (block-with-title? (:block\/format block)\n                                (:block\/content block)\n                                semantic?))))\n       false))))\n\n(defn all-blocks-with-level\n  \"Return all blocks associated with correct level\n   if :root-block is not nil, only return root block with its children\n   if :expanded? true, return expanded children\n   if :collapse? true, return without any collapsed children\n   if :incremental? true, collapse\/expand will be step by step\n   for example:\n   - a\n    - b (collapsed)\n     - c\n     - d\n    - e\n   return:\n    blocks\n    [{:block a :level 1}\n     {:block b :level 2}\n     {:block e :level 2}]\"\n  [{:keys [collapse? expanded? incremental? root-block]\n    :or {collapse? false expanded? false incremental? true root-block nil}}]\n  (when-let [page (or (state\/get-current-page)\n                      (date\/today))]\n    (let [block? (util\/uuid-string? page)\n          block-id (or root-block (and block? (uuid page)))\n          blocks (if block-id\n                   (db\/get-block-and-children (state\/get-current-repo) block-id)\n                   (db\/get-page-blocks-no-cache page))\n          root-block (or block-id root-block)]\n      (if incremental?\n        (let [blocks (tree\/blocks->vec-tree blocks (or block-id page))]\n          (->>\n           (cond->> blocks\n             root-block\n             (map (fn find [root]\n                    (if (= root-block (:block\/uuid root))\n                      root\n                      (first (filter find (:block\/children root []))))))\n\n             collapse?\n             (w\/postwalk\n              (fn [b]\n                (if (and (map? b)\n                         (util\/collapsed? b)\n                         (not= root-block (:block\/uuid b)))\n                  (assoc b :block\/children []) b)))\n\n             true\n             (mapcat (fn [x] (tree-seq map? :block\/children x)))\n\n             expanded?\n             (filter (fn [b] (collapsable? (:block\/uuid b))))\n\n             true\n             (map (fn [x] (dissoc x :block\/children))))\n           (remove nil?)))\n\n        (cond->> blocks\n          collapse?\n          (filter util\/collapsed?)\n\n          expanded?\n          (filter (fn [b] (collapsable? (:block\/uuid b))))\n\n          true\n          (remove nil?))))))\n\n(defn- skip-collapsing-in-db?\n  []\n  (let [config (:config (state\/get-editor-args))]\n    (:ref? config)))\n\n(defn- set-blocks-collapsed!\n  [block-ids value]\n  (let [block-ids (map (fn [block-id] (if (string? block-id) (uuid block-id) block-id)) block-ids)\n        repo (state\/get-current-repo)\n        value (boolean value)]\n    (when repo\n      (ds\/auto-transact!\n       [txs-state (ds\/new-outliner-txs-state)]\n       {:outliner-op :collapse-expand-blocks\n        :skip-transact? false}\n       (doseq [block-id block-ids]\n         (when-let [block (db\/entity [:block\/uuid block-id])]\n           (let [current-value (:block\/collapsed? block)]\n             (when-not (= current-value value)\n               (let [block (outliner-core\/block {:block\/uuid block-id\n                                                 :block\/collapsed? value})]\n                 (outliner-core\/save-node block {:txs-state txs-state})))))))\n      (let [block-id (first block-ids)\n            input-pos (or (state\/get-edit-pos) :max)]\n        ;; update editing input content\n        (when-let [editing-block (state\/get-edit-block)]\n          (when (= (:block\/uuid editing-block) block-id)\n            (edit-block! editing-block\n                         input-pos\n                         (state\/get-edit-input-id))))))))\n\n(defn collapse-block! [block-id]\n  (when (collapsable? block-id)\n    (when-not (skip-collapsing-in-db?)\n      (set-blocks-collapsed! [block-id] true)))\n  (state\/set-collapsed-block! block-id true))\n\n(defn expand-block! [block-id]\n  (when-not (skip-collapsing-in-db?)\n    (set-blocks-collapsed! [block-id] false)\n    (state\/set-collapsed-block! block-id false)))\n\n(defn expand!\n  ([e] (expand! e false))\n  ([e clear-selection?]\n   (util\/stop e)\n   (cond\n     (state\/editing?)\n     (when-let [block-id (:block\/uuid (state\/get-edit-block))]\n       (expand-block! block-id))\n\n     (state\/selection?)\n     (do\n       (->> (get-selected-blocks-with-children)\n            (map (fn [dom]\n                   (-> (dom\/attr dom \"blockid\")\n                       medley\/uuid\n                       expand-block!)))\n            doall)\n       (and clear-selection? (clear-selection!)))\n     :else\n     ;; expand one level\n     (let [blocks-with-level (all-blocks-with-level {})\n           max-level (or (apply max (map :block\/level blocks-with-level)) 99)]\n       (loop [level 1]\n         (if (> level max-level)\n           nil\n           (let [blocks-to-expand (->> blocks-with-level\n                                       (filter (fn [b] (= (:block\/level b) level)))\n                                       (filter util\/collapsed?))]\n             (if (empty? blocks-to-expand)\n               (recur (inc level))\n               (doseq [{:block\/keys [uuid]} blocks-to-expand]\n                 (expand-block! uuid))))))))))\n\n(defn collapse!\n  ([e] (collapse! e false))\n  ([e clear-selection?]\n   (when e (util\/stop e))\n   (cond\n     (state\/editing?)\n     (when-let [block-id (:block\/uuid (state\/get-edit-block))]\n       (collapse-block! block-id))\n\n     (state\/selection?)\n     (do\n       (->> (get-selected-blocks-with-children)\n            (map (fn [dom]\n                   (-> (dom\/attr dom \"blockid\")\n                       medley\/uuid\n                       collapse-block!)))\n            doall)\n       (and clear-selection? (clear-selection!)))\n\n     :else\n     ;; collapse by one level from outside\n     (let [blocks-with-level\n           (all-blocks-with-level {:collapse? true})\n           max-level (or (apply max (map :block\/level blocks-with-level)) 99)]\n       (loop [level max-level]\n         (if (zero? level)\n           nil\n           (let [blocks-to-collapse\n                 (->> blocks-with-level\n                      (filter (fn [b] (= (:block\/level b) level)))\n                      (filter (fn [b] (collapsable? (:block\/uuid b)))))]\n             (if (empty? blocks-to-collapse)\n               (recur (dec level))\n               (doseq [{:block\/keys [uuid]} blocks-to-collapse]\n                 (collapse-block! uuid))))))))))\n\n(defn collapse-all!\n  ([]\n   (collapse-all! nil))\n  ([block-id]\n   (let [blocks (all-blocks-with-level {:incremental? false\n                                        :expanded? true\n                                        :root-block block-id})\n         block-ids (map :block\/uuid blocks)]\n     (set-blocks-collapsed! block-ids true))))\n\n(defn expand-all!\n  ([]\n   (expand-all! nil))\n  ([block-id]\n   (let [blocks (all-blocks-with-level {:incremental? false\n                                        :collapse? true\n                                        :root-block block-id})\n         block-ids (map :block\/uuid blocks)]\n     (set-blocks-collapsed! block-ids false))))\n\n(defn toggle-open! []\n  (let [all-expanded? (empty? (all-blocks-with-level {:incremental? false\n                                                      :collapse? true}))]\n    (if all-expanded?\n      (collapse-all!)\n      (expand-all!))))\n\n(defn select-all-blocks!\n  []\n  (if-let [current-input-id (state\/get-edit-input-id)]\n    (let [input (gdom\/getElement current-input-id)\n          blocks-container (util\/rec-get-blocks-container input)\n          blocks (dom\/by-class blocks-container \"ls-block\")]\n      (state\/exit-editing-and-set-selected-blocks! blocks))\n    (->> (all-blocks-with-level {:collapse? true})\n         (map (comp gdom\/getElementByClass str :block\/uuid))\n         state\/exit-editing-and-set-selected-blocks!)))\n\n(defn escape-editing\n  ([]\n   (escape-editing true))\n  ([select?]\n   (when (state\/editing?)\n     (if select?\n       (->> (:block\/uuid (state\/get-edit-block))\n            select-block!)\n       (state\/clear-edit!)))))\n\n(defn replace-block-reference-with-content-at-point\n  []\n  (when-let [{:keys [start end link]} (thingatpt\/block-ref-at-point)]\n    (when-let [block (db\/pull [:block\/uuid link])]\n      (let [block-content (:block\/content block)\n            format (or (:block\/format block) :markdown)\n            block-content-without-prop (-> (property\/remove-properties format block-content)\n                                           (drawer\/remove-logbook))]\n        (when-let [input (state\/get-input)]\n          (when-let [current-block-content (gobj\/get input \"value\")]\n            (let [block-content* (str (subs current-block-content 0 start)\n                                      block-content-without-prop\n                                      (subs current-block-content end))]\n              (state\/set-block-content-and-last-pos! input block-content* 1))))))))\n\n(defn copy-current-ref\n  [block-id]\n  (when block-id\n    (util\/copy-to-clipboard! (util\/format \"((%s))\" (str block-id)))))\n\n(defn delete-current-ref!\n  [block ref-id]\n  (when (and block ref-id)\n    (let [match (re-pattern (str \"\\\\s?\" (util\/format \"\\\\(\\\\(%s\\\\)\\\\)\" (str ref-id))))\n          content (string\/replace-first (:block\/content block) match \"\")]\n      (save-block! (state\/get-current-repo)\n                   (:block\/uuid block)\n                   content))))\n\n(defn replace-ref-with-text!\n  [block ref-id]\n  (when (and block ref-id)\n    (let [match (util\/format \"((%s))\" (str ref-id))\n          ref-block (db\/entity [:block\/uuid ref-id])\n          block-ref-content (->> (or (:block\/content ref-block)\n                                     \"\")\n                                 (property\/remove-built-in-properties (:block\/format ref-block))\n                                 (drawer\/remove-logbook))\n          content (string\/replace-first (:block\/content block) match\n                                        block-ref-content)]\n      (save-block! (state\/get-current-repo)\n                   (:block\/uuid block)\n                   content))))\n\n(defn replace-ref-with-embed!\n  [block ref-id]\n  (when (and block ref-id)\n    (let [match (util\/format \"((%s))\" (str ref-id))\n          content (string\/replace-first (:block\/content block) match\n                                        (util\/format \"{{embed ((%s))}}\"\n                                                     (str ref-id)))]\n      (save-block! (state\/get-current-repo)\n                   (:block\/uuid block)\n                   content))))\n\n(defn block-default-collapsed?\n  \"Whether a block should be collapsed by default.\n  Currently, this handles several cases:\n  1. References.\n  2. Custom queries.\"\n  [block config]\n  (if (or (:ref? config)\n          (:custom-query? config))\n    (and\n     (seq (:block\/children block))\n     (or\n      (:custom-query? config)\n      (>= (:ref\/level block)\n          (state\/get-ref-open-blocks-level))))\n    (util\/collapsed? block)))\n","(ns frontend.state\n  (:require [cljs-bean.core :as bean]\n            [cljs-time.core :as t]\n            [cljs-time.format :as tf]\n            [cljs.core.async :as async]\n            [clojure.string :as string]\n            [dommy.core :as dom]\n            [medley.core :as medley]\n            [electron.ipc :as ipc]\n            [frontend.storage :as storage]\n            [frontend.util :as util]\n            [frontend.util.cursor :as cursor]\n            [goog.dom :as gdom]\n            [goog.object :as gobj]\n            [lambdaisland.glogi :as log]\n            [promesa.core :as p]\n            [rum.core :as rum]\n            [frontend.mobile.util :as mobile-util]))\n\n(defonce ^:large-vars\/data-var state\n  (let [document-mode? (or (storage\/get :document\/mode?) false)\n       current-graph (let [graph (storage\/get :git\/current-repo)]\n                       (when graph (ipc\/ipc \"setCurrentGraph\" graph))\n                       graph)]\n   (atom\n    {:route-match                           nil\n     :today                                 nil\n     :system\/events                         (async\/chan 100)\n     :db\/batch-txs                          (async\/chan 100)\n     :file\/writes                           (async\/chan 100)\n     :reactive\/custom-queries               (async\/chan 100)\n     :notification\/show?                    false\n     :notification\/content                  nil\n     :repo\/cloning?                         false\n     ;; :repo\/loading-files? is only for github repos\n     :repo\/loading-files?                   {}\n     :repo\/parsing-files?                   nil\n     :repo\/changed-files                    nil\n     :nfs\/user-granted?                     {}\n     :nfs\/refreshing?                       nil\n     :instrument\/disabled?                  (storage\/get \"instrument-disabled\")\n     ;; TODO: how to detect the network reliably?\n     :network\/online?                       true\n     :indexeddb\/support?                    true\n     :me                                    nil\n     :git\/current-repo                      current-graph\n     :git\/status                            {}\n     :format\/loading                        {}\n     :draw?                                 false\n     :db\/restoring?                         nil\n\n     :journals-length                       3\n\n     :search\/q                              \"\"\n     :search\/mode                           :global\n     :search\/result                         nil\n     :search\/graph-filters                  []\n\n     ;; modals\n     :modal\/id                              nil\n     :modal\/label                           \"\"\n     :modal\/show?                           false\n     :modal\/panel-content                   nil\n     :modal\/fullscreen?                     false\n     :modal\/close-btn?                      nil\n     :modal\/subsets                         []\n\n     ;; right sidebar\n     :ui\/fullscreen?                        false\n     :ui\/settings-open?                     false\n     :ui\/sidebar-open?                      false\n     :ui\/left-sidebar-open?                 (boolean (storage\/get \"ls-left-sidebar-open?\"))\n     :ui\/theme                              (or (storage\/get :ui\/theme) (if (mobile-util\/is-native-platform?) \"light\" \"dark\"))\n     :ui\/system-theme?                      ((fnil identity (or util\/mac? util\/win32? false)) (storage\/get :ui\/system-theme?))\n     :ui\/wide-mode?                         (storage\/get :ui\/wide-mode)\n\n     ;; ui\/collapsed-blocks is to separate the collapse\/expand state from db for:\n     ;; 1. right sidebar\n     ;; 2. zoom-in view\n     ;; 3. queries\n     ;; 4. references\n     ;; graph => {:block-id bool}\n     :ui\/collapsed-blocks                   {}\n     :ui\/sidebar-collapsed-blocks           {}\n     :ui\/root-component                     nil\n     :ui\/file-component                     nil\n     :ui\/custom-query-components            {}\n     :ui\/show-recent?                       false\n     :ui\/command-palette-open?              false\n     :ui\/developer-mode?                    (or (= (storage\/get \"developer-mode\") \"true\")\n                                                false)\n     ;; remember scroll positions of visited paths\n     :ui\/paths-scroll-positions             {}\n     :ui\/shortcut-tooltip?                  (if (false? (storage\/get :ui\/shortcut-tooltip?))\n                                              false\n                                              true)\n     :ui\/visual-viewport-pending?           false\n     :ui\/visual-viewport-state              nil\n\n     :document\/mode?                        document-mode?\n\n     :github\/contents                       {}\n     :config                                {}\n     :block\/component-editing-mode?         false\n     :editor\/draw-mode?                     false\n     :editor\/show-page-search?              false\n     :editor\/show-page-search-hashtag?      false\n     :editor\/show-date-picker?              false\n     ;; With label or other data\n     :editor\/show-input                     nil\n     :editor\/show-zotero                    false\n     :editor\/last-saved-cursor              nil\n     :editor\/editing?                       nil\n     ;; This key is not currently used but may be useful later?\n     :editor\/last-edit-block-input-id       nil\n     :editor\/in-composition?                false\n     :editor\/content                        {}\n     :editor\/block                          nil\n     :editor\/block-dom-id                   nil\n     :editor\/set-timestamp-block            nil\n     :editor\/last-input-time                nil\n     :editor\/pos                            nil\n     :editor\/document-mode?                 document-mode?\n     :editor\/args                           nil\n     :editor\/on-paste?                      false\n     :editor\/last-key-code                  nil\n\n     :db\/last-transact-time                 {}\n     ;; whether database is persisted\n     :db\/persisted?                         {}\n     :cursor-range                          nil\n\n     :selection\/mode                        false\n     :selection\/blocks                      []\n     :selection\/start-block                 nil\n     ;; either :up or :down, defaults to down\n     ;; used to determine selection direction when two or more blocks are selected\n     :selection\/direction                   :down\n     :custom-context-menu\/show?             false\n     :custom-context-menu\/links             nil\n\n     ;; pages or blocks in the right sidebar\n     ;; It is a list of `[repo db-id block-type block-data]` 4-tuple\n     :sidebar\/blocks                        '()\n\n     :preferred-language                    (storage\/get :preferred-language)\n\n     ;; electron\n     :electron\/auto-updater-downloaded      false\n     :electron\/updater-pending?             false\n     :electron\/updater                      {}\n     :electron\/user-cfgs                    nil\n\n     ;; plugin\n     :plugin\/enabled                        (and (util\/electron?)\n                                                 ;; true false :theme-only\n                                                 ((fnil identity true) (storage\/get :lsp-core-enabled)))\n     :plugin\/indicator-text                 nil\n     :plugin\/installed-plugins              {}\n     :plugin\/installed-themes               []\n     :plugin\/installed-commands             {}\n     :plugin\/installed-ui-items             {}\n     :plugin\/simple-commands                {}\n     :plugin\/selected-theme                 nil\n     :plugin\/selected-unpacked-pkg          nil\n     :plugin\/marketplace-pkgs               nil\n     :plugin\/marketplace-stats              nil\n     :plugin\/installing                     nil\n     :plugin\/active-readme                  nil\n     :plugin\/updates-pending                {}\n     :plugin\/updates-coming                 {}\n     :plugin\/updates-downloading?           false\n     :plugin\/updates-unchecked              #{}\n     :plugin\/navs-settings?                 true\n     :plugin\/focused-settings               nil            ;; plugin id\n\n     ;; pdf\n     :pdf\/current                           nil\n     :pdf\/ref-highlight                     nil\n\n     ;; all notification contents as k-v pairs\n     :notification\/contents                 {}\n     :graph\/syncing?                        false\n\n     ;; copied blocks\n     :copy\/blocks                           {:copy\/content nil :copy\/block-tree nil}\n\n     :copy\/export-block-text-indent-style   (or (storage\/get :copy\/export-block-text-indent-style)\n                                                \"dashes\")\n     :copy\/export-block-text-remove-options (or (storage\/get :copy\/export-block-text-remove-options)\n                                                #{})\n     :date-picker\/date                      nil\n\n     :youtube\/players                       {}\n\n     ;; command palette\n     :command-palette\/commands              []\n\n     :view\/components                       {}\n\n     :debug\/write-acks                      {}\n\n     :encryption\/graph-parsing?             false\n\n     :favorites\/dragging                    nil\n\n     :srs\/mode?                             false\n\n     :srs\/cards-due-count                   nil\n\n     :reactive\/query-dbs                    {}})))\n\n;; block uuid -> {content(String) -> ast}\n(def blocks-ast-cache (atom {}))\n(defn add-block-ast-cache!\n  [block-uuid content ast]\n  (when (and block-uuid content ast)\n    (let [new-value (assoc-in @blocks-ast-cache [block-uuid content] ast)\n          new-value (if (> (count new-value) 10000)\n                      (into {} (take 5000 new-value))\n                      new-value)]\n      (reset! blocks-ast-cache new-value))))\n\n(defn get-block-ast\n  [block-uuid content]\n  (when (and block-uuid content)\n    (get-in @blocks-ast-cache [block-uuid content])))\n\n(defn sub\n  [ks]\n  (if (coll? ks)\n    (util\/react (rum\/cursor-in state ks))\n    (util\/react (rum\/cursor state ks))))\n\n(defn get-route-match\n  []\n  (:route-match @state))\n\n(defn get-current-route\n  []\n  (get-in (get-route-match) [:data :name]))\n\n(defn home?\n  []\n  (= :home (get-current-route)))\n\n(defn get-current-page\n  []\n  (when (= :page (get-current-route))\n    (get-in (get-route-match)\n            [:path-params :name])))\n\n(defn route-has-p?\n  []\n  (get-in (get-route-match) [:query-params :p]))\n\n(defn set-state!\n  [path value]\n  (if (vector? path)\n    (swap! state assoc-in path value)\n    (swap! state assoc path value)))\n\n(defn update-state!\n  [path f]\n  (if (vector? path)\n    (swap! state update-in path f)\n    (swap! state update path f)))\n\n(defn get-current-repo\n  []\n  (or (:git\/current-repo @state)\n      (when-not (mobile-util\/is-native-platform?)\n        \"local\")))\n\n(defn get-config\n  ([]\n   (get-config (get-current-repo)))\n  ([repo-url]\n   (get-in @state [:config repo-url])))\n\n(def default-arweave-gateway \"https:\/\/arweave.net\")\n\n(defn get-arweave-gateway\n  []\n  (:arweave\/gateway (get-config) default-arweave-gateway))\n\n(defonce built-in-macros\n         {\"img\" \"[:img.$4 {:src \\\"$1\\\" :style {:width $2 :height $3}}]\"})\n\n(defn get-macros\n  []\n  (merge\n    built-in-macros\n    (:macros (get-config))))\n\n(defn sub-config\n  []\n  (sub :config))\n\n(defn get-custom-css-link\n  []\n  (:custom-css-url (get-config)))\n\n(defn get-custom-js-link\n  []\n  (:custom-js-url (get-config)))\n\n(defn get-default-journal-template\n  []\n  (when-let [template (get-in (get-config) [:default-templates :journals])]\n    (when-not (string\/blank? template)\n      (string\/trim template))))\n\n(defn all-pages-public?\n  []\n  (let [value (:publishing\/all-pages-public? (get-config))\n        value (if (some? value) value (:all-pages-public? (get-config)))]\n    (true? value)))\n\n(defn enable-grammarly?\n  []\n  (true? (:feature\/enable-grammarly?\n           (get (sub-config) (get-current-repo)))))\n\n;; (defn store-block-id-in-file?\n;;   []\n;;   (true? (:block\/store-id-in-file? (get-config))))\n\n(defn scheduled-deadlines-disabled?\n  []\n  (true? (:feature\/disable-scheduled-and-deadline-query?\n           (get (sub-config) (get-current-repo)))))\n\n(defn enable-timetracking?\n  []\n  (not (false? (:feature\/enable-timetracking?\n                 (get (sub-config) (get-current-repo))))))\n\n(defn enable-journals?\n  [repo]\n  (not (false? (:feature\/enable-journals?\n                 (get (sub-config) repo)))))\n\n(defn export-heading-to-list?\n  []\n  (not (false? (:export\/heading-to-list?\n                 (get (sub-config) (get-current-repo))))))\n\n(defn enable-encryption?\n  [repo]\n  (:feature\/enable-encryption?\n    (get (sub-config) repo)))\n\n(defn enable-git-auto-push?\n  [repo]\n  (not (false? (:git-auto-push\n                 (get (sub-config) repo)))))\n\n(defn enable-block-timestamps?\n  []\n  (true? (:feature\/enable-block-timestamps?\n           (get (sub-config) (get-current-repo)))))\n\n(defn sub-graph-config\n  []\n  (get (sub-config) (get-current-repo)))\n\n(defn sub-graph-config-settings\n  []\n  (:graph\/settings (sub-graph-config)))\n\n;; Enable by default\n(defn show-brackets?\n  []\n  (not (false? (:ui\/show-brackets?\n                 (get (sub-config) (get-current-repo))))))\n\n(defn get-default-home\n  []\n  (:default-home (get-config)))\n\n(defn sub-default-home-page\n  []\n  (get-in (sub-config) [(get-current-repo) :default-home :page] \"\"))\n\n(defn custom-home-page?\n  []\n  (some? (:page (get-default-home))))\n\n(defn get-preferred-format\n  ([]\n   (get-preferred-format (get-current-repo)))\n  ([repo-url]\n   (keyword\n     (or\n       (when-let [fmt (:preferred-format (get-config repo-url))]\n         (string\/lower-case (name fmt)))\n\n       (get-in @state [:me :preferred_format] \"markdown\")))))\n\n;; TODO: consider adding a pane in Settings to set this through the GUI (rather\n;; than having to go through the config.edn file)\n(defn get-editor-command-trigger\n  ([] (get-editor-command-trigger (get-current-repo)))\n  ([repo-url]\n   (or\n     (:editor\/command-trigger (get-config repo-url))        ;; Get from user config\n     \"\/\")))                                                 ;; Set the default\n\n(defn markdown?\n  []\n  (= (keyword (get-preferred-format))\n     :markdown))\n\n(defn get-pages-directory\n  []\n  (or\n    (when-let [repo (get-current-repo)]\n      (:pages-directory (get-config repo)))\n    \"pages\"))\n\n(defn get-journals-directory\n  []\n  (or\n    (when-let [repo (get-current-repo)]\n      (:journals-directory (get-config repo)))\n    \"journals\"))\n\n(defn org-mode-file-link?\n  [repo]\n  (:org-mode\/insert-file-link? (get-config repo)))\n\n(defn get-journal-file-name-format\n  []\n  (when-let [repo (get-current-repo)]\n    (:journal\/file-name-format (get-config repo))))\n\n(defn get-preferred-workflow\n  []\n  (keyword\n    (or\n      (when-let [workflow (:preferred-workflow (get-config))]\n        (let [workflow (name workflow)]\n          (if (util\/safe-re-find #\"now|NOW\" workflow)\n            :now\n            :todo)))\n      (get-in @state [:me :preferred_workflow] :now))))\n\n(defn get-preferred-todo\n  []\n  (if (= (get-preferred-workflow) :now)\n    \"LATER\"\n    \"TODO\"))\n\n(defn page-name-order\n  \"Decide whether to use file name or :title as page name. If it returns \\\"file\\\", use the file\n  name unless it is missing.\"\n  []\n  (:page-name-order (get-config)))\n\n(defn get-repos\n  []\n  (get-in @state [:me :repos]))\n\n(defn set-repos!\n  [repos]\n  (set-state! [:me :repos] repos))\n\n(defn add-repo!\n  [repo]\n  (when (not (string\/blank? repo))\n    (update-state! [:me :repos]\n                   (fn [repos]\n                     (->> (conj repos repo)\n                          (distinct))))))\n\n(defn set-current-repo!\n  [repo]\n  (swap! state assoc :git\/current-repo repo)\n  (if repo\n    (storage\/set :git\/current-repo repo)\n    (storage\/remove :git\/current-repo))\n  (ipc\/ipc \"setCurrentGraph\" repo))\n\n(defn set-preferred-format!\n  [format]\n  (swap! state assoc-in [:me :preferred_format] (name format)))\n\n(defn set-preferred-workflow!\n  [workflow]\n  (swap! state assoc-in [:me :preferred_workflow] (name workflow)))\n\n(defn set-preferred-language!\n  [language]\n  (set-state! :preferred-language (name language))\n  (storage\/set :preferred-language (name language)))\n\n(defn delete-repo!\n  [repo]\n  (swap! state update-in [:me :repos]\n         (fn [repos]\n           (->> (remove #(= (:url repo)\n                            (:url %))\n                        repos)\n                (util\/distinct-by :url))))\n  (when (= (get-current-repo) (:url repo))\n    (set-current-repo! (:url (first (get-repos))))))\n\n(defn set-timestamp-block!\n  [value]\n  (set-state! :editor\/set-timestamp-block value))\n\n(defn get-timestamp-block\n  []\n  (:editor\/set-timestamp-block @state))\n\n(defn set-edit-content!\n  ([input-id value] (set-edit-content! input-id value true))\n  ([input-id value set-input-value?]\n   (when input-id\n     (when set-input-value?\n       (when-let [input (gdom\/getElement input-id)]\n         (util\/set-change-value input value)))\n     (update-state! :editor\/content (fn [m]\n                                      (assoc m input-id value)))\n     ;; followers\n     ;; (when-let [s (util\/extract-uuid input-id)]\n     ;;   (let [input (gdom\/getElement input-id)\n     ;;         leader-parent (util\/rec-get-block-node input)\n     ;;         followers (->> (array-seq (js\/document.getElementsByClassName s))\n     ;;                        (remove #(= leader-parent %)))]\n     ;;     (prn \"followers: \" (count followers))\n     ;;     ))\n     )))\n\n(defn get-edit-input-id\n  []\n  (ffirst (:editor\/editing? @state)))\n\n(defn get-input\n  []\n  (when-let [id (get-edit-input-id)]\n    (gdom\/getElement id)))\n\n(defn editing?\n  []\n  (let [input (get-input)]\n    (and input (= input (.-activeElement js\/document)))))\n\n(defn get-edit-content\n  []\n  (get (:editor\/content @state) (get-edit-input-id)))\n\n(defn sub-edit-content\n  []\n  (sub [:editor\/content (get-edit-input-id)]))\n\n(defn append-current-edit-content!\n  [append-text]\n  (when-not (string\/blank? append-text)\n    (when-let [input-id (get-edit-input-id)]\n      (when-let [input (gdom\/getElement input-id)]\n        (let [value (gobj\/get input \"value\")\n              new-value (str value append-text)\n              new-value (if (or (= (last value) \" \")\n                                (= (last value) \"\\n\"))\n                          new-value\n                          (str \"\\n\" new-value))]\n          (js\/document.execCommand \"insertText\" false append-text)\n          (update-state! :editor\/content (fn [m]\n                                           (assoc m input-id new-value))))))))\n\n(defn get-cursor-range\n  []\n  (:cursor-range @state))\n\n(defn set-cursor-range!\n  [range]\n  (set-state! :cursor-range range))\n\n(defn set-cloning!\n  [value]\n  (set-state! :repo\/cloning? value))\n\n(defn set-q!\n  [value]\n  (set-state! :search\/q value))\n\n(defn set-search-mode!\n  [value]\n  (set-state! :search\/mode value))\n\n(defn set-editor-show-page-search!\n  [value]\n  (set-state! :editor\/show-page-search? value))\n\n(defn get-editor-show-page-search?\n  []\n  (get @state :editor\/show-page-search?))\n\n(defn set-editor-show-page-search-hashtag!\n  [value]\n  (set-state! :editor\/show-page-search? value)\n  (set-state! :editor\/show-page-search-hashtag? value))\n(defn get-editor-show-page-search-hashtag?\n  []\n  (get @state :editor\/show-page-search-hashtag?))\n(defn set-editor-show-block-search!\n  [value]\n  (set-state! :editor\/show-block-search? value))\n(defn get-editor-show-block-search?\n  []\n  (get @state :editor\/show-block-search?))\n(defn set-editor-show-template-search!\n  [value]\n  (set-state! :editor\/show-template-search? value))\n(defn get-editor-show-template-search?\n  []\n  (get @state :editor\/show-template-search?))\n(defn set-editor-show-date-picker!\n  [value]\n  (set-state! :editor\/show-date-picker? value))\n(defn get-editor-show-date-picker?\n  []\n  (get @state :editor\/show-date-picker?))\n(defn set-editor-show-input!\n  [value]\n  (set-state! :editor\/show-input value))\n(defn get-editor-show-input\n  []\n  (get @state :editor\/show-input))\n\n\n(defn set-editor-show-zotero!\n  [value]\n  (set-state! :editor\/show-zotero value))\n\n(defn set-edit-input-id!\n  [input-id]\n  (swap! state update :editor\/editing?\n         (fn [_m]\n           (and input-id {input-id true}))))\n\n(defn get-edit-pos\n  []\n  (when-let [input (get-input)]\n    (util\/get-selection-start input)))\n\n(defn set-selection-start-block!\n  [start-block]\n  (swap! state assoc :selection\/start-block start-block))\n\n(defn get-selection-start-block\n  []\n  (get @state :selection\/start-block))\n\n(defn set-selection-blocks!\n  ([blocks]\n   (set-selection-blocks! blocks :down))\n  ([blocks direction]\n   (when (seq blocks)\n     (swap! state assoc\n            :selection\/mode true\n            :selection\/blocks blocks\n            :selection\/direction direction))))\n\n(defn into-selection-mode!\n  []\n  (swap! state assoc :selection\/mode true))\n\n(defn clear-selection!\n  []\n  (swap! state assoc\n         :selection\/mode false\n         :selection\/blocks nil\n         :selection\/direction :down))\n\n(defn get-selection-blocks\n  []\n  (util\/sort-by-height (:selection\/blocks @state)))\n\n(defn in-selection-mode?\n  []\n  (:selection\/mode @state))\n\n(defn selection?\n  \"True sense of selection mode with valid selected block\"\n  []\n  (and (in-selection-mode?) (seq (get-selection-blocks))))\n\n(defn conj-selection-block!\n  [block direction]\n  (dom\/add-class! block \"selected noselect\")\n  (swap! state assoc\n         :selection\/mode true\n         :selection\/blocks (conj (vec (:selection\/blocks @state)) block)\n         :selection\/direction direction))\n\n(defn drop-last-selection-block!\n  []\n  (let [last-block (peek (vec (:selection\/blocks @state)))]\n    (swap! state assoc\n           :selection\/mode true\n           :selection\/blocks (pop (vec (:selection\/blocks @state))))\n    last-block))\n\n(defn get-selection-direction\n  []\n  (:selection\/direction @state))\n\n(defn show-custom-context-menu!\n  [links]\n  (swap! state assoc\n         :custom-context-menu\/show? true\n         :custom-context-menu\/links links))\n\n(defn hide-custom-context-menu!\n  []\n  (swap! state assoc\n         :custom-context-menu\/show? false\n         :custom-context-menu\/links nil))\n\n(defn set-github-installation-tokens!\n  [tokens]\n  (when (seq tokens)\n    (let [tokens (medley\/index-by :installation_id tokens)\n          repos (get-repos)]\n      (when (seq repos)\n        (let [set-token-f\n              (fn [{:keys [installation_id] :as repo}]\n                (let [{:keys [token] :as m} (get tokens installation_id)]\n                  (if (string? token)\n                    ;; GitHub API returns a expires_at key which is a timestamp (expires after 60 minutes at present),\n                    ;; however, user's system time may be inaccurate. Here, based on the client system time, we use\n                    ;; 40-minutes interval to deal with some critical conditions, for e.g. http request time consume.\n                    (let [formatter (tf\/formatters :date-time-no-ms)\n                          expires-at (->> (t\/plus (t\/now) (t\/minutes 40))\n                                          (tf\/unparse formatter))]\n                      (merge repo {:token token :expires_at expires-at}))\n                    (do\n                      (when (and\n                              (:url repo)\n                              (string\/starts-with? (:url repo) \"https:\/\/\"))\n                        (log\/error :token\/cannot-set-token {:repo-m repo :token-m m}))\n                      repo))))\n              repos (mapv set-token-f repos)]\n          (swap! state assoc-in [:me :repos] repos))))))\n\n(defn get-github-token\n  [repo]\n  (when repo\n    (let [repos (get-repos)]\n      (some #(when (= repo (:url %)) %) repos))))\n\n(defn toggle-sidebar-open?!\n  []\n  (swap! state update :ui\/sidebar-open? not))\n\n(defn open-right-sidebar!\n  []\n  (swap! state assoc :ui\/sidebar-open? true))\n\n(defn hide-right-sidebar!\n  []\n  (swap! state assoc :ui\/sidebar-open? false))\n\n(defn sidebar-add-block!\n  [repo db-id block-type block-data]\n  (when (not (util\/sm-breakpoint?))\n    (when db-id\n      (update-state! :sidebar\/blocks (fn [blocks]\n                                       (->> (remove #(= (second %) db-id) blocks)\n                                            (cons [repo db-id block-type block-data])\n                                            (distinct))))\n      (open-right-sidebar!)\n      (when-let [elem (gdom\/getElementByClass \"cp__right-sidebar-scrollable\")]\n        (util\/scroll-to elem 0)))))\n\n(defn sidebar-remove-block!\n  [idx]\n  (update-state! :sidebar\/blocks (fn [blocks]\n                                   (if (string? idx)\n                                     (remove #(= (second %) idx) blocks)\n                                     (util\/drop-nth idx blocks))))\n  (when (empty? (:sidebar\/blocks @state))\n    (hide-right-sidebar!)))\n\n(defn sidebar-block-exists?\n  [idx]\n  (some #(= (second %) idx) (:sidebar\/blocks @state)))\n\n(defn clear-sidebar-blocks!\n  []\n  (set-state! :sidebar\/blocks '()))\n\n(defn sidebar-block-toggle-collapse!\n  [db-id]\n  (when db-id\n    (update-state! [:ui\/sidebar-collapsed-blocks db-id] not)))\n\n(defn get-edit-block\n  []\n  (get @state :editor\/block))\n\n(defn get-last-edit-block\n  []\n  (:editor\/last-edit-block @state))\n\n(defn get-current-edit-block-and-position\n  []\n  (let [edit-input-id (get-edit-input-id)\n        edit-block (get-edit-block)\n        block-element (when edit-input-id (gdom\/getElement (string\/replace edit-input-id \"edit-block\" \"ls-block\")))\n        container (when block-element\n                    (util\/get-block-container block-element))]\n    (when container\n      {:last-edit-block edit-block\n       :container       (gobj\/get container \"id\")\n       :pos             (cursor\/pos (gdom\/getElement edit-input-id))})))\n\n(defonce publishing? (atom nil))\n\n(defn publishing-enable-editing?\n  []\n  (and @publishing? (:publishing\/enable-editing? (get-config))))\n\n(defn set-editing!\n  ([edit-input-id content block cursor-range]\n   (set-editing! edit-input-id content block cursor-range true))\n  ([edit-input-id content block cursor-range move-cursor?]\n   (when (and edit-input-id block\n              (or\n                (publishing-enable-editing?)\n                (not @publishing?)))\n     (let [block-element (gdom\/getElement (string\/replace edit-input-id \"edit-block\" \"ls-block\"))\n           container (util\/get-block-container block-element)\n           block (if container\n                   (assoc block\n                     :block\/container (gobj\/get container \"id\"))\n                   block)\n           content (string\/trim (or content \"\"))]\n       (swap! state\n              (fn [state]\n                (-> state\n                    (assoc-in [:editor\/content edit-input-id] content)\n                    (assoc\n                      :editor\/block block\n                      :editor\/editing? {edit-input-id true}\n                      :editor\/last-edit-block-input-id edit-input-id\n                      :editor\/last-edit-block block\n                      :editor\/last-key-code nil\n                      :cursor-range cursor-range))))\n\n       (when-let [input (gdom\/getElement edit-input-id)]\n         (let [pos (count cursor-range)]\n           (when content\n             (util\/set-change-value input content)\n             ;; FIXME\n             ;; use set-change-value for now\n             ;; until somebody can figure out why set! value doesn't work here\n             ;; it seems to me textarea autoresize is completely broken\n             #_(set! (.-value input) (string\/trim content)))\n           (when move-cursor?\n             (cursor\/move-cursor-to input pos))\n\n           (when (or (util\/mobile?) (mobile-util\/is-native-platform?))\n             (util\/make-el-center-if-near-top input))))))))\n\n(defn clear-edit!\n  []\n  (swap! state merge {:editor\/editing? nil\n                      :editor\/block    nil\n                      :cursor-range    nil}))\n\n(defn into-code-editor-mode!\n  []\n  (swap! state merge {:editor\/editing?   nil\n                      :cursor-range      nil\n                      :editor\/code-mode? true}))\n\n(defn set-last-pos!\n  [new-pos]\n  (set-state! :editor\/last-saved-cursor new-pos))\n\n(defn set-block-content-and-last-pos!\n  [edit-input-id content new-pos]\n  (when edit-input-id\n    (set-edit-content! edit-input-id content)\n    (set-state! :editor\/last-saved-cursor new-pos)))\n\n(defn set-theme!\n  [theme]\n  (set-state! :ui\/theme theme)\n  (when (mobile-util\/native-ios?)\n    (if (= theme \"white\")\n      (util\/set-theme-light)\n      (util\/set-theme-dark)))\n  (storage\/set :ui\/theme theme))\n\n(defn sync-system-theme!\n  []\n  (let [system-dark? (.-matches (js\/window.matchMedia \"(prefers-color-scheme: dark)\"))]\n    (set-theme! (if system-dark? \"dark\" \"white\"))\n    (set-state! :ui\/system-theme? true)\n    (storage\/set :ui\/system-theme? true)))\n\n(defn use-theme-mode!\n  [theme-mode]\n  (if-not (= theme-mode \"system\")\n    (do\n      (set-theme! (if (= theme-mode \"light\") \"white\" theme-mode))\n      (set-state! :ui\/system-theme? false)\n      (storage\/set :ui\/system-theme? false))\n    (sync-system-theme!)))\n\n(defn set-editing-block-dom-id!\n  [block-dom-id]\n  (set-state! :editor\/block-dom-id block-dom-id))\n\n(defn get-editing-block-dom-id\n  []\n  (:editor\/block-dom-id @state))\n\n(defn toggle-theme!\n  []\n  (let [theme (:ui\/theme @state)\n        theme' (if (= theme \"dark\") \"white\" \"dark\")]\n    (use-theme-mode! theme')))\n\n(defn set-root-component!\n  [component]\n  (set-state! :ui\/root-component component))\n\n(defn get-root-component\n  []\n  (get @state :ui\/root-component))\n\n(defn load-app-user-cfgs\n  ([] (load-app-user-cfgs false))\n  ([refresh?]\n   (p\/let [cfgs (if (or refresh? (nil? (:electron\/user-cfgs @state)))\n                  (ipc\/ipc \"userAppCfgs\")\n                  (:electron\/user-cfgs @state))\n           cfgs (if (object? cfgs) (bean\/->clj cfgs) cfgs)]\n          (set-state! :electron\/user-cfgs cfgs))))\n\n(defn setup-electron-updater!\n  []\n  (when (util\/electron?)\n    (js\/window.apis.setUpdatesCallback\n      (fn [_ args]\n        (let [data (bean\/->clj args)\n              pending? (not= (:type data) \"completed\")]\n          (set-state! :electron\/updater-pending? pending?)\n          (when pending? (set-state! :electron\/updater data))\n          nil)))))\n\n(defn set-file-component!\n  [component]\n  (set-state! :ui\/file-component component))\n\n(defn clear-file-component!\n  []\n  (set-state! :ui\/file-component nil))\n\n(defn get-file-component\n  []\n  (get @state :ui\/file-component))\n\n(defn set-journals-length!\n  [value]\n  (when value\n    (set-state! :journals-length value)))\n\n(defn add-custom-query-component!\n  [query-string component]\n  (update-state! :ui\/custom-query-components\n                 (fn [m]\n                   (assoc m query-string component))))\n\n(defn remove-custom-query-component!\n  [query-string]\n  (update-state! :ui\/custom-query-components\n                 (fn [m]\n                   (dissoc m query-string))))\n\n(defn get-custom-query-components\n  []\n  (vals (get @state :ui\/custom-query-components)))\n\n(defn save-scroll-position!\n  ([value]\n   (save-scroll-position! value js\/window.location.hash))\n  ([value path]\n   (set-state! [:ui\/paths-scroll-positions path] value)))\n\n(defn get-saved-scroll-position\n  ([]\n   (get-saved-scroll-position js\/window.location.hash))\n  ([path]\n   (get-in @state [:ui\/paths-scroll-positions path] 0)))\n\n(defn set-today!\n  [value]\n  (set-state! :today value))\n\n(defn get-date-formatter\n  []\n  (or\n    (when-let [repo (get-current-repo)]\n      (or\n        (get-in @state [:config repo :journal\/page-title-format])\n        ;; for compatibility\n        (get-in @state [:config repo :date-formatter])))\n    ;; TODO:\n    (get-in @state [:me :settings :date-formatter])\n    \"MMM do, yyyy\"))\n\n(defn set-git-status!\n  [repo-url value]\n  (swap! state assoc-in [:git\/status repo-url] value))\n\n(defn shortcuts []\n  (get-in @state [:config (get-current-repo) :shortcuts]))\n\n(defn get-me\n  []\n  (:me @state))\n\n(defn github-authed?\n  []\n  (:github-authed? (get-me)))\n\n(defn get-name\n  []\n  (:name (get-me)))\n\n(defn logged?\n  \"Whether the user has logged in.\"\n  []\n  (some? (get-name)))\n\n(defn in-draw-mode?\n  []\n  (:draw? @state))\n\n(defn set-db-restoring!\n  [value]\n  (set-state! :db\/restoring? value))\n\n(defn get-default-branch\n  [repo-url]\n  (or\n    (some->> (get-repos)\n             (filter (fn [m]\n                       (= (:url m) repo-url)))\n             (first)\n             :branch)\n    \"master\"))\n\n(defn set-indexedb-support!\n  [value]\n  (set-state! :indexeddb\/support? value))\n\n(defn modal-opened?\n  []\n  (:modal\/show? @state))\n\n(declare set-modal!)\n(declare close-modal!)\n\n(defn get-sub-modals\n  []\n  (:modal\/subsets @state))\n\n(defn set-sub-modal!\n  ([panel-content]\n   (set-sub-modal! panel-content\n                   {:close-btn? true}))\n  ([panel-content {:keys [id label close-btn? show? center?] :as opts}]\n   (if (not (modal-opened?))\n     (set-modal! panel-content opts)\n     (let [modals (:modal\/subsets @state)\n           idx (and id (first (keep-indexed #(when (= (:modal\/id %2) id) %1)\n                                            modals)))\n           input (medley\/filter-vals\n                   #(not (nil? %1))\n                   {:modal\/id            id\n                    :modal\/label         (or label (if center? \"ls-modal-align-center\" \"\"))\n                    :modal\/show?         (if (boolean? show?) show? true)\n                    :modal\/panel-content panel-content\n                    :modal\/close-btn?    close-btn?})]\n       (swap! state update-in\n              [:modal\/subsets (or idx (count modals))]\n              merge input)\n       (:modal\/subsets @state)))))\n\n(defn close-sub-modal!\n  ([] (close-sub-modal! nil))\n  ([all?-a-id]\n   (if (true? all?-a-id)\n     (swap! state assoc :modal\/subsets [])\n     (let [id     all?-a-id\n           mid    (:modal\/id @state)\n           modals (:modal\/subsets @state)]\n       (if (and id (not (string\/blank? mid)) (= id mid))\n         (close-modal!)\n         (when-let [idx (if id (first (keep-indexed #(when (= (:modal\/id %2) id) %1) modals))\n                          (dec (count modals)))]\n           (swap! state assoc :modal\/subsets (into [] (medley\/remove-nth idx modals)))))))\n   (:modal\/subsets @state)))\n\n(defn set-modal!\n  ([modal-panel-content]\n   (set-modal! modal-panel-content\n               {:fullscreen? false\n                :close-btn?  true}))\n  ([modal-panel-content {:keys [id label fullscreen? close-btn? center?]}]\n   (when (seq (get-sub-modals))\n     (close-sub-modal! true))\n   (swap! state assoc\n          :modal\/id id\n          :modal\/label (or label (if center? \"ls-modal-align-center\" \"\"))\n          :modal\/show? (boolean modal-panel-content)\n          :modal\/panel-content modal-panel-content\n          :modal\/fullscreen? fullscreen?\n          :modal\/close-btn? close-btn?)))\n\n(defn close-modal!\n  []\n  (if (seq (get-sub-modals))\n    (close-sub-modal!)\n    (swap! state assoc\n           :modal\/id nil\n           :modal\/label \"\"\n           :modal\/show? false\n           :modal\/fullscreen? false\n           :modal\/panel-content nil\n           :ui\/open-select nil)))\n\n(defn get-db-batch-txs-chan\n  []\n  (:db\/batch-txs @state))\n\n(defn get-file-write-chan\n  []\n  (:file\/writes @state))\n\n(defn get-reactive-custom-queries-chan\n  []\n  (:reactive\/custom-queries @state))\n\n(defn get-write-chan-length\n  []\n  (let [c (get-file-write-chan)]\n    (count (gobj\/get c \"buf\"))))\n\n(defn get-left-sidebar-open?\n  []\n  (get-in @state [:ui\/left-sidebar-open?]))\n\n(defn set-left-sidebar-open!\n  [value]\n  (storage\/set \"ls-left-sidebar-open?\" (boolean value))\n  (set-state! :ui\/left-sidebar-open? value))\n\n(defn toggle-left-sidebar!\n  []\n  (set-left-sidebar-open!\n    (not (get-left-sidebar-open?))))\n\n(defn set-developer-mode!\n  [value]\n  (set-state! :ui\/developer-mode? value)\n  (storage\/set \"developer-mode\" (str value)))\n\n(defn developer-mode?\n  []\n  (:ui\/developer-mode? @state))\n\n(defn get-notification-contents\n  []\n  (get @state :notification\/contents))\n\n(defn document-mode?\n  []\n  (get @state :document\/mode?))\n\n(defn doc-mode-enter-for-new-line?\n  []\n  (and (document-mode?)\n       (not (:shortcut\/doc-mode-enter-for-new-block? (sub-graph-config)))))\n\n(defn toggle-document-mode!\n  []\n  (let [mode (document-mode?)]\n    (set-state! :document\/mode? (not mode))\n    (storage\/set :document\/mode? (not mode))))\n\n(defn shortcut-tooltip-enabled?\n  []\n  (get @state :ui\/shortcut-tooltip?))\n\n(defn toggle-shortcut-tooltip!\n  []\n  (let [mode (shortcut-tooltip-enabled?)]\n    (set-state! :ui\/shortcut-tooltip? (not mode))\n    (storage\/set :ui\/shortcut-tooltip? (not mode))))\n\n(defn enable-tooltip?\n  []\n  (if (or (util\/mobile?) (mobile-util\/is-native-platform?))\n    false\n    (get (get (sub-config) (get-current-repo))\n         :ui\/enable-tooltip?\n         true)))\n\n(defn show-command-doc?\n  []\n  (get (get (sub-config) (get-current-repo))\n       :ui\/show-command-doc?\n       true))\n\n(defn set-config!\n  [repo-url value]\n  (set-state! [:config repo-url] value))\n\n(defn get-git-auto-push?\n  ([]\n   (get-git-auto-push? (get-current-repo)))\n  ([repo]\n   (true? (:git-auto-push (get-config repo)))))\n\n(defn set-changed-files!\n  [repo changed-files]\n  (set-state! [:repo\/changed-files repo] changed-files))\n\n(defn get-wide-mode?\n  []\n  (:ui\/wide-mode? @state))\n\n(defn toggle-wide-mode!\n  []\n  (update-state! :ui\/wide-mode? not))\n\n(defn set-online!\n  [value]\n  (set-state! :network\/online? value))\n\n(defn get-commands\n  []\n  (:commands (get-config)))\n\n(defn get-plugins-commands\n  []\n  (mapcat seq (flatten (vals (:plugin\/installed-commands @state)))))\n\n(defn get-plugins-commands-with-type\n  [type]\n  (filterv #(= (keyword (first %)) (keyword type))\n           (apply concat (vals (:plugin\/simple-commands @state)))))\n\n(defn get-plugins-ui-items-with-type\n  [type]\n  (filterv #(= (keyword (first %)) (keyword type))\n           (apply concat (vals (:plugin\/installed-ui-items @state)))))\n\n(defn get-scheduled-future-days\n  []\n  (let [days (:scheduled\/future-days (get-config))]\n    (or (when (int? days) days) 0)))\n\n(defn set-graph-syncing?\n  [value]\n  (set-state! :graph\/syncing? value))\n\n(defn set-editor-in-composition!\n  [value]\n  (set-state! :editor\/in-composition? value))\n\n(defn editor-in-composition?\n  []\n  (:editor\/in-composition? @state))\n\n(defn set-loading-files!\n  [repo value]\n  (when repo\n    (set-state! [:repo\/loading-files? repo] value)))\n\n(defn loading-files?\n  [repo]\n  (get-in @state [:repo\/loading-files? repo]))\n\n(defn set-parsing-files!\n  [value]\n  (set-state! :repo\/parsing-files? value))\n\n(defn set-editor-last-input-time!\n  [repo time]\n  (swap! state assoc-in [:editor\/last-input-time repo] time))\n\n(defn set-last-transact-time!\n  [repo time]\n  (swap! state assoc-in [:db\/last-transact-time repo] time)\n\n  ;; THINK: new block, indent\/outdent, drag && drop, etc.\n  (set-editor-last-input-time! repo time))\n\n(defn set-db-persisted!\n  [repo value]\n  (swap! state assoc-in [:db\/persisted? repo] value))\n\n(defn db-idle?\n  [repo]\n  (when repo\n    (when-let [last-time (get-in @state [:db\/last-transact-time repo])]\n      (let [now (util\/time-ms)]\n        (>= (- now last-time) 3000)))))\n\n(defn input-idle?\n  [repo]\n  (when repo\n    (or\n      (when-let [last-time (get-in @state [:editor\/last-input-time repo])]\n        (let [now (util\/time-ms)]\n          (>= (- now last-time) 500)))\n      ;; not in editing mode\n      (not (get-edit-input-id)))))\n\n(defn set-nfs-refreshing!\n  [value]\n  (set-state! :nfs\/refreshing? value))\n\n(defn nfs-refreshing?\n  []\n  (:nfs\/refreshing? @state))\n\n(defn set-search-result!\n  [value]\n  (set-state! :search\/result value))\n\n(defn clear-search-result!\n  []\n  (set-search-result! nil))\n\n(defn add-graph-search-filter!\n  [q]\n  (when-not (string\/blank? q)\n    (update-state! :search\/graph-filters\n                   (fn [value]\n                     (vec (distinct (conj value q)))))))\n\n(defn remove-search-filter!\n  [q]\n  (when-not (string\/blank? q)\n    (update-state! :search\/graph-filters\n                   (fn [value]\n                     (remove #{q} value)))))\n\n(defn clear-search-filters!\n  []\n  (set-state! :search\/graph-filters []))\n\n(defn get-search-mode\n  []\n  (:search\/mode @state))\n\n(defn toggle!\n  [path]\n  (update-state! path not))\n\n(defn toggle-settings!\n  []\n  (toggle! :ui\/settings-open?))\n\n(defn settings-open?\n  []\n  (:ui\/settings-open? @state))\n\n(defn close-settings!\n  []\n  (set-state! :ui\/settings-open? false))\n\n(defn open-settings!\n  []\n  (set-state! :ui\/settings-open? true))\n\n;; TODO: Move those to the uni `state`\n\n(defonce editor-op (atom nil))\n(defn set-editor-op!\n  [value]\n  (reset! editor-op value))\n(defn get-editor-op\n  []\n  @editor-op)\n\n(defn get-start-of-week\n  []\n  (or\n    (when-let [repo (get-current-repo)]\n      (get-in @state [:config repo :start-of-week]))\n    (get-in @state [:me :settings :start-of-week])\n    6))\n\n(defn get-ref-open-blocks-level\n  []\n  (or\n    (when-let [value (:ref\/default-open-blocks-level (get-config))]\n      (when (integer? value)\n        value))\n    2))\n\n(defn get-linked-references-collapsed-threshold\n  []\n  (or\n    (when-let [value (:ref\/linked-references-collapsed-threshold (get-config))]\n      (when (integer? value)\n        value))\n    100))\n\n(defn get-events-chan\n  []\n  (:system\/events @state))\n\n(defn pub-event!\n  [payload]\n  (let [chan (get-events-chan)]\n    (async\/put! chan payload)))\n\n(defonce diffs (atom nil))\n\n(defn get-copied-blocks\n  []\n  (:copy\/blocks @state))\n\n(defn set-copied-blocks\n  [content ids]\n  (set-state! :copy\/blocks {:copy\/content content :copy\/block-tree ids}))\n\n(defn get-export-block-text-indent-style []\n  (:copy\/export-block-text-indent-style @state))\n\n(defn set-export-block-text-indent-style!\n  [v]\n  (set-state! :copy\/export-block-text-indent-style v)\n  (storage\/set :copy\/export-block-text-indent-style v))\n\n(defn get-export-block-text-remove-options []\n  (:copy\/export-block-text-remove-options @state))\n\n(defn update-export-block-text-remove-options!\n  [e k]\n  (let [f (if (util\/echecked? e) conj disj)]\n    (update-state! :copy\/export-block-text-remove-options\n                   #(f % k))\n    (storage\/set :copy\/export-block-text-remove-options\n                 (get-export-block-text-remove-options))))\n\n(defn set-editor-args!\n  [args]\n  (set-state! :editor\/args args))\n\n(defn block-component-editing?\n  []\n  (:block\/component-editing-mode? @state))\n\n(defn set-block-component-editing-mode!\n  [value]\n  (set-state! :block\/component-editing-mode? value))\n\n(defn logical-outdenting?\n  []\n  (:editor\/logical-outdenting?\n    (get (sub-config) (get-current-repo))))\n\n(defn get-editor-args\n  []\n  (:editor\/args @state))\n\n(defn get-export-bullet-indentation\n  []\n  (case (get (get-config) :export\/bullet-indentation :tab)\n    :eight-spaces\n    \"        \"\n    :four-spaces\n    \"    \"\n    :two-spaces\n    \"  \"\n    :tab\n    \"\\t\"))\n\n(defn set-page-blocks-cp!\n  [value]\n  (set-state! [:view\/components :page-blocks] value))\n\n(defn get-page-blocks-cp\n  []\n  (get-in @state [:view\/components :page-blocks]))\n\n(defn exit-editing-and-set-selected-blocks!\n  ([blocks]\n   (exit-editing-and-set-selected-blocks! blocks :down))\n  ([blocks direction]\n   (util\/select-unhighlight! (dom\/by-class \"selected\"))\n   (clear-selection!)\n   (clear-edit!)\n   (set-selection-blocks! blocks direction)\n   (util\/select-highlight! blocks)))\n\n(defn add-watch-state [key f]\n  (add-watch state key f))\n\n(defn remove-watch-state [key]\n  (remove-watch state key))\n\n(defn get-git-auto-commit-enabled?\n  []\n  (false? (sub [:electron\/user-cfgs :git\/disable-auto-commit?])))\n\n(defn set-last-key-code!\n  [key-code]\n  (set-state! :editor\/last-key-code key-code))\n\n(defn get-last-key-code\n  []\n  (:editor\/last-key-code @state))\n\n(defn set-visual-viewport-state\n  [input]\n  (set-state! :ui\/visual-viewport-state input))\n\n(defn get-visual-viewport-state\n  []\n  (:ui\/visual-viewport-state @state))\n\n(defn get-plugin-by-id\n  [id]\n  (when-let [id (and id (keyword id))]\n    (get-in @state [:plugin\/installed-plugins id])))\n\n(defn get-enabled?-installed-plugins\n  ([theme?] (get-enabled?-installed-plugins theme? true false))\n  ([theme? enabled? include-unpacked?]\n   (filterv\n     #(and (if include-unpacked? true (:iir %))\n           (if-not (boolean? enabled?) true (= (not enabled?) (boolean (get-in % [:settings :disabled]))))\n           (= (boolean theme?) (:theme %)))\n     (vals (:plugin\/installed-plugins @state)))))\n\n(defn lsp-enabled?-or-theme\n  []\n  (:plugin\/enabled @state))\n\n(defn consume-updates-coming-plugin\n  [payload updated?]\n  (when-let [id (keyword (:id payload))]\n    (let [pending? (boolean (seq (:plugin\/updates-pending @state)))]\n      (swap! state update :plugin\/updates-pending dissoc id)\n      (if updated?\n        (if-let [error (:error-code payload)]\n          (swap! state update-in [:plugin\/updates-coming id] assoc :error-code error)\n          (swap! state update :plugin\/updates-coming dissoc id))\n        (swap! state update :plugin\/updates-coming assoc id payload))\n      (pub-event! [:plugin\/consume-updates id pending? updated?]))))\n\n(defn coming-update-new-version?\n  [pkg]\n  (and pkg (:latest-version pkg)))\n\n(defn plugin-update-available?\n  [id]\n  (when-let [pkg (and id (get (:plugin\/updates-coming @state) (keyword id)))]\n    (coming-update-new-version? pkg)))\n\n(defn all-available-coming-updates\n  []\n  (when-let [updates (vals (:plugin\/updates-coming @state))]\n    (filterv #(coming-update-new-version? %) updates)))\n\n(defn get-next-selected-coming-update\n  []\n  (when-let [updates (all-available-coming-updates)]\n    (let [unchecked (:plugin\/updates-unchecked @state)]\n      (first (filter #(and (not (and (seq unchecked) (contains? unchecked (:id %))))\n                           (not (:error-code %))) updates)))))\n\n(defn set-unchecked-update\n  [id unchecked?]\n  (swap! state update :plugin\/updates-unchecked (if unchecked? conj disj) id))\n\n(defn reset-unchecked-update\n  []\n  (swap! state assoc :plugin\/updates-unchecked #{}))\n\n(defn reset-all-updates-state\n  []\n  (swap! state assoc\n         :plugin\/updates-pending                {}\n         :plugin\/updates-coming                 {}\n         :plugin\/updates-downloading?           false))\n\n(defn sub-right-sidebar-blocks\n  []\n  (when-let [current-repo (get-current-repo)]\n    (->> (sub :sidebar\/blocks)\n         (filter #(= (first %) current-repo)))))\n\n(defn toggle-collapsed-block!\n  [block-id]\n  (let [current-repo (get-current-repo)]\n    (update-state! [:ui\/collapsed-blocks current-repo block-id] not)))\n\n(defn set-collapsed-block!\n  [block-id value]\n  (let [current-repo (get-current-repo)]\n    (set-state! [:ui\/collapsed-blocks current-repo block-id] value)))\n\n(defn sub-collapsed\n  [block-id]\n  (sub [:ui\/collapsed-blocks (get-current-repo) block-id]))\n\n(defn get-reactive-query-db\n  [ks]\n  (get-in @state [:reactive\/query-dbs ks]))\n\n(defn delete-reactive-query-db!\n  [ks]\n  (update-state! :reactive\/query-dbs (fn [dbs] (dissoc dbs ks))))\n\n(defn set-reactive-query-db!\n  [ks db-value]\n  (if db-value\n    (set-state! [:reactive\/query-dbs ks] db-value)\n    (delete-reactive-query-db! ks)))\n\n(defn get-modal-id\n  []\n  (:modal\/id @state))\n"],"names":["frontend.handler.draw\/load-excalidraw-file","file","ok-handler","frontend.handler.draw.load_excalidraw_file","temp__5720__auto__","frontend.state\/get-current-repo","cljs.core.truth_","frontend.util.p_handle","frontend.handler.file\/load-file","content","error","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","cljs$core$IFn$_invoke$arity$variadic","cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2","frontend.extensions.excalidraw\/update-draw-content-width","state","el","frontend.extensions.excalidraw.update_draw_content_width","rum.core\/dom-node","querySelector","el_104277__$1","classList","contains","width","cljs.core\/reset!","cljs$core$IFn$_invoke$arity$1","cljs.core.Keyword","*view-mode?","*grid-mode?","beforeLoadModuleCode","id","module$node_modules$$excalidraw$excalidraw$dist$excalidraw_production_min","shadow.js.require","frontend.extensions.excalidraw\/excalidraw","frontend.extensions.excalidraw.serialize_as_json","frontend.extensions.excalidraw.draw_inner","frontend.extensions.excalidraw.draw_container","frontend.extensions.excalidraw","frontend.rum.adapt_class.cljs$core$IFn$_invoke$arity$2","get","react_class","js\/module$node_modules$$excalidraw$excalidraw$dist$excalidraw_production_min","rum.core\/lazy-build","rum.core\/build-defcs","frontend.extensions.excalidraw\/draw-inner","data","option","*draw-width","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs$core$IFn$_invoke$arity$2","*zen-mode?","wide-mode?","frontend.state.sub","*elements","map__104258","cljs.core\/--destructure-map","cljs.core.get","daiquiri.core\/create-element","onMouseDown","e","frontend.util\/stop","frontend.handler.ui.toggle_wide_mode_BANG_","frontend.handler.ui\/toggle-wide-mode!","frontend.util.format.cljs$core$IFn$_invoke$arity$variadic","frontend.util.format","wide_mode_QMARK_","cljs.core.swap_BANG_","cljs.core\/not","daiquiri.interpreter\/interpret","cljs.core\/-deref","G__104262","cljs.core.PersistentVector","cljs.core.PersistentVector.EMPTY_NODE","block-uuid","frontend.db.utils.pull.cljs$core$IFn$_invoke$arity$1","frontend.db\/pull","frontend.handler.editor.edit_block_BANG_","frontend.state.set_state_BANG_","value","frontend.state\/set-block-component-editing-mode!","onBlur","cljs.core\/deref","G__104268","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.PersistentArrayMap","elements","app-state","or__4253__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","app_state","elements->clj","cljs-bean.core\/->clj","cljs.core\/seq","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","elements__GT_clj","frontend.handler.draw\/save-excalidraw!","frontend.extensions.excalidraw\/serialize-as-json","frontend.extensions.excalidraw.excalidraw.cljs$core$IFn$_invoke$arity$1","rum.core.reactive","rum.core.local","rum.core.local.cljs$core$IFn$_invoke$arity$2","frontend.extensions.excalidraw\/draw-container","*data","*loading?","loading?","rum.core\/react","db-restoring?","attrs104272","frontend.ui.loading","cljs.core\/map?","daiquiri.interpreter\/attributes","daiquiri.normalize.merge_with_class","loading_QMARK_","vec__104273","cljs.core.nth","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","clojure.string\/blank?","js\/JSON.parse","text","e104251","js\/Error","js\/console.dir","frontend.handler.notification.show_BANG_","frontend.util\/format","cljs.core.reset_BANG_","_STAR_loading_QMARK_","cljs.core.assoc","frontend.extensions.excalidraw.draw","frontend.extensions.excalidraw\/draw","repo","granted?","frontend.state\/sub","frontend.config.local_db_QMARK_","frontend.util\/electron?","frontend.mobile.util\/is-native-platform?","mm","setLoaded"]}}]}